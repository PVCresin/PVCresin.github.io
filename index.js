/*! For license information please see index.js.LICENSE */
!function(i){var r={};function n(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return i[e].call(t.exports,t,t.exports,n),t.l=!0,t.exports}n.m=i,n.c=r,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}([function(e,t,i){!function(e){"use strict";function s(e,t){return(t||document).querySelector(e)}var c=[],d={},o="yield",u="__global_mixin",l="riot-",f=["ref","data-ref"],h="data-is",p="if",m="each",i="no-reorder",v="show",g="hide",r="key",y="__riot-events__",n="string",W="object",t="undefined",a="function",_="http://www.w3.org/1999/xlink",w="http://www.w3.org/2000/svg",b=/^xlink:(\w+)/,k=typeof window===t?undefined:window,x=/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/,M=/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/,S=/^on/,D=/([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g,O={viewbox:"viewBox",preserveaspectratio:"preserveAspectRatio"},j=/^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/,Y=(k&&k.document||{}).documentMode|0,T,P;function C(e){return e==="svg"?document.createElementNS(w,e):document.createElement(e)}function A(e,t,i){var r=b.exec(t);if(r&&r[1]){e.setAttributeNS(_,r[1],i)}else{e.setAttribute(t,i)}}var N={},L=false;if(k){T=function(){var e=C("style");var t=s("style[type=riot]");A(e,"type","text/css");if(t){if(t.id){e.id=t.id}t.parentNode.replaceChild(e,t)}else{document.head.appendChild(e)}return e}();P=T.styleSheet}var E={styleNode:T,add:function e(t,i){N[i]=t;L=true},inject:function e(){if(!k||!L){return}L=false;var t=Object.keys(N).map(function(e){return N[e]}).join("\n");if(P){P.cssText=t}else{T.innerHTML=t}},remove:function e(t){delete N[t];L=true}},R=function(){var l="[{(,;:?=|&!^~>%*/";var u=["case","default","do","else","in","instanceof","prefix","return","typeof","void","yield"];var c=u.reduce(function(e,t){return e+t.slice(-1)},"");var d=/^\/(?=[^*>/])[^[/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\/]*)*?\/[gimuy]*/;var f=/[$\w]/;function h(e,t){while(--t>=0&&/\s/.test(e[t])){}return t}function e(e,t){var i=/.*/g;var r=i.lastIndex=t++;var n=i.exec(e)[0].match(d);if(n){var a=r+n[0].length;r=h(e,r);var s=e[r];if(r<0||~l.indexOf(s)){return a}if(s==="."){if(e[r-1]==="."){t=a}}else if(s==="+"||s==="-"){if(e[--r]!==s||(r=h(e,r))<0||!f.test(e[r])){t=a}}else if(~c.indexOf(s)){var o=r+1;while(--r>=0&&f.test(e[r])){}if(~u.indexOf(e.slice(r+1,o))){t=a}}}return t}return e}(),H=function(e){var i="g",t=/\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,r=/"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|`[^`\\]*(?:\\[\S\s][^`\\]*)*`/g,n=r.source+"|"+/(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source+"|"+/\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?([^<]\/)[gim]*/.source,a=RegExp("[\\"+"x00-\\x1F<>a-zA-Z0-9'\",;\\\\]"),s=/(?=[[\]()*+?.^$|])/g,o=r.source+"|"+/(\/)(?![*\/])/.source,_={"(":RegExp("([()])|"+o,i),"[":RegExp("([[\\]])|"+o,i),"{":RegExp("([{}])|"+o,i)},l="{ }";var u=["{","}","{","}",/{[^}]*}/,/\\([{}])/g,/\\({)|{/g,RegExp("\\\\(})|([[({])|(})|"+o,i),l,/^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,/(^|[^\\]){=[\S\s]*?}/];var c=e,d,w=[],f;function h(e){return e}function p(e,t){if(!t){t=w}return new RegExp(e.source.replace(/{/g,t[2]).replace(/}/g,t[3]),e.global?i:"")}function m(e){if(e===l){return u}var t=e.split(" ");if(t.length!==2||a.test(e)){throw new Error('Unsupported brackets "'+e+'"')}t=t.concat(e.replace(s,"\\").split(" "));t[4]=p(t[1].length>1?/{[\S\s]*?}/:u[4],t);t[5]=p(e.length>3?/\\({|})/g:u[5],t);t[6]=p(u[6],t);t[7]=RegExp("\\\\("+t[3]+")|([[({])|("+t[3]+")|"+o,i);t[8]=e;return t}function v(e){return e instanceof RegExp?d(e):w[e]}v.split=function e(r,n,t){if(!t){t=w}var i=[],a,s,o,l,u=t[6];var c=[];var d="";var f,h;s=o=u.lastIndex=0;while(a=u.exec(r)){h=u.lastIndex;l=a.index;if(s){if(a[2]){var p=a[2];var m=_[p];var v=1;m.lastIndex=h;while(a=m.exec(r)){if(a[1]){if(a[1]===p){++v}else if(!--v){break}}else{m.lastIndex=y(a.index,m.lastIndex,a[2])}}u.lastIndex=v?r.length:m.lastIndex;continue}if(!a[3]){u.lastIndex=y(l,h,a[4]);continue}}if(!a[1]){g(r.slice(o,l));o=u.lastIndex;u=t[6+(s^=1)];u.lastIndex=o}}if(r&&o<r.length){g(r.slice(o))}i.qblocks=c;return i;function g(e){if(d){e=d+e;d=""}if(n||s){i.push(e&&e.replace(t[5],"$1"))}else{i.push(e)}}function y(e,t,i){if(i){t=R(r,e)}if(n&&t>e+2){f="‚Åó"+c.length+"~";c.push(r.slice(e,t));d+=r.slice(o,e)+f;o=t}return t}};v.hasExpr=function e(t){return w[4].test(t)};v.loopKeys=function e(t){var i=t.match(w[9]);return i?{key:i[1],pos:i[2],val:w[0]+i[3].trim()+w[1]}:{val:t.trim()}};v.array=function e(t){return t?m(t):w};function g(e){if((e||(e=l))!==w[8]){w=m(e);d=e===l?h:p;w[9]=d(u[9])}c=e}function y(e){var t;e=e||{};t=e.brackets;Object.defineProperty(e,"brackets",{set:g,get:function(){return c},enumerable:true});f=e;g(t)}Object.defineProperty(v,"settings",{set:y,get:function(){return f}});v.settings=typeof riot!=="undefined"&&riot.settings||{};v.set=g;v.skipRegex=R;v.R_STRINGS=r;v.R_MLCOMMS=t;v.S_QBLOCKS=n;v.S_QBLOCK2=o;return v}(),I=function(){var i={};function r(e,t){if(!e){return e}return(i[e]||(i[e]=a(e))).call(t,n.bind({data:t,tmpl:e}))}r.hasExpr=H.hasExpr;r.loopKeys=H.loopKeys;r.clearCache=function(){i={}};r.errorHandler=null;function n(e,t){e.riotData={tagName:t&&t.__&&t.__.tagName,_riot_id:t&&t._riot_id};if(r.errorHandler){r.errorHandler(e)}else if(typeof console!=="undefined"&&typeof console.error==="function"){console.error(e.message);console.log("<%s> %s",e.riotData.tagName||"Unknown tag",this.tmpl);console.log(this.data)}}function a(e){var t=s(e);if(t.slice(0,11)!=="try{return "){t="return "+t}return new Function("E",t+";")}var o=/\u2057/g;var l=/\u2057(\d+)~/g;function s(e){var t=H.split(e.replace(o,'"'),1);var i=t.qblocks;var r;if(t.length>2||t[0]){var n,a,s=[];for(n=a=0;n<t.length;++n){r=t[n];if(r&&(r=n&1?u(r,1,i):'"'+r.replace(/\\/g,"\\\\").replace(/\r\n?|\n/g,"\\n").replace(/"/g,'\\"')+'"')){s[a++]=r}}r=a<2?s[0]:"["+s.join(",")+'].join("")'}else{r=u(t[1],0,i)}if(i.length){r=r.replace(l,function(e,t){return i[t].replace(/\r/g,"\\r").replace(/\n/g,"\\n")})}return r}var c=/^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/;var d={"(":/[()]/g,"[":/[[\]]/g,"{":/[{}]/g};function u(a,e,t){a=a.replace(/\s+/g," ").trim().replace(/\ ?([[\({},?\.:])\ ?/g,"$1");if(a){var i=[],r=0,n;while(a&&(n=a.match(c))&&!n.index){var s,o,l=/,|([[{(])|$/g;a=RegExp.rightContext;s=n[2]?t[n[2]].slice(1,-1).trim().replace(/\s+/g," "):n[1];while(o=(n=l.exec(a))[1]){u(o,l)}o=a.slice(0,n.index);a=RegExp.rightContext;i[r++]=m(o,1,s)}a=!r?m(a,e):r>1?"["+i.join(",")+'].join(" ").trim()':i[0]}return a;function u(e,t){var i,r=1,n=d[e];n.lastIndex=t.lastIndex;while(i=n.exec(a)){if(i[0]===e){++r}else if(!--r){break}}t.lastIndex=r?a.length:n.lastIndex}}var f='"in this?this:'+(typeof window!=="object"?"global":"window")+").",h=/[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,p=/^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;function m(e,t,i){var a;e=e.replace(h,function(e,t,i,r,n){if(i){r=a?0:r+e.length;if(i!=="this"&&i!=="global"&&i!=="window"){e=t+'("'+i+f+i;if(r){a=(n=n[r])==="."||n==="("||n==="["}}else if(r){a=!p.test(n.slice(r))}}return e});if(a){e="try{return "+e+"}catch(e){E(e,this)}"}if(i){e=(a?"function(){"+e+"}.call(this)":"("+e+")")+'?"'+i+'":""'}else if(t){e="function(v){"+(a?e.replace("return ","v="):"v=("+e+")")+';return v||v===0?v:""}.call(this)'}return e}r.version=H.version="v3.0.8";return r}(),F=function(o){o=o||{};var l={},u=Array.prototype.slice;Object.defineProperties(o,{on:{value:function(e,t){if(typeof t=="function"){(l[e]=l[e]||[]).push(t)}return o},enumerable:false,writable:false,configurable:false},off:{value:function(e,t){if(e=="*"&&!t){l={}}else{if(t){var i=l[e];for(var r=0,n;n=i&&i[r];++r){if(n==t){i.splice(r--,1)}}}else{delete l[e]}}return o},enumerable:false,writable:false,configurable:false},one:{value:function(e,t){function i(){o.off(e,i);t.apply(o,arguments)}return o.on(e,i)},enumerable:false,writable:false,configurable:false},trigger:{value:function(e){var t=arguments;var i=arguments.length-1,r=new Array(i),n,a,s;for(s=0;s<i;s++){r[s]=t[s+1]}n=u.call(l[e]||[],0);for(s=0;a=n[s];++s){a.apply(o,r)}if(l["*"]&&e!="*"){o.trigger.apply(o,["*",e].concat(r))}return o},enumerable:false,writable:false,configurable:false}});return o};function U(e,t){return Object.getOwnPropertyDescriptor(e,t)}function V(e){return typeof e===t}function G(e,t){var i=U(e,t);return V(e[t])||i&&i.writable}function z(e){var t;var i=1;var r=arguments;var n=r.length;for(;i<n;i++){if(t=r[i]){for(var a in t){if(G(e,a)){e[a]=t[a]}}}}return e}function $(e){return Object.create(e)}var B=z($(H.settings),{skipAnonymousTags:true,keepValueAttributes:false,autoUpdate:true});function Z(e,t){return[].slice.call((t||document).querySelectorAll(e))}function q(){return document.createTextNode("")}function J(e,t){e.style.display=t?"":"none";e.hidden=t?false:true}function K(e,t){return e.getAttribute(t)}function Q(e,t){e.removeAttribute(t)}function X(e,t,i){if(i){var r=e.ownerDocument.importNode((new DOMParser).parseFromString('<svg xmlns="'+w+'">'+t+"</svg>","application/xml").documentElement,true);e.appendChild(r)}else{e.innerHTML=t}}function ee(e,t){if(!e){return}var i;while(i=D.exec(e)){t(i[1].toLowerCase(),i[2]||i[3]||i[4])}}function te(){return document.createDocumentFragment()}function ie(e,t,i){e.insertBefore(t,i.parentNode&&i)}function re(i){return Object.keys(i).reduce(function(e,t){return e+" "+t+": "+i[t]+";"},"")}function ne(e,t,i){if(e){var r=t(e,i);var n;if(r===false){return}e=e.firstChild;while(e){n=e.nextSibling;ne(e,t,r);e=n}}}var ae=Object.freeze({$$:Z,$:s,createDOMPlaceholder:q,mkEl:C,setAttr:A,toggleVisibility:J,getAttr:K,remAttr:Q,setInnerHTML:X,walkAttrs:ee,createFrag:te,safeInsert:ie,styleObjectToString:re,walkNodes:ne});function se(e){return V(e)||e===null}function oe(e){return se(e)||e===""}function le(e){return typeof e===a}function ue(e){return e&&typeof e===W}function ce(e){var t=e.ownerSVGElement;return!!t||t===null}function de(e){return Array.isArray(e)||e instanceof Array}function fe(e){return j.test(e)}function he(e){return typeof e===n}var pe=Object.freeze({isBlank:oe,isFunction:le,isObject:ue,isSvg:ce,isWritable:G,isArray:de,isBoolAttr:fe,isNil:se,isString:he,isUndefined:V});function me(e,t){return e.indexOf(t)!==-1}function ve(e,t){var i=e?e.length:0;var r=0;for(;r<i;r++){t(e[r],r)}return e}function ge(e,t){return e.slice(0,t.length)===t}var ye=function e(){var t=-1;return function(){return++t}}();function _e(e,t,i,r){Object.defineProperty(e,t,z({value:i,enumerable:false,writable:false,configurable:true},r));return e}function we(e){return e.replace(/-(\w)/g,function(e,t){return t.toUpperCase()})}function be(e){if(console&&console.warn){console.warn(e)}}var ke=Object.freeze({contains:me,each:ve,getPropDescriptor:U,startsWith:ge,uid:ye,defineProperty:_e,objectCreate:$,extend:z,toCamel:we,warn:be});function xe(e,t,i,r,n){var a=e[t];var s=de(a);var o=!V(n);if(a&&a===i){return}if(!a&&r){e[t]=[i]}else if(!a){e[t]=i}else{if(s){var l=a.indexOf(i);if(l===n){return}if(l!==-1){a.splice(l,1)}if(o){a.splice(n,0,i)}else{a.push(i)}}else{e[t]=[a,i]}}}function Me(e){return e.tagName&&d[K(e,h)||K(e,h)||e.tagName.toLowerCase()]}function Se(e,t){var i=Me(e);var r=!t&&K(e,h);return r&&!I.hasExpr(r)?r:i?i.name:e.tagName.toLowerCase()}function De(){if(this.parent){return z($(this),this.parent)}return this}var Oe=/<yield\b/i,je=/<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi,Ye=/<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi,Te=/<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi,Pe={tr:"tbody",th:"tr",td:"tr",col:"colgroup"},Ce=Y&&Y<10?x:M,Ae="div",Ne="svg";function We(e,t,i){var r=i[0]==="o",n=r?"select>":"table>";e.innerHTML="<"+n+t.trim()+"</"+n;n=e.firstChild;if(r){n.selectedIndex=-1}else{var a=Pe[i];if(a&&n.childElementCount===1){n=s(a,n)}}return n}function Le(e,i){if(!Oe.test(e)){return e}var r={};i=i&&i.replace(Ye,function(e,t,i){r[t]=r[t]||i;return""}).trim();return e.replace(Te,function(e,t,i){return r[t]||i||""}).replace(je,function(e,t){return i||t||""})}function Ee(e,t,i){var r=e&&e.match(/^\s*<([-\w]+)/);var n=r&&r[1].toLowerCase();var a=C(i?Ne:Ae);e=Le(e,t);if(Ce.test(n)){a=We(a,e,n)}else{X(a,e,i)}return a}var Re=/^on/;function He(e){return Re.test(e)}function Ie(e){var t=e;while(t.__.isAnonymous){if(!t.parent){break}t=t.parent}return t}function Fe(e,t,i){var r=this.__.parent;var n=this.__.item;if(!n){while(r&&!n){n=r.__.item;r=r.__.parent}}if(G(i,"currentTarget")){i.currentTarget=e}if(G(i,"target")){i.target=i.srcElement}if(G(i,"which")){i.which=i.charCode||i.keyCode}i.item=n;t.call(this,i);if(!B.autoUpdate){return}if(!i.preventUpdate){var a=Ie(this);if(a.isMounted){a.update()}}}function Ue(e,t,i,r){var n;var a=Fe.bind(r,i,t);i[e]=null;n=e.replace(S,"");if(!me(r.__.listeners,i)){r.__.listeners.push(i)}if(!i[y]){i[y]={}}if(i[y][e]){i.removeEventListener(n,i[y][e])}i[y][e]=a;i.addEventListener(n,a,false)}function Ve(e,t,i,r){var n=Nt(e,t,i);var a=t.tagName||Se(t.root,true);var s=Ie(r);_e(n,"parent",s);n.__.parent=r;xe(s.tags,a,n);if(s!==r){xe(r.tags,a,n)}return n}function Ge(e,t,i,r){if(de(e[t])){var n=e[t].indexOf(i);if(n!==-1){e[t].splice(n,1)}if(!e[t].length){delete e[t]}else if(e[t].length===1&&!r){e[t]=e[t][0]}}else if(e[t]===i){delete e[t]}}function ze(e,t){var i=this;var r=q();var n=q();var a=te();var s;var o;this.root.insertBefore(r,this.root.firstChild);this.root.appendChild(n);this.__.head=o=r;this.__.tail=n;while(o){s=o.nextSibling;a.appendChild(o);i.__.virts.push(o);o=s}if(t){e.insertBefore(a,t.__.head)}else{e.appendChild(a)}}function $e(e,t){if(!t.parentNode){return}var i=te();ze.call(e,i);t.parentNode.replaceChild(i,t)}function Be(e,t,i){var r=e.tag||e.dom._tag;var n;var a=r?r.__:{};var s=a.head;var o=e.dom.tagName==="VIRTUAL";if(r&&e.tagName===i){r.update();return}if(r){if(o){n=q();s.parentNode.insertBefore(n,s)}r.unmount(true)}if(!he(i)){return}e.impl=d[i];if(!e.impl){return}e.tag=r=Ve(e.impl,{root:e.dom,parent:t,tagName:i},e.dom.innerHTML,t);ve(e.attrs,function(e){return A(r.root,e.name,e.value)});e.tagName=i;r.mount();if(o){$e(r,n||r.root)}t.__.onUnmount=function(){var e=r.opts.dataIs;Ge(r.parent.tags,e,r);Ge(r.__.parent.tags,e,r);r.unmount()}}function Ze(e){if(!e){return null}e=e.replace(l,"");if(O[e]){e=O[e]}return e}function qe(e){if(this.root&&K(this.root,"virtualized")){return}var t=e.dom;var i=Ze(e.attr);var r=me([v,g],i);var n=e.root&&e.root.tagName==="VIRTUAL";var a=this.__;var s=a.isAnonymous;var o=t&&(e.parent||t.parentNode);var l=B.keepValueAttributes;var u=i==="style";var c=i==="class";var d=i==="value";var f;if(e._riot_id){if(e.__.wasCreated){e.update()}else{e.mount();if(n){$e(e,e.root)}}return}if(e.update){return e.update()}var h=r&&!s?De.call(this):this;f=I(e.expr,h);var p=!oe(f);var m=ue(f);if(m){if(c){f=I(JSON.stringify(f),this)}else if(u){f=re(f)}}if(e.attr&&(!e.wasParsedOnce||f===false||!p&&(!d||d&&!l))){Q(t,K(t,e.attr)?e.attr:i)}if(e.bool){f=f?i:false}if(e.isRtag){return Be(e,this,f)}if(e.wasParsedOnce&&e.value===f){return}e.value=f;e.wasParsedOnce=true;if(m&&!c&&!u&&!r){return}if(!p){f=""}if(!i){f+="";if(o){e.parent=o;if(o.tagName==="TEXTAREA"){o.value=f;if(!Y){t.nodeValue=f}}else{t.nodeValue=f}}return}switch(true){case le(f):if(He(i)){Ue(i,f,t,this)}break;case r:J(t,i===g?!f:f);break;default:if(e.bool){t[i]=f}if(d&&t.value!==f){t.value=f}else if(p&&f!==false){A(t,i,f)}if(u&&t.hidden){J(t,false)}}}function Je(e){ve(e,qe.bind(this))}function Ke(e,t,i,r,n){if(e&&i){return}var a=e?De.call(this):t||this;ve(n,function(e){if(e.expr){qe.call(a,e.expr)}r[we(e.name).replace(l,"")]=e.expr?e.expr.value:e.value})}function Qe(e,t,i){var r=e.__;var n={};var a=e.isMounted&&!r.skipAnonymous;if(r.isAnonymous&&r.parent){z(e,r.parent)}z(e,t);Ke.apply(e,[r.isLoop,r.parent,r.isAnonymous,n,r.instAttrs]);if(a&&e.isMounted&&le(e.shouldUpdate)&&!e.shouldUpdate(t,n)){return e}z(e.opts,n);if(a){e.trigger("update",t)}Je.call(e,i);if(a){e.trigger("updated")}return e}function Xe(e){if(!e){var t=Object.keys(d);return t+Xe(t)}return e.filter(function(e){return!/[^-\w]/.test(e)}).reduce(function(e,t){var i=t.trim().toLowerCase();return e+",["+h+'="'+i+'"]'},"")}function et(e,t){var i=this;var r=i.name;var n=i.tmpl;var a=i.css;var s=i.attrs;var o=i.onCreate;if(!d[r]){tt(r,n,a,s,o);d[r].class=this.constructor}Wt(e,r,t,this);if(a){E.inject()}return this}function tt(e,t,i,r,n){if(le(r)){n=r;if(/^[\w-]+\s?=/.test(i)){r=i;i=""}else{r=""}}if(i){if(le(i)){n=i}else{E.add(i,e)}}e=e.toLowerCase();d[e]={name:e,tmpl:t,attrs:r,fn:n};return e}function it(e,t,i,r,n){if(i){E.add(i,e)}d[e]={name:e,tmpl:t,attrs:r,fn:n};return e}function rt(e,r,n){var a=[];var t,i;function s(e){if(e.tagName){var t=K(e,h),i;if(r&&t!==r){t=r;A(e,h,r)}i=Wt(e,t||e.tagName.toLowerCase(),le(n)?n():n);if(i){a.push(i)}}else if(e.length){ve(e,s)}}E.inject();if(ue(r)||le(r)){n=r;r=0}if(he(e)){e=e==="*"?i=Xe():e+Xe(e.split(/, */));t=e?Z(e):[]}else{t=e}if(r==="*"){r=i||Xe();if(t.tagName){t=Z(r,t)}else{var o=[];ve(t,function(e){return o.push(Z(r,e))});t=o}r=0}s(t);return a}var nt={},at=nt[u]={},st=0;function ot(e,t,i){if(ue(e)){ot("__"+st+++"__",e,true);return}var r=i?at:nt;if(!t){if(V(r[e])){throw new Error("Unregistered mixin: "+e)}return r[e]}r[e]=le(t)?z(t.prototype,r[e]||{})&&t:z(r[e]||{},t)}function lt(){return ve(c,function(e){return e.update()})}function ut(e){E.remove(e);return delete d[e]}var ct="v3.13.2",dt=Object.freeze({Tag:et,tag:tt,tag2:it,mount:rt,mixin:ot,update:lt,unregister:ut,version:ct});function ft(s){var e=[],t=arguments.length-1;while(t-- >0)e[t]=arguments[t+1];ve(e,function(e){var r;var t;var i=[];var n=["init","__proto__"];e=he(e)?ot(e):e;if(le(e)){r=new e}else{r=e}var a=Object.getPrototypeOf(r);do{i=i.concat(Object.getOwnPropertyNames(t||r))}while(t=Object.getPrototypeOf(t||r));ve(i,function(e){if(!me(n,e)){var t=U(r,e)||U(a,e);var i=t&&(t.get||t.set);if(!s.hasOwnProperty(e)&&i){Object.defineProperty(s,e,t)}else{s[e]=le(r[e])?r[e].bind(s):r[e]}}});if(r.init){r.init.bind(s)(s.opts)}});return s}function ht(e,t){var i=this.parent;var r;if(!i){return}r=i.tags[e];if(de(r)){r.splice(t,0,r.splice(r.indexOf(this),1)[0])}else{xe(i.tags,e,this)}}function pt(e,t){var i=this;var r=this.__.head;var n;var a=te();while(r){n=r.nextSibling;a.appendChild(r);r=n;if(r===i.__.tail){a.appendChild(r);e.insertBefore(a,t.__.head);break}}}function mt(e,t,i){var r={};r[e.key]=t;if(e.pos){r[e.pos]=i}return r}function vt(e,t,i){var r=t.length;var n=e.length-i;while(r>n){r--;gt.apply(t[r],[t,r])}}function gt(e,t){e.splice(t,1);this.unmount();Ge(this.parent,this,this.__.tagName,true)}function yt(t){var i=this;ve(Object.keys(this.tags),function(e){ht.apply(i.tags[e],[e,t])})}function _t(e,t,i){if(i){pt.apply(this,[e,t])}else{ie(e,this.root,t.root)}}function wt(e,t,i){if(i){ze.apply(this,[e,t])}else{ie(e,this.root,t.root)}}function bt(e,t){if(t){ze.call(this,e)}else{e.appendChild(this.root)}}function kt(e,t,i,r){if(e){return r?I(e,i):t[e]}return t}function xt(_,w,b){var k=typeof K(_,i)!==n||Q(_,i);var x=K(_,r);var M=x?I.hasExpr(x):false;var S=Se(_);var D=d[S];var e=_.parentNode;var t=q();var O=Me(_);var j=K(_,p);var Y=[];var T=true;var P=_.innerHTML;var C=!d[S];var A=_.tagName==="VIRTUAL";var N=[];Q(_,m);Q(_,r);b=I.loopKeys(b);b.isLoop=true;if(j){Q(_,p)}e.insertBefore(t,_);e.removeChild(_);b.update=function e(){b.value=I(b.val,w);var f=b.value;var h=te();var p=!de(f)&&!he(f);var m=t.parentNode;var v=[];var g=p&&!!f;if(!m){return}if(p){f=f?Object.keys(f).map(function(e){return mt(b,f[e],e)}):[]}var y=0;ve(f,function(e,t){var i=t-y;var r=!g&&b.key?mt(b,e,t):e;if(j&&!I(j,z($(w),r))){y++;return}var n=kt(x,e,r,M);var a=!p&&k&&typeof e===W||x;var s=N.indexOf(n);var o=s===-1;var l=!o&&a?s:i;var u=Y[l];var c=i>=N.length;var d=a&&o||!a&&!u||!Y[i];if(d){u=Nt(D,{parent:w,isLoop:T,isAnonymous:C,tagName:S,root:_.cloneNode(C),item:r,index:i},P);u.mount();if(c){bt.apply(u,[h||m,A])}else{wt.apply(u,[m,Y[i],A])}if(!c){N.splice(i,0,r)}Y.splice(i,0,u);if(O){xe(w.tags,S,u,true)}}else if(l!==i&&a){if(x||me(f,N[l])){_t.apply(u,[m,Y[i],A]);Y.splice(i,0,Y.splice(l,1)[0]);N.splice(i,0,N.splice(l,1)[0])}if(b.pos){u[b.pos]=i}if(!O&&u.tags){yt.call(u,i)}}z(u.__,{item:r,index:i,parent:w});v[i]=n;if(!d){u.update(r)}});vt(f,Y,y);N=v.slice();m.insertBefore(h,t)};b.unmount=function(){ve(Y,function(e){e.unmount()})};return b}var Mt={init:function e(t,i,r,n){this.dom=t;this.attr=r;this.rawValue=n;this.parent=i;this.hasExp=I.hasExpr(n);return this},update:function e(){var t=this.value;var i=this.parent&&Ie(this.parent);var r=this.dom.__ref||this.tag||this.dom;this.value=this.hasExp?I(this.rawValue,this.parent):this.rawValue;if(!oe(t)&&i){Ge(i.refs,t,r)}if(!oe(this.value)&&he(this.value)){if(i){xe(i.refs,this.value,r,null,this.parent.__.index)}if(this.value!==t){A(this.dom,this.attr,this.value)}}else{Q(this.dom,this.attr)}if(!this.dom.__ref){this.dom.__ref=r}},unmount:function e(){var t=this.tag||this.dom;var i=this.parent&&Ie(this.parent);if(!oe(this.value)&&i){Ge(i.refs,this.value,t)}}};function St(e,t,i,r){return $(Mt).init(e,t,i,r)}function Dt(e){ve(e,function(e){if(e.unmount){e.unmount(true)}else if(e.tagName){e.tag.unmount(true)}else if(e.unmount){e.unmount()}})}var Ot={init:function e(t,i,r){Q(t,p);z(this,{tag:i,expr:r,stub:q(),pristine:t});var n=t.parentNode;n.insertBefore(this.stub,t);n.removeChild(t);return this},update:function e(){this.value=I(this.expr,this.tag);if(!this.stub.parentNode){return}if(this.value&&!this.current){this.current=this.pristine.cloneNode(true);this.stub.parentNode.insertBefore(this.current,this.stub);this.expressions=Yt.apply(this.tag,[this.current,true])}else if(!this.value&&this.current){this.unmount();this.current=null;this.expressions=[]}if(this.value){Je.call(this.tag,this.expressions)}},unmount:function e(){if(this.current){if(this.current._tag){this.current._tag.unmount()}else if(this.current.parentNode){this.current.parentNode.removeChild(this.current)}}Dt(this.expressions||[])}};function jt(e,t,i){return $(Ot).init(e,t,i)}function Yt(o,l){var u=this;var c=[];ne(o,function(e){var t=e.nodeType;var i;var r;if(!l&&e===o){return}if(t===3&&e.parentNode.tagName!=="STYLE"&&I.hasExpr(e.nodeValue)){c.push({dom:e,expr:e.nodeValue})}if(t!==1){return}var n=e.tagName==="VIRTUAL";if(i=K(e,m)){if(n){A(e,"loopVirtual",true)}c.push(xt(e,u,i));return false}if(i=K(e,p)){c.push(jt(e,u,i));return false}if(i=K(e,h)){if(I.hasExpr(i)){c.push({isRtag:true,expr:i,dom:e,attrs:[].slice.call(e.attributes)});return false}}r=Me(e);if(n){if(K(e,"virtualized")){e.parentElement.removeChild(e)}if(!r&&!K(e,"virtualized")&&!K(e,"loopVirtual")){r={tmpl:e.outerHTML}}}if(r&&(e!==o||l)){var a=K(e,h);if(n&&!a){A(e,"virtualized",true);var s=Nt({tmpl:e.outerHTML},{root:e,parent:u},e.innerHTML);c.push(s)}else{if(a&&n){be("Virtual tags shouldn't be used together with the \""+h+'" attribute - https://github.com/riot/riot/issues/2511')}c.push(Ve(r,{root:e,parent:u},e.innerHTML,u));return false}}Tt.apply(u,[e,e.attributes,function(e,t){if(!t){return}c.push(t)}])});return c}function Tt(n,e,a){var s=this;ve(e,function(e){if(!e){return false}var t=e.name;var i=fe(t);var r;if(me(f,t)&&n.tagName.toLowerCase()!==o){r=St(n,s,t,e.value)}else if(I.hasExpr(e.value)){r={dom:n,expr:e.value,attr:t,bool:i}}a(e,r)})}function Pt(e){var t=this.__;var i=t.isAnonymous;var r=t.skipAnonymous;_e(this,"isMounted",e);if(!i||!r){if(e){this.trigger("mount")}else{this.trigger("unmount");this.off("*");this.__.wasCreated=false}}}function Ct(i,e,r,t){var n=i.__;var a=n.root;a._tag=i;Tt.apply(n.parent,[a,a.attributes,function(e,t){if(!n.isAnonymous&&Mt.isPrototypeOf(t)){t.tag=i}e.expr=t;n.instAttrs.push(e)}]);ee(n.impl.attrs,function(e,t){n.implAttrs.push({name:e,value:t})});Tt.apply(i,[a,n.implAttrs,function(e,t){if(t){r.push(t)}else{A(a,e.name,e.value)}}]);Ke.apply(i,[n.isLoop,n.parent,n.isAnonymous,t,n.instAttrs]);var s=ot(u);if(s&&!n.skipAnonymous){for(var o in s){if(s.hasOwnProperty(o)){i.mixin(s[o])}}}if(n.impl.fn){n.impl.fn.call(i,t)}if(!n.skipAnonymous){i.trigger("before-mount")}ve(Yt.apply(i,[e,n.isAnonymous]),function(e){return r.push(e)});i.update(n.item);if(!n.isAnonymous&&!n.isInline){while(e.firstChild){a.appendChild(e.firstChild)}}_e(i,"root",a);if(!n.skipAnonymous&&i.parent){var l=Ie(i.parent);l.one(!l.isMounted?"mount":"updated",function(){Pt.call(i,true)})}else{Pt.call(i,true)}i.__.wasCreated=true;return i}function At(t,e,i){var r=t.__;var n=r.root;var a=c.indexOf(t);var s=n.parentNode;if(!r.skipAnonymous){t.trigger("before-unmount")}ee(r.impl.attrs,function(e){if(ge(e,l)){e=e.slice(l.length)}Q(n,e)});t.__.listeners.forEach(function(t){Object.keys(t[y]).forEach(function(e){t.removeEventListener(e,t[y][e])})});if(a!==-1){c.splice(a,1)}if(r.parent&&!r.isAnonymous){var o=Ie(r.parent);if(r.isVirtual){Object.keys(t.tags).forEach(function(e){return Ge(o.tags,e,t.tags[e])})}else{Ge(o.tags,r.tagName,t)}}if(t.__.virts){ve(t.__.virts,function(e){if(e.parentNode){e.parentNode.removeChild(e)}})}Dt(i);ve(r.instAttrs,function(e){return e.expr&&e.expr.unmount&&e.expr.unmount()});if(e){X(n,"")}else if(s){s.removeChild(n)}if(r.onUnmount){r.onUnmount()}if(!t.isMounted){Pt.call(t,true)}Pt.call(t,false);delete n._tag;return t}function Nt(e,t,i){if(e===void 0)e={};if(t===void 0)t={};var a=t.context||{};var r=t.opts||{};var n=t.parent;var s=t.isLoop;var o=!!t.isAnonymous;var l=B.skipAnonymousTags&&o;var u=t.item;var c=t.index;var d=[];var f=[];var h=e.tmpl;var p=[];var m=t.root;var v=t.tagName||Se(m);var g=v==="virtual";var y=!g&&!h;var _;if(y||s&&o){_=m}else{if(!g){m.innerHTML=""}_=Ee(h,i,ce(m))}if(!l){F(a)}if(e.name&&m._tag){m._tag.unmount(true)}_e(a,"__",{impl:e,root:m,skipAnonymous:l,implAttrs:f,isAnonymous:o,instAttrs:d,innerHTML:i,tagName:v,index:c,isLoop:s,isInline:y,item:u,parent:n,listeners:[],virts:[],wasCreated:false,tail:null,head:null});return[["isMounted",false],["_riot_id",ye()],["root",m],["opts",r,{writable:true,enumerable:true}],["parent",n||null],["tags",{}],["refs",{}],["update",function(e){return Qe(a,e,p)}],["mixin",function(){var e=[],t=arguments.length;while(t--)e[t]=arguments[t];return ft.apply(void 0,[a].concat(e))}],["mount",function(){return Ct(a,_,p,r)}],["unmount",function(e){return At(a,e,p)}]].reduce(function(e,t){var i=t[0];var r=t[1];var n=t[2];_e(a,i,r,n);return e},z(a,u))}function Wt(e,t,i,r){var n=d[t];var a=d[t].class;var s=r||(a?$(a.prototype):{});var o=e._innerHTML=e._innerHTML||e.innerHTML;var l=z({root:e,opts:i,context:s},{parent:i?i.parent:null});var u;if(n&&e){u=Nt(n,l,o)}if(u&&u.mount){u.mount(true);if(!me(c,u)){c.push(u)}}return u}var Lt=Object.freeze({arrayishAdd:xe,getTagName:Se,inheritParentProps:De,mountTo:Wt,selectTags:Xe,arrayishRemove:Ge,getTag:Me,initChildTag:Ve,moveChildTag:ht,makeReplaceVirtual:$e,getImmediateCustomParentTag:Ie,makeVirtual:ze,moveVirtual:pt,unmountAll:Dt,createIfDirective:jt,createRefDirective:St}),Et=B,Rt={tmpl:I,brackets:H,styleManager:E,vdom:c,styleNode:E.styleNode,dom:ae,check:pe,misc:ke,tags:Lt},Ht=et,It=tt,Ft=it,Ut=rt,Vt=ot,Gt=lt,zt=ut,$t=ct,Bt=F,Zt=z({},dt,{observable:F,settings:Et,util:Rt});e.settings=Et,e.util=Rt,e.Tag=Ht,e.tag=It,e.tag2=Ft,e.mount=Ut,e.mixin=Vt,e.update=Gt,e.unregister=zt,e.version=$t,e.observable=Bt,e.default=Zt,Object.defineProperty(e,"__esModule",{value:true})}(t)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=(n.init=function(){window.scrolls=[],window.addEventListener("scroll",function(){var e=window.pageYOffset,t=window.location.hash;window.scrolls[""+t]=e})},n.move=function(){var e=window.location.hash;window.scrolls[""+e]?window.scroll(0,0):window.scroll(0,window.scrolls[""+e])},n);function n(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n)}t.default=r},function(e,t,i){"use strict";i(0).tag2("list",'<ul> <li each="{item in opts.items}"> <h3><a href="{item.link}" target="_blank">{item.title}</a> <div class="right"> <hr><span><span class="date" if="{item.date.length &lt;= 7}">{item.date}</span><span class="term" if="{item.date.length &gt; 7}">{item.date}</span></span> </div> </h3> <p class="sub" each="{t in item.texts}">{t}</p> </li> </ul>','list > ul,[data-is="list"] > ul{ padding: 0.75rem; } list > ul li,[data-is="list"] > ul li{ margin-bottom: 1rem; } list > ul li h3,[data-is="list"] > ul li h3{ display: flex; margin: auto; align-items: center; } list > ul li h3 a,[data-is="list"] > ul li h3 a{ color: #4e9adb; padding: 0.75rem; text-align: justify; } list > ul li h3 a:hover,[data-is="list"] > ul li h3 a:hover{ text-decoration: underline; } list > ul li h3 .right,[data-is="list"] > ul li h3 .right{ display: inline-flex; flex-grow: 1; align-items: center; } list > ul li h3 .right hr,[data-is="list"] > ul li h3 .right hr{ display: inline-flex; flex-grow: 1; border: 1.5px solid gray; border-radius: 1rem; min-width: 1rem; background: gray; } list > ul li h3 .right span,[data-is="list"] > ul li h3 .right span{ padding: 0.75rem; display: inline-flex; } list > ul li h3 .right span span,[data-is="list"] > ul li h3 .right span span{ background: #555; color: white; padding: 0.1rem 0.3rem; border-radius: 0.3rem; display: inline-block; text-align: center; font-size: 0.8rem; font-weight: normal; } list > ul li h3 .right span span.date,[data-is="list"] > ul li h3 .right span span.date{ min-width: 4rem; } list > ul li h3 .right span span.term,[data-is="list"] > ul li h3 .right span span.term{ min-width: 8rem; } list > ul li .sub,[data-is="list"] > ul li .sub{ color: #bdbdbd; padding: 0 0.75rem; font-weight: 300; text-align: justify; }','class="pure-g pure-u-1-1"',function(e){})},function(e,t,i){"use strict";i(0).tag2("webp",'<picture> <source srcset="resources/{opts.src||opts.riotSrc}.webp" type="image/webp"> <source srcset="resources/{opts.src||opts.riotSrc}.png" type="image/png"><img riot-src="resources/{opts.src||opts.riotSrc}.webp"> </picture>','webp,[data-is="webp"]{ display: block; } webp > picture,[data-is="webp"] > picture{ width: 100%; height: 100%; } webp > picture > img,[data-is="webp"] > picture > img{ width: 100%; }',"",function(e){this.on("mounted",function(){})})},function(e,t,i){e.exports=function(s){s=s||{};var o={},l=Array.prototype.slice;return Object.defineProperties(s,{on:{value:function(e,t){return"function"==typeof t&&(o[e]=o[e]||[]).push(t),s},enumerable:!1,writable:!1,configurable:!1},off:{value:function(e,t){if("*"!=e||t)if(t)for(var i,r=o[e],n=0;i=r&&r[n];++n)i==t&&r.splice(n--,1);else delete o[e];else o={};return s},enumerable:!1,writable:!1,configurable:!1},one:{value:function(t,i){return s.on(t,function e(){s.off(t,e),i.apply(s,arguments)})},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(e){var t,i,r,n=arguments.length-1,a=new Array(n);for(r=0;r<n;r++)a[r]=arguments[r+1];for(t=l.call(o[e]||[],0),r=0;i=t[r];++r)i.apply(s,a);return o["*"]&&"*"!=e&&s.trigger.apply(s,["*",e].concat(a)),s},enumerable:!1,writable:!1,configurable:!1}}),s}},function(e,t,i){"use strict";i(0).tag2("social",'<ul> <li><a href="https://www.facebook.com/raika.toriyama" target="_blank" title="Facebook" rel="noopener noreferrer"><i class="fab fa-facebook-f fa-2x"></i></a></li> <li><a href="https://twitter.com/pvcresin/" target="_blank" title="Twitter" rel="noopener noreferrer"><i class="fab fa-twitter fa-2x"></i></a></li> <li><a href="https://github.com/pvcresin/" target="_blank" title="GitHub" rel="noopener noreferrer"><i class="fab fa-github fa-2x"></i></a></li> <li><a href="https://www.instagram.com/pvcresin/" target="_blank" title="Instagram" rel="noopener noreferrer"><i class="fab fa-instagram fa-2x"></i></a></li> <li><a href="http://pvcresin.hatenablog.com/" target="_blank" title="Hatena Blog" rel="noopener noreferrer"> <div class="icon-box hatena"></div></a></li> <li><a href="https://www.wantedly.com/users/18220619" target="_blank" title="Wantedly" rel="noopener noreferrer"> <div class="icon-box wantedly"></div></a></li> </ul>','social > ul,[data-is="social"] > ul{ display: flex; justify-content: center; align-items: center; padding: 1rem 0; } social > ul li,[data-is="social"] > ul li{ display: inline-block; } social > ul li a,[data-is="social"] > ul li a{ color: #525252; vertical-align: sub; display: inline-block; width: 3rem; } social > ul li a:hover,[data-is="social"] > ul li a:hover{ color: white; } social > ul li a .icon-box,[data-is="social"] > ul li a .icon-box{ margin: auto; width: 2rem; height: 2rem; background: #525252; } social > ul li a .icon-box:hover,[data-is="social"] > ul li a .icon-box:hover{ background: white; } social > ul li a .icon-box.hatena,[data-is="social"] > ul li a .icon-box.hatena{ mask-image: url(./resources/icon-hatena.svg); -webkit-mask-image: url(./resources/icon-hatena.svg); } social > ul li a .icon-box.wantedly,[data-is="social"] > ul li a .icon-box.wantedly{ mask-image: url(./resources/icon-wantedly.svg); -webkit-mask-image: url(./resources/icon-wantedly.svg); }','id="social"',function(e){})},function(e,t,i){"use strict";var r=n(i(15));n(i(3));function n(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("about",'<div class="about-img pure-u-sm-1-4 pure-u-1-2"> <div class="face-wrapper pure-u-1-2"><img src="resources/icon-pvcresin.svg"></div> </div> <div class="pure-u-sm-1-24 pure-u-1-1"></div> <div class="about-text pure-u-sm-17-24 pure-u-1-1">Web Frontend „ÅåÂ•Ω„Åç„Å™„Ç®„É≥„Ç∏„Éã„Ç¢„ÄÇ<br>Â≠¶ÁîüÊôÇ‰ª£„ÅØ„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥ÔºàHCIÔºâ„ÇíÂ∞ÇÊîª„Åó„ÄÅ‰∏ª„Å´„É¢„Éê„Ç§„É´ / „Ç¶„Çß„Ç¢„É©„Éñ„É´„Éá„Éê„Ç§„Çπ„Å´Èñ¢„Åô„ÇãÁ†îÁ©∂„ÇíË°å„ÅÜ„ÄÇ<br>‰∫∫„Å®ÊÑèË¶ã„Çí‰∫§Êèõ„Åó„ÄÅË≠∞Ë´ñ„Åó„Å™„Åå„Çâ„É¢„Éé‰Ωú„Çä„Åå„Åó„Åü„ÅÑ„ÄÇ<br>Êñ∞„Åó„ÅÑ„ÇÇ„ÅÆ„ÅåÂ•Ω„Åç„Å™„ÅÆ„Åß„ÄÅË≤™Ê¨≤„Å´Â≠¶„Çì„Åß„ÅÑ„Åè„ÄÇ <ul> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-birthday-cake" aria-hidden="true"></i></div> <div class="right pure-u-11-12">{birthday} (Age: {age})</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-envelope" aria-hidden="true"></i></div> <div class="right pure-u-11-12">pvcresin0730@gmail.com</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-map-marker-alt" aria-hidden="true"></i></div> <div class="right pure-u-11-12">Omotesando, Tokyo</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-suitcase" aria-hidden="true"></i></div> <div class="right pure-u-11-12"><span>Frontend Engineer{\' \'}</span><a class="company" href="https://jp.corp-sansan.com/" target="_blank">@ Sansan</a></div> </li> </ul> </div>','about,[data-is="about"]{ padding: 0.75rem; } about > .about-img,[data-is="about"] > .about-img{ text-align: center; padding: 0.75rem; margin: 0 auto; } about > .about-img .face-wrapper,[data-is="about"] > .about-img .face-wrapper{ position: relative; width: 100%; } about > .about-img .face-wrapper:before,[data-is="about"] > .about-img .face-wrapper:before{ content: ""; display: block; padding-top: 100%; } about > .about-img .face-wrapper img,[data-is="about"] > .about-img .face-wrapper img{ position: absolute; top: 0; left: 0; bottom: 0; right: 0; border-radius: 50%; width: 100%; background: gray; } about > .about-text,[data-is="about"] > .about-text{ text-align: justify; display: flex; flex-direction: column; justify-content: center; padding: 0.75rem; font-size: 1.1rem; } about > .about-text ul li,[data-is="about"] > .about-text ul li{ display: flex; margin-top: 0.5rem; } about > .about-text ul li .icon,[data-is="about"] > .about-text ul li .icon{ display: flex; justify-content: center; align-items: baseline; font-size: 1.5rem; } about > .about-text ul li .right,[data-is="about"] > .about-text ul li .right{ display: flex; align-items: center; padding-left: 0.5rem; } about > .about-text ul li .right a,[data-is="about"] > .about-text ul li .right a{ color: #4e9adb; } about > .about-text ul li .right a:hover,[data-is="about"] > .about-text ul li .right a:hover{ text-decoration: underline; } about > .about-text ul li .right a.company,[data-is="about"] > .about-text ul li .right a.company{ margin-left: 0.3rem; }','class="pure-g"',function(e){this.birthday="1994-07-30",this.age=(0,r.default)().diff(this.birthday,"years")})},function(e,t,i){"use strict";var r=n(i(8));n(i(3));function n(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projects",'<div class="pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1" each="{w, i in projects}"> <div class="card"><a href="#projects/{w.name.replace(/ /g, `_`)}"> <div class="wrapper"> <webp class="thumbnail" riot-src="{w.img}"></webp> </div> <div class="content"> <h4>{w.name}</h4> <p>{w.sub}</p> </div></a></div> </div>','projects,[data-is="projects"]{ padding: 0.75rem; display: flex; flex-wrap: wrap; } projects > div,[data-is="projects"] > div{ padding: 0.75rem; } projects > div > .card,[data-is="projects"] > div > .card{ cursor: pointer; background: white; height: 100%; box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1); border-radius: 0.3rem; } projects > div > .card:hover,[data-is="projects"] > div > .card:hover{ box-shadow: 0 8px 10px rgba(10, 10, 10, 0.1), 0 0 6px 4px rgba(10, 10, 10, 0.1); } projects > div > .card > a > .wrapper,[data-is="projects"] > div > .card > a > .wrapper{ position: relative; width: 100%; } projects > div > .card > a > .wrapper:before,[data-is="projects"] > div > .card > a > .wrapper:before{ content: \'\'; display: block; padding-top: 56.25%; } projects > div > .card > a > .wrapper img,[data-is="projects"] > div > .card > a > .wrapper img{ position: absolute; top: 0; left: 0; border-radius: 0.3rem 0.3rem 0 0; display: block; width: 100%; background: #ddd; border-bottom: 1px solid #ddd; } projects > div > .card > a > .content,[data-is="projects"] > div > .card > a > .content{ padding: 0.8rem 1rem; } projects > div > .card > a > .content h4,[data-is="projects"] > div > .card > a > .content h4{ font-size: 1.2rem; margin-bottom: 0.3rem; } projects > div > .card > a > .content p,[data-is="projects"] > div > .card > a > .content p{ font-size: 0.9rem; }',"",function(e){var t=this;this.category="All",this.projects=void 0===this.opts.limit?r.default:r.default.slice(0,this.opts.limit),this.on("updated",function(){t.opts.category&&t.opts.category!==t.category&&t.update({category:t.opts.category,projects:"All"===t.opts.category?r.default:r.default.filter(function(e){return e.category===t.opts.category})})})})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=[{name:"SensorPipe",sub:"PC„Å®„Çπ„Éû„Éõ„ÇíÈÄ£Êê∫„Åï„Åõ„Çã„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÇíÊîØÊè¥„Åô„Çã„Çπ„Éû„Éõ„Ç¢„Éó„É™",img:"project-SensorPipe-16-9",category:"Android",video:"gwKyPqt2kd8",text:"„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„ÅÆ„Çª„É≥„ÇµÊÉÖÂ†±„Å®PC„ÇíÈÄ£Êê∫„Åï„Åõ„Åü„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÇíÂÆüÁèæ„Åô„Çã„Å´„ÅØÂèåÊñπ„Åß„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÁô∫„ÅåÂøÖË¶Å„Å®„Å™„Çä„ÄÅË£Ω‰ΩúÊôÇÈñì„Åå„Åã„Åã„Çã‰∏ä„Å´„Éè„Éº„Éâ„É´„ÅåÈ´ò„ÅÑ„ÇÇ„ÅÆ„Åß„ÅÇ„Å£„Åü„ÄÇ„Åì„Çå„ÇíËß£Ê±∫„Åô„Çã„Åü„ÇÅ„ÄÅ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„ÅÆÂêÑÁ®Æ„Çª„É≥„ÇµÊÉÖÂ†±„ÇíPC„Å´ÈÄÅ‰ø°„ÅóÁ∂ö„Åë„ÄÅPCÂÅ¥„Åã„Çâ„ÇÇ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„Å´„Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥„ÇÑ„Ç¶„Çß„Éñ„Çµ„Ç§„ÉàË°®Á§∫„Å™„Å©„ÅÆÊâÄÂÆö„ÅÆÂãï‰Ωú„Çí„Åï„Åõ„Çã‰∫ã„Åå„Åß„Åç„Çã„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÈñãÁô∫„Åó„Åü„ÄÇ„Åì„Çå„Å´„Çà„Çä„ÄÅ„Éó„É≠„Ç∞„É©„Éû„ÅØ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥ÂÅ¥„ÅÆ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Çí‰∏ÄÂàáË°å„Çè„Åö„Å´„ÄÅPC„Åß„ÅÆ„Çª„É≥„ÇµÊÉÖÂ†±„ÇíÁî®„ÅÑ„Åü„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÇíË°å„ÅÜ„Åì„Å®„Åå„Åß„Åç„Çã„ÄÇWISS2015„ÅßÁô∫Ë°®„ÄÇ",implement:"Android„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å®„Åó„Å¶ÂÆüË£Ö„ÄÇPC„Å®„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„ÇíÂêå„ÅòWi-Fi„Å´Êé•Á∂öÂæå„ÄÅUDPÈÄö‰ø°„ÇíÁ¢∫Á´ã„Åô„Çã„Åì„Å®„Å´„Çà„Å£„Å¶„Éá„Éº„Çø„ÅÆÈÄÅÂèó‰ø°„ÇíË°å„ÅÜ„ÄÇ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅØ„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂãï‰Ωú„Åô„Çã„ÄÇPCÂÅ¥„ÅßÂà©Áî®„Åô„Çã„Å®„Åç„ÅØÂØæÂøú„Åô„ÇãProcessingÁî®„ÅÆ„É©„Ç§„Éñ„É©„É™„ÇíÂà©Áî®ÂèØËÉΩ„ÄÇ",keywords:["Android","Programming Experience(PX)","UDP","cooperation programming","sensor"],links:{"„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éö„Éº„Ç∏":"https://research.miyashita.com/2015/D160/"}},{name:"MiddleDrive",sub:"BluetoothÈÄö‰ø°„Å´„Çà„Çã„Ç¢„Éâ„Éõ„ÉÉ„ÇØÂûã„Éâ„Ç≠„É•„É°„É≥„ÉàÂÖ±ÂêåÁ∑®ÈõÜ„Ç¢„Éó„É™",img:"project-MiddleDrive-16-9",category:"Web",video:"vPAXrlKGeC8",text:"‰ºöË≠∞„ÇíË°å„ÅÜÈöõ„Å´„Åù„ÅÆÂÜÖÂÆπ„ÇíË§áÊï∞‰∫∫„Åß„Ç¶„Çß„Éñ‰∏ä„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„Å´Êõ∏„ÅçÂá∫„Åô„Åì„Å®„ÅßË®òÈå≤„Çí„Å®„Å£„Åü„Çä„ÄÅË≠∞È°å„ÅÆÊï¥ÁêÜ„Çí„Åó„Åü„Çä„Åô„Çã„Åì„Å®„ÅåÂ§ö„Åè„ÅÇ„Çã„ÄÇ„Åó„Åã„Åó„ÄÅWi-Fi„ÅÆÈõªÊ≥¢„Åå„Å™„ÅÑÂ†¥ÊâÄ„Åß„ÅØ„Åì„Çå„Çâ„ÅÆ„Çà„ÅÜ„Å™„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅØÂà©Áî®„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Å™„ÅÑ„ÄÇ„Åù„Åì„Åß„ÄÅWi-Fi„Å™„Å©„ÅÆ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁí∞Â¢É„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÁä∂Ê≥Å„Åß„ÇÇ„ÄÅ„É™„Ç¢„É´„Çø„Ç§„É†„Å´ÂÖ±ÂêåÁ∑®ÈõÜ„ÇíË°å„ÅÜ„Åì„Å®„Åå„Åß„Åç„Çã„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÈñãÁô∫„Åó„Åü„ÄÇ„ÉØ„Ç§„É§„É¨„Çπ„Ç¢„Éâ„Éõ„ÉÉ„ÇØ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÇíÊßãÁØâ„Åó„ÄÅ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂÜÖ„ÅÆPC„Å®„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÂÖ±ÂêåÁ∑®ÈõÜ„ÇíË°å„ÅÜ„Åì„Å®„ÅåÂá∫Êù•„Çã„ÄÇ",implement:"„ÉÅ„Éº„É†„ÅßÂà∂‰Ωú„ÄÇ„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Å®Web„Çµ„Éº„Éê„ÇíÊãÖÂΩì„Åó„Åü„ÄÇÂãï‰Ωú„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÅØWindowsPC„ÄÇBluetooth„Å´„Çà„Å£„Å¶PCÂêåÂ£´„Çí„Éö„Ç¢„É™„É≥„Ç∞„Åó„ÄÅÂèåÊñπÂêë„ÅÆ„Éá„Éº„ÇøÈÄö‰ø°„ÇíË°å„ÅÜ„ÄÇÂêÑPCÂÜÖ„ÅßWeb„Çµ„Éº„Éê„ÅåËµ∑Âãï„Åó„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅÈÄöÂ∏∏„ÅÆ„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å®Âêå„Åò„Çà„ÅÜ„Å´„Éñ„É©„Ç¶„Ç∂„Åß„Ç¢„ÇØ„Çª„Çπ„Åô„Çã„Åì„Å®„ÅåÂá∫Êù•„Çã„ÄÇBluetoothÈÄö‰ø°„ÅØC#„Åßwin API„ÇíÂà©Áî®„Åô„Çã„Åì„Å®„ÅßÂÆüÁèæ„Åó„ÄÅWeb„Çµ„Éº„Éê„ÅØNode.js„ÇíÁî®„ÅÑ„Å¶ÂÆüË£Ö„Åó„Å¶„ÅÑ„Çã„ÄÇ",keywords:["windows","Bluetooth","co-authoring","CSCW","win API","Ad-hoc network"],links:{"ÂèóË≥û„Éö„Éº„Ç∏":"https://www.pref.nagano.lg.jp/joho/app-contest/app-contest0"}},{name:"InvisibleFlick",sub:"Â∞èÂûã„Çø„ÉÉ„ÉÅ„Çπ„ÇØ„É™„Éº„É≥Á´ØÊú´„Å´„Åä„Åë„Çã„Ç≠„Éº„Éà„ÉÉ„Éó„ÅåÈÄèÊòé„Å™Êó•Êú¨Ë™ûÂÖ•Âäõ„Ç≠„Éº„Éú„Éº„Éâ",img:"project-InvisibleFlick-16-9",category:"Android",text:"„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅ„ÅÆ„Çà„ÅÜ„Å™Â∞èÂûã„Çø„ÉÉ„ÉÅ„Çπ„ÇØ„É™„Éº„É≥Á´ØÊú´Âêë„Åë„ÅÆÊó•Êú¨Ë™ûÂÖ•Âäõ„Ç≠„Éº„Éú„Éº„Éâ„ÅØ„ÄÅ„Ç≠„Éº„ÇÑ„ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„ÅåÁã≠„ÅÑ„Åü„ÇÅ„ÄÅ„Éü„Çπ„Çø„ÉÉ„Éó„ÅÆÈ†ªÁô∫„Å´„Çà„ÇãÊñáÂ≠óÂÖ•ÂäõÈÄüÂ∫¶„ÅÆ‰Ωé‰∏ã„ÇíÊãõ„ÅÑ„Å¶„ÅÑ„Çã„ÄÇ„Åù„Åì„Åß„ÄÅ„ÉÜ„É≥„Ç≠„ÉºÈÉ®ÂàÜ„ÅÆ„Ç≠„Éº„Éà„ÉÉ„Éó„ÇíÈÄèÊòé„Å´„Åó„ÄÅËÉåÊôØ„Å´„ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„ÇíË°®Á§∫„Åô„ÇãÊâãÊ≥ï„ÇíÊèêÊ°à„ÄÇ„Éï„É™„ÉÉ„ÇØ„Ç≠„Éº„Éú„Éº„Éâ„Å®„ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„ÅÆ2Â±§„ÅÆ„É¨„Ç§„É§„ÉºÊßãÈÄ†„ÅÆÂ∞éÂÖ•„Å´„Çà„Çä„ÄÅ„Ç≠„Éº„Å®„ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„ÇíÂêåÊôÇ„Å´Êã°Â§ß„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Çã„ÄÇÊó¢Â≠òÊâãÊ≥ï„Å®„ÅÆÊØîËºÉ„Åó„Å¶„ÄÅÊñáÂ≠óÂÖ•ÂäõÈÄüÂ∫¶„Éª„Ç®„É©„ÉºÁéá„Å®„ÇÇ„Å´ÂÑ™„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÅåÁ§∫„Åï„Çå„Åü„ÄÇÁ¨¨182ÂõûHCIÁ†îÁ©∂‰ºö„ÅßÁô∫Ë°®„Åó„ÄÅÂ≠¶ÁîüÂ•®Âä±Ë≥û„ÇíÂèóË≥û„ÄÇ‰øÆÂ£´Ë´ñÊñá„ÄÇ",implement:"ÂÆüÈ®ìÁî®„Ç∑„Çπ„ÉÜ„É†„Å®„Åó„Å¶„ÄÅAndroid„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÂÆüË£Ö„ÄÇGoogleÊó•Êú¨Ë™ûÂÖ•ÂäõAPI„Çí‰ΩøÁî®„Åó„Å¶„ÄÅÊº¢Â≠ó„Å™„Å©„ÅÆÊñáÂ≠óÂ§âÊèõ„ÇíË°å„Å£„Å¶„ÅÑ„Çã„ÄÇ",keywords:["Android","Human Computer Interaction","smartwatch","text input","flick-keyboard"],links:{"„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éö„Éº„Ç∏":"https://research.miyashita.com/papers/D218","ÂèóË≥û„Éö„Éº„Ç∏":"http://www.sighci.jp/contents/page/news","GoogleÊó•Êú¨Ë™ûÂÖ•ÂäõAPI":"https://www.google.co.jp/ime/cgiapi.html"}},{name:"Ichimonitto",sub:"„Éì„Éá„Ç™„ÉÅ„É£„ÉÉ„Éà„Çí„Åó„Å™„Åå„Çâ„ÇØ„Ç§„Ç∫Áï™ÁµÑÂΩ¢Âºè„ÅßÂõûÁ≠î„Åô„Çã‰∏ÄÂïè‰∏ÄÁ≠îÂ≠¶ÁøíÊîØÊè¥„Çµ„Éº„Éì„Çπ",img:"project-Ichimonitto-16-9",category:"Web",text:"Ëã±ÂçòË™û„ÇíÁü•„Å£„Å¶„ÅÑ„Å¶„ÇÇ„ÄÅÊ≠£Á¢∫„Å™Áô∫Èü≥„Åå„Åß„Åç„Å™„Åë„Çå„Å∞Áõ∏Êâã„Å´„ÅØ‰ºù„Çè„Çâ„Å™„ÅÑ„ÄÇ„Åù„Åì„Åß„ÄÅWebRTC„ÇíÂà©Áî®„Åó„Åü‰∏ÄÂïè‰∏ÄÁ≠îÂΩ¢Âºè„ÅÆÂ≠¶ÁøíÊîØÊè¥„Çµ„Éº„Éì„Çπ„ÇíÂà∂‰Ωú„Åó„Åü„ÄÇ„Ç´„É°„É©Êò†ÂÉè„Å®„Éú„Ç§„Çπ„ÉÅ„É£„ÉÉ„Éà„Å´„Çà„Å£„Å¶Èõ¢„Çå„ÅüÂ†¥ÊâÄ„Åß„ÇÇ‰∏ÄÁ∑í„Å´Â≠¶„Å∂„Åì„Å®„ÅåÂá∫Êù•„Çã„ÄÇÁîªÈù¢„Å´Ë°®Á§∫„Åï„Çå„ÅüÂçòË™û„ÅÆËã±Ë™û„Çí„ÅÑ„Å°Êó©„Åè„ÄÅ„Åã„Å§Ê≠£Á¢∫„Å´Áô∫Èü≥„Åß„Åç„Åü„ÇÇ„ÅÆ„Åå„Éù„Ç§„É≥„Éà„ÇíÁç≤Âæó„Åô„Çã„ÄÇCloud n „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Ç≥„É≥„ÉÜ„Çπ„Éà„ÅßWebRTCË≥û„ÇíÂèóË≥û„ÄÇ",implement:"„ÉÅ„Éº„É†„ÅßÂà∂‰Ωú„ÄÇ„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÇíÊãÖÂΩì„ÄÇGoogle Speech API„Çí‰Ωø„ÅÜ„Åì„Å®„Åß„ÄÅ„Åó„Å£„Åã„Çä„Å®Ë™çË≠ò„Åï„Çå„Çã„Çà„ÅÜ„Å™Ê≠£Á¢∫„Å™Áô∫Èü≥„Åß„ÅÆÂõûÁ≠î„ÅÆ„ÅøÊ≠£Ëß£„Å®„Åô„ÇãÁÇπ„Åå„Éù„Ç§„É≥„Éà„ÄÇÁèæÂú®Êé•Á∂ö„Åó„Å¶„ÅÑ„Çã„É¶„Éº„Ç∂„Å™„Å©„ÅÆÁÆ°ÁêÜ„Å´Skyway„ÅÆAPI„ÇíÂà©Áî®„ÄÇ",keywords:["Web RTC","quiz","video chat","Google Speech API"],links:{"ÂèóË≥û„Éö„Éº„Ç∏":"http://www.cloudn-service.com/cam04-deven/decon/tohyo/"}},{name:"GeoMelody",sub:"Áí∞Â¢ÉÈü≥„ÇíÈå≤Èü≥„Åó„Å¶„Éç„ÉÉ„Éà‰∏ä„Å´ÈõÜÁ¥Ñ„Åô„Çã„Çµ„Ç¶„É≥„Éâ„Çπ„Ç±„Éº„ÉóSNS",img:"project-GeoMelody-16-9",category:"Android",text:"‰ΩçÁΩÆÊÉÖÂ†±„Å®Áí∞Â¢ÉÈü≥„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Å¶ÁôªÈå≤„Åô„Çã„Çµ„Éº„Éì„Çπ„ÄÇÈ¢®ÊôØ„Å´„ÅØÈü≥„ÅåÊ¨†„Åã„Åõ„Å™„ÅÑ„Å®„ÅÑ„ÅÜËÄÉ„ÅàÊñπ„ÄÅ„Çµ„Ç¶„É≥„Éâ„Çπ„Ç±„Éº„Éó„Çí„Çµ„Éº„Éì„Çπ„Å®„Åó„Å¶ÁµÑ„ÅøËæº„Çì„Å†‰ΩúÂìÅ„ÄÇ„É¶„Éº„Ç∂„Åå„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„ÅßÁí∞Â¢ÉÈü≥„ÇíÈå≤Èü≥„Åô„Çã„Å®„ÄÅÈü≥Â£∞„ÇíGPS„ÇÑÊó•‰ªò„ÅÆÊÉÖÂ†±„Å®ÂÖ±„Å´„Çµ„Éº„Éê„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„ÄÅ„Éû„ÉÉ„Éó‰∏ä„ÅßÈñ≤Ë¶ß„Åô„Çã„Åì„Å®„ÅåÂá∫Êù•„Çã„ÄÇOpen Hack U 2014Áô∫Ë°®‰ΩúÂìÅ„ÄÇ",implement:"„ÉÅ„Éº„É†„ÅßÂà∂‰Ωú„ÄÇ„Ç¢„Éó„É™„ÅÆÂ§ßÈÉ®ÂàÜ„ÇíÊãÖÂΩì„Åó„Åü„ÄÇAndroid„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å®„Åó„Å¶ÂÆüË£Ö„ÄÇYahoo Map API„Çí‰ΩøÁî®„Åó„Å¶„ÄÅÈå≤Èü≥„Åï„Çå„ÅüÈü≥Â£∞„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞„ÇíË°å„Å£„Å¶„ÅÑ„Çã„ÄÇ",keywords:["Android","soundscape","map","record","microphone","GPS"]},{name:"WristSlide",sub:"„Ç§„É°„Éº„Ç∏„Çª„É≥„Çµ„ÇíÁî®„ÅÑ„ÅüÊâãÈ¶ñ„ÇíÊªë„Çâ„Åõ„Çã„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅ„ÅÆÁâáÊâãÊìç‰Ωú",img:"project-WristSlide-16-9",category:"Android",video:"w9eHDKby8ro",text:"„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅ„Å´„Åä„ÅÑ„Å¶„ÄÅ„Çπ„ÉØ„Ç§„Éó„ÅÆ„Çà„ÅÜ„Å™ÈÄ£Á∂öÁöÑ„Å™ÂÖ•Âäõ„ÇíË°å„ÅÜ„Å´„ÅØ„ÄÅË£ÖÁùÄ„Åó„Å¶„ÅÑ„ÇãÊâã„Å®ÂèçÂØæ„ÅÆÊâã„ÅßÊìç‰Ωú„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇ„Åù„Åì„Åß„ÄÅÊâãÈ¶ñ„ÇíÊú∫„ÇÑÂ£Å„ÄÅËá™Ë∫´„ÅÆË∫´‰Ωì„Å™„Å©„ÅÆ‰∏ä„ÅßÊªë„Çâ„Åõ„Çã„Åì„Å®„Å´„Çà„Å£„Å¶„ÄÅ„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅ„ÇíÁâáÊâã„ÅßÊìç‰Ωú„Åô„ÇãÊâãÊ≥ï„ÇíÊèêÊ°à„ÄÇ„Éê„É≥„Éâ‰∏ãÈÉ®„Å´Âüã„ÇÅËæº„Åæ„Çå„Åü„Ç§„É°„Éº„Ç∏„Çª„É≥„Çµ„Å´„Çà„Å£„Å¶„ÄÅÁâ©‰Ωì„Å´Êé•Âú∞„Åó„ÅüÁä∂ÊÖã„Åß„ÅÆÊâãÈ¶ñ„ÅÆÁßªÂãïÈáè„ÇíÂèñÂæó„Åó„ÄÅÁâáÊâã„Åß„ÅÆ2Ê¨°ÂÖÉÊñπÂêë„ÅÆÂÖ•Âäõ„ÇíÂèØËÉΩ„Å´„Åó„Åü„ÄÇ",implement:"Android„ÄÅWear OS„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å®„Åó„Å¶ÂÆüË£Ö„ÄÇ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„Å®Ë∂ÖÂ∞èÂûã„ÉØ„Ç§„É§„É¨„Çπ„Éû„Ç¶„Çπ„Çí„Éö„Ç¢„É™„É≥„Ç∞„Åó„ÄÅËá™Á´ØÊú´„Å´ADB„Ç≥„Éû„É≥„Éâ„ÇíÁô∫Ë°å„Åô„Çã„Åì„Å®„Å´„Çà„Å£„Å¶„Éû„Ç¶„Çπ„Ç§„Éô„É≥„Éà„ÇíÁõ£Ë¶ñ„ÄÇ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„Å®„Éö„Ç¢„É™„É≥„Ç∞„Åï„Çå„Åü„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅ„Å´ÁßªÂãïÈáè„ÇíÈÄÅ‰ø°„Åó„Å¶„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÊìç‰Ωú„Åô„Çã„ÄÇ",keywords:["Android","Wear OS","Android Debug Bridge","Human Computer Interaction","smartwatch","image sensor","mouse"]},{name:"SoumuSSML",sub:"Ë¶ñË¶öÈöúÂÆ≥ËÄÖ„ÅÆ„Åü„ÇÅ„ÅÆÊñ∞„Åó„ÅÑÈõªÂ≠êÊõ∏Á±çÂΩ¢Âºè„Å´ÂØæÂøú„Åó„Åü„ÇØ„É©„Ç¶„ÉâÁ∑®ÈõÜ„Ç∑„Çπ„ÉÜ„É†",img:"project-SoumuSSML-16-9",category:"Web",text:"ÈõªÂ≠êÊõ∏Á±ç„ÇíË™≠„ÇÄÈöõ„Å™„Å©„Å´Áî®„ÅÑ„Çâ„Çå„Çã„ÄÅOSÁµÑ„ÅøËæº„Åø„ÅÆË™≠„Åø‰∏ä„ÅíÊ©üËÉΩ„Å´„ÅØ„Ç§„É≥„Éà„Éç„Éº„Ç∑„Éß„É≥„ÅÆÈñìÈÅï„ÅÑ„ÅåÊú™„Å†„Å´Â§ö„ÅèÊÆã„Å£„Å¶„ÅÑ„Çã„ÄÇ„Åù„ÅÆ„Åü„ÇÅÁèæÂú®„ÅØ„ÄÅÈü≥Â£∞ÂêàÊàê„Éû„Éº„ÇØ„Ç¢„ÉÉ„ÉóË®ÄË™ûSSML„ÇíÁî®„ÅÑ„Å¶„Ç§„É≥„Éà„Éç„Éº„Ç∑„Éß„É≥„ÇíÂá∫ÁâàÁ§æ„ÅÆ‰∫∫Èñì„ÅåÁ∑®ÈõÜ„Åó„ÄÅÂêàÊàê„Åï„Çå„ÅüÈü≥Â£∞„ÇíÈõªÂ≠êÊõ∏Á±ç„Å´ÂêåÂ∞Å„Åô„Çã„Å®„ÅÑ„ÅÜ„ÇÑ„ÇäÊñπ„Åå‰∏ÄËà¨ÁöÑ„Åß„ÅÇ„Çã„ÄÇ„Åù„Åì„Åß„ÄÅÈõªÂ≠êÊõ∏Á±ç„Å´Èü≥Â£∞„Éï„Ç°„Ç§„É´„Åß„ÅØ„Å™„Åè„Ç§„É≥„Éà„Éç„Éº„Ç∑„Éß„É≥„ÇíË®ò„Åó„Åü„Éá„Éº„Çø„ÇíÂêåÂ∞Å„Åô„ÇãÊñ∞„Åó„ÅÑÈõªÂ≠êÊõ∏Á±ç„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅÆÊèêÊ°à„ÇíË°å„Å£„Åü„ÄÇÂêåÊôÇ„Å´„ÄÅÂá∫ÁâàÁ§æ„ÅÆ‰∫∫Èñì„Åå„Ç§„É≥„Éà„Éç„Éº„Ç∑„Éß„É≥„ÇíÁ∑®ÈõÜ„Åó„ÄÅÈü≥Â£∞„Çí„Åù„ÅÆÈÉΩÂ∫¶Á¢∫Ë™ç„Åó„Å™„Åå„Çâ„ÇØ„É©„Ç¶„Éâ‰∏ä„ÅßÁ∑®ÈõÜ„Åô„Çã„Ç∑„Çπ„ÉÜ„É†„ÇíÊßãÁØâ„Åó„Åü„ÄÇÂÆüË®ºÂÆüÈ®ì„Å´„Çà„ÇäÂäπÊûúÁöÑ„Å™„ÉÑ„Éº„É´„Å®Ë™ç„ÇÅ„Çâ„Çå„ÄÅW3C„Å´„Çà„Å£„Å¶ÈõªÂ≠êÊõ∏Á±ç„ÅÆÂΩ¢ÂºèEPUB„ÅÆÊ¨°Êúü‰ªïÊßò„Å´Áõõ„ÇäËæº„Åæ„Çå„Åü„ÄÇÁ∑èÂãôÁúÅ„Å®„Ç¢„É´„Éê„Ç§„ÉàÂÖà„ÅÆÊÉ≥ÈöÜÁ§æ„Å®„ÅÆÂÖ±Âêå„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÄÇ",implement:"„ÉÅ„Éº„É†„ÅßÂà∂‰Ωú„ÄÇ„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÇíÊãÖÂΩì„Åó„Åü„ÄÇ„Çµ„Éº„Éê„ÅØPHP„ÅßÂÆüË£Ö„ÄÇ‰∏ª„Å™Ê©üËÉΩ„ÅØ‰ª•‰∏ã„ÅÆÈÄö„Çä„ÄÇÈõªÂ≠êÊõ∏Á±ç„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å®ÂàùÊúü„ÅÆÁô∫Èü≥Ë®òÂè∑„ÅÆËá™ÂãïÁîüÊàê„ÄÅÁ∑®ÈõÜ„Åó„ÅüÁô∫Èü≥Ë®òÂè∑Ôºà„Ç§„É≥„Éà„Éç„Éº„Ç∑„Éß„É≥„ÇíË°®„ÅôÔºâ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Å®DiffË°®Á§∫„ÄÅÁ∑®ÈõÜ„Åó„ÅüÈü≥Â£∞„Çí„Åù„ÅÆÂ†¥„ÅßÂÜçÁîü„ÄÅÊõ∏Á±çÂÜÖ„ÅÆÊñáÂ≠óÊ§úÁ¥¢„ÄÅÁ∑®ÈõÜËÄÖ„ÅÆÁ∑®ÈõÜÊ®©ÈôêÂ§âÊõ¥„ÄÅ„Ç≤„É©ÔºàÊ†°Ê≠£Áî®„ÅÆÂç∞Âà∑Ôºâ„ÅÆÂç∞Âà∑Ê©üËÉΩ„Å®„Ç≥„É°„É≥„Éà„ÅÆPDF„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÄÅÊõ∏Á±çÂÜÖ„ÅÆÁîªÂÉèË°®Á§∫„ÄÇ",keywords:["E-book","EPUB","SSML","W3C","co-authoring","version control"],links:{"ÂÆüË®ºÂÆüÈ®ìÂ†±ÂëäÊõ∏":"http://www.soumu.go.jp/main_content/000499711.pdf"}},{name:"BuddaBeautify",sub:"Â∑±„ÅÆÁ≤æÁ•û„ÇíÁ£®„Åè„Åì„Å®„ÅßË¶ã„ÅüÁõÆ„ÇÇÁæé„Åó„Åè„Å™„Çå„Çã„É°„Éá„Ç£„Ç¢„Ç¢„Éº„Éà‰ΩúÂìÅ",img:"project-BuddaBeautify-16-9",category:"Desktop",video:"X0SrajYh780",text:"Nam June Paik„Å´„Çà„ÇãTV-Buddha„Å´„Ç§„É≥„Çπ„Éë„Ç§„Ç¢„ÇíÂèó„Åë„ÄÅÂ∑±„ÅÆÁ≤æÁ•û„ÇíÁ£®„Åè„Åì„Å®„Å®ÁîªÂÉèÂá¶ÁêÜ„Å´„Çà„ÇãÁæéÈ°îÂåñ„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Åü‰ΩúÂìÅ„ÄÇ„Ç´„É°„É©„Å®„Éó„É≠„Ç∏„Çß„ÇØ„Çø„Å´„Çà„Å£„Å¶‰Ωú„Çâ„Çå„ÅüÊì¨‰ººÁöÑ„Å™Èè°„ÅÆÂâç„Åß„ÄÅ„É¶„Éº„Ç∂„ÅØÂ∫ßÁ¶Ö„ÇíË°å„ÅÜ„ÄÇË∫´‰Ωì„ÅÆ„Éñ„É¨„ÅåÂ∞ë„Å™„ÅÑÊôÇ„ÅØÂøÉ„ÅÆ‰π±„Çå„ÇÇÂ∞ë„Å™„ÅÑ„Å®Âà§Êñ≠„Åó„ÄÅÈè°„ÅÆËá™ÂàÜ„ÅÆÈ°î„Å´Âæê„ÄÖ„Å´ÁæéÈ°îÂåñÂá¶ÁêÜ„ÇíË°å„Å£„Å¶„ÅÑ„Åè„ÄÇ‰ΩìÈ®ìÊôÇÈñì„ÅØ1ÂàÜÁ®ãÂ∫¶„ÄÇ",implement:"„ÉÅ„Éº„É†„ÅßÂà∂‰Ωú„ÄÇProcessing„ÅßÂÆüË£Ö„ÄÇË∫´‰Ωì„Å´„Éñ„É¨„ÅÆÂ∫¶Âêà„ÅÑ„ÅØÂãï‰ΩìÈ®ìÁü•„Å´„Çà„Å£„Å¶Êï∞ÂÄ§Âåñ„Åô„Çã„ÄÇÂãï‰ΩìÊ§úÁü•„ÅÆÂÆüË£Ö„ÇíÊãÖÂΩì„ÄÇÈ°î„ÅÆÁæéÈ°îÂåñÂá¶ÁêÜ„Å´„ÅØ„ÄÅÈñ¢Â∑ù„Çâ[1]„ÅÆ„Ç¢„É´„Ç¥„É™„Ç∫„É†„ÇíÂà©Áî®„ÄÇ",keywords:["media art","motion detection","image processing"],links:{"Œµ-„Éï„Ç£„É´„Çø„ÇíÁî®„ÅÑ„Åü„É™„Ç¢„É´„Çø„Ç§„É†È°îÁîªÂÉèÁæéË¶≥Âåñ„Ç∑„Çπ„ÉÜ„É†":"https://www.ieice.org/iss/jpn/Publications/issposter_2015/data/pdf/ISS-P-78.pdf"}},{name:"Make if",sub:"„Ç´„Éº„Éâ„Çí‰∏¶„Åπ„Å¶ifÊñá„Çí„Å§„Åè„Çã„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞ÊïôËÇ≤„Ç´„Éº„Éâ„Ç≤„Éº„É†",img:"project-Makeif-16-9",category:"Design",text:"„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Çí„Åô„ÇãÊôÇ„Å´ÂøÖ„Åö‰Ωø„ÅÜ„ÄåifÊñá„Äç„Çí„Ç´„Éº„Éâ„ÅßÈÅä„Å≥„Å™„Åå„ÇâÂ≠¶„Åπ„Çã„Ç≤„Éº„É†„ÄÇ„ÉÜ„Ç≠„Çπ„Éà„Ç®„Éá„Ç£„Çø„ÇíÊ®°„Åó„Åü„Éó„É¨„Ç§„Éû„ÉÉ„Éà„ÅÆ‰∏ä„Å´È†ÜÁï™„Å´„Ç´„Éº„Éâ„ÇíÁΩÆ„ÅÑ„Å¶„ÅÑ„Åç„ÄÅifÊñá„ÅåÂÆåÊàê„Åô„Çã„Å®Êù°‰ª∂ÂàÜÂ≤ê„Å´„Çà„Å£„Å¶„Ç´„Éº„Éâ„ÇíÂºï„Åã„Å™„Åè„Å¶„ÅØ„Å™„Çâ„Å™„ÅÑ„ÄÇÊó©„ÅèÊâãÊú≠„Çí‰Ωø„ÅÑÂàá„Å£„Åü‰∫∫„ÅåÂãùÂà©„ÄÇ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Êú™ÁµåÈ®ìËÄÖ„Åß„ÇÇÈÅä„Å∂„Åì„Å®„ÅåÂèØËÉΩ„ÄÇ2017Âπ¥„Å´„Ç≤„Éº„É†„Éû„Éº„Ç±„ÉÉ„Éà„ÄÅÂèä„Å≥„Ç≥„Éü„ÉÉ„ÇØ„Éû„Éº„Ç±„ÉÉ„Éà„Å´„Å¶È†íÂ∏É„ÄÇ",implement:"„Ç¢„Éä„É≠„Ç∞„Ç≤„Éº„É†„Çµ„Éº„ÇØ„É´fumblewaalsÔºà„Éï„Ç°„É≥„Éñ„É´„ÉØ„Éº„É´„ÇπÔºâ„ÅßÂà∂‰Ωú„ÄÇ‰∏ª„Å´„Éá„Ç∂„Ç§„É≥„ÇíÊãÖÂΩì„ÄÇAdobe Illustrator„Çí‰ΩøÁî®„ÄÇ",keywords:["programming","card game","analog game"],links:{"ÂïÜÂìÅË©≥Á¥∞„Éö„Éº„Ç∏":"http://fumblewaals.com/portfolio/make-if/",fumblewaals:"http://fumblewaals.com"}}]},function(e,t,i){"use strict";i.r(t);var n,a,r,s,o=i(0),l=i.n(o),u=i(4),c=i.n(u),d=/^.+?\/\/+[^/]+/,f="EventListener",h="remove"+f,p="add"+f,m="hasAttribute",v="popstate",g="hashchange",y="trigger",_=3,w="undefined"!=typeof window&&window,b="undefined"!=typeof document&&document,k=w&&history,x=w&&(k.location||w.location),M=N.prototype,S=b&&b.ontouchstart?"touchstart":"click",D=c()(),O=!1,j=!1,Y=[],T=0;function P(e){return e.split(/[/?#]/)}function C(e,t){var i=t.replace(/\?/g,"\\?").replace(/\*/g,"([^/?#]+?)").replace(/\.\./,".*"),r=new RegExp("^"+i+"$"),n=e.match(r);if(n)return n.slice(1)}function A(e){var t,i,r;t=H,i=1,n=function(){clearTimeout(r),r=setTimeout(t,i)},w[p](v,n),w[p](g,n),b[p](S,I),e&&H(!0)}function N(){this.$=[],c()(this),D.on("stop",this.s.bind(this)),D.on("emit",this.e.bind(this))}function W(e){return e.replace(/^\/|\/$/,"")}function L(e){return"string"==typeof e}function E(e){return(e||x.href).replace(d,"")}function R(e){var t=V._.base;return"#"===t[0]?(e||x.href||"").split(t)[1]||"":(x?E(e):e||"").replace(t,"")}function H(t){var e=0===T;if(!(_<=T)&&(T++,Y.push(function(){var e=R();!t&&e===a||(D[y]("emit",e),a=e)}),e)){for(var i;i=Y.shift();)i();T=0}}function I(e){if(!(1!==e.which||e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){for(var t=e.target;t&&"A"!==t.nodeName;)t=t.parentNode;if(t&&"A"===t.nodeName&&!t[m]("download")&&t[m]("href")&&(!t.target||"_self"===t.target)&&-1!==t.href.indexOf(x.href.match(d)[0])){var i=V._.base;t.href!==x.href&&(t.href.split("#")[0]===x.href.split("#")[0]||"#"!==i[0]&&0!==E(t.href).indexOf(i)||"#"===i[0]&&t.href.split(i)[0]!==x.href.split(i)[0]||!F(R(t.href),t.title||b.title))||e.preventDefault()}}}function F(e,t,i){return k?(e=V._.base+W(e),t=t||b.title,i?k.replaceState(null,t,e):k.pushState(null,t,e),b.title=t,j=!1,H(),j):D[y]("emit",R(e))}M.m=function(e,t,i){!L(e)||t&&!L(t)?t?this.r(e,t):this.r("@",e):F(e,t,i||!1)},M.s=function(){this.off("*"),this.$=[]},M.e=function(i){this.$.concat("@").some(function(e){var t=("@"===e?r:s)(W(i),W(e));if(void 0!==t)return this[y].apply(null,[e].concat(t)),j=!0},this)},M.r=function(e,t){"@"!==e&&(e="/"+W(e),this.$.push(e)),this.on(e,t)};var U=new N,V=U.m.bind(U);V._={base:null,getPathFromBase:R},V.create=function(){var e=new N,t=e.m.bind(e);return t.stop=e.s.bind(e),t},V.base=function(e){V._.base=e||"#",a=R()},V.exec=function(){H(!0)},V.parser=function(e,t){e||t||(r=P,s=C),e&&(r=e),t&&(s=t)},V.query=function(){var r={};return(x.href||a).replace(/[?&](.+?)=([^&]*)/g,function(e,t,i){r[t]=i}),r},V.stop=function(){O&&(w&&(w[h](v,n),w[h](g,n),b[h](S,I)),D[y]("stop"),O=!1)},V.start=function(e){O||(w&&("interactive"===document.readyState||"complete"===document.readyState?A(e):document.onreadystatechange=function(){"interactive"===document.readyState&&setTimeout(function(){A(e)},1)}),O=!0)},V.base(),V.parser();var G=V;l.a.tag2("router","<yield></yield>","","",function(e){var i=this;this.route=G.create(),this.select=function(t){[].concat(i.tags.route).forEach(function(e){return e.show=e===t})},this.on("mount",function(){window.setTimeout(function(){return G.start(!0)},0)}),this.on("unmount",function(){i.route.stop()})}),l.a.tag2("route",'<virtual if="{show}"><yield></yield></virtual>',"","",function(e){var r=this;this.show=!1;function t(){for(var i=[],e=arguments.length;e--;)i[e]=arguments[e];r.one("updated",function(){var t;t=r.tags,Object.keys(t).map(function(e){return t[e]}).reduce(function(e,t){return e.concat(t)},[]).forEach(function(e){e.trigger.apply(e,["route"].concat(i)),e.update()})}),r.parent.select(r),r.parent.update()}var i=window&&window.route&&window.route._?window.route._.getPathFromBase:function(){return""};e.path===i()&&setTimeout(t,0),this.parent.route(e.path,t)});t.default=G},function(e,t,i){"use strict";var r=a(i(0)),n=a(i(1));a(i(11));function a(e){return e&&e.__esModule?e:{default:e}}r.default.mount(".root","app"),n.default.init()},function(e,t,i){"use strict";r(i(9)),r(i(12)),r(i(21)),r(i(25)),r(i(26)),r(i(28));function r(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("app",'<router> <route path=""> <top></top> </route> <route path="profile.."> <profile></profile> </route> <route path="projects/*"> <projectdetail></projectDetail> </route> <route path="projects.."> <projectall></projectAll> </route> <route path=".."> <other></other> </route> </router>',"","",function(e){})},function(e,t,i){"use strict";r(i(13)),r(i(14)),r(i(6)),r(i(7)),r(i(17)),r(i(18)),r(i(19)),r(i(20));function r(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("top",'<first></first> <section> <div class="container"> <h2 class="section-title">About Me</h2> <about></about> <more text="detail" title="View detailed profile" link="#profile"></more> </div> </section> <section> <div class="container"> <h2 class="section-title">Projects</h2> <projects limit="3"></projects> <more title="View all projects" link="#projects"></more> </div> </section> <section> <div class="container"> <h2 class="section-title">Awards</h2> <awards></awards> <h2 class="section-title">Publications</h2> <publications></publications> <h2 class="section-title">Clubs</h2> <clubs></clubs> </div> </section> <footer></footer>','top,[data-is="top"]{ display: block; min-height: 100vh; } top > section:nth-child(2n),[data-is="top"] > section:nth-child(2n){ background: #2b2b2b; color: #efefef; } top > section:nth-child(2n+1),[data-is="top"] > section:nth-child(2n+1){ background: #eeeeee; color: #222222; }',"",function(e){this.on("route",function(){var e=window.location.hash;void 0===window.scrolls[""+e]?window.scroll(0,0):window.scroll(0,window.scrolls[""+e])})})},function(e,t,i){"use strict";var r,n=i(5);(r=n)&&r.__esModule;i(0).tag2("first",'<nav></nav> <div class="container"> <h1>Raika Toriyama</h1> <p> Web / Android Developer</p> <social></social> </div> <div class="container"> <div class="arrow"><i class="fas fa-chevron-down fa-3x"></i></div> </div>','first,[data-is="first"]{ text-align: center; background: #1a1819; color: white; min-height: 100vh; display: flex; flex-direction: column; justify-content: space-around; } first > nav,[data-is="first"] > nav{ margin: 0 auto; width: 100%; max-width: calc(1200px * 0.8); line-height: 3rem; } first > nav > ul,[data-is="first"] > nav > ul{ display: flex; justify-content: space-around; } first > nav > ul > li,[data-is="first"] > nav > ul > li{ display: inline-block; } first > .container > h1,[data-is="first"] > .container > h1{ font-size: calc(1.0rem + 250%); margin: 0; } first > .container > p,[data-is="first"] > .container > p{ font-size: 1.5rem; font-family: serif; margin-top: 1rem; } first > .container .arrow,[data-is="first"] > .container .arrow{ display: inline-block; } @media (max-width: 768px) { first .container > h1,[data-is="first"] .container > h1{ font-size: 2.5rem; } first .container > p,[data-is="first"] .container > p{ font-size: 1.2rem; margin-top: 0.5rem; } }',"",function(e){})},function(e,t,i){"use strict";var r,n=i(5);(r=n)&&r.__esModule;i(0).tag2("footer",'<div class="container"> <social></social> <p>¬© 2018 pvcresin</p> </div>','footer,[data-is="footer"]{ display: block; background: #0f0f0f; color: white; } footer > .container,[data-is="footer"] > .container{ text-align: center; padding: 1rem 0; } footer > .container > p,[data-is="footer"] > .container > p{ color: #525252; padding-bottom: 1rem; }',"",function(e){})},function(e,t,i){(function(Ha){var Ia;Ha.exports=function(){"use strict";var t,n;function u(){return t.apply(null,arguments)}function e(e){t=e}function s(e){return e instanceof Array||Object.prototype.toString.call(e)==="[object Array]"}function o(e){return e!=null&&Object.prototype.toString.call(e)==="[object Object]"}function l(e){if(Object.getOwnPropertyNames){return Object.getOwnPropertyNames(e).length===0}else{var t;for(t in e){if(e.hasOwnProperty(t)){return false}}return true}}function a(e){return e===void 0}function c(e){return typeof e==="number"||Object.prototype.toString.call(e)==="[object Number]"}function d(e){return e instanceof Date||Object.prototype.toString.call(e)==="[object Date]"}function i(e,t){var i=[],r;for(r=0;r<e.length;++r){i.push(t(e[r],r))}return i}function f(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function h(e,t){for(var i in t){if(f(t,i)){e[i]=t[i]}}if(f(t,"toString")){e.toString=t.toString}if(f(t,"valueOf")){e.valueOf=t.valueOf}return e}function p(e,t,i,r){return zi(e,t,i,r,true).utc()}function r(){return{empty:false,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:false,invalidMonth:null,invalidFormat:false,userInvalidated:false,iso:false,parsedDateParts:[],meridiem:null,rfc2822:false,weekdayMismatch:false}}function m(e){if(e._pf==null){e._pf=r()}return e._pf}if(Array.prototype.some){n=Array.prototype.some}else{n=function(e){var t=Object(this);var i=t.length>>>0;for(var r=0;r<i;r++){if(r in t&&e.call(this,t[r],r,t)){return true}}return false}}function v(e){if(e._isValid==null){var t=m(e);var i=n.call(t.parsedDateParts,function(e){return e!=null});var r=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&i);if(e._strict){r=r&&t.charsLeftOver===0&&t.unusedTokens.length===0&&t.bigHour===undefined}if(Object.isFrozen==null||!Object.isFrozen(e)){e._isValid=r}else{return r}}return e._isValid}function g(e){var t=p(NaN);if(e!=null){h(m(t),e)}else{m(t).userInvalidated=true}return t}var y=u.momentProperties=[];function _(e,t){var i,r,n;if(!a(t._isAMomentObject)){e._isAMomentObject=t._isAMomentObject}if(!a(t._i)){e._i=t._i}if(!a(t._f)){e._f=t._f}if(!a(t._l)){e._l=t._l}if(!a(t._strict)){e._strict=t._strict}if(!a(t._tzm)){e._tzm=t._tzm}if(!a(t._isUTC)){e._isUTC=t._isUTC}if(!a(t._offset)){e._offset=t._offset}if(!a(t._pf)){e._pf=m(t)}if(!a(t._locale)){e._locale=t._locale}if(y.length>0){for(i=0;i<y.length;i++){r=y[i];n=t[r];if(!a(n)){e[r]=n}}}return e}var w=false;function b(e){_(this,e);this._d=new Date(e._d!=null?e._d.getTime():NaN);if(!this.isValid()){this._d=new Date(NaN)}if(w===false){w=true;u.updateOffset(this);w=false}}function k(e){return e instanceof b||e!=null&&e._isAMomentObject!=null}function x(e){if(e<0){return Math.ceil(e)||0}else{return Math.floor(e)}}function M(e){var t=+e,i=0;if(t!==0&&isFinite(t)){i=x(t)}return i}function S(e,t,i){var r=Math.min(e.length,t.length),n=Math.abs(e.length-t.length),a=0,s;for(s=0;s<r;s++){if(i&&e[s]!==t[s]||!i&&M(e[s])!==M(t[s])){a++}}return a+n}function D(e){if(u.suppressDeprecationWarnings===false&&typeof console!=="undefined"&&console.warn){console.warn("Deprecation warning: "+e)}}function O(n,a){var s=true;return h(function(){if(u.deprecationHandler!=null){u.deprecationHandler(null,n)}if(s){var e=[];var t;for(var i=0;i<arguments.length;i++){t="";if(typeof arguments[i]==="object"){t+="\n["+i+"] ";for(var r in arguments[0]){t+=r+": "+arguments[0][r]+", "}t=t.slice(0,-2)}else{t=arguments[i]}e.push(t)}D(n+"\nArguments: "+Array.prototype.slice.call(e).join("")+"\n"+(new Error).stack);s=false}return a.apply(this,arguments)},a)}var j={},Y;function T(e,t){if(u.deprecationHandler!=null){u.deprecationHandler(e,t)}if(!j[e]){D(t);j[e]=true}}function P(e){return e instanceof Function||Object.prototype.toString.call(e)==="[object Function]"}function C(e){var t,i;for(i in e){t=e[i];if(P(t)){this[i]=t}else{this["_"+i]=t}}this._config=e;this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function A(e,t){var i=h({},e),r;for(r in t){if(f(t,r)){if(o(e[r])&&o(t[r])){i[r]={};h(i[r],e[r]);h(i[r],t[r])}else if(t[r]!=null){i[r]=t[r]}else{delete i[r]}}}for(r in e){if(f(e,r)&&!f(t,r)&&o(e[r])){i[r]=h({},i[r])}}return i}function N(e){if(e!=null){this.set(e)}}if(u.suppressDeprecationWarnings=false,u.deprecationHandler=null,Object.keys){Y=Object.keys}else{Y=function(e){var t,i=[];for(t in e){if(f(e,t)){i.push(t)}}return i}}var W={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"};function L(e,t,i){var r=this._calendar[e]||this._calendar["sameElse"];return P(r)?r.call(t,i):r}var E={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};function R(e){var t=this._longDateFormat[e],i=this._longDateFormat[e.toUpperCase()];if(t||!i){return t}this._longDateFormat[e]=i.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)});return this._longDateFormat[e]}var H="Invalid date";function I(){return this._invalidDate}var F="%d",U=/\d{1,2}/;function V(e){return this._ordinal.replace("%d",e)}var G={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function z(e,t,i,r){var n=this._relativeTime[i];return P(n)?n(e,t,i,r):n.replace(/%d/i,e)}function $(e,t){var i=this._relativeTime[e>0?"future":"past"];return P(i)?i(t):i.replace(/%s/i,t)}var B={};function Z(e,t){var i=e.toLowerCase();B[i]=B[i+"s"]=B[t]=e}function q(e){return typeof e==="string"?B[e]||B[e.toLowerCase()]:undefined}function J(e){var t={},i,r;for(r in e){if(f(e,r)){i=q(r);if(i){t[i]=e[r]}}}return t}var K={};function Q(e,t){K[e]=t}function X(e){var t=[];for(var i in e){t.push({unit:i,priority:K[i]})}t.sort(function(e,t){return e.priority-t.priority});return t}function ee(e,t,i){var r=""+Math.abs(e),n=t-r.length,a=e>=0;return(a?i?"+":"":"-")+Math.pow(10,Math.max(0,n)).toString().substr(1)+r}var te=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,ie=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,re={},ne={};function ae(e,t,i,r){var n=r;if(typeof r==="string"){n=function(){return this[r]()}}if(e){ne[e]=n}if(t){ne[t[0]]=function(){return ee(n.apply(this,arguments),t[1],t[2])}}if(i){ne[i]=function(){return this.localeData().ordinal(n.apply(this,arguments),e)}}}function se(e){if(e.match(/\[[\s\S]/)){return e.replace(/^\[|\]$/g,"")}return e.replace(/\\/g,"")}function oe(r){var n=r.match(te),e,a;for(e=0,a=n.length;e<a;e++){if(ne[n[e]]){n[e]=ne[n[e]]}else{n[e]=se(n[e])}}return function(e){var t="",i;for(i=0;i<a;i++){t+=P(n[i])?n[i].call(e,r):n[i]}return t}}function le(e,t){if(!e.isValid()){return e.localeData().invalidDate()}t=ue(t,e.localeData());re[t]=re[t]||oe(t);return re[t](e)}function ue(e,t){var i=5;function r(e){return t.longDateFormat(e)||e}ie.lastIndex=0;while(i>=0&&ie.test(e)){e=e.replace(ie,r);ie.lastIndex=0;i-=1}return e}var ce=/\d/,de=/\d\d/,fe=/\d{3}/,he=/\d{4}/,pe=/[+-]?\d{6}/,me=/\d\d?/,ve=/\d\d\d\d?/,ge=/\d\d\d\d\d\d?/,ye=/\d{1,3}/,_e=/\d{1,4}/,we=/[+-]?\d{1,6}/,be=/\d+/,ke=/[+-]?\d+/,xe=/Z|[+-]\d\d:?\d\d/gi,Me=/Z|[+-]\d\d(?::?\d\d)?/gi,Se=/[+-]?\d+(\.\d{1,3})?/,De=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,Oe={};function je(e,i,r){Oe[e]=P(i)?i:function(e,t){return e&&r?r:i}}function Ye(e,t){if(!f(Oe,e)){return new RegExp(Te(e))}return Oe[e](t._strict,t._locale)}function Te(e){return Pe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,i,r,n){return t||i||r||n}))}function Pe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var Ce={};function Ae(e,i){var t,r=i;if(typeof e==="string"){e=[e]}if(c(i)){r=function(e,t){t[i]=M(e)}}for(t=0;t<e.length;t++){Ce[e[t]]=r}}function Ne(e,n){Ae(e,function(e,t,i,r){i._w=i._w||{};n(e,i._w,i,r)})}function We(e,t,i){if(t!=null&&f(Ce,e)){Ce[e](t,i._a,i,e)}}var Le=0,Ee=1,Re=2,He=3,Ie=4,Fe=5,Ue=6,Ve=7,Ge=8;function ze(e){return $e(e)?366:365}function $e(e){return e%4===0&&e%100!==0||e%400===0}ae("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),ae(0,["YY",2],0,function(){return this.year()%100}),ae(0,["YYYY",4],0,"year"),ae(0,["YYYYY",5],0,"year"),ae(0,["YYYYYY",6,true],0,"year"),Z("year","y"),Q("year",1),je("Y",ke),je("YY",me,de),je("YYYY",_e,he),je("YYYYY",we,pe),je("YYYYYY",we,pe),Ae(["YYYYY","YYYYYY"],Le),Ae("YYYY",function(e,t){t[Le]=e.length===2?u.parseTwoDigitYear(e):M(e)}),Ae("YY",function(e,t){t[Le]=u.parseTwoDigitYear(e)}),Ae("Y",function(e,t){t[Le]=parseInt(e,10)}),u.parseTwoDigitYear=function(e){return M(e)+(M(e)>68?1900:2e3)};var Be=Je("FullYear",true),Ze;function qe(){return $e(this.year())}function Je(t,i){return function(e){if(e!=null){Qe(this,t,e);u.updateOffset(this,i);return this}else{return Ke(this,t)}}}function Ke(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Qe(e,t,i){if(e.isValid()&&!isNaN(i)){if(t==="FullYear"&&$e(e.year())&&e.month()===1&&e.date()===29){e._d["set"+(e._isUTC?"UTC":"")+t](i,e.month(),it(i,e.month()))}else{e._d["set"+(e._isUTC?"UTC":"")+t](i)}}}function Xe(e){e=q(e);if(P(this[e])){return this[e]()}return this}function et(e,t){if(typeof e==="object"){e=J(e);var i=X(e);for(var r=0;r<i.length;r++){this[i[r].unit](e[i[r].unit])}}else{e=q(e);if(P(this[e])){return this[e](t)}}return this}function tt(e,t){return(e%t+t)%t}if(Array.prototype.indexOf){Ze=Array.prototype.indexOf}else{Ze=function(e){var t;for(t=0;t<this.length;++t){if(this[t]===e){return t}}return-1}}function it(e,t){if(isNaN(e)||isNaN(t)){return NaN}var i=tt(t,12);e+=(t-i)/12;return i===1?$e(e)?29:28:31-i%7%2}ae("M",["MM",2],"Mo",function(){return this.month()+1}),ae("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),ae("MMMM",0,0,function(e){return this.localeData().months(this,e)}),Z("month","M"),Q("month",8),je("M",me),je("MM",me,de),je("MMM",function(e,t){return t.monthsShortRegex(e)}),je("MMMM",function(e,t){return t.monthsRegex(e)}),Ae(["M","MM"],function(e,t){t[Ee]=M(e)-1}),Ae(["MMM","MMMM"],function(e,t,i,r){var n=i._locale.monthsParse(e,r,i._strict);if(n!=null){t[Ee]=n}else{m(i).invalidMonth=e}});var rt=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,nt="January_February_March_April_May_June_July_August_September_October_November_December".split("_");function at(e,t){if(!e){return s(this._months)?this._months:this._months["standalone"]}return s(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||rt).test(t)?"format":"standalone"][e.month()]}var st="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function ot(e,t){if(!e){return s(this._monthsShort)?this._monthsShort:this._monthsShort["standalone"]}return s(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[rt.test(t)?"format":"standalone"][e.month()]}function lt(e,t,i){var r,n,a,s=e.toLocaleLowerCase();if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[];for(r=0;r<12;++r){a=p([2e3,r]);this._shortMonthsParse[r]=this.monthsShort(a,"").toLocaleLowerCase();this._longMonthsParse[r]=this.months(a,"").toLocaleLowerCase()}}if(i){if(t==="MMM"){n=Ze.call(this._shortMonthsParse,s);return n!==-1?n:null}else{n=Ze.call(this._longMonthsParse,s);return n!==-1?n:null}}else{if(t==="MMM"){n=Ze.call(this._shortMonthsParse,s);if(n!==-1){return n}n=Ze.call(this._longMonthsParse,s);return n!==-1?n:null}else{n=Ze.call(this._longMonthsParse,s);if(n!==-1){return n}n=Ze.call(this._shortMonthsParse,s);return n!==-1?n:null}}}function ut(e,t,i){var r,n,a;if(this._monthsParseExact){return lt.call(this,e,t,i)}if(!this._monthsParse){this._monthsParse=[];this._longMonthsParse=[];this._shortMonthsParse=[]}for(r=0;r<12;r++){n=p([2e3,r]);if(i&&!this._longMonthsParse[r]){this._longMonthsParse[r]=new RegExp("^"+this.months(n,"").replace(".","")+"$","i");this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(n,"").replace(".","")+"$","i")}if(!i&&!this._monthsParse[r]){a="^"+this.months(n,"")+"|^"+this.monthsShort(n,"");this._monthsParse[r]=new RegExp(a.replace(".",""),"i")}if(i&&t==="MMMM"&&this._longMonthsParse[r].test(e)){return r}else if(i&&t==="MMM"&&this._shortMonthsParse[r].test(e)){return r}else if(!i&&this._monthsParse[r].test(e)){return r}}}function ct(e,t){var i;if(!e.isValid()){return e}if(typeof t==="string"){if(/^\d+$/.test(t)){t=M(t)}else{t=e.localeData().monthsParse(t);if(!c(t)){return e}}}i=Math.min(e.date(),it(e.year(),t));e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,i);return e}function dt(e){if(e!=null){ct(this,e);u.updateOffset(this,true);return this}else{return Ke(this,"Month")}}function ft(){return it(this.year(),this.month())}var ht=De;function pt(e){if(this._monthsParseExact){if(!f(this,"_monthsRegex")){gt.call(this)}if(e){return this._monthsShortStrictRegex}else{return this._monthsShortRegex}}else{if(!f(this,"_monthsShortRegex")){this._monthsShortRegex=ht}return this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex}}var mt=De;function vt(e){if(this._monthsParseExact){if(!f(this,"_monthsRegex")){gt.call(this)}if(e){return this._monthsStrictRegex}else{return this._monthsRegex}}else{if(!f(this,"_monthsRegex")){this._monthsRegex=mt}return this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex}}function gt(){function e(e,t){return t.length-e.length}var t=[],i=[],r=[],n,a;for(n=0;n<12;n++){a=p([2e3,n]);t.push(this.monthsShort(a,""));i.push(this.months(a,""));r.push(this.months(a,""));r.push(this.monthsShort(a,""))}t.sort(e);i.sort(e);r.sort(e);for(n=0;n<12;n++){t[n]=Pe(t[n]);i[n]=Pe(i[n])}for(n=0;n<24;n++){r[n]=Pe(r[n])}this._monthsRegex=new RegExp("^("+r.join("|")+")","i");this._monthsShortRegex=this._monthsRegex;this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i");this._monthsShortStrictRegex=new RegExp("^("+t.join("|")+")","i")}function yt(e,t,i,r,n,a,s){var o;if(e<100&&e>=0){o=new Date(e+400,t,i,r,n,a,s);if(isFinite(o.getFullYear())){o.setFullYear(e)}}else{o=new Date(e,t,i,r,n,a,s)}return o}function _t(e){var t;if(e<100&&e>=0){var i=Array.prototype.slice.call(arguments);i[0]=e+400;t=new Date(Date.UTC.apply(null,i));if(isFinite(t.getUTCFullYear())){t.setUTCFullYear(e)}}else{t=new Date(Date.UTC.apply(null,arguments))}return t}function wt(e,t,i){var r=7+t-i,n=(7+_t(e,0,r).getUTCDay()-t)%7;return-n+r-1}function bt(e,t,i,r,n){var a=(7+i-r)%7,s=wt(e,r,n),o=1+7*(t-1)+a+s,l,u;if(o<=0){l=e-1;u=ze(l)+o}else if(o>ze(e)){l=e+1;u=o-ze(e)}else{l=e;u=o}return{year:l,dayOfYear:u}}function kt(e,t,i){var r=wt(e.year(),t,i),n=Math.floor((e.dayOfYear()-r-1)/7)+1,a,s;if(n<1){s=e.year()-1;a=n+xt(s,t,i)}else if(n>xt(e.year(),t,i)){a=n-xt(e.year(),t,i);s=e.year()+1}else{s=e.year();a=n}return{week:a,year:s}}function xt(e,t,i){var r=wt(e,t,i),n=wt(e+1,t,i);return(ze(e)-r+n)/7}function Mt(e){return kt(e,this._week.dow,this._week.doy).week}ae("w",["ww",2],"wo","week"),ae("W",["WW",2],"Wo","isoWeek"),Z("week","w"),Z("isoWeek","W"),Q("week",5),Q("isoWeek",5),je("w",me),je("ww",me,de),je("W",me),je("WW",me,de),Ne(["w","ww","W","WW"],function(e,t,i,r){t[r.substr(0,1)]=M(e)});var St={dow:0,doy:6};function Dt(){return this._week.dow}function Ot(){return this._week.doy}function jt(e){var t=this.localeData().week(this);return e==null?t:this.add((e-t)*7,"d")}function Yt(e){var t=kt(this,1,4).week;return e==null?t:this.add((e-t)*7,"d")}function Tt(e,t){if(typeof e!=="string"){return e}if(!isNaN(e)){return parseInt(e,10)}e=t.weekdaysParse(e);if(typeof e==="number"){return e}return null}function Pt(e,t){if(typeof e==="string"){return t.weekdaysParse(e)%7||7}return isNaN(e)?null:e}function Ct(e,t){return e.slice(t,7).concat(e.slice(0,t))}ae("d",0,"do","day"),ae("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),ae("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),ae("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),ae("e",0,0,"weekday"),ae("E",0,0,"isoWeekday"),Z("day","d"),Z("weekday","e"),Z("isoWeekday","E"),Q("day",11),Q("weekday",11),Q("isoWeekday",11),je("d",me),je("e",me),je("E",me),je("dd",function(e,t){return t.weekdaysMinRegex(e)}),je("ddd",function(e,t){return t.weekdaysShortRegex(e)}),je("dddd",function(e,t){return t.weekdaysRegex(e)}),Ne(["dd","ddd","dddd"],function(e,t,i,r){var n=i._locale.weekdaysParse(e,r,i._strict);if(n!=null){t.d=n}else{m(i).invalidWeekday=e}}),Ne(["d","e","E"],function(e,t,i,r){t[r]=M(e)});var At="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");function Nt(e,t){var i=s(this._weekdays)?this._weekdays:this._weekdays[e&&e!==true&&this._weekdays.isFormat.test(t)?"format":"standalone"];return e===true?Ct(i,this._week.dow):e?i[e.day()]:i}var Wt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");function Lt(e){return e===true?Ct(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort}var Et="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function Rt(e){return e===true?Ct(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin}function Ht(e,t,i){var r,n,a,s=e.toLocaleLowerCase();if(!this._weekdaysParse){this._weekdaysParse=[];this._shortWeekdaysParse=[];this._minWeekdaysParse=[];for(r=0;r<7;++r){a=p([2e3,1]).day(r);this._minWeekdaysParse[r]=this.weekdaysMin(a,"").toLocaleLowerCase();this._shortWeekdaysParse[r]=this.weekdaysShort(a,"").toLocaleLowerCase();this._weekdaysParse[r]=this.weekdays(a,"").toLocaleLowerCase()}}if(i){if(t==="dddd"){n=Ze.call(this._weekdaysParse,s);return n!==-1?n:null}else if(t==="ddd"){n=Ze.call(this._shortWeekdaysParse,s);return n!==-1?n:null}else{n=Ze.call(this._minWeekdaysParse,s);return n!==-1?n:null}}else{if(t==="dddd"){n=Ze.call(this._weekdaysParse,s);if(n!==-1){return n}n=Ze.call(this._shortWeekdaysParse,s);if(n!==-1){return n}n=Ze.call(this._minWeekdaysParse,s);return n!==-1?n:null}else if(t==="ddd"){n=Ze.call(this._shortWeekdaysParse,s);if(n!==-1){return n}n=Ze.call(this._weekdaysParse,s);if(n!==-1){return n}n=Ze.call(this._minWeekdaysParse,s);return n!==-1?n:null}else{n=Ze.call(this._minWeekdaysParse,s);if(n!==-1){return n}n=Ze.call(this._weekdaysParse,s);if(n!==-1){return n}n=Ze.call(this._shortWeekdaysParse,s);return n!==-1?n:null}}}function It(e,t,i){var r,n,a;if(this._weekdaysParseExact){return Ht.call(this,e,t,i)}if(!this._weekdaysParse){this._weekdaysParse=[];this._minWeekdaysParse=[];this._shortWeekdaysParse=[];this._fullWeekdaysParse=[]}for(r=0;r<7;r++){n=p([2e3,1]).day(r);if(i&&!this._fullWeekdaysParse[r]){this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(n,"").replace(".","\\.?")+"$","i");this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(n,"").replace(".","\\.?")+"$","i");this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(n,"").replace(".","\\.?")+"$","i")}if(!this._weekdaysParse[r]){a="^"+this.weekdays(n,"")+"|^"+this.weekdaysShort(n,"")+"|^"+this.weekdaysMin(n,"");this._weekdaysParse[r]=new RegExp(a.replace(".",""),"i")}if(i&&t==="dddd"&&this._fullWeekdaysParse[r].test(e)){return r}else if(i&&t==="ddd"&&this._shortWeekdaysParse[r].test(e)){return r}else if(i&&t==="dd"&&this._minWeekdaysParse[r].test(e)){return r}else if(!i&&this._weekdaysParse[r].test(e)){return r}}}function Ft(e){if(!this.isValid()){return e!=null?this:NaN}var t=this._isUTC?this._d.getUTCDay():this._d.getDay();if(e!=null){e=Tt(e,this.localeData());return this.add(e-t,"d")}else{return t}}function Ut(e){if(!this.isValid()){return e!=null?this:NaN}var t=(this.day()+7-this.localeData()._week.dow)%7;return e==null?t:this.add(e-t,"d")}function Vt(e){if(!this.isValid()){return e!=null?this:NaN}if(e!=null){var t=Pt(e,this.localeData());return this.day(this.day()%7?t:t-7)}else{return this.day()||7}}var Gt=De;function zt(e){if(this._weekdaysParseExact){if(!f(this,"_weekdaysRegex")){Kt.call(this)}if(e){return this._weekdaysStrictRegex}else{return this._weekdaysRegex}}else{if(!f(this,"_weekdaysRegex")){this._weekdaysRegex=Gt}return this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex}}var $t=De;function Bt(e){if(this._weekdaysParseExact){if(!f(this,"_weekdaysRegex")){Kt.call(this)}if(e){return this._weekdaysShortStrictRegex}else{return this._weekdaysShortRegex}}else{if(!f(this,"_weekdaysShortRegex")){this._weekdaysShortRegex=$t}return this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex}}var Zt=De,qt;function Jt(e){if(this._weekdaysParseExact){if(!f(this,"_weekdaysRegex")){Kt.call(this)}if(e){return this._weekdaysMinStrictRegex}else{return this._weekdaysMinRegex}}else{if(!f(this,"_weekdaysMinRegex")){this._weekdaysMinRegex=Zt}return this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex}}function Kt(){function e(e,t){return t.length-e.length}var t=[],i=[],r=[],n=[],a,s,o,l,u;for(a=0;a<7;a++){s=p([2e3,1]).day(a);o=this.weekdaysMin(s,"");l=this.weekdaysShort(s,"");u=this.weekdays(s,"");t.push(o);i.push(l);r.push(u);n.push(o);n.push(l);n.push(u)}t.sort(e);i.sort(e);r.sort(e);n.sort(e);for(a=0;a<7;a++){i[a]=Pe(i[a]);r[a]=Pe(r[a]);n[a]=Pe(n[a])}this._weekdaysRegex=new RegExp("^("+n.join("|")+")","i");this._weekdaysShortRegex=this._weekdaysRegex;this._weekdaysMinRegex=this._weekdaysRegex;this._weekdaysStrictRegex=new RegExp("^("+r.join("|")+")","i");this._weekdaysShortStrictRegex=new RegExp("^("+i.join("|")+")","i");this._weekdaysMinStrictRegex=new RegExp("^("+t.join("|")+")","i")}function Qt(){return this.hours()%12||12}function Xt(){return this.hours()||24}function ei(e,t){ae(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function ti(e,t){return t._meridiemParse}function ii(e){return(e+"").toLowerCase().charAt(0)==="p"}function ri(e,t,i){if(e>11){return i?"pm":"PM"}else{return i?"am":"AM"}}ae("H",["HH",2],0,"hour"),ae("h",["hh",2],0,Qt),ae("k",["kk",2],0,Xt),ae("hmm",0,0,function(){return""+Qt.apply(this)+ee(this.minutes(),2)}),ae("hmmss",0,0,function(){return""+Qt.apply(this)+ee(this.minutes(),2)+ee(this.seconds(),2)}),ae("Hmm",0,0,function(){return""+this.hours()+ee(this.minutes(),2)}),ae("Hmmss",0,0,function(){return""+this.hours()+ee(this.minutes(),2)+ee(this.seconds(),2)}),ei("a",true),ei("A",false),Z("hour","h"),Q("hour",13),je("a",ti),je("A",ti),je("H",me),je("h",me),je("k",me),je("HH",me,de),je("hh",me,de),je("kk",me,de),je("hmm",ve),je("hmmss",ge),je("Hmm",ve),je("Hmmss",ge),Ae(["H","HH"],He),Ae(["k","kk"],function(e,t,i){var r=M(e);t[He]=r===24?0:r}),Ae(["a","A"],function(e,t,i){i._isPm=i._locale.isPM(e);i._meridiem=e}),Ae(["h","hh"],function(e,t,i){t[He]=M(e);m(i).bigHour=true}),Ae("hmm",function(e,t,i){var r=e.length-2;t[He]=M(e.substr(0,r));t[Ie]=M(e.substr(r));m(i).bigHour=true}),Ae("hmmss",function(e,t,i){var r=e.length-4;var n=e.length-2;t[He]=M(e.substr(0,r));t[Ie]=M(e.substr(r,2));t[Fe]=M(e.substr(n));m(i).bigHour=true}),Ae("Hmm",function(e,t,i){var r=e.length-2;t[He]=M(e.substr(0,r));t[Ie]=M(e.substr(r))}),Ae("Hmmss",function(e,t,i){var r=e.length-4;var n=e.length-2;t[He]=M(e.substr(0,r));t[Ie]=M(e.substr(r,2));t[Fe]=M(e.substr(n))});var ni=Je("Hours",true),ai={calendar:W,longDateFormat:E,invalidDate:H,ordinal:F,dayOfMonthOrdinalParse:U,relativeTime:G,months:nt,monthsShort:st,week:St,weekdays:At,weekdaysMin:Et,weekdaysShort:Wt,meridiemParse:/[ap]\.?m?\.?/i},si={},oi={},li;function ui(e){return e?e.toLowerCase().replace("_","-"):e}function ci(e){var t=0,i,r,n,a;while(t<e.length){a=ui(e[t]).split("-");i=a.length;r=ui(e[t+1]);r=r?r.split("-"):null;while(i>0){n=di(a.slice(0,i).join("-"));if(n){return n}if(r&&r.length>=i&&S(a,r,true)>=i-1){break}i--}t++}return li}function di(e){var t=null;if(!si[e]&&typeof Ha!=="undefined"&&Ha&&Ha.exports){try{t=li._abbr;var i=Ia;!function e(){var t=new Error("Cannot find module 'undefined'");t.code="MODULE_NOT_FOUND";throw t}();fi(t)}catch(e){}}return si[e]}function fi(e,t){var i;if(e){if(a(t)){i=mi(e)}else{i=hi(e,t)}if(i){li=i}else{if(typeof console!=="undefined"&&console.warn){console.warn("Locale "+e+" not found. Did you forget to load it?")}}}return li._abbr}function hi(e,t){if(t!==null){var i,r=ai;t.abbr=e;if(si[e]!=null){T("defineLocaleOverride","use moment.updateLocale(localeName, config) to change "+"an existing locale. moment.defineLocale(localeName, "+"config) should only be used for creating a new locale "+"See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");r=si[e]._config}else if(t.parentLocale!=null){if(si[t.parentLocale]!=null){r=si[t.parentLocale]._config}else{i=di(t.parentLocale);if(i!=null){r=i._config}else{if(!oi[t.parentLocale]){oi[t.parentLocale]=[]}oi[t.parentLocale].push({name:e,config:t});return null}}}si[e]=new N(A(r,t));if(oi[e]){oi[e].forEach(function(e){hi(e.name,e.config)})}fi(e);return si[e]}else{delete si[e];return null}}function pi(e,t){if(null!=t){var i,r,n=ai;null!=(r=di(e))&&(n=r._config),t=A(n,t),(i=new N(t)).parentLocale=si[e],si[e]=i,fi(e)}else null!=si[e]&&(null!=si[e].parentLocale?si[e]=si[e].parentLocale:null!=si[e]&&delete si[e]);return si[e]}function mi(e){var t;if(e&&e._locale&&e._locale._abbr){e=e._locale._abbr}if(!e){return li}if(!s(e)){t=di(e);if(t){return t}e=[e]}return ci(e)}function vi(){return Y(si)}function gi(e){var t;var i=e._a;if(i&&m(e).overflow===-2){t=i[Ee]<0||i[Ee]>11?Ee:i[Re]<1||i[Re]>it(i[Le],i[Ee])?Re:i[He]<0||i[He]>24||i[He]===24&&(i[Ie]!==0||i[Fe]!==0||i[Ue]!==0)?He:i[Ie]<0||i[Ie]>59?Ie:i[Fe]<0||i[Fe]>59?Fe:i[Ue]<0||i[Ue]>999?Ue:-1;if(m(e)._overflowDayOfYear&&(t<Le||t>Re)){t=Re}if(m(e)._overflowWeeks&&t===-1){t=Ve}if(m(e)._overflowWeekday&&t===-1){t=Ge}m(e).overflow=t}return e}function yi(e,t,i){if(e!=null){return e}if(t!=null){return t}return i}function _i(e){var t=new Date(u.now());if(e._useUTC){return[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]}return[t.getFullYear(),t.getMonth(),t.getDate()]}function wi(e){var t,i,r=[],n,a,s;if(e._d){return}n=_i(e);if(e._w&&e._a[Re]==null&&e._a[Ee]==null){bi(e)}if(e._dayOfYear!=null){s=yi(e._a[Le],n[Le]);if(e._dayOfYear>ze(s)||e._dayOfYear===0){m(e)._overflowDayOfYear=true}i=_t(s,0,e._dayOfYear);e._a[Ee]=i.getUTCMonth();e._a[Re]=i.getUTCDate()}for(t=0;t<3&&e._a[t]==null;++t){e._a[t]=r[t]=n[t]}for(;t<7;t++){e._a[t]=r[t]=e._a[t]==null?t===2?1:0:e._a[t]}if(e._a[He]===24&&e._a[Ie]===0&&e._a[Fe]===0&&e._a[Ue]===0){e._nextDay=true;e._a[He]=0}e._d=(e._useUTC?_t:yt).apply(null,r);a=e._useUTC?e._d.getUTCDay():e._d.getDay();if(e._tzm!=null){e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm)}if(e._nextDay){e._a[He]=24}if(e._w&&typeof e._w.d!=="undefined"&&e._w.d!==a){m(e).weekdayMismatch=true}}function bi(e){var t,i,r,n,a,s,o,l;t=e._w;if(t.GG!=null||t.W!=null||t.E!=null){a=1;s=4;i=yi(t.GG,e._a[Le],kt($i(),1,4).year);r=yi(t.W,1);n=yi(t.E,1);if(n<1||n>7){l=true}}else{a=e._locale._week.dow;s=e._locale._week.doy;var u=kt($i(),a,s);i=yi(t.gg,e._a[Le],u.year);r=yi(t.w,u.week);if(t.d!=null){n=t.d;if(n<0||n>6){l=true}}else if(t.e!=null){n=t.e+a;if(t.e<0||t.e>6){l=true}}else{n=a}}if(r<1||r>xt(i,a,s)){m(e)._overflowWeeks=true}else if(l!=null){m(e)._overflowWeekday=true}else{o=bt(i,r,n,a,s);e._a[Le]=o.year;e._dayOfYear=o.dayOfYear}}var ki=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,xi=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Mi=/Z|[+-]\d\d(?::?\d\d)?/,Si=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,false],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,false],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,false],["YYYYDDD",/\d{7}/]],Di=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Oi=/^\/?Date\((\-?\d+)/i;function ji(e){var t,i,r=e._i,n=ki.exec(r)||xi.exec(r),a,s,o,l;if(n){m(e).iso=true;for(t=0,i=Si.length;t<i;t++){if(Si[t][1].exec(n[1])){s=Si[t][0];a=Si[t][2]!==false;break}}if(s==null){e._isValid=false;return}if(n[3]){for(t=0,i=Di.length;t<i;t++){if(Di[t][1].exec(n[3])){o=(n[2]||" ")+Di[t][0];break}}if(o==null){e._isValid=false;return}}if(!a&&o!=null){e._isValid=false;return}if(n[4]){if(Mi.exec(n[4])){l="Z"}else{e._isValid=false;return}}e._f=s+(o||"")+(l||"");Ri(e)}else{e._isValid=false}}var Yi=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function Ti(e,t,i,r,n,a){var s=[Pi(e),st.indexOf(t),parseInt(i,10),parseInt(r,10),parseInt(n,10)];if(a){s.push(parseInt(a,10))}return s}function Pi(e){var t=parseInt(e,10);if(t<=49){return 2e3+t}else if(t<=999){return 1900+t}return t}function Ci(e){return e.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,"")}function Ai(e,t,i){if(e){var r=Wt.indexOf(e),n=new Date(t[0],t[1],t[2]).getDay();if(r!==n){m(i).weekdayMismatch=true;i._isValid=false;return false}}return true}var Ni={UT:0,GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};function Wi(e,t,i){if(e){return Ni[e]}else if(t){return 0}else{var r=parseInt(i,10);var n=r%100,a=(r-n)/100;return a*60+n}}function Li(e){var t=Yi.exec(Ci(e._i));if(t){var i=Ti(t[4],t[3],t[2],t[5],t[6],t[7]);if(!Ai(t[1],i,e)){return}e._a=i;e._tzm=Wi(t[8],t[9],t[10]);e._d=_t.apply(null,e._a);e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm);m(e).rfc2822=true}else{e._isValid=false}}function Ei(e){var t=Oi.exec(e._i);if(t!==null){e._d=new Date(+t[1]);return}ji(e);if(e._isValid===false){delete e._isValid}else{return}Li(e);if(e._isValid===false){delete e._isValid}else{return}u.createFromInputFallback(e)}function Ri(e){if(e._f===u.ISO_8601){ji(e);return}if(e._f===u.RFC_2822){Li(e);return}e._a=[];m(e).empty=true;var t=""+e._i,i,r,n,a,s,o=t.length,l=0;n=ue(e._f,e._locale).match(te)||[];for(i=0;i<n.length;i++){a=n[i];r=(t.match(Ye(a,e))||[])[0];if(r){s=t.substr(0,t.indexOf(r));if(s.length>0){m(e).unusedInput.push(s)}t=t.slice(t.indexOf(r)+r.length);l+=r.length}if(ne[a]){if(r){m(e).empty=false}else{m(e).unusedTokens.push(a)}We(a,r,e)}else if(e._strict&&!r){m(e).unusedTokens.push(a)}}m(e).charsLeftOver=o-l;if(t.length>0){m(e).unusedInput.push(t)}if(e._a[He]<=12&&m(e).bigHour===true&&e._a[He]>0){m(e).bigHour=undefined}m(e).parsedDateParts=e._a.slice(0);m(e).meridiem=e._meridiem;e._a[He]=Hi(e._locale,e._a[He],e._meridiem);wi(e);gi(e)}function Hi(e,t,i){var r;if(i==null){return t}if(e.meridiemHour!=null){return e.meridiemHour(t,i)}else if(e.isPM!=null){r=e.isPM(i);if(r&&t<12){t+=12}if(!r&&t===12){t=0}return t}else{return t}}function Ii(e){var t,i,r,n,a;if(e._f.length===0){m(e).invalidFormat=true;e._d=new Date(NaN);return}for(n=0;n<e._f.length;n++){a=0;t=_({},e);if(e._useUTC!=null){t._useUTC=e._useUTC}t._f=e._f[n];Ri(t);if(!v(t)){continue}a+=m(t).charsLeftOver;a+=m(t).unusedTokens.length*10;m(t).score=a;if(r==null||a<r){r=a;i=t}}h(e,i||t)}function Fi(e){if(e._d){return}var t=J(e._i);e._a=i([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)});wi(e)}function Ui(e){var t=new b(gi(Vi(e)));if(t._nextDay){t.add(1,"d");t._nextDay=undefined}return t}function Vi(e){var t=e._i,i=e._f;e._locale=e._locale||mi(e._l);if(t===null||i===undefined&&t===""){return g({nullInput:true})}if(typeof t==="string"){e._i=t=e._locale.preparse(t)}if(k(t)){return new b(gi(t))}else if(d(t)){e._d=t}else if(s(i)){Ii(e)}else if(i){Ri(e)}else{Gi(e)}if(!v(e)){e._d=null}return e}function Gi(e){var t=e._i;if(a(t)){e._d=new Date(u.now())}else if(d(t)){e._d=new Date(t.valueOf())}else if(typeof t==="string"){Ei(e)}else if(s(t)){e._a=i(t.slice(0),function(e){return parseInt(e,10)});wi(e)}else if(o(t)){Fi(e)}else if(c(t)){e._d=new Date(t)}else{u.createFromInputFallback(e)}}function zi(e,t,i,r,n){var a={};if(i===true||i===false){r=i;i=undefined}if(o(e)&&l(e)||s(e)&&e.length===0){e=undefined}a._isAMomentObject=true;a._useUTC=a._isUTC=n;a._l=i;a._i=e;a._f=t;a._strict=r;return Ui(a)}function $i(e,t,i,r){return zi(e,t,i,r,false)}u.createFromInputFallback=O("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), "+"which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are "+"discouraged and will be removed in an upcoming major release. Please refer to "+"http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),u.ISO_8601=function(){},u.RFC_2822=function(){};var Bi=O("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=$i.apply(null,arguments);if(this.isValid()&&e.isValid()){return e<this?this:e}else{return g()}}),Zi=O("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=$i.apply(null,arguments);if(this.isValid()&&e.isValid()){return e>this?this:e}else{return g()}});function qi(e,t){var i,r;if(t.length===1&&s(t[0])){t=t[0]}if(!t.length){return $i()}i=t[0];for(r=1;r<t.length;++r){if(!t[r].isValid()||t[r][e](i)){i=t[r]}}return i}function Ji(){var e;return qi("isBefore",[].slice.call(arguments,0))}function Ki(){var e;return qi("isAfter",[].slice.call(arguments,0))}var Qi=function(){return Date.now?Date.now():+new Date},Xi=["year","quarter","month","week","day","hour","minute","second","millisecond"];function er(e){for(var t in e){if(!(Ze.call(Xi,t)!==-1&&(e[t]==null||!isNaN(e[t])))){return false}}var i=false;for(var r=0;r<Xi.length;++r){if(e[Xi[r]]){if(i){return false}if(parseFloat(e[Xi[r]])!==M(e[Xi[r]])){i=true}}}return true}function tr(){return this._isValid}function ir(){return Mr(NaN)}function rr(e){var t=J(e),i=t.year||0,r=t.quarter||0,n=t.month||0,a=t.week||t.isoWeek||0,s=t.day||0,o=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=er(t);this._milliseconds=+c+u*1e3+l*6e4+o*1e3*60*60;this._days=+s+a*7;this._months=+n+r*3+i*12;this._data={};this._locale=mi();this._bubble()}function nr(e){return e instanceof rr}function ar(e){if(e<0){return Math.round(-1*e)*-1}else{return Math.round(e)}}function sr(e,i){ae(e,0,0,function(){var e=this.utcOffset();var t="+";if(e<0){e=-e;t="-"}return t+ee(~~(e/60),2)+i+ee(~~e%60,2)})}sr("Z",":"),sr("ZZ",""),je("Z",Me),je("ZZ",Me),Ae(["Z","ZZ"],function(e,t,i){i._useUTC=true;i._tzm=lr(Me,e)});var or=/([\+\-]|\d\d)/gi;function lr(e,t){var i=(t||"").match(e);if(i===null){return null}var r=i[i.length-1]||[];var n=(r+"").match(or)||["-",0,0];var a=+(n[1]*60)+M(n[2]);return a===0?0:n[0]==="+"?a:-a}function ur(e,t){var i,r;if(t._isUTC){i=t.clone();r=(k(e)||d(e)?e.valueOf():$i(e).valueOf())-i.valueOf();i._d.setTime(i._d.valueOf()+r);u.updateOffset(i,false);return i}else{return $i(e).local()}}function cr(e){return-Math.round(e._d.getTimezoneOffset()/15)*15}function dr(e,t,i){var r=this._offset||0,n;if(!this.isValid()){return e!=null?this:NaN}if(e!=null){if(typeof e==="string"){e=lr(Me,e);if(e===null){return this}}else if(Math.abs(e)<16&&!i){e=e*60}if(!this._isUTC&&t){n=cr(this)}this._offset=e;this._isUTC=true;if(n!=null){this.add(n,"m")}if(r!==e){if(!t||this._changeInProgress){Yr(this,Mr(e-r,"m"),1,false)}else if(!this._changeInProgress){this._changeInProgress=true;u.updateOffset(this,true);this._changeInProgress=null}}return this}else{return this._isUTC?r:cr(this)}}function fr(e,t){if(e!=null){if(typeof e!=="string"){e=-e}this.utcOffset(e,t);return this}else{return-this.utcOffset()}}function hr(e){return this.utcOffset(0,e)}function pr(e){if(this._isUTC){this.utcOffset(0,e);this._isUTC=false;if(e){this.subtract(cr(this),"m")}}return this}function mr(){if(this._tzm!=null){this.utcOffset(this._tzm,false,true)}else if(typeof this._i==="string"){var e=lr(xe,this._i);if(e!=null){this.utcOffset(e)}else{this.utcOffset(0,true)}}return this}function vr(e){if(!this.isValid()){return false}e=e?$i(e).utcOffset():0;return(this.utcOffset()-e)%60===0}function gr(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function yr(){if(!a(this._isDSTShifted)){return this._isDSTShifted}var e={};_(e,this);e=Vi(e);if(e._a){var t=e._isUTC?p(e._a):$i(e._a);this._isDSTShifted=this.isValid()&&S(e._a,t.toArray())>0}else{this._isDSTShifted=false}return this._isDSTShifted}function _r(){return this.isValid()?!this._isUTC:false}function wr(){return this.isValid()?this._isUTC:false}function br(){return this.isValid()?this._isUTC&&this._offset===0:false}u.updateOffset=function(){};var kr=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,xr=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Mr(e,t){var i=e,r=null,n,a,s;if(nr(e)){i={ms:e._milliseconds,d:e._days,M:e._months}}else if(c(e)){i={};if(t){i[t]=e}else{i.milliseconds=e}}else if(!!(r=kr.exec(e))){n=r[1]==="-"?-1:1;i={y:0,d:M(r[Re])*n,h:M(r[He])*n,m:M(r[Ie])*n,s:M(r[Fe])*n,ms:M(ar(r[Ue]*1e3))*n}}else if(!!(r=xr.exec(e))){n=r[1]==="-"?-1:1;i={y:Sr(r[2],n),M:Sr(r[3],n),w:Sr(r[4],n),d:Sr(r[5],n),h:Sr(r[6],n),m:Sr(r[7],n),s:Sr(r[8],n)}}else if(i==null){i={}}else if(typeof i==="object"&&("from"in i||"to"in i)){s=Or($i(i.from),$i(i.to));i={};i.ms=s.milliseconds;i.M=s.months}a=new rr(i);if(nr(e)&&f(e,"_locale")){a._locale=e._locale}return a}function Sr(e,t){var i=e&&parseFloat(e.replace(",","."));return(isNaN(i)?0:i)*t}function Dr(e,t){var i={};i.months=t.month()-e.month()+(t.year()-e.year())*12;if(e.clone().add(i.months,"M").isAfter(t)){--i.months}i.milliseconds=+t-+e.clone().add(i.months,"M");return i}function Or(e,t){var i;if(!(e.isValid()&&t.isValid())){return{milliseconds:0,months:0}}t=ur(t,e);if(e.isBefore(t)){i=Dr(e,t)}else{i=Dr(t,e);i.milliseconds=-i.milliseconds;i.months=-i.months}return i}function jr(n,a){return function(e,t){var i,r;if(t!==null&&!isNaN(+t)){T(a,"moment()."+a+"(period, number) is deprecated. Please use moment()."+a+"(number, period). "+"See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");r=e;e=t;t=r}e=typeof e==="string"?+e:e;i=Mr(e,t);Yr(this,i,n);return this}}function Yr(e,t,i,r){var n=t._milliseconds,a=ar(t._days),s=ar(t._months);if(!e.isValid()){return}r=r==null?true:r;if(s){ct(e,Ke(e,"Month")+s*i)}if(a){Qe(e,"Date",Ke(e,"Date")+a*i)}if(n){e._d.setTime(e._d.valueOf()+n*i)}if(r){u.updateOffset(e,a||s)}}Mr.fn=rr.prototype,Mr.invalid=ir;var Tr=jr(1,"add"),Pr=jr(-1,"subtract");function Cr(e,t){var i=e.diff(t,"days",!0);return i<-6?"sameElse":i<-1?"lastWeek":i<0?"lastDay":i<1?"sameDay":i<2?"nextDay":i<7?"nextWeek":"sameElse"}function Ar(e,t){var i=e||$i(),r=ur(i,this).startOf("day"),n=u.calendarFormat(this,r)||"sameElse";var a=t&&(P(t[n])?t[n].call(this,i):t[n]);return this.format(a||this.localeData().calendar(n,this,$i(i)))}function Nr(){return new b(this)}function Wr(e,t){var i=k(e)?e:$i(e);if(!(this.isValid()&&i.isValid())){return false}t=q(t)||"millisecond";if(t==="millisecond"){return this.valueOf()>i.valueOf()}else{return i.valueOf()<this.clone().startOf(t).valueOf()}}function Lr(e,t){var i=k(e)?e:$i(e);if(!(this.isValid()&&i.isValid())){return false}t=q(t)||"millisecond";if(t==="millisecond"){return this.valueOf()<i.valueOf()}else{return this.clone().endOf(t).valueOf()<i.valueOf()}}function Er(e,t,i,r){var n=k(e)?e:$i(e),a=k(t)?t:$i(t);if(!(this.isValid()&&n.isValid()&&a.isValid())){return false}r=r||"()";return(r[0]==="("?this.isAfter(n,i):!this.isBefore(n,i))&&(r[1]===")"?this.isBefore(a,i):!this.isAfter(a,i))}function Rr(e,t){var i=k(e)?e:$i(e),r;if(!(this.isValid()&&i.isValid())){return false}t=q(t)||"millisecond";if(t==="millisecond"){return this.valueOf()===i.valueOf()}else{r=i.valueOf();return this.clone().startOf(t).valueOf()<=r&&r<=this.clone().endOf(t).valueOf()}}function Hr(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function Ir(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function Fr(e,t,i){var r,n,a;if(!this.isValid()){return NaN}r=ur(e,this);if(!r.isValid()){return NaN}n=(r.utcOffset()-this.utcOffset())*6e4;t=q(t);switch(t){case"year":a=Ur(this,r)/12;break;case"month":a=Ur(this,r);break;case"quarter":a=Ur(this,r)/3;break;case"second":a=(this-r)/1e3;break;case"minute":a=(this-r)/6e4;break;case"hour":a=(this-r)/36e5;break;case"day":a=(this-r-n)/864e5;break;case"week":a=(this-r-n)/6048e5;break;default:a=this-r}return i?a:x(a)}function Ur(e,t){var i=(t.year()-e.year())*12+(t.month()-e.month()),r=e.clone().add(i,"months"),n,a;if(t-r<0){n=e.clone().add(i-1,"months");a=(t-r)/(r-n)}else{n=e.clone().add(i+1,"months");a=(t-r)/(n-r)}return-(i+a)||0}function Vr(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function Gr(e){if(!this.isValid()){return null}var t=e!==true;var i=t?this.clone().utc():this;if(i.year()<0||i.year()>9999){return le(i,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ")}if(P(Date.prototype.toISOString)){if(t){return this.toDate().toISOString()}else{return new Date(this.valueOf()+this.utcOffset()*60*1e3).toISOString().replace("Z",le(i,"Z"))}}return le(i,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")}function zr(){if(!this.isValid()){return"moment.invalid(/* "+this._i+" */)"}var e="moment";var t="";if(!this.isLocal()){e=this.utcOffset()===0?"moment.utc":"moment.parseZone";t="Z"}var i="["+e+'("]';var r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY";var n="-MM-DD[T]HH:mm:ss.SSS";var a=t+'[")]';return this.format(i+r+n+a)}function $r(e){if(!e){e=this.isUtc()?u.defaultFormatUtc:u.defaultFormat}var t=le(this,e);return this.localeData().postformat(t)}function Br(e,t){if(this.isValid()&&(k(e)&&e.isValid()||$i(e).isValid())){return Mr({to:this,from:e}).locale(this.locale()).humanize(!t)}else{return this.localeData().invalidDate()}}function Zr(e){return this.from($i(),e)}function qr(e,t){if(this.isValid()&&(k(e)&&e.isValid()||$i(e).isValid())){return Mr({from:this,to:e}).locale(this.locale()).humanize(!t)}else{return this.localeData().invalidDate()}}function Jr(e){return this.to($i(),e)}function Kr(e){var t;if(e===undefined){return this._locale._abbr}else{t=mi(e);if(t!=null){this._locale=t}return this}}u.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",u.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Qr=O("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){if(e===undefined){return this.localeData()}else{return this.locale(e)}});function Xr(){return this._locale}var en=1e3,tn=60*en,rn=60*tn,nn=(365*400+97)*24*rn;function an(e,t){return(e%t+t)%t}function sn(e,t,i){if(e<100&&e>=0){return new Date(e+400,t,i)-nn}else{return new Date(e,t,i).valueOf()}}function on(e,t,i){if(e<100&&e>=0){return Date.UTC(e+400,t,i)-nn}else{return Date.UTC(e,t,i)}}function ln(e){var t;e=q(e);if(e===undefined||e==="millisecond"||!this.isValid()){return this}var i=this._isUTC?on:sn;switch(e){case"year":t=i(this.year(),0,1);break;case"quarter":t=i(this.year(),this.month()-this.month()%3,1);break;case"month":t=i(this.year(),this.month(),1);break;case"week":t=i(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=i(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=i(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf();t-=an(t+(this._isUTC?0:this.utcOffset()*tn),rn);break;case"minute":t=this._d.valueOf();t-=an(t,tn);break;case"second":t=this._d.valueOf();t-=an(t,en);break}this._d.setTime(t);u.updateOffset(this,true);return this}function un(e){var t;e=q(e);if(e===undefined||e==="millisecond"||!this.isValid()){return this}var i=this._isUTC?on:sn;switch(e){case"year":t=i(this.year()+1,0,1)-1;break;case"quarter":t=i(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=i(this.year(),this.month()+1,1)-1;break;case"week":t=i(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=i(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=i(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf();t+=rn-an(t+(this._isUTC?0:this.utcOffset()*tn),rn)-1;break;case"minute":t=this._d.valueOf();t+=tn-an(t,tn)-1;break;case"second":t=this._d.valueOf();t+=en-an(t,en)-1;break}this._d.setTime(t);u.updateOffset(this,true);return this}function cn(){return this._d.valueOf()-(this._offset||0)*6e4}function dn(){return Math.floor(this.valueOf()/1e3)}function fn(){return new Date(this.valueOf())}function hn(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function pn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function mn(){return this.isValid()?this.toISOString():null}function vn(){return v(this)}function gn(){return h({},m(this))}function yn(){return m(this).overflow}function _n(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function wn(e,t){ae(0,[e,e.length],0,t)}function bn(e){return Sn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function kn(e){return Sn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function xn(){return xt(this.year(),1,4)}function Mn(){var e=this.localeData()._week;return xt(this.year(),e.dow,e.doy)}function Sn(e,t,i,r,n){var a;if(e==null){return kt(this,r,n).year}else{a=xt(e,r,n);if(t>a){t=a}return Dn.call(this,e,t,i,r,n)}}function Dn(e,t,i,r,n){var a=bt(e,t,i,r,n),s=_t(a.year,0,a.dayOfYear);this.year(s.getUTCFullYear());this.month(s.getUTCMonth());this.date(s.getUTCDate());return this}function On(e){return e==null?Math.ceil((this.month()+1)/3):this.month((e-1)*3+this.month()%3)}ae(0,["gg",2],0,function(){return this.weekYear()%100}),ae(0,["GG",2],0,function(){return this.isoWeekYear()%100}),wn("gggg","weekYear"),wn("ggggg","weekYear"),wn("GGGG","isoWeekYear"),wn("GGGGG","isoWeekYear"),Z("weekYear","gg"),Z("isoWeekYear","GG"),Q("weekYear",1),Q("isoWeekYear",1),je("G",ke),je("g",ke),je("GG",me,de),je("gg",me,de),je("GGGG",_e,he),je("gggg",_e,he),je("GGGGG",we,pe),je("ggggg",we,pe),Ne(["gggg","ggggg","GGGG","GGGGG"],function(e,t,i,r){t[r.substr(0,2)]=M(e)}),Ne(["gg","GG"],function(e,t,i,r){t[r]=u.parseTwoDigitYear(e)}),ae("Q",0,"Qo","quarter"),Z("quarter","Q"),Q("quarter",7),je("Q",ce),Ae("Q",function(e,t){t[Ee]=(M(e)-1)*3}),ae("D",["DD",2],"Do","date"),Z("date","D"),Q("date",9),je("D",me),je("DD",me,de),je("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),Ae(["D","DD"],Re),Ae("Do",function(e,t){t[Re]=M(e.match(me)[0])});var jn=Je("Date",true);function Yn(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return e==null?t:this.add(e-t,"d")}ae("DDD",["DDDD",3],"DDDo","dayOfYear"),Z("dayOfYear","DDD"),Q("dayOfYear",4),je("DDD",ye),je("DDDD",fe),Ae(["DDD","DDDD"],function(e,t,i){i._dayOfYear=M(e)}),ae("m",["mm",2],0,"minute"),Z("minute","m"),Q("minute",14),je("m",me),je("mm",me,de),Ae(["m","mm"],Ie);var Tn=Je("Minutes",false);ae("s",["ss",2],0,"second"),Z("second","s"),Q("second",15),je("s",me),je("ss",me,de),Ae(["s","ss"],Fe);var Pn=Je("Seconds",false),Cn;for(ae("S",0,0,function(){return~~(this.millisecond()/100)}),ae(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),ae(0,["SSS",3],0,"millisecond"),ae(0,["SSSS",4],0,function(){return this.millisecond()*10}),ae(0,["SSSSS",5],0,function(){return this.millisecond()*100}),ae(0,["SSSSSS",6],0,function(){return this.millisecond()*1e3}),ae(0,["SSSSSSS",7],0,function(){return this.millisecond()*1e4}),ae(0,["SSSSSSSS",8],0,function(){return this.millisecond()*1e5}),ae(0,["SSSSSSSSS",9],0,function(){return this.millisecond()*1e6}),Z("millisecond","ms"),Q("millisecond",16),je("S",ye,ce),je("SS",ye,de),je("SSS",ye,fe),Cn="SSSS";Cn.length<=9;Cn+="S"){je(Cn,be)}function An(e,t){t[Ue]=M(("0."+e)*1e3)}for(Cn="S";Cn.length<=9;Cn+="S"){Ae(Cn,An)}var Nn=Je("Milliseconds",false);function Wn(){return this._isUTC?"UTC":""}function Ln(){return this._isUTC?"Coordinated Universal Time":""}ae("z",0,0,"zoneAbbr"),ae("zz",0,0,"zoneName");var En=b.prototype;function Rn(e){return $i(1e3*e)}function Hn(){return $i.apply(null,arguments).parseZone()}function In(e){return e}En.add=Tr,En.calendar=Ar,En.clone=Nr,En.diff=Fr,En.endOf=un,En.format=$r,En.from=Br,En.fromNow=Zr,En.to=qr,En.toNow=Jr,En.get=Xe,En.invalidAt=yn,En.isAfter=Wr,En.isBefore=Lr,En.isBetween=Er,En.isSame=Rr,En.isSameOrAfter=Hr,En.isSameOrBefore=Ir,En.isValid=vn,En.lang=Qr,En.locale=Kr,En.localeData=Xr,En.max=Zi,En.min=Bi,En.parsingFlags=gn,En.set=et,En.startOf=ln,En.subtract=Pr,En.toArray=hn,En.toObject=pn,En.toDate=fn,En.toISOString=Gr,En.inspect=zr,En.toJSON=mn,En.toString=Vr,En.unix=dn,En.valueOf=cn,En.creationData=_n,En.year=Be,En.isLeapYear=qe,En.weekYear=bn,En.isoWeekYear=kn,En.quarter=En.quarters=On,En.month=dt,En.daysInMonth=ft,En.week=En.weeks=jt,En.isoWeek=En.isoWeeks=Yt,En.weeksInYear=Mn,En.isoWeeksInYear=xn,En.date=jn,En.day=En.days=Ft,En.weekday=Ut,En.isoWeekday=Vt,En.dayOfYear=Yn,En.hour=En.hours=ni,En.minute=En.minutes=Tn,En.second=En.seconds=Pn,En.millisecond=En.milliseconds=Nn,En.utcOffset=dr,En.utc=hr,En.local=pr,En.parseZone=mr,En.hasAlignedHourOffset=vr,En.isDST=gr,En.isLocal=_r,En.isUtcOffset=wr,En.isUtc=br,En.isUTC=br,En.zoneAbbr=Wn,En.zoneName=Ln,En.dates=O("dates accessor is deprecated. Use date instead.",jn),En.months=O("months accessor is deprecated. Use month instead",dt),En.years=O("years accessor is deprecated. Use year instead",Be),En.zone=O("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",fr),En.isDSTShifted=O("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",yr);var Fn=N.prototype;function Un(e,t,i,r){var n=mi();var a=p().set(r,t);return n[i](a,e)}function Vn(e,t,i){if(c(e)){t=e;e=undefined}e=e||"";if(t!=null){return Un(e,t,i,"month")}var r;var n=[];for(r=0;r<12;r++){n[r]=Un(e,r,i,"month")}return n}function Gn(e,t,i,r){if(typeof e==="boolean"){if(c(t)){i=t;t=undefined}t=t||""}else{t=e;i=t;e=false;if(c(t)){i=t;t=undefined}t=t||""}var n=mi(),a=e?n._week.dow:0;if(i!=null){return Un(t,(i+a)%7,r,"day")}var s;var o=[];for(s=0;s<7;s++){o[s]=Un(t,(s+a)%7,r,"day")}return o}function zn(e,t){return Vn(e,t,"months")}function $n(e,t){return Vn(e,t,"monthsShort")}function Bn(e,t,i){return Gn(e,t,i,"weekdays")}function Zn(e,t,i){return Gn(e,t,i,"weekdaysShort")}function qn(e,t,i){return Gn(e,t,i,"weekdaysMin")}Fn.calendar=L,Fn.longDateFormat=R,Fn.invalidDate=I,Fn.ordinal=V,Fn.preparse=In,Fn.postformat=In,Fn.relativeTime=z,Fn.pastFuture=$,Fn.set=C,Fn.months=at,Fn.monthsShort=ot,Fn.monthsParse=ut,Fn.monthsRegex=vt,Fn.monthsShortRegex=pt,Fn.week=Mt,Fn.firstDayOfYear=Ot,Fn.firstDayOfWeek=Dt,Fn.weekdays=Nt,Fn.weekdaysMin=Rt,Fn.weekdaysShort=Lt,Fn.weekdaysParse=It,Fn.weekdaysRegex=zt,Fn.weekdaysShortRegex=Bt,Fn.weekdaysMinRegex=Jt,Fn.isPM=ii,Fn.meridiem=ri,fi("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,i=M(e%100/10)===1?"th":t===1?"st":t===2?"nd":t===3?"rd":"th";return e+i}}),u.lang=O("moment.lang is deprecated. Use moment.locale instead.",fi),u.langData=O("moment.langData is deprecated. Use moment.localeData instead.",mi);var Jn=Math.abs;function Kn(){var e=this._data;return this._milliseconds=Jn(this._milliseconds),this._days=Jn(this._days),this._months=Jn(this._months),e.milliseconds=Jn(e.milliseconds),e.seconds=Jn(e.seconds),e.minutes=Jn(e.minutes),e.hours=Jn(e.hours),e.months=Jn(e.months),e.years=Jn(e.years),this}function Qn(e,t,i,r){var n=Mr(t,i);e._milliseconds+=r*n._milliseconds;e._days+=r*n._days;e._months+=r*n._months;return e._bubble()}function Xn(e,t){return Qn(this,e,t,1)}function ea(e,t){return Qn(this,e,t,-1)}function ta(e){if(e<0){return Math.floor(e)}else{return Math.ceil(e)}}function ia(){var e,t,i,r,n,a=this._milliseconds,s=this._days,o=this._months,l=this._data;if(!(0<=a&&0<=s&&0<=o||a<=0&&s<=0&&o<=0))a+=864e5*ta(na(o)+s),o=s=0;return l.milliseconds=a%1e3,e=x(a/1e3),l.seconds=e%60,t=x(e/60),l.minutes=t%60,i=x(t/60),l.hours=i%24,s+=x(i/24),n=x(ra(s)),o+=n,s-=ta(na(n)),r=x(o/12),o%=12,l.days=s,l.months=o,l.years=r,this}function ra(e){return e*4800/146097}function na(e){return e*146097/4800}function aa(e){if(!this.isValid())return NaN;var t,i,r=this._milliseconds;if("month"===(e=q(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,i=this._months+ra(t),e){case"month":return i;case"quarter":return i/3;case"year":return i/12}else switch(t=this._days+Math.round(na(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}}function sa(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*M(this._months/12):NaN}function oa(e){return function(){return this.as(e)}}var la=oa("ms"),ua=oa("s"),ca=oa("m"),da=oa("h"),fa=oa("d"),ha=oa("w"),pa=oa("M"),ma=oa("Q"),va=oa("y");function ga(){return Mr(this)}function ya(e){return e=q(e),this.isValid()?this[e+"s"]():NaN}function _a(e){return function(){return this.isValid()?this._data[e]:NaN}}var wa=_a("milliseconds"),ba=_a("seconds"),ka=_a("minutes"),xa=_a("hours"),Ma=_a("days"),Sa=_a("months"),Da=_a("years");function Oa(){return x(this.days()/7)}var ja=Math.round,Ya={ss:44,s:45,m:45,h:22,d:26,M:11};function Ta(e,t,i,r,n){return n.relativeTime(t||1,!!i,e,r)}function Pa(e,t,i){var r=Mr(e).abs(),n=ja(r.as("s")),a=ja(r.as("m")),s=ja(r.as("h")),o=ja(r.as("d")),l=ja(r.as("M")),u=ja(r.as("y")),c=(n<=Ya.ss?["s",n]:n<Ya.s&&["ss",n])||a<=1&&["m"]||a<Ya.m&&["mm",a]||s<=1&&["h"]||s<Ya.h&&["hh",s]||o<=1&&["d"]||o<Ya.d&&["dd",o]||l<=1&&["M"]||l<Ya.M&&["MM",l]||u<=1&&["y"]||["yy",u];return c[2]=t,c[3]=0<+e,c[4]=i,function(e,t,i,r,n){return n.relativeTime(t||1,!!i,e,r)}.apply(null,c)}function Ca(e){return void 0!==e?"function"==typeof e&&(ja=e,!0):ja}function Aa(e,t){if(void 0===Ya[e])return!1;if(void 0===t)return Ya[e];if(Ya[e]=t,"s"===e)Ya.ss=t-1;return!0}function Na(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),i=function(e,t,i){var r=Mr(e).abs(),n=ja(r.as("s")),a=ja(r.as("m")),s=ja(r.as("h")),o=ja(r.as("d")),l=ja(r.as("M")),u=ja(r.as("y")),c=(n<=Ya.ss?["s",n]:n<Ya.s&&["ss",n])||a<=1&&["m"]||a<Ya.m&&["mm",a]||s<=1&&["h"]||s<Ya.h&&["hh",s]||o<=1&&["d"]||o<Ya.d&&["dd",o]||l<=1&&["M"]||l<Ya.M&&["MM",l]||u<=1&&["y"]||["yy",u];return c[2]=t,c[3]=0<+e,c[4]=i,function(e,t,i,r,n){return n.relativeTime(t||1,!!i,e,r)}.apply(null,c)}(this,!e,t);if(e)i=t.pastFuture(+this,i);return t.postformat(i)}var Wa=Math.abs;function La(e){return(e>0)-(e<0)||+e}function Ea(){if(!this.isValid()){return this.localeData().invalidDate()}var e=Wa(this._milliseconds)/1e3;var t=Wa(this._days);var i=Wa(this._months);var r,n,a;r=x(e/60);n=x(r/60);e%=60;r%=60;a=x(i/12);i%=12;var s=a;var o=i;var l=t;var u=n;var c=r;var d=e?e.toFixed(3).replace(/\.?0+$/,""):"";var f=this.asSeconds();if(!f){return"P0D"}var h=f<0?"-":"";var p=La(this._months)!==La(f)?"-":"";var m=La(this._days)!==La(f)?"-":"";var v=La(this._milliseconds)!==La(f)?"-":"";return h+"P"+(s?p+s+"Y":"")+(o?p+o+"M":"")+(l?m+l+"D":"")+(u||c||d?"T":"")+(u?v+u+"H":"")+(c?v+c+"M":"")+(d?v+d+"S":"")}var Ra=rr.prototype;return Ra.isValid=function(){return this._isValid},Ra.abs=function(){var e=this._data;return this._milliseconds=Jn(this._milliseconds),this._days=Jn(this._days),this._months=Jn(this._months),e.milliseconds=Jn(e.milliseconds),e.seconds=Jn(e.seconds),e.minutes=Jn(e.minutes),e.hours=Jn(e.hours),e.months=Jn(e.months),e.years=Jn(e.years),this},Ra.add=function(e,t){return Qn(this,e,t,1)},Ra.subtract=function(e,t){return Qn(this,e,t,-1)},Ra.as=function(e){if(!this.isValid())return NaN;var t,i,r=this._milliseconds;if("month"===(e=q(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,i=this._months+ra(t),e){case"month":return i;case"quarter":return i/3;case"year":return i/12}else switch(t=this._days+Math.round(na(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Ra.asMilliseconds=la,Ra.asSeconds=ua,Ra.asMinutes=ca,Ra.asHours=da,Ra.asDays=fa,Ra.asWeeks=ha,Ra.asMonths=pa,Ra.asQuarters=ma,Ra.asYears=va,Ra.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*M(this._months/12):NaN},Ra._bubble=function(){var e,t,i,r,n,a=this._milliseconds,s=this._days,o=this._months,l=this._data;0<=a&&0<=s&&0<=o||a<=0&&s<=0&&o<=0||(a+=864e5*ta(na(o)+s),o=s=0);return l.milliseconds=a%1e3,e=x(a/1e3),l.seconds=e%60,t=x(e/60),l.minutes=t%60,i=x(t/60),l.hours=i%24,s+=x(i/24),n=x(ra(s)),o+=n,s-=ta(na(n)),r=x(o/12),o%=12,l.days=s,l.months=o,l.years=r,this},Ra.clone=function(){return Mr(this)},Ra.get=function(e){return e=q(e),this.isValid()?this[e+"s"]():NaN},Ra.milliseconds=wa,Ra.seconds=ba,Ra.minutes=ka,Ra.hours=xa,Ra.days=Ma,Ra.weeks=function(){return x(this.days()/7)},Ra.months=Sa,Ra.years=Da,Ra.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),i=function(e,t,i){var r=Mr(e).abs(),n=ja(r.as("s")),a=ja(r.as("m")),s=ja(r.as("h")),o=ja(r.as("d")),l=ja(r.as("M")),u=ja(r.as("y")),c=(n<=Ya.ss?["s",n]:n<Ya.s&&["ss",n])||a<=1&&["m"]||a<Ya.m&&["mm",a]||s<=1&&["h"]||s<Ya.h&&["hh",s]||o<=1&&["d"]||o<Ya.d&&["dd",o]||l<=1&&["M"]||l<Ya.M&&["MM",l]||u<=1&&["y"]||["yy",u];return c[2]=t,c[3]=0<+e,c[4]=i,function(e,t,i,r,n){return n.relativeTime(t||1,!!i,e,r)}.apply(null,c)}(this,!e,t);e&&(i=t.pastFuture(+this,i));return t.postformat(i)},Ra.toISOString=Ea,Ra.toString=Ea,Ra.toJSON=Ea,Ra.locale=Kr,Ra.localeData=Xr,Ra.toIsoString=O("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Ea),Ra.lang=Qr,ae("X",0,0,"unix"),ae("x",0,0,"valueOf"),je("x",ke),je("X",/[+-]?\d+(\.\d{1,3})?/),Ae("X",function(e,t,i){i._d=new Date(1e3*parseFloat(e,10))}),Ae("x",function(e,t,i){i._d=new Date(M(e))}),u.version="2.24.0",function(e){t=e}($i),u.fn=En,u.min=function(){return qi("isBefore",[].slice.call(arguments,0))},u.max=function(){return qi("isAfter",[].slice.call(arguments,0))},u.now=function(){return Date.now?Date.now():+new Date},u.utc=p,u.unix=function(e){return $i(1e3*e)},u.months=function(e,t){return Vn(e,t,"months")},u.isDate=d,u.locale=fi,u.invalid=g,u.duration=Mr,u.isMoment=k,u.weekdays=function(e,t,i){return Gn(e,t,i,"weekdays")},u.parseZone=function(){return $i.apply(null,arguments).parseZone()},u.localeData=mi,u.isDuration=nr,u.monthsShort=function(e,t){return Vn(e,t,"monthsShort")},u.weekdaysMin=function(e,t,i){return Gn(e,t,i,"weekdaysMin")},u.defineLocale=hi,u.updateLocale=function(e,t){if(null!=t){var i,r,n=ai;null!=(r=di(e))&&(n=r._config),t=A(n,t),(i=new N(t)).parentLocale=si[e],si[e]=i,fi(e)}else null!=si[e]&&(null!=si[e].parentLocale?si[e]=si[e].parentLocale:null!=si[e]&&delete si[e]);return si[e]},u.locales=function(){return Y(si)},u.weekdaysShort=function(e,t,i){return Gn(e,t,i,"weekdaysShort")},u.normalizeUnits=q,u.relativeTimeRounding=function(e){return void 0!==e?"function"==typeof e&&(ja=e,!0):ja},u.relativeTimeThreshold=function(e,t){if(void 0===Ya[e])return!1;if(void 0===t)return Ya[e];Ya[e]=t,"s"===e&&(Ya.ss=t-1);return!0},u.calendarFormat=function(e,t){var i=e.diff(t,"days",!0);return i<-6?"sameElse":i<-1?"lastWeek":i<0?"lastDay":i<1?"sameDay":i<2?"nextDay":i<7?"nextWeek":"sameElse"},u.prototype=En,u.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},u}()}).call(this,i(16)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("awards",'<list items="{awards}"></list>',"","",function(e){this.awards=[{date:"2015-05",title:"Cloud n „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Ç≥„É≥„ÉÜ„Çπ„Éà",texts:["WebRTCË≥û ÂèóË≥û","„ÉÅ„Éº„É†ÔºöÊÑèË≠ò‰∏≠„Åè„Çâ„ÅÑ„Å®„Åó„Å¶ÂèÇÂä†","„Éó„É≠„Ç∏„Çß„ÇØ„Éà: Ichimonitto"],link:"http://www.cloudn-service.com/cam04-deven/decon/tohyo/"},{date:"2017-12",title:"‰ø°Â∑ûÊú™Êù•„Ç¢„Éó„É™„Ç≥„É≥„ÉÜ„Çπ„Éà0",texts:["‰ø°Ë∂äÊÉÖÂ†±ÈÄö‰ø°ÊááË´á‰ºö‰ºöÈï∑Ë≥û ÂèóË≥û","„ÉÅ„Éº„É†ÔºöÊÑèË≠ò‰∏≠„Åè„Çâ„ÅÑ„Å®„Åó„Å¶ÂèÇÂä†","„Éó„É≠„Ç∏„Çß„ÇØ„Éà: MiddleDrive"],link:"https://shinshu-futureapp.net/information/contest/"},{date:"2010-03",title:"Á¨¨182Âõû HCIÁ†îÁ©∂‰ºö",texts:["Â≠¶ÁîüÂ•®Âä±Ë≥û ÂèóË≥û","„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅÂêë„Åë„ÅÆ„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Ç≠„Éº„Éú„Éº„Éâ„Å´Èñ¢„Åô„ÇãÁ†îÁ©∂Ôºà‰øÆÂ£´Ë´ñÊñáÔºâ","„Éó„É≠„Ç∏„Çß„ÇØ„Éà: InvisibleFlick"],link:"http://www.sighci.jp/contents/page/news"}]})},function(e,t,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("publications",'<list items="{publications}"></list>',"","",function(e){this.publications=[{date:"2015-12",title:"SensorPipe",texts:["È≥•Â±± „Çâ„ÅÑ„Åã, ÂÆÆ‰∏ã Ëä≥Êòé. SensorPipe: „Çπ„Éû„Éº„Éà„Éï„Ç©„É≥ÂÅ¥„ÅÆ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Çí‰∏ÄÂàáË°å„Çè„Å™„ÅÑ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥ÈÄ£Êê∫„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞, Á¨¨23Âõû„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Çπ„ÉÜ„É†„Å®„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Å´Èñ¢„Åô„Çã„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„ÉóË´ñÊñáÈõÜ (WISS 2015), 2015."],link:"https://research.miyashita.com/2015/D160/"},{date:"2018-03",title:"„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Éë„ÉÉ„Ç±„Éº„Ç∏",texts:["Âä†Ëó§ÈÇ¶Êãì, ËñÑÁæΩÂ§ßÊ®π, È≥•Â±±„Çâ„ÅÑ„Åã, Á´πÂÜÖ„Åæ„ÇÜ, ÈáéÂ¥éÁé≤ÈÇ£, Á¥∞Ë∞∑ÁæéÊúà, ÂÆÆ‰∏ãËä≥Êòé. „Çø„ÉÉ„ÉÅ„Éë„Éç„É´„ÇíÊã°Âºµ„Åô„ÇãÁ¥ôË£Ω„Ç§„É≥„Çø„Éï„Çß„Éº„Çπ„ÇíÊê≠Ëºâ„Åó„Åü„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÈñãÁô∫, „Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥2018Ë´ñÊñáÈõÜ, pp.889-894, 2018."],link:"https://research.miyashita.com/2018/D193/"},{date:"2018-09",title:"ÈÄèÊòé„Ç≠„Éº„Éú„Éº„Éâ",texts:["È≥•Â±±„Çâ„ÅÑ„Åã, ÂÆÆ‰∏ãËä≥Êòé. „Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅÂêë„Åë„ÅÆ„Ç≠„Éº„Éà„ÉÉ„Éó„ÅåÈÄèÊòé„Å™Êó•Êú¨Ë™û„Åã„Å™ÂÖ•Âäõ„Ç§„É≥„Çø„Éï„Çß„Éº„Çπ, Á¨¨26Âõû„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Çπ„ÉÜ„É†„Å®„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Å´Èñ¢„Åô„Çã„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„ÉóË´ñÊñáÈõÜ (WISS 2018), 2018."],link:"https://research.miyashita.com/papers/D202"},{date:"2019-03",title:"InvisibleFlick",texts:["È≥•Â±±„Çâ„ÅÑ„Åã, ÂÆÆ‰∏ãËä≥Êòé. InvisibleFlick: Â∞èÂûã„Çø„ÉÉ„ÉÅ„Çπ„ÇØ„É™„Éº„É≥Á´ØÊú´„Å´„Åä„Åë„Çã„Ç≠„Éº„Éà„ÉÉ„Éó„ÅåÈÄèÊòé„Å™Êó•Êú¨Ë™ûÂÖ•Âäõ„Ç≠„Éº„Éú„Éº„Éâ, Á†îÁ©∂Â†±Âëä„Éí„É•„Éº„Éû„É≥„Ç≥„É≥„Éî„É•„Éº„Çø„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥(HCI), Vol.2019-HCI-182, Issue.27, pp. 1-8, 2019."],link:"https://research.miyashita.com/papers/D218"}]})},function(e,t,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("clubs",'<list items="{clubs}"></list>',"","",function(e){this.clubs=[{date:"2013-04 - 2017-03",title:"Á∑èÂêà„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰Ωú„Çµ„Éº„ÇØ„É´",texts:["„Éá„Ç∏„Çø„É´„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰ΩúÔºàÈü≥Ê•Ω„ÉªÂãïÁîª„Éª„Ç≤„Éº„É†„Éª„Ç§„É©„Çπ„Éà„ÉªÊñáËä∏Ôºâ„ÇíË°å„ÅÜÂ§ßÂ≠¶ÂÜÖ„ÅÆ„Çµ„Éº„ÇØ„É´","Âêå‰∫∫„Ç§„Éô„É≥„Éà„Åß„ÅÆÈ†íÂ∏ÉÔºà„Ç≥„Éü„ÉÉ„ÇØ„Éû„Éº„Ç±„ÉÉ„Éà„ÉªM3Ôºâ","Ë®≠Á´ã„É°„É≥„Éê„ÉºÔºÜÂππ‰∫ãÈï∑"],link:"https://sokon.jp/"},{date:"2016-04 - 2017-06",title:"Nakano Computer Club",texts:["„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Å´Èñ¢„Åô„ÇãÊÉÖÂ†±ÂÖ±Êúâ„ÇÑÂãâÂº∑‰ºö„ÅÆÂÆüÊñΩ„ÇíË°å„ÅÜÂ§ßÂ≠¶ÂÜÖ„ÅÆ„Çµ„Éº„ÇØ„É´","Âêå‰∫∫„Ç§„Éô„É≥„Éà„Åß„ÅÆÈ†íÂ∏ÉÔºà„Ç≥„Éü„ÉÉ„ÇØ„Éû„Éº„Ç±„ÉÉ„Éà„ÉªÊäÄË°ìÊõ∏ÂÖ∏Ôºâ"],link:"https://meiji-ncc.tech/"},{date:"2017-04 - 2019-03",title:"fumble waals",texts:["„Ç™„É™„Ç∏„Éä„É´„Éú„Éº„Éâ„Ç≤„Éº„É†„ÅÆÂà∂‰Ωú„ÇíË°å„ÅÜÊúâÂøó„Å´„Çà„Çã„Çµ„Éº„ÇØ„É´","Âêå‰∫∫„Ç§„Éô„É≥„Éà„Åß„ÅÆÈ†íÂ∏ÉÔºà„Ç≥„Éü„ÉÉ„ÇØ„Éû„Éº„Ç±„ÉÉ„Éà„Éª„Ç≤„Éº„É†„Éû„Éº„Ç±„ÉÉ„ÉàÔºâ","‰ºÅÁîª„Åã„ÇâÂà∂‰Ωú„ÄÅË≤©Â£≤„Åæ„ÅßË°å„ÅÜ„Åå„ÄÅ‰∏ª„Å´„Éá„Ç∂„Ç§„É≥„ÇíÊãÖÂΩì"],link:"http://fumblewaals.com/"}]})},function(e,t,i){"use strict";i(0).tag2("more",'<a href="{opts.link}" title="{opts.title}"><span class="more-button">{text}</span></a>','more,[data-is="more"]{ padding: 0 1.5rem 1.5rem 1.5rem; display: flex; justify-content: center; } more > a > span,[data-is="more"] > a > span{ padding: 0.5rem; background: grey; color: white; border-radius: 3rem; min-width: 10rem; text-align: center; display: block; } more > a > span:hover,[data-is="more"] > a > span:hover{ background: #a3a3a3; }',"",function(e){this.text=void 0!==this.opts.text?this.opts.text:"more"})},function(e,t,i){"use strict";n(i(6)),n(i(22)),n(i(23)),n(i(24));var r=n(i(1));function n(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("profile",'<section> <div class="container"> <h2 class="section-title">Profile</h2> <about></about> <like></like> <skills></skills> <education></education> </div> </section> <footer></footer>','profile,[data-is="profile"]{ display: block; background: #2b2b2b; color: #efefef; }',"",function(e){this.on("route",function(){r.default.move()})})},function(e,t,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("education",'<h2 class="section-title">Education</h2> <list items="{schools}"></list>',"","",function(e){this.schools=[{date:"2010-04 - 2013-03",title:"Êú¨ÈÉ∑È´òÁ≠âÂ≠¶Ê†°",texts:["Êù±‰∫¨„ÉªÂ∑£È¥®„Å´„ÅÇ„ÇãÁßÅÁ´ã„ÅÆ‰∏≠È´ò‰∏ÄË≤´Ê†°","ÁîüÂæí‰ºö„ÉªÊñôÁêÜÁ†îÁ©∂‰ºö„ÉªÁæéË°ìÈÉ®„Å´ÊâÄÂ±û"],link:"http://www.hongo.ed.jp/"},{date:"2013-04 - 2017-03",title:"ÊòéÊ≤ªÂ§ßÂ≠¶",texts:["Á∑èÂêàÊï∞ÁêÜÂ≠¶ÈÉ® ÂÖàÁ´Ø„É°„Éá„Ç£„Ç¢„Çµ„Ç§„Ç®„É≥„ÇπÂ≠¶Áßë 1ÊúüÁîü","PC„Åß„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰Ωú„Çí„Åô„Çã„Çµ„Éº„ÇØ„É´„ÇíÁ´ã„Å°‰∏ä„Åí„ÄÅÂππ‰∫ãÈï∑„ÇíÂãô„ÇÅ„Çã"],link:"http://www.meiji.ac.jp/ims/subject/fms/"},{date:"2017-04 - 2019-03",title:"ÊòéÊ≤ªÂ§ßÂ≠¶Â§ßÂ≠¶Èô¢",texts:["ÂÖàÁ´ØÊï∞ÁêÜÁßëÂ≠¶Á†îÁ©∂Áßë ÂÖàÁ´Ø„É°„Éá„Ç£„Ç¢„Çµ„Ç§„Ç®„É≥„ÇπÂ∞ÇÊîª ‰øÆÂ£´ÔºàÂ∑•Â≠¶Ôºâ","„É¢„Éê„Ç§„É´ / „Ç¶„Çß„Ç¢„É©„Éñ„É´„Éá„Éê„Ç§„Çπ„Å´Èñ¢„Åô„Çã„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÅÆÁ†îÁ©∂","„Ç¢„É´„Éê„Ç§„Éà„Åß„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Ç®„É≥„Ç∏„Éã„Ç¢„Å®„Åó„Å¶ÂÉç„Åè"],link:"http://www.meiji.ac.jp/ams/professor/FMS.html"}]})},function(e,t,i){"use strict";i(0).tag2("skills",'<h2 class="section-title">Skills</h2> <div class="pure-g"> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills1}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills2}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> </div>','skills > div,[data-is="skills"] > div{ padding: 0.75rem; } skills > div .skill-box,[data-is="skills"] > div .skill-box{ padding: 0.75rem; } skills > div .skill-box > li,[data-is="skills"] > div .skill-box > li{ margin-bottom: 1.2rem; } skills > div .skill-box > li .skill-info,[data-is="skills"] > div .skill-box > li .skill-info{ display: flex; justify-content: space-between; align-items: baseline; } skills > div .skill-box > li .name,[data-is="skills"] > div .skill-box > li .name{ font-size: 1.3em; margin-right: 0.5rem; font-weight: 300; } skills > div .skill-box > li .sub,[data-is="skills"] > div .skill-box > li .sub{ font-size: 0.85rem; color: #bdbdbd; } skills > div .skill-box > li .bar,[data-is="skills"] > div .skill-box > li .bar{ background: #4b4b4b; border-radius: 1rem; } skills > div .skill-box > li .bar .level,[data-is="skills"] > div .skill-box > li .bar .level{ height: 0.7rem; border-radius: 1rem; background: #eaeaea; }',"",function(e){this.skills=[{name:"Android",sub:"Rx Okhttp Retrofit",level:"70%"},{name:"Kotlin",sub:"Anko Ktor",level:"80%"},{name:"Java",sub:"",level:"85%"},{name:"Processing",sub:"",level:"90%"}],this.skills1=[{name:"HTML",sub:"Pug Markdown",level:"90%"},{name:"CSS",sub:"Sass PostCSS CSS-Modules",level:"85%"},{name:"JavaScript",sub:"React Vue Node",level:"90%"},{name:"PHP",sub:"",level:"40%"}],this.skills2=[{name:"Git",sub:"",level:"60%"},{name:"Illustrator",sub:"",level:"80%"},{name:"Cacoo",sub:"",level:"40%"},{name:"Prott",sub:"",level:"30%"}]})},function(e,t,i){"use strict";i(0).tag2("like",'<h2 class="section-title">Like</h2> <div class="pure-g"> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Do</h3> <hr> <ul> <li each="{t, i in do}">{l}<span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Watch</h3> <hr> <ul> <li each="{t, i in watch}"><span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Eat</h3> <hr> <ul> <li each="{t, i in eat}"><span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> </div>','like,[data-is="like"]{ display: block; } like > div,[data-is="like"] > div{ padding: 0.75rem; } like > div .like-box,[data-is="like"] > div .like-box{ padding: 0.75rem; } like > div .like-box .like,[data-is="like"] > div .like-box .like{ background: #414141; padding: 0.6rem 1rem; border-radius: 0.3rem; } like > div .like-box .like h3,[data-is="like"] > div .like-box .like h3{ font-size: 1.4rem; margin-bottom: 0.5rem; } like > div .like-box .like hr,[data-is="like"] > div .like-box .like hr{ border-radius: 1rem; margin: 0.5rem 0; border: 1.5px solid; border-color: grey; background: gray; } like > div .like-box .like ul li,[data-is="like"] > div .like-box .like ul li{ line-height: 2rem; } like > div .like-box .like ul li .icon,[data-is="like"] > div .like-box .like ul li .icon{ font-size: 1.4rem; width: 2rem; display: inline-flex; justify-content: center; } like > div .like-box .like ul li .text,[data-is="like"] > div .like-box .like ul li .text{ font-size: 1.2rem; }',"",function(e){this.do={"üíª":"„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞","üëü":"Êï£Ê≠©","üé§":"‰∏Ä‰∫∫„Ç´„É©„Ç™„Ç±","üöó":"„Éü„Éã„ÉÅ„É•„Ç¢ÈõÜ„ÇÅ"},this.watch={"üé¨":"Êò†Áîª","üòÜ":"„ÅäÁ¨ë„ÅÑ„Éç„Çø","üëñ":"Êúç","üì∫":"„É°„Éá„Ç£„Ç¢„Ç¢„Éº„Éà"},this.eat={"üç£":"ÂØøÂè∏","üçï":"„Éî„Ç∂","üçú":"„É©„Éº„É°„É≥","üç∞":"„Ç±„Éº„Ç≠"}})},function(e,t,i){"use strict";a(i(7));var r=a(i(9)),n=a(i(1));function a(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projectall",'<section> <div class="container"> <h2 class="section-title">Projects</h2> <ul><a each="{p in categories}" onclick="{click.bind(this, p)}"> <li if="{selectedCategory !== p}">{p}</li> <li class="selected" if="{selectedCategory === p}">{p}</li></a></ul> <projects category="{selectedCategory}"></projects> </div> </section> <footer></footer>','projectall > section,[data-is="projectall"] > section{ background: #eeeeee; color: #222222; min-height: 100vh; } projectall > section .container ul,[data-is="projectall"] > section .container ul{ display: flex; justify-content: space-between; max-width: 400px; padding: 0 1.5rem; margin: 1rem auto 0 auto; } projectall > section .container ul li,[data-is="projectall"] > section .container ul li{ font-size: 0.8rem; display: inline-block; color: gray; padding: 0.5rem 0.5rem; cursor: pointer; border: 1px solid; border-radius: 2rem; text-align: center; } projectall > section .container ul li.selected,[data-is="projectall"] > section .container ul li.selected{ color: white; background: gray; border-color: gray; }',"",function(e){var t=this;this.categories=["All","Android","Web","Desktop","Design"],this.selectedCategory,this.on("route",function(){void 0!==r.default.query().category?t.update({selectedCategory:r.default.query().category}):t.update({selectedCategory:t.categories[0]}),n.default.move()}),this.click=function(e){this.update({selectedCategory:e})}.bind(this)})},function(e,t,i){"use strict";a(i(27));var r=a(i(8)),n=(a(i(3)),a(i(1)));function a(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projectdetail",'<div class="container"> <section> <div class="video-frame" if="{project.video !== undefined}"> <iframe riot-src="https://www.youtube.com/embed/{project.video}?rel=0" frameborder="0" allow="encrypted-media" allowfullscreen></iframe> </div> <div class="img-frame" if="{project.video === undefined}"> <webp riot-src="{project.img}"></webp> </div> <h1> <p>{project.name + \': \'}</p><span>{project.sub}</span> </h1> <tags tags="{project.keywords}"></tags> <div class="chapter"> <div class="chapter-title"> <h2>Abstract</h2> <hr> </div> <p>{project.text}</p> </div> <div class="chapter"> <div class="chapter-title"> <h2>Implementation</h2> <hr> </div> <p>{project.implement}</p> </div> <div class="chapter" if="{project.links !== undefined}"> <div class="chapter-title"> <h2>Links</h2> <hr> </div> <ol> <li each="{value, key in project.links}"><span>{key + \': \'}</span><span><a href="{value}">{value}</a></span></li> </ol> </div> </section> </div> <footer></footer>','projectdetail,[data-is="projectdetail"]{ min-height: 100vh; display: block; background: #2b2b2b; color: #efefef; } projectdetail > div > section,[data-is="projectdetail"] > div > section{ padding: 1.5rem; } projectdetail > div > section .video-frame,[data-is="projectdetail"] > div > section .video-frame{ position: relative; width: 100%; padding-top: 56.25%; } projectdetail > div > section .video-frame > iframe,[data-is="projectdetail"] > div > section .video-frame > iframe{ position: absolute; top: 0; right: 0; width: 100%; height: 100%; background: black; } projectdetail > div > section .img-frame,[data-is="projectdetail"] > div > section .img-frame{ width: 100%; } projectdetail > div > section .img-frame > img,[data-is="projectdetail"] > div > section .img-frame > img{ width: 100%; height: 100%; background: black; } projectdetail > div > section h1,[data-is="projectdetail"] > div > section h1{ color: white; margin: 1rem 0; text-align: justify; } projectdetail > div > section .chapter .chapter-title,[data-is="projectdetail"] > div > section .chapter .chapter-title{ display: flex; justify-content: space-between; align-items: center; margin: 1.5rem 0 1rem 0; } projectdetail > div > section .chapter .chapter-title > h2,[data-is="projectdetail"] > div > section .chapter .chapter-title > h2{ font-size: 1.5rem; margin-right: 0.5rem; color: white; } projectdetail > div > section .chapter .chapter-title > hr,[data-is="projectdetail"] > div > section .chapter .chapter-title > hr{ flex-grow: 1; border: 1.5px solid gray; border-radius: 1rem; min-width: 1rem; background: gray; } projectdetail > div > section .chapter p,[data-is="projectdetail"] > div > section .chapter p{ margin: 0.6rem 0; text-align: justify; } projectdetail > div > section .chapter ol,[data-is="projectdetail"] > div > section .chapter ol{ padding-left: 2rem; } projectdetail > div > section .chapter ol li,[data-is="projectdetail"] > div > section .chapter ol li{ list-style-type: decimal; line-height: 1.8rem; } projectdetail > div > section .chapter ol li a,[data-is="projectdetail"] > div > section .chapter ol li a{ color: #4e9adb; } projectdetail > div > section .chapter ol li a:hover,[data-is="projectdetail"] > div > section .chapter ol li a:hover{ text-decoration: underline; } @media (max-width: 768px) { projectdetail h1,[data-is="projectdetail"] h1{ font-size: 1.5rem; } projectdetail h2,[data-is="projectdetail"] h2{ font-size: 1.3rem; } }',"",function(e){var i=this;this.project={name:"",sub:"",img:"",video:"",text:"",implement:"",keywords:[]},this.on("route",function(t){i.update({project:r.default.filter(function(e){return e.name===t.replace(/_/g," ")})[0]}),n.default.move()})})},function(e,t,i){"use strict";i(0).tag2("tags",'<span each="{t in opts.tags}">{t}</span>','tags,[data-is="tags"]{ display: flex; flex-wrap: wrap; margin: 1rem 0; margin: 0.75rem 0; } tags > span,[data-is="tags"] > span{ margin: 0 0.5rem 0.5rem 0; padding: 0.1rem 0.3rem; border-radius: 0.2rem; background: #555; color: #eee; }',"",function(e){})},function(e,t,i){"use strict";i(0).tag2("other",'<section> <div class="container"> <h1>Page Not Found</h1> </div> </section> <footer></footer>','other,[data-is="other"]{ text-align: center; min-height: 100vh; display: flex; flex-direction: column; background: #2b2b2b; color: #efefef; } other section,[data-is="other"] section{ flex-grow: 1; display: flex; align-items: center; }',"",function(e){})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,