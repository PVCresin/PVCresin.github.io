/*! For license information please see index.js.LICENSE */
!function(i){var n={};function r(e){if(n[e])return n[e].exports;var t=n[e]={i:e,l:!1,exports:{}};return i[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.m=i,r.c=n,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=28)}([function(e,t,i){!function(e){"use strict";var y=[],W={},o="yield",w="__global_mixin",k="riot-",l=["ref","data-ref"],c="data-is",d="if",h="each",i="no-reorder",x="show",S="hide",r="key",b="__riot-events__",a="string",A="object",t="undefined",n="function",s="http://www.w3.org/1999/xlink",u="http://www.w3.org/2000/svg",f=/^xlink:(\w+)/,p=typeof window===t?void 0:window,m=/^on/,g=/([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g,M={viewbox:"viewBox",preserveaspectratio:"preserveAspectRatio"},v=/^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/,D=0|(p&&p.document||{}).documentMode;function _(e,t){return[].slice.call((t||document).querySelectorAll(e))}function Y(e,t){return(t||document).querySelector(e)}function L(){return document.createDocumentFragment()}function R(){return document.createTextNode("")}function O(e){var t=e.ownerSVGElement;return!!t||null===t}function j(e){return"svg"===e?document.createElementNS(u,e):document.createElement(e)}function T(e,t,i){if(i){var n=e.ownerDocument.importNode((new DOMParser).parseFromString('<svg xmlns="'+u+'">'+t+"</svg>","application/xml").documentElement,!0);e.appendChild(n)}else e.innerHTML=t}function P(e,t){e.style.display=t?"":"none",e.hidden=!t}function E(e,t){e.removeAttribute(t)}function C(i){return Object.keys(i).reduce(function(e,t){return e+" "+t+": "+i[t]+";"},"")}function H(e,t){return e.getAttribute(t)}function N(e,t,i){var n=f.exec(t);n&&n[1]?e.setAttributeNS(s,n[1],i):e.setAttribute(t,i)}function F(e,t,i){e.insertBefore(t,i.parentNode&&i)}function U(e,t){if(e)for(var i;i=g.exec(e);)t(i[1].toLowerCase(),i[2]||i[3]||i[4])}function I(e,t,i){if(e){var n,r=t(e,i);if(!1===r)return;for(e=e.firstChild;e;)n=e.nextSibling,I(e,t,r),e=n}}var V,G,z,$,B=Object.freeze({$$:_,$:Y,createFrag:L,createDOMPlaceholder:R,isSvg:O,mkEl:j,setInnerHTML:T,toggleVisibility:P,remAttr:E,styleObjectToString:C,getAttr:H,setAttr:N,safeInsert:F,walkAttrs:U,walkNodes:I}),Z={},q=[],J=!1;p&&(z=j("style"),$=Y("style[type=riot]"),N(z,"type","text/css"),$?($.id&&(z.id=$.id),$.parentNode.replaceChild(z,$)):document.head.appendChild(z),G=(V=z).styleSheet);var K={styleNode:V,add:function(e,t){t?Z[t]=e:q.push(e),J=!0},inject:function(){if(p&&J){J=!1;var e=Object.keys(Z).map(function(e){return Z[e]}).concat(q).join("\n");G?G.cssText=e:V.innerHTML=e}}},Q=function(){var l=["case","default","do","else","in","instanceof","prefix","return","typeof","void","yield"],u=l.reduce(function(e,t){return e+t.slice(-1)},""),c=/^\/(?=[^*>/])[^[/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\/]*)*?\/[gimuy]*/,d=/[$\w]/;function h(e,t){for(;0<=--t&&/\s/.test(e[t]););return t}return function(e,t){var i=/.*/g,n=i.lastIndex=t++,r=i.exec(e)[0].match(c);if(r){var a=n+r[0].length;n=h(e,n);var s=e[n];if(n<0||~"[{(,;:?=|&!^~>%*/".indexOf(s))return a;if("."===s)"."===e[n-1]&&(t=a);else if("+"===s||"-"===s)(e[--n]!==s||(n=h(e,n))<0||!d.test(e[n]))&&(t=a);else if(~u.indexOf(s)){for(var o=n+1;0<=--n&&d.test(e[n]););~l.indexOf(e.slice(n+1,o))&&(t=a)}}return t}}(),X=function(e){var t,i,n="g",r=/"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|`[^`\\]*(?:\\[\S\s][^`\\]*)*`/g,a=r.source+"|"+/(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source+"|"+/\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?([^<]\/)[gim]*/.source,s=RegExp("[\\x00-\\x1F<>a-zA-Z0-9'\",;\\\\]"),o=/(?=[[\]()*+?.^$|])/g,l=r.source+"|"+/(\/)(?![*\/])/.source,_={"(":RegExp("([()])|"+l,n),"[":RegExp("([[\\]])|"+l,n),"{":RegExp("([{}])|"+l,n)},u="{ }",c=["{","}","{","}",/{[^}]*}/,/\\([{}])/g,/\\({)|{/g,RegExp("\\\\(})|([[({])|(})|"+l,n),u,/^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,/(^|[^\\]){=[\S\s]*?}/],d=void 0,y=[];function h(e){return e}function f(e,t){return t||(t=y),new RegExp(e.source.replace(/{/g,t[2]).replace(/}/g,t[3]),e.global?n:"")}function p(e){if(e===u)return c;var t=e.split(" ");if(2!==t.length||s.test(e))throw new Error('Unsupported brackets "'+e+'"');return(t=t.concat(e.replace(o,"\\").split(" ")))[4]=f(1<t[1].length?/{[\S\s]*?}/:c[4],t),t[5]=f(3<e.length?/\\({|})/g:c[5],t),t[6]=f(c[6],t),t[7]=RegExp("\\\\("+t[3]+")|([[({])|("+t[3]+")|"+l,n),t[8]=e,t}function m(e){return e instanceof RegExp?t(e):y[e]}function g(e){(e||(e=u))!==y[8]&&(y=p(e),t=e===u?h:f,y[9]=t(c[9])),d=e}return m.split=function(n,r,t){t||(t=y);var e,i,a,s,o,l,u=[],c=t[6],d=[],h="";for(i=a=c.lastIndex=0;e=c.exec(n);){if(l=c.lastIndex,s=e.index,i){if(e[2]){var f=e[2],p=_[f],m=1;for(p.lastIndex=l;e=p.exec(n);)if(e[1]){if(e[1]===f)++m;else if(!--m)break}else p.lastIndex=v(e.index,p.lastIndex,e[2]);c.lastIndex=m?n.length:p.lastIndex;continue}if(!e[3]){c.lastIndex=v(s,l,e[4]);continue}}e[1]||(g(n.slice(a,s)),a=c.lastIndex,(c=t[6+(i^=1)]).lastIndex=a)}return n&&a<n.length&&g(n.slice(a)),u.qblocks=d,u;function g(e){h&&(e=h+e,h=""),r||i?u.push(e&&e.replace(t[5],"$1")):u.push(e)}function v(e,t,i){return i&&(t=Q(n,e)),r&&e+2<t&&(o="⁗"+d.length+"~",d.push(n.slice(e,t)),h+=n.slice(a,e)+o,a=t),t}},m.hasExpr=function(e){return y[4].test(e)},m.loopKeys=function(e){var t=e.match(y[9]);return t?{key:t[1],pos:t[2],val:y[0]+t[3].trim()+y[1]}:{val:e.trim()}},m.array=function(e){return e?p(e):y},Object.defineProperty(m,"settings",{set:function(e){var t;t=(e=e||{}).brackets,Object.defineProperty(e,"brackets",{set:g,get:function(){return d},enumerable:!0}),i=e,g(t)},get:function(){return i}}),m.settings="undefined"!=typeof riot&&riot.settings||{},m.set=g,m.skipRegex=Q,m.R_STRINGS=r,m.R_MLCOMMS=/\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,m.S_QBLOCKS=a,m.S_QBLOCK2=l,m}(),ee=function(){var r={};function a(e,t){return e?(r[e]||(r[e]=(i=e,n=function(e){var t,i=X.split(e.replace(o,'"'),1),n=i.qblocks;if(2<i.length||i[0]){var r,a,s=[];for(r=a=0;r<i.length;++r)(t=i[r])&&(t=1&r?u(t,1,n):'"'+t.replace(/\\/g,"\\\\").replace(/\r\n?|\n/g,"\\n").replace(/"/g,'\\"')+'"')&&(s[a++]=t);t=a<2?s[0]:"["+s.join(",")+'].join("")'}else t=u(i[1],0,n);return n.length&&(t=t.replace(l,function(e,t){return n[t].replace(/\r/g,"\\r").replace(/\n/g,"\\n")})),t}(i),"try{return "!==n.slice(0,11)&&(n="return "+n),new Function("E",n+";")))).call(t,function(e,t){e.riotData={tagName:t&&t.__&&t.__.tagName,_riot_id:t&&t._riot_id},a.errorHandler?a.errorHandler(e):"undefined"!=typeof console&&console.error}.bind({data:t,tmpl:e})):e;var i,n}a.hasExpr=X.hasExpr,a.loopKeys=X.loopKeys,a.clearCache=function(){r={}},a.errorHandler=null;var o=/\u2057/g,l=/\u2057(\d+)~/g,c=/^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/,d={"(":/[()]/g,"[":/[[\]]/g,"{":/[{}]/g};function u(a,e,t){if(a=a.replace(/\s+/g," ").trim().replace(/\ ?([[\({},?\.:])\ ?/g,"$1")){for(var i,n=[],r=0;a&&(i=a.match(c))&&!i.index;){var s,o,l=/,|([[{(])|$/g;for(a=RegExp.rightContext,s=i[2]?t[i[2]].slice(1,-1).trim().replace(/\s+/g," "):i[1];o=(i=l.exec(a))[1];)u(o,l);o=a.slice(0,i.index),a=RegExp.rightContext,n[r++]=f(o,1,s)}a=r?1<r?"["+n.join(",")+'].join(" ").trim()':n[0]:f(a,e)}return a;function u(e,t){var i,n=1,r=d[e];for(r.lastIndex=t.lastIndex;i=r.exec(a);)if(i[0]===e)++n;else if(!--n)break;t.lastIndex=n?a.length:r.lastIndex}}var s='"in this?this:'+("object"!=typeof window?"global":"window")+").",n=/[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,h=/^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;function f(e,t,i){var a;return e=e.replace(n,function(e,t,i,n,r){return i&&(n=a?0:n+e.length,"this"!==i&&"global"!==i&&"window"!==i?(e=t+'("'+i+s+i,n&&(a="."===(r=r[n])||"("===r||"["===r)):n&&(a=!h.test(r.slice(n)))),e}),a&&(e="try{return "+e+"}catch(e){E(e,this)}"),i?e=(a?"function(){"+e+"}.call(this)":"("+e+")")+'?"'+i+'":""':t&&(e="function(v){"+(a?e.replace("return ","v="):"v=("+e+")")+';return v||v===0?v:""}.call(this)'),e}return a.version=X.version="v3.0.8",a}(),te=function(o){o=o||{};var l={},u=Array.prototype.slice;return Object.defineProperties(o,{on:{value:function(e,t){return"function"==typeof t&&(l[e]=l[e]||[]).push(t),o},enumerable:!1,writable:!1,configurable:!1},off:{value:function(e,t){if("*"!=e||t)if(t)for(var i,n=l[e],r=0;i=n&&n[r];++r)i==t&&n.splice(r--,1);else delete l[e];else l={};return o},enumerable:!1,writable:!1,configurable:!1},one:{value:function(t,i){return o.on(t,function e(){o.off(t,e),i.apply(o,arguments)})},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(e){var t,i,n,r=arguments,a=arguments.length-1,s=new Array(a);for(n=0;n<a;n++)s[n]=r[n+1];for(t=u.call(l[e]||[],0),n=0;i=t[n];++n)i.apply(o,s);return l["*"]&&"*"!=e&&o.trigger.apply(o,["*",e].concat(s)),o},enumerable:!1,writable:!1,configurable:!1}}),o};function ie(e){return v.test(e)}function ne(e){return typeof e===n}function re(e){return e&&typeof e===A}function ae(e){return typeof e===t}function se(e){return typeof e===a}function oe(e){return le(e)||""===e}function le(e){return ae(e)||null===e}function ue(e){return Array.isArray(e)||e instanceof Array}function ce(e,t){var i=we(e,t);return ae(e[t])||i&&i.writable}var de=Object.freeze({isBoolAttr:ie,isFunction:ne,isObject:re,isUndefined:ae,isString:se,isBlank:oe,isNil:le,isArray:ue,isWritable:ce});function he(e,t){for(var i=e?e.length:0,n=0;n<i;n++)t(e[n],n);return e}function fe(e,t){return-1!==e.indexOf(t)}function pe(e){return e.replace(/-(\w)/g,function(e,t){return t.toUpperCase()})}function me(e,t){return e.slice(0,t.length)===t}function ge(e,t,i,n){return Object.defineProperty(e,t,be({value:i,enumerable:!1,writable:!1,configurable:!0},n)),e}var ve,_e=(ve=-1,function(){return++ve});function ye(e){console&&console.warn}var we=function(e,t){return Object.getOwnPropertyDescriptor(e,t)};function be(e){for(var t,i=1,n=arguments,r=n.length;i<r;i++)if(t=n[i])for(var a in t)ce(e,a)&&(e[a]=t[a]);return e}var ke=Object.freeze({each:he,contains:fe,toCamel:pe,startsWith:me,defineProperty:ge,uid:_e,warn:ye,getPropDescriptor:we,extend:be}),xe=be(Object.create(X.settings),{skipAnonymousTags:!0,autoUpdate:!0});function Se(e,t,i,n){var r,a=function(e,t,i){var n=this.__.parent,r=this.__.item;if(!r)for(;n&&!r;)r=n.__.item,n=n.__.parent;if(ce(i,"currentTarget")&&(i.currentTarget=e),ce(i,"target")&&(i.target=i.srcElement),ce(i,"which")&&(i.which=i.charCode||i.keyCode),i.item=r,t.call(this,i),xe.autoUpdate&&!i.preventUpdate){var a=st(this);a.isMounted&&a.update()}}.bind(n,i,t);i[e]=null,r=e.replace(m,""),fe(n.__.listeners,i)||n.__.listeners.push(i),i[b]||(i[b]={}),i[b][e]&&i.removeEventListener(r,i[b][e]),i[b][e]=a,i.addEventListener(r,a,!1)}function Me(e){if(!this.root||!H(this.root,"virtualized")){var t,i=e.dom,n=(b=e.attr)?(b=b.replace(k,""),M[b]&&(b=M[b]),b):null,r=fe([x,S],n),a=e.root&&"VIRTUAL"===e.root.tagName,s=this.__,o=s.isAnonymous,l=i&&(e.parent||i.parentNode),u="style"===n,c="class"===n;if(e._riot_id)e.__.wasCreated?e.update():(e.mount(),a&&ht(e,e.root));else{if(e.update)return e.update();var d=r&&!o?pt.call(this):this,h=!oe(t=ee(e.expr,d)),f=re(t);if(f&&(c?t=ee(JSON.stringify(t),this):u&&(t=C(t))),!e.attr||e.wasParsedOnce&&h&&!1!==t||E(i,H(i,e.attr)?e.attr:n),e.bool&&(t=!!t&&n),e.isRtag)return m=this,g=t,_=(p=e).tag||p.dom._tag,y=(_?_.__:{}).head,w="VIRTUAL"===p.dom.tagName,void(_&&p.tagName===g?_.update():(_&&(w&&(v=R(),y.parentNode.insertBefore(v,y)),_.unmount(!0)),se(g)&&(p.impl=W[g],p.impl&&(p.tag=_=at(p.impl,{root:p.dom,parent:m,tagName:g},p.dom.innerHTML,m),he(p.attrs,function(e){return N(_.root,e.name,e.value)}),p.tagName=g,_.mount(),w&&ht(_,v||_.root),m.__.onUnmount=function(){var e=_.opts.dataIs;ct(_.parent.tags,e,_),ct(_.__.parent.tags,e,_),_.unmount()}))));if((!e.wasParsedOnce||e.value!==t)&&(e.value=t,e.wasParsedOnce=!0,!f||c||u||r)){if(h||(t=""),!n)return t+="",void(l&&("TEXTAREA"===(e.parent=l).tagName?(l.value=t,D||(i.nodeValue=t)):i.nodeValue=t));ne(t)?Se(n,t,i,this):r?P(i,n===S?!t:t):(e.bool&&(i[n]=t),"value"===n&&i.value!==t?i.value=t:h&&!1!==t&&N(i,n,t),u&&i.hidden&&P(i,!1))}}}var p,m,g,v,_,y,w,b}function De(e){he(e,Me.bind(this))}var Ye={init:function(e,t,i){E(e,d),this.tag=t,this.expr=i,this.stub=R();var n=(this.pristine=e).parentNode;return n.insertBefore(this.stub,e),n.removeChild(e),this},update:function(){this.value=ee(this.expr,this.tag),this.value&&!this.current?(this.current=this.pristine.cloneNode(!0),this.stub.parentNode.insertBefore(this.current,this.stub),this.expressions=Ce.apply(this.tag,[this.current,!0])):!this.value&&this.current&&(ot(this.expressions),this.current._tag?this.current._tag.unmount():this.current.parentNode&&this.current.parentNode.removeChild(this.current),this.current=null,this.expressions=[]),this.value&&De.call(this.tag,this.expressions)},unmount:function(){ot(this.expressions||[])}},Oe={init:function(e,t,i,n){return this.dom=e,this.attr=i,this.rawValue=n,this.parent=t,this.hasExp=ee.hasExpr(n),this},update:function(){var e=this.value,t=this.parent&&st(this.parent),i=this.dom.__ref||this.tag||this.dom;this.value=this.hasExp?ee(this.rawValue,this.parent):this.rawValue,!oe(e)&&t&&ct(t.refs,e,i),!oe(this.value)&&se(this.value)?(t&&ut(t.refs,this.value,i,null,this.parent.__.index),this.value!==e&&N(this.dom,this.attr,this.value)):E(this.dom,this.attr),this.dom.__ref||(this.dom.__ref=i)},unmount:function(){var e=this.tag||this.dom,t=this.parent&&st(this.parent);!oe(this.value)&&t&&ct(t.refs,this.value,e)}};function je(e,t,i,n){var r=n?Object.create(n):{};return r[e.key]=t,e.pos&&(r[e.pos]=i),r}function Te(e,t){e.splice(t,1),this.unmount(),ct(this.parent,this,this.__.tagName,!0)}function Pe(y,w,b){var k,x=typeof H(y,i)!==a||E(y,i),S=H(y,r),M=!!S&&ee.hasExpr(S),D=lt(y),Y=W[D],e=y.parentNode,t=R(),O=nt(y),n=H(y,d),j=[],T=y.innerHTML,P=!W[D],C="VIRTUAL"===y.tagName,N=[];return E(y,h),E(y,r),(b=ee.loopKeys(b)).isLoop=!0,n&&E(y,d),e.insertBefore(t,y),e.removeChild(y),b.update=function(){b.value=ee(b.val,w);var m=b.value,g=L(),i=!ue(m)&&!se(m),v=t.parentNode,_=[];v&&(i?m=(k=m||!1)?Object.keys(m).map(function(e){return je(b,m[e],e)}):[]:k=!1,n&&(m=m.filter(function(e,t){return b.key&&!i?!!ee(n,je(b,e,t,w)):!!ee(n,be(Object.create(w),e))})),he(m,function(e,t){var i,n,r,a,s=!k&&b.key?je(b,e,t):e,o=(n=e,r=s,a=M,(i=S)?a?ee(i,r):n[i]:n),l=x&&typeof e===A&&!k,u=N.indexOf(o),c=-1===u,d=!c&&l?u:t,h=j[d],f=t>=N.length,p=l&&c||!l&&!h;p?((h=it(Y,{parent:w,isLoop:!0,isAnonymous:P,tagName:D,root:y.cloneNode(P),item:s,index:t},T)).mount(),f?function(e,t){t?ft.call(this,e):e.appendChild(this.root)}.apply(h,[g||v,C]):function(e,t,i){i?ft.apply(this,[e,t]):F(e,this.root,t.root)}.apply(h,[v,j[t],C]),f||N.splice(t,0,s),j.splice(t,0,h),O&&ut(w.tags,D,h,!0)):d!==t&&l&&((S||fe(m,N[d]))&&(function(e,t,i){i?mt.apply(this,[e,t]):F(e,this.root,t.root)}.apply(h,[v,j[t],C]),j.splice(t,0,j.splice(d,1)[0]),N.splice(t,0,N.splice(d,1)[0])),b.pos&&(h[b.pos]=t),!O&&h.tags&&function(t){var i=this;he(Object.keys(this.tags),function(e){rt.apply(i.tags[e],[e,t])})}.call(h,t)),h.__.item=s,h.__.index=t,h.__.parent=w,_[t]=o,p||h.update(s)}),function(e,t){for(var i=t.length,n=e.length;n<i;)Te.apply(t[--i],[t,i])}(m,j),N=_.slice(),v.insertBefore(g,t))},b.unmount=function(){he(j,function(e){e.unmount()})},b}function Ce(s,o){var l=this,u=[];return I(s,function(e){var t,i,n=e.nodeType;if((o||e!==s)&&(3===n&&"STYLE"!==e.parentNode.tagName&&ee.hasExpr(e.nodeValue)&&u.push({dom:e,expr:e.nodeValue}),1===n)){var r="VIRTUAL"===e.tagName;if(t=H(e,h))return r&&N(e,"loopVirtual",!0),u.push(Pe(e,l,t)),!1;if(t=H(e,d))return u.push(Object.create(Ye).init(e,l,t)),!1;if((t=H(e,c))&&ee.hasExpr(t))return u.push({isRtag:!0,expr:t,dom:e,attrs:[].slice.call(e.attributes)}),!1;if(i=nt(e),r&&(H(e,"virtualized")&&e.parentElement.removeChild(e),i||H(e,"virtualized")||H(e,"loopVirtual")||(i={tmpl:e.outerHTML})),i&&(e!==s||o)){if(!r)return u.push(at(i,{root:e,parent:l},e.innerHTML,l)),!1;H(e,c)&&ye(),N(e,"virtualized",!0);var a=it({tmpl:e.outerHTML},{root:e,parent:l},e.innerHTML);u.push(a)}Ne.apply(l,[e,e.attributes,function(e,t){t&&u.push(t)}])}}),u}function Ne(r,e,a){var s=this;he(e,function(e){if(!e)return!1;var t,i=e.name,n=ie(i);fe(l,i)&&r.tagName.toLowerCase()!==o?t=Object.create(Oe).init(r,s,i,e.value):ee.hasExpr(e.value)&&(t={dom:r,expr:e.value,attr:i,bool:n}),a(e,t)})}var We=/<yield\b/i,Ae=/<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi,Le=/<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi,Re=/<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi,Ee={tr:"tbody",th:"tr",td:"tr",col:"colgroup"},He=D&&D<10?/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/:/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/,Fe="div",Ue="svg";function Ie(e,t,i){var n=e&&e.match(/^\s*<([-\w]+)/),r=n&&n[1].toLowerCase(),a=j(i?Ue:Fe);return e=function(e,i){if(!We.test(e))return e;var n={};return i=i&&i.replace(Le,function(e,t,i){return n[t]=n[t]||i,""}).trim(),e.replace(Re,function(e,t,i){return n[t]||i||""}).replace(Ae,function(e,t){return i||t||""})}(e,t),He.test(r)?a=function(e,t,i){var n="o"===i[0],r=n?"select>":"table>";if(e.innerHTML="<"+r+t.trim()+"</"+r,r=e.firstChild,n)r.selectedIndex=-1;else{var a=Ee[i];a&&1===r.childElementCount&&(r=Y(a,r))}return r}(a,e,r):T(a,e,i),a}function Ve(e,t){var i=this,n=i.name,r=i.tmpl,a=i.css,s=i.attrs,o=i.onCreate;return W[n]||(Ge(n,r,a,s,o),W[n].class=this.constructor),dt(e,n,t,this),a&&K.inject(),this}function Ge(e,t,i,n,r){return ne(n)&&(r=n,/^[\w-]+\s?=/.test(i)?(n=i,i=""):n=""),i&&(ne(i)?r=i:K.add(i)),e=e.toLowerCase(),W[e]={name:e,tmpl:t,attrs:n,fn:r},e}function ze(e,t,i,n,r){return i&&K.add(i,e),W[e]={name:e,tmpl:t,attrs:n,fn:r},e}function $e(e,r,a){var t,i,s=[];if(K.inject(),re(r)&&(a=r,r=0),t=se(e)?(e="*"===e?i=gt():e+gt(e.split(/, */)))?_(e):[]:e,"*"===r){if(r=i||gt(),t.tagName)t=_(r,t);else{var n=[];he(t,function(e){return n.push(_(r,e))}),t=n}r=0}return function e(t){if(t.tagName){var i,n=H(t,c);r&&n!==r&&N(t,c,n=r),(i=dt(t,n||t.tagName.toLowerCase(),a))&&s.push(i)}else t.length&&he(t,e)}(t),s}var Be={},Ze=Be[w]={},qe=0;function Je(e,t,i){if(re(e))Je("__"+qe+++"__",e,!0);else{var n=i?Ze:Be;if(!t){if(ae(n[e]))throw new Error("Unregistered mixin: "+e);return n[e]}n[e]=ne(t)?be(t.prototype,n[e]||{})&&t:be(n[e]||{},t)}}function Ke(){return he(y,function(e){return e.update()})}function Qe(e){W[e]=null}var Xe=Object.freeze({Tag:Ve,tag:Ge,tag2:ze,mount:$e,mixin:Je,update:Ke,unregister:Qe,version:"v3.8.1"});function et(e,t,i,n,r){if(!e||!i){var a=e?pt.call(this):t||this;he(r,function(e){e.expr&&Me.call(a,e.expr),n[pe(e.name).replace(k,"")]=e.expr?e.expr.value:e.value})}}function tt(e){var t=this.__,i=t.isAnonymous;ge(this,"isMounted",e),i||(e?this.trigger("mount"):(this.trigger("unmount"),this.off("*"),this.__.wasCreated=!1))}function it(a,e,t){void 0===a&&(a={}),void 0===e&&(e={});var n,s=e.context||{},o=be({},e.opts),l=e.parent,r=e.isLoop,u=!!e.isAnonymous,c=xe.skipAnonymousTags&&u,d=e.item,i=e.index,h=[],f=[],p=[],m=e.root,g=e.tagName||lt(m),v="virtual"===g,_=!v&&!a.tmpl;return c||te(s),a.name&&m._tag&&m._tag.unmount(!0),ge(s,"isMounted",!1),ge(s,"__",{isAnonymous:u,instAttrs:h,innerHTML:t,tagName:g,index:i,isLoop:r,isInline:_,listeners:[],virts:[],wasCreated:!1,tail:null,head:null,parent:null,item:null}),ge(s,"_riot_id",_e()),ge(s,"root",m),be(s,{opts:o},d),ge(s,"parent",l||null),ge(s,"tags",{}),ge(s,"refs",{}),n=_||r&&u?m:(v||(m.innerHTML=""),Ie(a.tmpl,t,O(m))),ge(s,"update",function(e){var t={},i=s.isMounted&&!c;return u&&l&&be(s,l),be(s,e),et.apply(s,[r,l,u,t,h]),i&&s.isMounted&&ne(s.shouldUpdate)&&!s.shouldUpdate(e,t)||(be(o,t),i&&s.trigger("update",e),De.call(s,p),i&&s.trigger("updated")),s}),ge(s,"mixin",function(){return he(arguments,function(e){var n,t,i=[],r=["init","__proto__"];e=se(e)?Je(e):e,n=ne(e)?new e:e;for(var a=Object.getPrototypeOf(n);i=i.concat(Object.getOwnPropertyNames(t||n)),t=Object.getPrototypeOf(t||n););he(i,function(e){if(!fe(r,e)){var t=we(n,e)||we(a,e),i=t&&(t.get||t.set);!s.hasOwnProperty(e)&&i?Object.defineProperty(s,e,t):s[e]=ne(n[e])?n[e].bind(s):n[e]}}),n.init&&n.init.bind(s)(o)}),s}),ge(s,"mount",function(){m._tag=s,Ne.apply(l,[m,m.attributes,function(e,t){!u&&Oe.isPrototypeOf(t)&&(t.tag=s),e.expr=t,h.push(e)}]),U(a.attrs,function(e,t){f.push({name:e,value:t})}),Ne.apply(s,[m,f,function(e,t){t?p.push(t):N(m,e.name,e.value)}]),et.apply(s,[r,l,u,o,h]);var e=Je(w);if(e&&!c)for(var t in e)e.hasOwnProperty(t)&&s.mixin(e[t]);if(a.fn&&a.fn.call(s,o),c||s.trigger("before-mount"),he(Ce.apply(s,[n,u]),function(e){return p.push(e)}),s.update(d),!u&&!_)for(;n.firstChild;)m.appendChild(n.firstChild);if(ge(s,"root",m),!c&&s.parent){var i=st(s.parent);i.one(i.isMounted?"updated":"mount",function(){tt.call(s,!0)})}else tt.call(s,!0);return s.__.wasCreated=!0,s}),ge(s,"unmount",function(e){var t=s.root,i=t.parentNode,n=y.indexOf(s);if(c||s.trigger("before-unmount"),U(a.attrs,function(e){me(e,k)&&(e=e.slice(k.length)),E(m,e)}),s.__.listeners.forEach(function(t){Object.keys(t[b]).forEach(function(e){t.removeEventListener(e,t[b][e])})}),-1!==n&&y.splice(n,1),l&&!u){var r=st(l);v?Object.keys(s.tags).forEach(function(e){return ct(r.tags,e,s.tags[e])}):ct(r.tags,g,s)}return s.__.virts&&he(s.__.virts,function(e){e.parentNode&&e.parentNode.removeChild(e)}),ot(p),he(h,function(e){return e.expr&&e.expr.unmount&&e.expr.unmount()}),e?T(t,""):i&&i.removeChild(t),s.__.onUnmount&&s.__.onUnmount(),s.isMounted||tt.call(s,!0),tt.call(s,!1),delete s.root._tag,s}),s}function nt(e){return e.tagName&&W[H(e,c)||H(e,c)||e.tagName.toLowerCase()]}function rt(e,t){var i,n=this.parent;n&&(ue(i=n.tags[e])?i.splice(t,0,i.splice(i.indexOf(this),1)[0]):ut(n.tags,e,this))}function at(e,t,i,n){var r=it(e,t,i),a=t.tagName||lt(t.root,!0),s=st(n);return ge(r,"parent",s),r.__.parent=n,ut(s.tags,a,r),s!==n&&ut(n.tags,a,r),r}function st(e){for(var t=e;t.__.isAnonymous&&t.parent;)t=t.parent;return t}function ot(e){he(e,function(e){e.unmount?e.unmount(!0):e.tagName?e.tag.unmount(!0):e.unmount&&e.unmount()})}function lt(e,t){var i=nt(e),n=!t&&H(e,c);return n&&!ee.hasExpr(n)?n:i?i.name:e.tagName.toLowerCase()}function ut(e,t,i,n,r){var a=e[t],s=ue(a),o=!ae(r);if(!a||a!==i)if(!a&&n)e[t]=[i];else if(a)if(s){var l=a.indexOf(i);if(l===r)return;-1!==l&&a.splice(l,1),o?a.splice(r,0,i):a.push(i)}else e[t]=[a,i];else e[t]=i}function ct(e,t,i,n){if(ue(e[t])){var r=e[t].indexOf(i);-1!==r&&e[t].splice(r,1),e[t].length?1!==e[t].length||n||(e[t]=e[t][0]):delete e[t]}else e[t]===i&&delete e[t]}function dt(e,t,i,n){var r,a=W[t],s=W[t].class,o=n||(s?Object.create(s.prototype):{}),l=e._innerHTML=e._innerHTML||e.innerHTML,u=be({root:e,opts:i,context:o},{parent:i?i.parent:null});return a&&e&&(r=it(a,u,l)),r&&r.mount&&(r.mount(!0),fe(y,r)||y.push(r)),r}function ht(e,t){var i=L();ft.call(e,i),t.parentNode.replaceChild(i,t)}function ft(e,t){var i,n,r=R(),a=R(),s=L();for(this.root.insertBefore(r,this.root.firstChild),this.root.appendChild(a),this.__.head=n=r,this.__.tail=a;n;)i=n.nextSibling,s.appendChild(n),this.__.virts.push(n),n=i;t?e.insertBefore(s,t.__.head):e.appendChild(s)}function pt(){return this.parent?be(Object.create(this),this.parent):this}function mt(e,t){for(var i,n=this.__.head,r=L();n;)if(i=n.nextSibling,r.appendChild(n),(n=i)===this.__.tail){r.appendChild(n),e.insertBefore(r,t.__.head);break}}function gt(e){if(e)return e.filter(function(e){return!/[^-\w]/.test(e)}).reduce(function(e,t){var i=t.trim().toLowerCase();return e+",["+c+'="'+i+'"]'},"");var t=Object.keys(W);return t+gt(t)}var vt=Object.freeze({getTag:nt,moveChildTag:rt,initChildTag:at,getImmediateCustomParentTag:st,unmountAll:ot,getTagName:lt,arrayishAdd:ut,arrayishRemove:ct,mountTo:dt,makeReplaceVirtual:ht,makeVirtual:ft,inheritParentProps:pt,moveVirtual:mt,selectTags:gt}),_t=xe,yt={tmpl:ee,brackets:X,styleManager:K,vdom:y,styleNode:K.styleNode,dom:B,check:de,misc:ke,tags:vt},wt=Ve,bt=Ge,kt=ze,xt=$e,St=Je,Mt=Ke,Dt=Qe,Yt=te,Ot=be({},Xe,{observable:te,settings:_t,util:yt});e.settings=_t,e.util=yt,e.Tag=wt,e.tag=bt,e.tag2=kt,e.mount=xt,e.mixin=St,e.update=Mt,e.unregister=Dt,e.version="v3.8.1",e.observable=Yt,e.default=Ot,Object.defineProperty(e,"__esModule",{value:!0})}(t)},function(e,t,i){"use strict";i(0).tag2("list",'<ul> <li each="{item in opts.items}"> <h3><a href="{item.link}">{item.title}</a> <div class="right"> <hr><span><span class="date" if="{item.date.length &lt;= 7}">{item.date}</span><span class="term" if="{item.date.length &gt; 7}">{item.date}</span></span> </div> </h3> <p class="sub" each="{t in item.texts}">{t}</p> </li> </ul>','list > ul,[data-is="list"] > ul{ padding: 0.75rem; } list > ul li,[data-is="list"] > ul li{ margin-bottom: 1rem; } list > ul li h3,[data-is="list"] > ul li h3{ display: flex; margin: auto; align-items: center; } list > ul li h3 a,[data-is="list"] > ul li h3 a{ color: #4e9adb; padding: 0.75rem; text-align: justify; } list > ul li h3 a:hover,[data-is="list"] > ul li h3 a:hover{ text-decoration: underline; } list > ul li h3 .right,[data-is="list"] > ul li h3 .right{ display: inline-flex; flex-grow: 1; align-items: center; } list > ul li h3 .right hr,[data-is="list"] > ul li h3 .right hr{ display: inline-flex; flex-grow: 1; border: 1.5px solid gray; border-radius: 1rem; min-width: 1rem; background: gray; } list > ul li h3 .right span,[data-is="list"] > ul li h3 .right span{ padding: 0.75rem; display: inline-flex; } list > ul li h3 .right span span,[data-is="list"] > ul li h3 .right span span{ background: #555; color: white; padding: 0.1rem 0.3rem; border-radius: 0.3rem; display: inline-block; text-align: center; font-size: 0.8rem; font-weight: normal; } list > ul li h3 .right span span.date,[data-is="list"] > ul li h3 .right span span.date{ min-width: 4rem; } list > ul li h3 .right span span.term,[data-is="list"] > ul li h3 .right span span.term{ min-width: 8rem; } list > ul li .sub,[data-is="list"] > ul li .sub{ color: #bdbdbd; padding: 0 0.75rem; font-weight: 300; text-align: justify; }','class="pure-g pure-u-1-1"',function(e){})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return e.init=function(){window.scrolls=[],window.addEventListener("scroll",function(){var e=window.pageYOffset,t=window.location.hash;window.scrolls[""+t]=e})},e.move=function(){var e=window.location.hash;window.scrolls[""+e]?window.scroll(0,0):window.scroll(0,window.scrolls[""+e])},e}();t.default=n},function(e,t,i){"use strict";i(0).tag2("webp",'<picture> <source srcset="resources/{opts.src||opts.riotSrc}.webp" type="image/webp"> <source srcset="resources/{opts.src||opts.riotSrc}.png" type="image/png"><img riot-src="resources/{opts.src||opts.riotSrc}.webp"> </picture>','webp,[data-is="webp"]{ display: block; } webp > picture,[data-is="webp"] > picture{ width: 100%; height: 100%; } webp > picture > img,[data-is="webp"] > picture > img{ width: 100%; }',"",function(e){this.on("mounted",function(){})})},function(e,t,i){"undefined"!=typeof window&&window,e.exports=function(s){s=s||{};var o={},l=Array.prototype.slice;return Object.defineProperties(s,{on:{value:function(e,t){return"function"==typeof t&&(o[e]=o[e]||[]).push(t),s},enumerable:!1,writable:!1,configurable:!1},off:{value:function(e,t){if("*"!=e||t)if(t)for(var i,n=o[e],r=0;i=n&&n[r];++r)i==t&&n.splice(r--,1);else delete o[e];else o={};return s},enumerable:!1,writable:!1,configurable:!1},one:{value:function(t,i){return s.on(t,function e(){s.off(t,e),i.apply(s,arguments)})},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(e){var t,i,n,r=arguments.length-1,a=new Array(r);for(n=0;n<r;n++)a[n]=arguments[n+1];for(t=l.call(o[e]||[],0),n=0;i=t[n];++n)i.apply(s,a);return o["*"]&&"*"!=e&&s.trigger.apply(s,["*",e].concat(a)),s},enumerable:!1,writable:!1,configurable:!1}}),s}},function(e,t,i){"use strict";i.r(t);var r,n,a,s,o,l=i(4),u=i.n(l),c=/^.+?\/\/+[^/]+/,d="EventListener",h="remove"+d,f="add"+d,p="hasAttribute",m="popstate",g="hashchange",v="trigger",_=3,y="undefined"!=typeof window&&window,w="undefined"!=typeof document&&document,b=y&&history,k=y&&(b.location||y.location),x=N.prototype,S=w&&w.ontouchstart?"touchstart":"click",M=u()(),D=!1,Y=!1,O=[],j=0;function T(e){return e.split(/[/?#]/)}function P(e,t){var i=t.replace(/\?/g,"\\?").replace(/\*/g,"([^/?#]+?)").replace(/\.\./,".*"),n=new RegExp("^"+i+"$"),r=e.match(n);if(r)return r.slice(1)}function C(e){var t,i,n;t=E,i=1,r=function(){clearTimeout(n),n=setTimeout(t,i)},y[f](m,r),y[f](g,r),w[f](S,H),e&&E(!0)}function N(){this.$=[],u()(this),M.on("stop",this.s.bind(this)),M.on("emit",this.e.bind(this))}function W(e){return e.replace(/^\/|\/$/,"")}function A(e){return"string"==typeof e}function L(e){return(e||k.href).replace(c,"")}function R(e){return"#"===n[0]?(e||k.href||"").split(n)[1]||"":(k?L(e):e||"").replace(n,"")}function E(t){var e=0===j;if(!(_<=j)&&(j++,O.push(function(){var e=R();(t||e!==a)&&(M[v]("emit",e),a=e)}),e)){for(var i;i=O.shift();)i();j=0}}function H(e){if(!(1!==e.which||e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){for(var t=e.target;t&&"A"!==t.nodeName;)t=t.parentNode;!t||"A"!==t.nodeName||t[p]("download")||!t[p]("href")||t.target&&"_self"!==t.target||-1===t.href.indexOf(k.href.match(c)[0])||t.href!==k.href&&(t.href.split("#")[0]===k.href.split("#")[0]||"#"!==n[0]&&0!==L(t.href).indexOf(n)||"#"===n[0]&&t.href.split(n)[0]!==k.href.split(n)[0]||!F(R(t.href),t.title||w.title))||e.preventDefault()}}function F(e,t,i){return b?(e=n+W(e),t=t||w.title,i?b.replaceState(null,t,e):b.pushState(null,t,e),w.title=t,Y=!1,E(),Y):M[v]("emit",R(e))}x.m=function(e,t,i){!A(e)||t&&!A(t)?t?this.r(e,t):this.r("@",e):F(e,t,i||!1)},x.s=function(){this.off("*"),this.$=[]},x.e=function(i){this.$.concat("@").some(function(e){var t=("@"===e?s:o)(W(i),W(e));if(void 0!==t)return this[v].apply(null,[e].concat(t)),Y=!0},this)},x.r=function(e,t){"@"!==e&&(e="/"+W(e),this.$.push(e)),this.on(e,t)};var U=new N,I=U.m.bind(U);I.create=function(){var e=new N,t=e.m.bind(e);return t.stop=e.s.bind(e),t},I.base=function(e){n=e||"#",a=R()},I.exec=function(){E(!0)},I.parser=function(e,t){e||t||(s=T,o=P),e&&(s=e),t&&(o=t)},I.query=function(){var n={};return(k.href||a).replace(/[?&](.+?)=([^&]*)/g,function(e,t,i){n[t]=i}),n},I.stop=function(){D&&(y&&(y[h](m,r),y[h](g,r),w[h](S,H)),M[v]("stop"),D=!1)},I.start=function(e){D||(y&&("interactive"===document.readyState||"complete"===document.readyState?C(e):document.onreadystatechange=function(){"interactive"===document.readyState&&setTimeout(function(){C(e)},1)}),D=!0)},I.base(),I.parser();var V=I,G=i(0),z=i.n(G);z.a.tag2("router","<yield></yield>","","",function(e){var i=this;this.route=V.create(),this.select=function(t){[].concat(i.tags.route).forEach(function(e){return e.show=e===t})},this.on("mount",function(){window.setTimeout(function(){return V.start(!0)},0)}),this.on("unmount",function(){i.route.stop()})}),z.a.tag2("route",'<virtual if="{show}"><yield></yield></virtual>',"","",function(e){var n=this;this.show=!1,this.parent.route(e.path,function(){for(var i=[],e=arguments.length;e--;)i[e]=arguments[e];n.one("updated",function(){var t;(t=n.tags,Object.keys(t).map(function(e){return t[e]}).reduce(function(e,t){return e.concat(t)},[])).forEach(function(e){e.trigger.apply(e,["route"].concat(i)),e.update()})}),n.parent.select(n),n.parent.update()})});t.default=V},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=[{name:"SensorPipe",sub:"PCとスマホを連携させるプログラミングを支援するスマホアプリ",img:"project-SensorPipe-16-9",category:"Android",video:"gwKyPqt2kd8",text:"スマートフォンのセンサ情報とPCを連携させたプログラミングを実現するには双方でのアプリケーション開発が必要となり、製作時間がかかる上にハードルが高いものであった。これを解決するため、スマートフォンの各種センサ情報をPCに送信し続け、PC側からもスマートフォンにバイブレーションやウェブサイト表示などの所定の動作をさせる事ができるアプリケーションを開発した。これにより、プログラマはスマートフォン側のプログラミングを一切行わずに、PCでのセンサ情報を用いたプログラミングを行うことができる。WISS2015で発表。",implement:"Androidアプリケーションとして実装。PCとスマートフォンを同じWi-Fiに接続後、UDP通信を確立することによってデータの送受信を行う。アプリケーションはバックグラウンドで動作する。PC側で利用するときは対応するProcessing用のライブラリを利用可能。",keywords:["Android","Programming Experience(PX)","UDP","cooperation programming","sensor"],links:{"プロジェクトページ":"https://research.miyashita.com/2015/D160/"}},{name:"MiddleDrive",sub:"Bluetooth通信によるアドホック型ドキュメント共同編集アプリ",img:"project-MiddleDrive-16-9",category:"Web",video:"vPAXrlKGeC8",text:"会議を行う際にその内容を複数人でウェブ上のドキュメントに書き出すことで記録をとったり、議題の整理をしたりすることが多くある。しかし、Wi-Fiの電波がない場所ではこれらのようなウェブアプリケーションは利用することができない。そこで、Wi-Fiなどのネットワーク環境が利用できない状況でも、リアルタイムに共同編集を行うことができるアプリケーションを開発した。ワイヤレスアドホックネットワークを構築し、ネットワーク内のPCとドキュメントの共同編集を行うことが出来る。",implement:"チームで制作。フロントエンドとWebサーバを担当した。動作プラットフォームはWindowsPC。BluetoothによってPC同士をペアリングし、双方向のデータ通信を行う。各PC内でWebサーバが起動しているため、通常のウェブアプリケーションと同じようにブラウザでアクセスすることが出来る。Bluetooth通信はC#でwin APIを利用することで実現し、WebサーバはNode.jsを用いて実装している。",keywords:["windows","Bluetooth","co-authoring","CSCW","win API","Ad-hoc network"],links:{"受賞ページ":"http://www.pref.nagano.lg.jp/joho/app-contest/app-contest0"}},{name:"WristSlide",sub:"イメージセンサを用いた手首を滑らせるスマートウォッチの片手操作",img:"project-WristSlide-16-9",category:"Android",video:"w9eHDKby8ro",text:"スマートウォッチにおいて、スワイプのような連続的な入力を行うには、装着している手と反対の手で操作する必要がある。そこで、手首を机や壁、自身の身体などの上で滑らせることによって、スマートウォッチを片手で操作する手法を提案。バンド下部に埋め込まれたイメージセンサによって、物体に接地した状態での手首の移動量を取得し、片手での2次元方向の入力を可能にした。",implement:"Android、Wear OSアプリケーションとして実装。スマートフォンと超小型ワイヤレスマウスをペアリングし、自端末にADBコマンドを発行することによってマウスイベントを監視。スマートフォンとペアリングされたスマートウォッチに移動量を送信してアプリケーションを操作する。",keywords:["Android","Wear OS","Android Debug Bridge","Human Computer Interaction","smartwatch","image sensor","mouse"]},{name:"Ichimonitto",sub:"ビデオチャットをしながらクイズ番組形式で回答する一問一答学習支援サービス",img:"project-Ichimonitto-16-9",category:"Web",text:"英単語を知っていても、正確な発音ができなければ相手には伝わらない。そこで、WebRTCを利用した一問一答形式の学習支援サービスを制作した。カメラ映像とボイスチャットによって離れた場所でも一緒に学ぶことが出来る。画面に表示された単語の英語をいち早く、かつ正確に発音できたものがポイントを獲得する。Cloud n アプリケーションコンテストでWebRTC賞を受賞。",implement:"チームで制作。フロントエンドを担当。Google Speech APIを使うことで、しっかりと認識されるような正確な発音での回答のみ正解とする点がポイント。現在接続しているユーザなどの管理にSkywayのAPIを利用。",keywords:["Web RTC","quiz","video chat","Google Speech API"],links:{"受賞ページ":"http://www.cloudn-service.com/cam04-deven/decon/tohyo/"}},{name:"GeoMelody",sub:"環境音を録音してネット上に集約するサウンドスケープSNS",img:"project-GeoMelody-16-9",category:"Android",text:"位置情報と環境音を組み合わせて登録するサービス。風景には音が欠かせないという考え方、サウンドスケープをサービスとして組み込んだ作品。ユーザがスマートフォンで環境音を録音すると、音声をGPSや日付の情報と共にサーバにアップロードし、マップ上で閲覧することが出来る。Open Hack U 2014発表作品。",implement:"チームで制作。アプリの大部分を担当した。Androidアプリケーションとして実装。Yahoo Map APIを使用して、録音された音声のマッピングを行っている。",keywords:["Android","soundscape","map","record","microphone","GPS"]},{name:"SoumuSSML",sub:"視覚障害者のための新しい電子書籍形式に対応したクラウド編集システム",img:"project-SoumuSSML-16-9",category:"Web",text:"電子書籍を読む際などに用いられる、OS組み込みの読み上げ機能にはイントネーションの間違いが未だに多く残っている。そのため現在は、音声合成マークアップ言語SSMLを用いてイントネーションを出版社の人間が編集し、合成された音声を電子書籍に同封するというやり方が一般的である。そこで、電子書籍に音声ファイルではなくイントネーションを記したデータを同封する新しい電子書籍フォーマットの提案を行った。同時に、出版社の人間がイントネーションを編集し、音声をその都度確認しながらクラウド上で編集するシステムを構築した。実証実験により効果的なツールと認められ、W3Cによって電子書籍の形式EPUBの次期仕様に盛り込まれた。総務省とアルバイト先の想隆社との共同プロジェクト。",implement:"チームで制作。フロントエンドを担当した。サーバはPHPで実装。主な機能は以下の通り。電子書籍のアップロードと初期の発音記号の自動生成、編集した発音記号（イントネーションを表す）のバージョン管理とDiff表示、編集した音声をその場で再生、書籍内の文字検索、編集者の編集権限変更、ゲラ（校正用の印刷）の印刷機能とコメントのPDFアップロード、書籍内の画像表示。",keywords:["E-book","EPUB","SSML","W3C","co-authoring","version control"],links:{"実証実験報告書":"http://www.soumu.go.jp/main_content/000499711.pdf"}},{name:"BuddaBeautify",sub:"己の精神を磨くことで見た目も美しくなれるメディアアート作品",img:"project-BuddaBeautify-16-9",category:"Desktop",video:"X0SrajYh780",text:"Nam June PaikによるTV-Buddhaにインスパイアを受け、己の精神を磨くことと画像処理による美顔化を組み合わせた作品。カメラとプロジェクタによって作られた擬似的な鏡の前で、ユーザは座禅を行う。身体のブレが少ない時は心の乱れも少ないと判断し、鏡の自分の顔に徐々に美顔化処理を行っていく。体験時間は1分程度。",implement:"チームで制作。Processingで実装。身体にブレの度合いは動体験知によって数値化する。動体検知の実装を担当。顔の美顔化処理には、関川ら[1]のアルゴリズムを利用。",keywords:["media art","motion detection","image processing"],links:{"ε-フィルタを用いたリアルタイム顔画像美観化システム":"https://www.ieice.org/iss/jpn/Publications/issposter_2015/data/pdf/ISS-P-78.pdf"}},{name:"Make if",sub:"カードを並べてif文をつくるプログラミング教育カードゲーム",img:"project-Makeif-16-9",category:"Design",text:"プログラミングをする時に必ず使う「if文」をカードで遊びながら学べるゲーム。テキストエディタを模したプレイマットの上に順番にカードを置いていき、if文が完成すると条件分岐によってカードを引かなくてはならない。早く手札を使い切った人が勝利。プログラミング未経験者でも遊ぶことが可能。2017年にゲームマーケット、及びコミックマーケットにて頒布。",implement:"アナログゲームサークルfumblewaals（ファンブルワールス）で制作。主にデザインを担当。Adobe Illustratorを使用。",keywords:["programming","card game","analog game"],links:{"商品詳細ページ":"http://fumblewaals.com/portfolio/make-if/",fumblewaals:"http://fumblewaals.com"}}]},function(e,t,i){"use strict";var n=r(i(6));r(i(3));function r(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projects",'<div class="pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1" each="{w, i in projects}"> <div class="card"><a href="#projects/{w.name.replace(/ /g, `_`)}"> <div class="wrapper"> <webp class="thumbnail" riot-src="{w.img}"></webp> </div> <div class="content"> <h4>{w.name}</h4> <p>{w.sub}</p> </div></a></div> </div>','projects,[data-is="projects"]{ padding: 0.75rem; display: flex; flex-wrap: wrap; } projects > div,[data-is="projects"] > div{ padding: 0.75rem; } projects > div > .card,[data-is="projects"] > div > .card{ cursor: pointer; background: white; height: 100%; box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1); border-radius: 0.3rem; } projects > div > .card:hover,[data-is="projects"] > div > .card:hover{ box-shadow: 0 8px 10px rgba(10, 10, 10, 0.1), 0 0 6px 4px rgba(10, 10, 10, 0.1); } projects > div > .card > a > .wrapper,[data-is="projects"] > div > .card > a > .wrapper{ position: relative; width: 100%; } projects > div > .card > a > .wrapper:before,[data-is="projects"] > div > .card > a > .wrapper:before{ content: \'\'; display: block; padding-top: 56.25%; } projects > div > .card > a > .wrapper img,[data-is="projects"] > div > .card > a > .wrapper img{ position: absolute; top: 0; left: 0; border-radius: 0.3rem 0.3rem 0 0; display: block; width: 100%; background: #ddd; border-bottom: 1px solid #ddd; } projects > div > .card > a > .content,[data-is="projects"] > div > .card > a > .content{ padding: 0.8rem 1rem; } projects > div > .card > a > .content h4,[data-is="projects"] > div > .card > a > .content h4{ font-size: 1.2rem; margin-bottom: 0.3rem; } projects > div > .card > a > .content p,[data-is="projects"] > div > .card > a > .content p{ font-size: 0.9rem; }',"",function(e){var t=this;this.category="All",this.projects=void 0===this.opts.limit?n.default:n.default.slice(0,this.opts.limit),this.on("updated",function(){t.opts.category!==t.category&&t.update({category:t.opts.category,projects:"All"===t.opts.category?n.default:n.default.filter(function(e){return e.category===t.opts.category})})})})},function(e,t,i){"use strict";var n=r(i(23));r(i(3));function r(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("about",'<div class="about-img pure-u-sm-1-4 pure-u-1-2"> <div class="face-wrapper pure-u-1-2" click="{clickFace}"> <webp show="{face}" src="my-face"></webp><img show="{!face}" src="resources/icon-pvcresin.svg"> </div> </div> <div class="pure-u-sm-1-24 pure-u-1-1"></div> <div class="about-text pure-u-sm-17-24 pure-u-1-1">プログラミングが好きで、ちょっと名前が珍しい学生。<br>趣味はアナログゲーム作ったり、YouTube見たり、一人カラオケしたり、ミニチュアを集めたりすること。<br>当面の目標は有益な情報を提供できるエンジニアになることと、多くの人の生活に役立つサービスを作ること。<br>人と意見を交換し、議論しながら良いモノを作っていきたい。<br>新しいものが好きなので、貪欲に学んでいく。 <ul> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-birthday-cake" aria-hidden="true"></i></div> <div class="right pure-u-11-12">{birthday} (Age: {age})</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-map-marker-alt" aria-hidden="true"></i></div> <div class="right pure-u-11-12">Nakano, Tokyo</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-envelope" aria-hidden="true"></i></div> <div class="right pure-u-11-12">pvcresin0730@gmail.com</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-graduation-cap" aria-hidden="true"></i></div> <div class="right pure-u-11-12">明治大学大学院 先端数理科学研究科 先端メディアサイエンス専攻 修士2年</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-suitcase" aria-hidden="true"></i></div> <div class="right pure-u-11-12"><a href="http://soryu-sha.jp/">想隆社</a><span>（フロントエンドエンジニア・アルバイト）</span></div> </li> </ul> </div>','about,[data-is="about"]{ padding: 0.75rem; } about > .about-img,[data-is="about"] > .about-img{ text-align: center; padding: 0.75rem; margin: 0 auto; } about > .about-img .face-wrapper,[data-is="about"] > .about-img .face-wrapper{ position: relative; width: 100%; } about > .about-img .face-wrapper:before,[data-is="about"] > .about-img .face-wrapper:before{ content: ""; display: block; padding-top: 100%; } about > .about-img .face-wrapper img,[data-is="about"] > .about-img .face-wrapper img{ position: absolute; top: 0; left: 0; bottom: 0; right: 0; border-radius: 50%; width: 100%; background: gray; cursor: pointer; } about > .about-text,[data-is="about"] > .about-text{ text-align: justify; display: flex; flex-direction: column; justify-content: center; padding: 0.75rem; font-size: 1.1rem; } about > .about-text ul li,[data-is="about"] > .about-text ul li{ display: flex; margin-top: 0.5rem; } about > .about-text ul li .icon,[data-is="about"] > .about-text ul li .icon{ display: flex; justify-content: center; align-items: baseline; font-size: 1.5rem; } about > .about-text ul li .right,[data-is="about"] > .about-text ul li .right{ padding-left: 0.5rem; } about > .about-text ul li .right a,[data-is="about"] > .about-text ul li .right a{ color: #4e9adb; } about > .about-text ul li .right a:hover,[data-is="about"] > .about-text ul li .right a:hover{ text-decoration: underline; }','class="pure-g"',function(e){this.birthday="1994-07-30",this.age=(0,n.default)().diff(this.birthday,"years"),this.face=!0,this.clickFace=function(){this.face=!this.face}.bind(this)})},function(e,t,i){"use strict";i(0).tag2("social",'<ul> <li><a href="https://www.facebook.com/raika.toriyama" target="_blank" title="Facebook" rel="noopener noreferrer"><i class="fab fa-facebook-f fa-2x"></i></a></li> <li><a href="https://twitter.com/pvcresin/" target="_blank" title="Twitter" rel="noopener noreferrer"><i class="fab fa-twitter fa-2x"></i></a></li> <li><a href="https://github.com/pvcresin/" target="_blank" title="GitHub" rel="noopener noreferrer"><i class="fab fa-github fa-2x"></i></a></li> <li><a href="https://www.instagram.com/pvcresin/" target="_blank" title="Instagram" rel="noopener noreferrer"><i class="fab fa-instagram fa-2x"></i></a></li> <li><a href="http://pvcresin.hatenablog.com/" target="_blank" title="Hatena Blog" rel="noopener noreferrer"> <div class="icon-box hatena"></div></a></li> <li><a href="https://www.wantedly.com/users/18220619" target="_blank" title="Wantedly" rel="noopener noreferrer"> <div class="icon-box wantedly"></div></a></li> </ul>','social > ul,[data-is="social"] > ul{ display: flex; justify-content: center; align-items: center; padding: 1rem 0; } social > ul li,[data-is="social"] > ul li{ display: inline-block; } social > ul li a,[data-is="social"] > ul li a{ color: #525252; vertical-align: sub; display: inline-block; width: 3rem; } social > ul li a:hover,[data-is="social"] > ul li a:hover{ color: white; } social > ul li a .icon-box,[data-is="social"] > ul li a .icon-box{ margin: auto; width: 2rem; height: 2rem; background: #525252; } social > ul li a .icon-box:hover,[data-is="social"] > ul li a .icon-box:hover{ background: white; } social > ul li a .icon-box.hatena,[data-is="social"] > ul li a .icon-box.hatena{ mask-image: url(./resources/icon-hatena.svg); -webkit-mask-image: url(./resources/icon-hatena.svg); } social > ul li a .icon-box.wantedly,[data-is="social"] > ul li a .icon-box.wantedly{ mask-image: url(./resources/icon-wantedly.svg); -webkit-mask-image: url(./resources/icon-wantedly.svg); }','id="social"',function(e){})},function(e,t,i){"use strict";i(0).tag2("other",'<section> <div class="container"> <h1>Page Not Found</h1> </div> </section> <footer></footer>','other,[data-is="other"]{ text-align: center; min-height: 100vh; display: flex; flex-direction: column; background: #2b2b2b; color: #efefef; } other section,[data-is="other"] section{ flex-grow: 1; display: flex; align-items: center; }',"",function(e){})},function(e,t,i){"use strict";i(0).tag2("tags",'<span each="{t in opts.tags}">{t}</span>','tags,[data-is="tags"]{ display: flex; flex-wrap: wrap; margin: 1rem 0; margin: 0.75rem 0; } tags > span,[data-is="tags"] > span{ margin: 0 0.5rem 0.5rem 0; padding: 0.1rem 0.3rem; border-radius: 0.2rem; background: #555; color: #eee; }',"",function(e){})},function(e,t,i){"use strict";a(i(11));var n=a(i(6)),r=(a(i(3)),a(i(2)));function a(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projectdetail",'<div class="container"> <section> <div class="video-frame" if="{project.video !== undefined}"> <iframe riot-src="https://www.youtube.com/embed/{project.video}?rel=0" frameborder="0" allow="encrypted-media" allowfullscreen></iframe> </div> <div class="img-frame" if="{project.video === undefined}"> <webp riot-src="{project.img}"></webp> </div> <h1> <p>{project.name + \': \'}</p><span>{project.sub}</span> </h1> <tags tags="{project.keywords}"></tags> <div class="chapter"> <div class="chapter-title"> <h2>Abstract</h2> <hr> </div> <p>{project.text}</p> </div> <div class="chapter"> <div class="chapter-title"> <h2>Implementation</h2> <hr> </div> <p>{project.implement}</p> </div> <div class="chapter" if="{project.links !== undefined}"> <div class="chapter-title"> <h2>Links</h2> <hr> </div> <ol> <li each="{value, key in project.links}"><span>{key + \': \'}</span><span><a href="{value}">{value}</a></span></li> </ol> </div> </section> </div> <footer></footer>','projectdetail,[data-is="projectdetail"]{ min-height: 100vh; display: block; background: #2b2b2b; color: #efefef; } projectdetail > div > section,[data-is="projectdetail"] > div > section{ padding: 1.5rem; } projectdetail > div > section .video-frame,[data-is="projectdetail"] > div > section .video-frame{ position: relative; width: 100%; padding-top: 56.25%; } projectdetail > div > section .video-frame > iframe,[data-is="projectdetail"] > div > section .video-frame > iframe{ position: absolute; top: 0; right: 0; width: 100%; height: 100%; background: black; } projectdetail > div > section .img-frame,[data-is="projectdetail"] > div > section .img-frame{ width: 100%; } projectdetail > div > section .img-frame > img,[data-is="projectdetail"] > div > section .img-frame > img{ width: 100%; height: 100%; background: black; } projectdetail > div > section h1,[data-is="projectdetail"] > div > section h1{ color: white; margin: 1rem 0; text-align: justify; } projectdetail > div > section .chapter .chapter-title,[data-is="projectdetail"] > div > section .chapter .chapter-title{ display: flex; justify-content: space-between; align-items: center; margin: 1.5rem 0 1rem 0; } projectdetail > div > section .chapter .chapter-title > h2,[data-is="projectdetail"] > div > section .chapter .chapter-title > h2{ font-size: 1.5rem; margin-right: 0.5rem; color: white; } projectdetail > div > section .chapter .chapter-title > hr,[data-is="projectdetail"] > div > section .chapter .chapter-title > hr{ flex-grow: 1; border: 1.5px solid gray; border-radius: 1rem; min-width: 1rem; background: gray; } projectdetail > div > section .chapter p,[data-is="projectdetail"] > div > section .chapter p{ margin: 0.6rem 0; text-align: justify; } projectdetail > div > section .chapter ol,[data-is="projectdetail"] > div > section .chapter ol{ padding-left: 2rem; } projectdetail > div > section .chapter ol li,[data-is="projectdetail"] > div > section .chapter ol li{ list-style-type: decimal; line-height: 1.8rem; } projectdetail > div > section .chapter ol li a,[data-is="projectdetail"] > div > section .chapter ol li a{ color: #4e9adb; } projectdetail > div > section .chapter ol li a:hover,[data-is="projectdetail"] > div > section .chapter ol li a:hover{ text-decoration: underline; } @media (max-width: 768px) { projectdetail h1,[data-is="projectdetail"] h1{ font-size: 1.5rem; } projectdetail h2,[data-is="projectdetail"] h2{ font-size: 1.3rem; } }',"",function(e){var i=this;this.project={name:"",sub:"",img:"",video:"",text:"",implement:"",keywords:[]},this.on("route",function(t){i.update({project:n.default.filter(function(e){return e.name===t.replace(/_/g," ")})[0]}),r.default.move()})})},function(e,t,i){"use strict";a(i(7));var n=a(i(5)),r=a(i(2));function a(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projectall",'<section> <div class="container"> <h2 class="section-title">Projects</h2> <ul><a each="{p in categories}" click="{click.bind(this, p)}"> <li if="{selectedCategory !== p}">{p}</li> <li class="selected" if="{selectedCategory === p}">{p}</li></a></ul> <projects category="{selectedCategory}"></projects> </div> </section> <footer></footer>','projectall > section,[data-is="projectall"] > section{ background: #eeeeee; color: #222222; min-height: 100vh; } projectall > section .container ul,[data-is="projectall"] > section .container ul{ display: flex; justify-content: space-between; max-width: 400px; padding: 0 1.5rem; margin: 1rem auto 0 auto; } projectall > section .container ul li,[data-is="projectall"] > section .container ul li{ font-size: 0.8rem; display: inline-block; color: gray; padding: 0.5rem 0.5rem; cursor: pointer; border: 1px solid; border-radius: 2rem; text-align: center; } projectall > section .container ul li.selected,[data-is="projectall"] > section .container ul li.selected{ color: white; background: gray; border-color: gray; }',"",function(e){var t=this;this.categories=["All","Android","Web","Desktop","Design"],this.selectedCategory,this.on("route",function(){void 0!==n.default.query().category?t.update({selectedCategory:n.default.query().category}):t.update({selectedCategory:t.categories[0]}),r.default.move()}),this.click=function(e){this.update({selectedCategory:e})}.bind(this)})},function(e,t,i){"use strict";i(0).tag2("like",'<h2 class="section-title">Like</h2> <div class="pure-g"> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Do</h3> <hr> <ul> <li each="{t, i in do}">{l}<span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Watch</h3> <hr> <ul> <li each="{t, i in watch}"><span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Eat</h3> <hr> <ul> <li each="{t, i in eat}"><span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> </div>','like,[data-is="like"]{ display: block; } like > div,[data-is="like"] > div{ padding: 0.75rem; } like > div .like-box,[data-is="like"] > div .like-box{ padding: 0.75rem; } like > div .like-box .like,[data-is="like"] > div .like-box .like{ background: #414141; padding: 0.6rem 1rem; border-radius: 0.3rem; } like > div .like-box .like h3,[data-is="like"] > div .like-box .like h3{ font-size: 1.4rem; margin-bottom: 0.5rem; } like > div .like-box .like hr,[data-is="like"] > div .like-box .like hr{ border-radius: 1rem; margin: 0.5rem 0; border: 1.5px solid; border-color: grey; background: gray; } like > div .like-box .like ul li,[data-is="like"] > div .like-box .like ul li{ line-height: 2rem; } like > div .like-box .like ul li .icon,[data-is="like"] > div .like-box .like ul li .icon{ font-size: 1.4rem; width: 2rem; display: inline-flex; justify-content: center; } like > div .like-box .like ul li .text,[data-is="like"] > div .like-box .like ul li .text{ font-size: 1.2rem; }',"",function(e){this.do={"💻":"プログラミング","👟":"散歩","🎤":"一人カラオケ","🚗":"ミニチュア集め"},this.watch={"🎬":"映画","😆":"お笑いネタ","👖":"服","📺":"メディアアート"},this.eat={"🍣":"寿司","🍕":"ピザ","🍜":"ラーメン","🍰":"ケーキ"}})},function(e,t,i){"use strict";i(0).tag2("skills",'<h2 class="section-title">Skills</h2> <div class="pure-g"> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills1}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills2}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> </div>','skills > div,[data-is="skills"] > div{ padding: 0.75rem; } skills > div .skill-box,[data-is="skills"] > div .skill-box{ padding: 0.75rem; } skills > div .skill-box > li,[data-is="skills"] > div .skill-box > li{ margin-bottom: 1.2rem; } skills > div .skill-box > li .skill-info,[data-is="skills"] > div .skill-box > li .skill-info{ display: flex; justify-content: space-between; align-items: baseline; } skills > div .skill-box > li .name,[data-is="skills"] > div .skill-box > li .name{ font-size: 1.3em; margin-right: 0.5rem; font-weight: 300; } skills > div .skill-box > li .sub,[data-is="skills"] > div .skill-box > li .sub{ font-size: 0.85rem; color: #bdbdbd; } skills > div .skill-box > li .bar,[data-is="skills"] > div .skill-box > li .bar{ background: #4b4b4b; border-radius: 1rem; } skills > div .skill-box > li .bar .level,[data-is="skills"] > div .skill-box > li .bar .level{ height: 0.7rem; border-radius: 1rem; background: #eaeaea; }',"",function(e){this.skills=[{name:"Android",sub:"Rx Okhttp Retrofit",level:"70%"},{name:"Kotlin",sub:"Anko Ktor",level:"80%"},{name:"Java",sub:"",level:"85%"},{name:"Processing",sub:"",level:"90%"}],this.skills1=[{name:"HTML",sub:"Pug Markdown",level:"85%"},{name:"CSS",sub:"Sass PostCSS CSS-Modules",level:"80%"},{name:"JS",sub:"Riot React Node",level:"90%"},{name:"PHP",sub:"",level:"40%"}],this.skills2=[{name:"Git",sub:"",level:"60%"},{name:"Illustrator",sub:"",level:"80%"},{name:"Cacoo",sub:"",level:"40%"},{name:"Prott",sub:"",level:"30%"}]})},function(e,t,i){"use strict";var n,r=i(1);(n=r)&&n.__esModule;i(0).tag2("education",'<h2 class="section-title">Education</h2> <list items="{schools}"></list>',"","",function(e){this.schools=[{date:"2010-04 - 2013-03",title:"本郷高等学校",texts:["東京・巣鴨にある私立の中高一貫校","生徒会・料理研究会・美術部に所属"],link:"http://www.hongo.ed.jp/"},{date:"2013-04 - 2017-03",title:"明治大学",texts:["総合数理学部 先端メディアサイエンス学科 1期生","PCでコンテンツ制作をするサークルを立ち上げ、幹事長を務める"],link:"http://www.meiji.ac.jp/ims/subject/fms/"},{date:"2017-04 - 2019-03",title:"明治大学大学院",texts:["先端数理科学研究科 先端メディアサイエンス専攻 博士前期課程","アルバイトでフロントエンドエンジニアとして働く"],link:"http://www.meiji.ac.jp/ams/professor/FMS.html"}]})},function(e,t,i){"use strict";r(i(8)),r(i(16)),r(i(15)),r(i(14));var n=r(i(2));function r(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("profile",'<section> <div class="container"> <h2 class="section-title">Profile</h2> <about></about> <like></like> <skills></skills> <education></education> </div> </section> <footer></footer>','profile,[data-is="profile"]{ display: block; background: #2b2b2b; color: #efefef; }',"",function(e){this.on("route",function(){n.default.move()})})},function(e,t,i){"use strict";i(0).tag2("more",'<a href="{opts.link}" title="{opts.title}"><span class="more-button">{text}</span></a>','more,[data-is="more"]{ padding: 0 1.5rem 1.5rem 1.5rem; display: flex; justify-content: center; } more > a > span,[data-is="more"] > a > span{ padding: 0.5rem; background: grey; color: white; border-radius: 3rem; min-width: 10rem; text-align: center; display: block; } more > a > span:hover,[data-is="more"] > a > span:hover{ background: #a3a3a3; }',"",function(e){this.text=void 0!==this.opts.text?this.opts.text:"more"})},function(e,t,i){"use strict";var n,r=i(1);(n=r)&&n.__esModule;i(0).tag2("clubs",'<list items="{clubs}"></list>',"","",function(e){this.clubs=[{date:"2013-04 - 2017-03",title:"総合コンテンツ制作サークル",texts:["デジタルコンテンツ制作（音楽・動画・ゲーム・イラスト・文芸）を行う大学内のサークル","同人イベントでの頒布（コミックマーケット・M3）","設立メンバー＆幹事長"],link:"https://twitter.com/ccc_sokon"},{date:"2016-04 - 2017-06",title:"Nakano Computer Club",texts:["プログラミングに関する情報共有や勉強会の実施を行う大学内のサークル","同人イベントでの頒布（コミックマーケット・技術書典）"],link:"https://meiji-ncc.tech/"},{date:"2017-04 - 2019-03",title:"fumble waals",texts:["オリジナルボードゲームの制作を行う有志によるサークル","同人イベントでの頒布（コミックマーケット・ゲームマーケット）","企画から制作、販売まで行うが、主にデザインを担当"],link:"http://fumblewaals.com/"}]})},function(e,t,i){"use strict";var n,r=i(1);(n=r)&&n.__esModule;i(0).tag2("publications",'<list items="{publications}"></list>',"","",function(e){this.publications=[{date:"2015-12",title:"SensorPipe",texts:["鳥山 らいか, 宮下 芳明. SensorPipe: スマートフォン側のプログラミングを一切行わないスマートフォン連携プログラミング, 第23回インタラクティブシステムとソフトウェアに関するワークショップ論文集 (WISS 2015), 2015."],link:"https://research.miyashita.com/2015/D160/"},{date:"2018-03",title:"インタラクティブパッケージ",texts:["加藤邦拓, 薄羽大樹, 鳥山らいか, 竹内まゆ, 野崎玲那, 細谷美月, 宮下芳明. タッチパネルを拡張する紙製インタフェースを搭載したインタラクティブパッケージの開発, インタラクション2018論文集, pp.889-894, 2018."],link:"https://research.miyashita.com/2018/D193/"},{date:"2018-09",title:"透明キーボード",texts:["鳥山らいか, 宮下芳明. スマートウォッチ向けのキートップが透明な日本語かな入力インタフェース, 第26回インタラクティブシステムとソフトウェアに関するワークショップ論文集 (WISS 2018), 2018."],link:"https://research.miyashita.com/papers/D202"}]})},function(e,t,i){"use strict";var n,r=i(1);(n=r)&&n.__esModule;i(0).tag2("awards",'<list items="{awards}"></list>',"","",function(e){this.awards=[{date:"2015-05",title:"Cloud n アプリケーションコンテスト",texts:["WebRTC賞 受賞","チーム：意識中くらいとして参加","プロジェクト: Ichimonitto"],link:"http://www.cloudn-service.com/cam04-deven/decon/tohyo/"},{date:"2017-12",title:"信州未来アプリコンテスト0",texts:["信越情報通信懇談会会長賞 受賞","チーム：意識中くらいとして参加","プロジェクト: MiddleDrive"],link:"http://www.pref.nagano.lg.jp/joho/app-contest/app-contest0"}]})},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,i){(function(zi){zi.exports=function(){"use strict";var e,r;function g(){return e.apply(null,arguments)}function o(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function l(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function a(e){return void 0===e}function c(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function s(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function u(e,t){var i,n=[];for(i=0;i<e.length;++i)n.push(t(e[i],i));return n}function v(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e,t){for(var i in t)v(t,i)&&(e[i]=t[i]);return v(t,"toString")&&(e.toString=t.toString),v(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,i,n){return jt(e,t,i,n,!0).utc()}function _(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function f(e){if(null==e._isValid){var t=_(e),i=r.call(t.parsedDateParts,function(e){return null!=e}),n=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&i);if(e._strict&&(n=n&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return n;e._isValid=n}return e._isValid}function p(e){var t=h(NaN);return null!=e?d(_(t),e):_(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),i=t.length>>>0,n=0;n<i;n++)if(n in t&&e.call(this,t[n],n,t))return!0;return!1};var m=g.momentProperties=[];function y(e,t){var i,n,r;if(a(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),a(t._i)||(e._i=t._i),a(t._f)||(e._f=t._f),a(t._l)||(e._l=t._l),a(t._strict)||(e._strict=t._strict),a(t._tzm)||(e._tzm=t._tzm),a(t._isUTC)||(e._isUTC=t._isUTC),a(t._offset)||(e._offset=t._offset),a(t._pf)||(e._pf=_(t)),a(t._locale)||(e._locale=t._locale),0<m.length)for(i=0;i<m.length;i++)n=m[i],a(r=t[n])||(e[n]=r);return e}var t=!1;function w(e){y(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===t&&(t=!0,g.updateOffset(this),t=!1)}function b(e){return e instanceof w||null!=e&&null!=e._isAMomentObject}function k(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function x(e){var t=+e,i=0;return 0!==t&&isFinite(t)&&(i=k(t)),i}function S(e,t,i){var n,r=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),s=0;for(n=0;n<r;n++)(i&&e[n]!==t[n]||!i&&x(e[n])!==x(t[n]))&&s++;return s+a}function M(e){!1===g.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn}function i(r,a){var s=!0;return d(function(){if(null!=g.deprecationHandler&&g.deprecationHandler(null,r),s){for(var e,t=[],i=0;i<arguments.length;i++){if(e="","object"==typeof arguments[i]){for(var n in e+="\n["+i+"] ",arguments[0])e+=n+": "+arguments[0][n]+", ";e=e.slice(0,-2)}else e=arguments[i];t.push(e)}M((Array.prototype.slice.call(t).join(""),(new Error).stack)),s=!1}return a.apply(this,arguments)},a)}var n,D={};function Y(e,t){null!=g.deprecationHandler&&g.deprecationHandler(e,t),D[e]||(M(),D[e]=!0)}function O(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function j(e,t){var i,n=d({},e);for(i in t)v(t,i)&&(l(e[i])&&l(t[i])?(n[i]={},d(n[i],e[i]),d(n[i],t[i])):null!=t[i]?n[i]=t[i]:delete n[i]);for(i in e)v(e,i)&&!v(t,i)&&l(e[i])&&(n[i]=d({},n[i]));return n}function T(e){null!=e&&this.set(e)}g.suppressDeprecationWarnings=!1,g.deprecationHandler=null,n=Object.keys?Object.keys:function(e){var t,i=[];for(t in e)v(e,t)&&i.push(t);return i};var P={};function C(e,t){var i=e.toLowerCase();P[i]=P[i+"s"]=P[t]=e}function N(e){return"string"==typeof e?P[e]||P[e.toLowerCase()]:void 0}function W(e){var t,i,n={};for(i in e)v(e,i)&&(t=N(i))&&(n[t]=e[i]);return n}var A={};function L(e,t){A[e]=t}function R(e){var t=[];for(var i in e)t.push({unit:i,priority:A[i]});return t.sort(function(e,t){return e.priority-t.priority}),t}function E(e,t,i){var n=""+Math.abs(e),r=t-n.length,a=0<=e;return(a?i?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+n}var H=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,F=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,U={},I={};function V(e,t,i,n){var r=n;"string"==typeof n&&(r=function(){return this[n]()}),e&&(I[e]=r),t&&(I[t[0]]=function(){return E(r.apply(this,arguments),t[1],t[2])}),i&&(I[i]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function G(e,t){return e.isValid()?(t=z(t,e.localeData()),U[t]=U[t]||function(n){var e,r,t,a=n.match(H);for(e=0,r=a.length;e<r;e++)I[a[e]]?a[e]=I[a[e]]:a[e]=(t=a[e]).match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"");return function(e){var t,i="";for(t=0;t<r;t++)i+=O(a[t])?a[t].call(e,n):a[t];return i}}(t),U[t](e)):e.localeData().invalidDate()}function z(e,t){var i=5;function n(e){return t.longDateFormat(e)||e}for(F.lastIndex=0;0<=i&&F.test(e);)e=e.replace(F,n),F.lastIndex=0,i-=1;return e}var $=/\d/,B=/\d\d/,Z=/\d{3}/,q=/\d{4}/,J=/[+-]?\d{6}/,K=/\d\d?/,Q=/\d\d\d\d?/,X=/\d\d\d\d\d\d?/,ee=/\d{1,3}/,te=/\d{1,4}/,ie=/[+-]?\d{1,6}/,ne=/\d+/,re=/[+-]?\d+/,ae=/Z|[+-]\d\d:?\d\d/gi,se=/Z|[+-]\d\d(?::?\d\d)?/gi,oe=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,le={};function ue(e,i,n){le[e]=O(i)?i:function(e,t){return e&&n?n:i}}function ce(e,t){return v(le,e)?le[e](t._strict,t._locale):new RegExp(de(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,i,n,r){return t||i||n||r})))}function de(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var he={};function fe(e,i){var t,n=i;for("string"==typeof e&&(e=[e]),c(i)&&(n=function(e,t){t[i]=x(e)}),t=0;t<e.length;t++)he[e[t]]=n}function pe(e,r){fe(e,function(e,t,i,n){i._w=i._w||{},r(e,i._w,i,n)})}var me=0,ge=1,ve=2,_e=3,ye=4,we=5,be=6,ke=7,xe=8;function Se(e){return Me(e)?366:365}function Me(e){return e%4==0&&e%100!=0||e%400==0}V("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),V(0,["YY",2],0,function(){return this.year()%100}),V(0,["YYYY",4],0,"year"),V(0,["YYYYY",5],0,"year"),V(0,["YYYYYY",6,!0],0,"year"),C("year","y"),L("year",1),ue("Y",re),ue("YY",K,B),ue("YYYY",te,q),ue("YYYYY",ie,J),ue("YYYYYY",ie,J),fe(["YYYYY","YYYYYY"],me),fe("YYYY",function(e,t){t[me]=2===e.length?g.parseTwoDigitYear(e):x(e)}),fe("YY",function(e,t){t[me]=g.parseTwoDigitYear(e)}),fe("Y",function(e,t){t[me]=parseInt(e,10)}),g.parseTwoDigitYear=function(e){return x(e)+(68<x(e)?1900:2e3)};var De,Ye=Oe("FullYear",!0);function Oe(t,i){return function(e){return null!=e?(Te(this,t,e),g.updateOffset(this,i),this):je(this,t)}}function je(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Te(e,t,i){e.isValid()&&!isNaN(i)&&("FullYear"===t&&Me(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](i,e.month(),Pe(i,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](i))}function Pe(e,t){if(isNaN(e)||isNaN(t))return NaN;var i,n=(t%(i=12)+i)%i;return e+=(t-n)/12,1===n?Me(e)?29:28:31-n%7%2}De=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},V("M",["MM",2],"Mo",function(){return this.month()+1}),V("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),V("MMMM",0,0,function(e){return this.localeData().months(this,e)}),C("month","M"),L("month",8),ue("M",K),ue("MM",K,B),ue("MMM",function(e,t){return t.monthsShortRegex(e)}),ue("MMMM",function(e,t){return t.monthsRegex(e)}),fe(["M","MM"],function(e,t){t[ge]=x(e)-1}),fe(["MMM","MMMM"],function(e,t,i,n){var r=i._locale.monthsParse(e,n,i._strict);null!=r?t[ge]=r:_(i).invalidMonth=e});var Ce=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ne="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),We="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ae(e,t,i){var n,r,a,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],n=0;n<12;++n)a=h([2e3,n]),this._shortMonthsParse[n]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[n]=this.months(a,"").toLocaleLowerCase();return i?"MMM"===t?-1!==(r=De.call(this._shortMonthsParse,s))?r:null:-1!==(r=De.call(this._longMonthsParse,s))?r:null:"MMM"===t?-1!==(r=De.call(this._shortMonthsParse,s))?r:-1!==(r=De.call(this._longMonthsParse,s))?r:null:-1!==(r=De.call(this._longMonthsParse,s))?r:-1!==(r=De.call(this._shortMonthsParse,s))?r:null}function Le(e,t){var i;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=x(t);else if(!c(t=e.localeData().monthsParse(t)))return e;return i=Math.min(e.date(),Pe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,i),e}function Re(e){return null!=e?(Le(this,e),g.updateOffset(this,!0),this):je(this,"Month")}var Ee=oe,He=oe;function Fe(){function e(e,t){return t.length-e.length}var t,i,n=[],r=[],a=[];for(t=0;t<12;t++)i=h([2e3,t]),n.push(this.monthsShort(i,"")),r.push(this.months(i,"")),a.push(this.months(i,"")),a.push(this.monthsShort(i,""));for(n.sort(e),r.sort(e),a.sort(e),t=0;t<12;t++)n[t]=de(n[t]),r[t]=de(r[t]);for(t=0;t<24;t++)a[t]=de(a[t]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+n.join("|")+")","i")}function Ue(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&0<=e&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function Ie(e,t,i){var n=7+t-i,r=(7+Ue(e,0,n).getUTCDay()-t)%7;return-r+n-1}function Ve(e,t,i,n,r){var a,s,o=(7+i-n)%7,l=Ie(e,n,r),u=1+7*(t-1)+o+l;return s=u<=0?Se(a=e-1)+u:u>Se(e)?(a=e+1,u-Se(e)):(a=e,u),{year:a,dayOfYear:s}}function Ge(e,t,i){var n,r,a=Ie(e.year(),t,i),s=Math.floor((e.dayOfYear()-a-1)/7)+1;return s<1?(r=e.year()-1,n=s+ze(r,t,i)):s>ze(e.year(),t,i)?(n=s-ze(e.year(),t,i),r=e.year()+1):(r=e.year(),n=s),{week:n,year:r}}function ze(e,t,i){var n=Ie(e,t,i),r=Ie(e+1,t,i);return(Se(e)-n+r)/7}V("w",["ww",2],"wo","week"),V("W",["WW",2],"Wo","isoWeek"),C("week","w"),C("isoWeek","W"),L("week",5),L("isoWeek",5),ue("w",K),ue("ww",K,B),ue("W",K),ue("WW",K,B),pe(["w","ww","W","WW"],function(e,t,i,n){t[n.substr(0,1)]=x(e)}),V("d",0,"do","day"),V("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),V("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),V("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),V("e",0,0,"weekday"),V("E",0,0,"isoWeekday"),C("day","d"),C("weekday","e"),C("isoWeekday","E"),L("day",11),L("weekday",11),L("isoWeekday",11),ue("d",K),ue("e",K),ue("E",K),ue("dd",function(e,t){return t.weekdaysMinRegex(e)}),ue("ddd",function(e,t){return t.weekdaysShortRegex(e)}),ue("dddd",function(e,t){return t.weekdaysRegex(e)}),pe(["dd","ddd","dddd"],function(e,t,i,n){var r=i._locale.weekdaysParse(e,n,i._strict);null!=r?t.d=r:_(i).invalidWeekday=e}),pe(["d","e","E"],function(e,t,i,n){t[n]=x(e)});var $e="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Be="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ze="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function qe(e,t,i){var n,r,a,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],n=0;n<7;++n)a=h([2e3,1]).day(n),this._minWeekdaysParse[n]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[n]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[n]=this.weekdays(a,"").toLocaleLowerCase();return i?"dddd"===t?-1!==(r=De.call(this._weekdaysParse,s))?r:null:"ddd"===t?-1!==(r=De.call(this._shortWeekdaysParse,s))?r:null:-1!==(r=De.call(this._minWeekdaysParse,s))?r:null:"dddd"===t?-1!==(r=De.call(this._weekdaysParse,s))?r:-1!==(r=De.call(this._shortWeekdaysParse,s))?r:-1!==(r=De.call(this._minWeekdaysParse,s))?r:null:"ddd"===t?-1!==(r=De.call(this._shortWeekdaysParse,s))?r:-1!==(r=De.call(this._weekdaysParse,s))?r:-1!==(r=De.call(this._minWeekdaysParse,s))?r:null:-1!==(r=De.call(this._minWeekdaysParse,s))?r:-1!==(r=De.call(this._weekdaysParse,s))?r:-1!==(r=De.call(this._shortWeekdaysParse,s))?r:null}var Je=oe,Ke=oe,Qe=oe;function Xe(){function e(e,t){return t.length-e.length}var t,i,n,r,a,s=[],o=[],l=[],u=[];for(t=0;t<7;t++)i=h([2e3,1]).day(t),n=this.weekdaysMin(i,""),r=this.weekdaysShort(i,""),a=this.weekdays(i,""),s.push(n),o.push(r),l.push(a),u.push(n),u.push(r),u.push(a);for(s.sort(e),o.sort(e),l.sort(e),u.sort(e),t=0;t<7;t++)o[t]=de(o[t]),l[t]=de(l[t]),u[t]=de(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function et(){return this.hours()%12||12}function tt(e,t){V(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function it(e,t){return t._meridiemParse}V("H",["HH",2],0,"hour"),V("h",["hh",2],0,et),V("k",["kk",2],0,function(){return this.hours()||24}),V("hmm",0,0,function(){return""+et.apply(this)+E(this.minutes(),2)}),V("hmmss",0,0,function(){return""+et.apply(this)+E(this.minutes(),2)+E(this.seconds(),2)}),V("Hmm",0,0,function(){return""+this.hours()+E(this.minutes(),2)}),V("Hmmss",0,0,function(){return""+this.hours()+E(this.minutes(),2)+E(this.seconds(),2)}),tt("a",!0),tt("A",!1),C("hour","h"),L("hour",13),ue("a",it),ue("A",it),ue("H",K),ue("h",K),ue("k",K),ue("HH",K,B),ue("hh",K,B),ue("kk",K,B),ue("hmm",Q),ue("hmmss",X),ue("Hmm",Q),ue("Hmmss",X),fe(["H","HH"],_e),fe(["k","kk"],function(e,t,i){var n=x(e);t[_e]=24===n?0:n}),fe(["a","A"],function(e,t,i){i._isPm=i._locale.isPM(e),i._meridiem=e}),fe(["h","hh"],function(e,t,i){t[_e]=x(e),_(i).bigHour=!0}),fe("hmm",function(e,t,i){var n=e.length-2;t[_e]=x(e.substr(0,n)),t[ye]=x(e.substr(n)),_(i).bigHour=!0}),fe("hmmss",function(e,t,i){var n=e.length-4,r=e.length-2;t[_e]=x(e.substr(0,n)),t[ye]=x(e.substr(n,2)),t[we]=x(e.substr(r)),_(i).bigHour=!0}),fe("Hmm",function(e,t,i){var n=e.length-2;t[_e]=x(e.substr(0,n)),t[ye]=x(e.substr(n))}),fe("Hmmss",function(e,t,i){var n=e.length-4,r=e.length-2;t[_e]=x(e.substr(0,n)),t[ye]=x(e.substr(n,2)),t[we]=x(e.substr(r))});var nt,rt=Oe("Hours",!0),at={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ne,monthsShort:We,week:{dow:0,doy:6},weekdays:$e,weekdaysMin:Ze,weekdaysShort:Be,meridiemParse:/[ap]\.?m?\.?/i},st={},ot={};function lt(e){return e?e.toLowerCase().replace("_","-"):e}function ut(e){var t=null;if(!st[e]&&void 0!==zi&&zi&&zi.exports)try{t=nt._abbr,!function(){var e=new Error('Cannot find module "undefined"');throw e.code="MODULE_NOT_FOUND",e}(),ct(t)}catch(e){}return st[e]}function ct(e,t){var i;return e&&(i=a(t)?ht(e):dt(e,t))&&(nt=i),nt._abbr}function dt(e,t){if(null===t)return delete st[e],null;var i=at;if(t.abbr=e,null!=st[e])Y("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),i=st[e]._config;else if(null!=t.parentLocale){if(null==st[t.parentLocale])return ot[t.parentLocale]||(ot[t.parentLocale]=[]),ot[t.parentLocale].push({name:e,config:t}),null;i=st[t.parentLocale]._config}return st[e]=new T(j(i,t)),ot[e]&&ot[e].forEach(function(e){dt(e.name,e.config)}),ct(e),st[e]}function ht(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return nt;if(!o(e)){if(t=ut(e))return t;e=[e]}return function(e){for(var t,i,n,r,a=0;a<e.length;){for(r=lt(e[a]).split("-"),t=r.length,i=(i=lt(e[a+1]))?i.split("-"):null;0<t;){if(n=ut(r.slice(0,t).join("-")))return n;if(i&&i.length>=t&&S(r,i,!0)>=t-1)break;t--}a++}return null}(e)}function ft(e){var t,i=e._a;return i&&-2===_(e).overflow&&(t=i[ge]<0||11<i[ge]?ge:i[ve]<1||i[ve]>Pe(i[me],i[ge])?ve:i[_e]<0||24<i[_e]||24===i[_e]&&(0!==i[ye]||0!==i[we]||0!==i[be])?_e:i[ye]<0||59<i[ye]?ye:i[we]<0||59<i[we]?we:i[be]<0||999<i[be]?be:-1,_(e)._overflowDayOfYear&&(t<me||ve<t)&&(t=ve),_(e)._overflowWeeks&&-1===t&&(t=ke),_(e)._overflowWeekday&&-1===t&&(t=xe),_(e).overflow=t),e}function pt(e,t,i){return null!=e?e:null!=t?t:i}function mt(e){var t,i,n,r,a,s,o,l=[];if(!e._d){for(s=e,o=void 0,o=new Date(g.now()),n=s._useUTC?[o.getUTCFullYear(),o.getUTCMonth(),o.getUTCDate()]:[o.getFullYear(),o.getMonth(),o.getDate()],e._w&&null==e._a[ve]&&null==e._a[ge]&&function(e){var t,i,n,r,a,s,o,l;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)a=1,s=4,i=pt(t.GG,e._a[me],Ge(Tt(),1,4).year),n=pt(t.W,1),((r=pt(t.E,1))<1||7<r)&&(l=!0);else{a=e._locale._week.dow,s=e._locale._week.doy;var u=Ge(Tt(),a,s);i=pt(t.gg,e._a[me],u.year),n=pt(t.w,u.week),null!=t.d?((r=t.d)<0||6<r)&&(l=!0):null!=t.e?(r=t.e+a,(t.e<0||6<t.e)&&(l=!0)):r=a}n<1||n>ze(i,a,s)?_(e)._overflowWeeks=!0:null!=l?_(e)._overflowWeekday=!0:(o=Ve(i,n,r,a,s),e._a[me]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(a=pt(e._a[me],n[me]),(e._dayOfYear>Se(a)||0===e._dayOfYear)&&(_(e)._overflowDayOfYear=!0),i=Ue(a,0,e._dayOfYear),e._a[ge]=i.getUTCMonth(),e._a[ve]=i.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=l[t]=n[t];for(;t<7;t++)e._a[t]=l[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[_e]&&0===e._a[ye]&&0===e._a[we]&&0===e._a[be]&&(e._nextDay=!0,e._a[_e]=0),e._d=(e._useUTC?Ue:function(e,t,i,n,r,a,s){var o=new Date(e,t,i,n,r,a,s);return e<100&&0<=e&&isFinite(o.getFullYear())&&o.setFullYear(e),o}).apply(null,l),r=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[_e]=24),e._w&&void 0!==e._w.d&&e._w.d!==r&&(_(e).weekdayMismatch=!0)}}var gt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,vt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,_t=/Z|[+-]\d\d(?::?\d\d)?/,yt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],wt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],bt=/^\/?Date\((\-?\d+)/i;function kt(e){var t,i,n,r,a,s,o=e._i,l=gt.exec(o)||vt.exec(o);if(l){for(_(e).iso=!0,t=0,i=yt.length;t<i;t++)if(yt[t][1].exec(l[1])){r=yt[t][0],n=!1!==yt[t][2];break}if(null==r)return void(e._isValid=!1);if(l[3]){for(t=0,i=wt.length;t<i;t++)if(wt[t][1].exec(l[3])){a=(l[2]||" ")+wt[t][0];break}if(null==a)return void(e._isValid=!1)}if(!n&&null!=a)return void(e._isValid=!1);if(l[4]){if(!_t.exec(l[4]))return void(e._isValid=!1);s="Z"}e._f=r+(a||"")+(s||""),Yt(e)}else e._isValid=!1}var xt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function St(e,t,i,n,r,a){var s,o,l=[(s=e,o=parseInt(s,10),o<=49?2e3+o:o<=999?1900+o:o),We.indexOf(t),parseInt(i,10),parseInt(n,10),parseInt(r,10)];return a&&l.push(parseInt(a,10)),l}var Mt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Dt(e){var t=xt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim());if(t){var i=St(t[4],t[3],t[2],t[5],t[6],t[7]);if(!function(e,t,i){if(e){var n=Be.indexOf(e),r=new Date(t[0],t[1],t[2]).getDay();if(n!==r)return _(i).weekdayMismatch=!0,i._isValid=!1}return!0}(t[1],i,e))return;e._a=i,e._tzm=function(e,t,i){if(e)return Mt[e];if(t)return 0;var n=parseInt(i,10),r=n%100,a=(n-r)/100;return 60*a+r}(t[8],t[9],t[10]),e._d=Ue.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),_(e).rfc2822=!0}else e._isValid=!1}function Yt(e){if(e._f!==g.ISO_8601)if(e._f!==g.RFC_2822){e._a=[],_(e).empty=!0;var t,i,n,r,a,s=""+e._i,o=s.length,l=0;for(n=z(e._f,e._locale).match(H)||[],t=0;t<n.length;t++)r=n[t],(i=(s.match(ce(r,e))||[])[0])&&(0<(a=s.substr(0,s.indexOf(i))).length&&_(e).unusedInput.push(a),s=s.slice(s.indexOf(i)+i.length),l+=i.length),I[r]?(i?_(e).empty=!1:_(e).unusedTokens.push(r),f=r,m=e,null!=(p=i)&&v(he,f)&&he[f](p,m._a,m,f)):e._strict&&!i&&_(e).unusedTokens.push(r);_(e).charsLeftOver=o-l,0<s.length&&_(e).unusedInput.push(s),e._a[_e]<=12&&!0===_(e).bigHour&&0<e._a[_e]&&(_(e).bigHour=void 0),_(e).parsedDateParts=e._a.slice(0),_(e).meridiem=e._meridiem,e._a[_e]=(u=e._locale,c=e._a[_e],null==(d=e._meridiem)?c:null!=u.meridiemHour?u.meridiemHour(c,d):(null!=u.isPM&&((h=u.isPM(d))&&c<12&&(c+=12),h||12!==c||(c=0)),c)),mt(e),ft(e)}else Dt(e);else kt(e);var u,c,d,h,f,p,m}function Ot(e){var t,i,n=e._i,r=e._f;return e._locale=e._locale||ht(e._l),null===n||void 0===r&&""===n?p({nullInput:!0}):("string"==typeof n&&(e._i=n=e._locale.preparse(n)),b(n)?new w(ft(n)):(s(n)?e._d=n:o(r)?function(e){var t,i,n,r,a;if(0===e._f.length)return _(e).invalidFormat=!0,e._d=new Date(NaN);for(r=0;r<e._f.length;r++)a=0,t=y({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],Yt(t),f(t)&&(a+=_(t).charsLeftOver,a+=10*_(t).unusedTokens.length,_(t).score=a,(null==n||a<n)&&(n=a,i=t));d(e,i||t)}(e):r?Yt(e):a(i=(t=e)._i)?t._d=new Date(g.now()):s(i)?t._d=new Date(i.valueOf()):"string"==typeof i?function(e){var t=bt.exec(e._i);if(null!==t)return e._d=new Date(+t[1]);kt(e),!1===e._isValid&&(delete e._isValid,Dt(e),!1===e._isValid&&(delete e._isValid,g.createFromInputFallback(e)))}(t):o(i)?(t._a=u(i.slice(0),function(e){return parseInt(e,10)}),mt(t)):l(i)?function(e){if(!e._d){var t=W(e._i);e._a=u([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),mt(e)}}(t):c(i)?t._d=new Date(i):g.createFromInputFallback(t),f(e)||(e._d=null),e))}function jt(e,t,i,n,r){var a,s={};return!0!==i&&!1!==i||(n=i,i=void 0),(l(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||o(e)&&0===e.length)&&(e=void 0),s._isAMomentObject=!0,s._useUTC=s._isUTC=r,s._l=i,s._i=e,s._f=t,s._strict=n,(a=new w(ft(Ot(s))))._nextDay&&(a.add(1,"d"),a._nextDay=void 0),a}function Tt(e,t,i,n){return jt(e,t,i,n,!1)}g.createFromInputFallback=i("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),g.ISO_8601=function(){},g.RFC_2822=function(){};var Pt=i("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Tt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()}),Ct=i("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Tt.apply(null,arguments);return this.isValid()&&e.isValid()?this<e?this:e:p()});function Nt(e,t){var i,n;if(1===t.length&&o(t[0])&&(t=t[0]),!t.length)return Tt();for(i=t[0],n=1;n<t.length;++n)t[n].isValid()&&!t[n][e](i)||(i=t[n]);return i}var Wt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function At(e){var t=W(e),i=t.year||0,n=t.quarter||0,r=t.month||0,a=t.week||0,s=t.day||0,o=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===De.call(Wt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var i=!1,n=0;n<Wt.length;++n)if(e[Wt[n]]){if(i)return!1;parseFloat(e[Wt[n]])!==x(e[Wt[n]])&&(i=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*o*60*60,this._days=+s+7*a,this._months=+r+3*n+12*i,this._data={},this._locale=ht(),this._bubble()}function Lt(e){return e instanceof At}function Rt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Et(e,i){V(e,0,0,function(){var e=this.utcOffset(),t="+";return e<0&&(e=-e,t="-"),t+E(~~(e/60),2)+i+E(~~e%60,2)})}Et("Z",":"),Et("ZZ",""),ue("Z",se),ue("ZZ",se),fe(["Z","ZZ"],function(e,t,i){i._useUTC=!0,i._tzm=Ft(se,e)});var Ht=/([\+\-]|\d\d)/gi;function Ft(e,t){var i=(t||"").match(e);if(null===i)return null;var n=i[i.length-1]||[],r=(n+"").match(Ht)||["-",0,0],a=60*r[1]+x(r[2]);return 0===a?0:"+"===r[0]?a:-a}function Ut(e,t){var i,n;return t._isUTC?(i=t.clone(),n=(b(e)||s(e)?e.valueOf():Tt(e).valueOf())-i.valueOf(),i._d.setTime(i._d.valueOf()+n),g.updateOffset(i,!1),i):Tt(e).local()}function It(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Vt(){return!!this.isValid()&&this._isUTC&&0===this._offset}g.updateOffset=function(){};var Gt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,zt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function $t(e,t){var i,n,r,a,s,o,l=e,u=null;return Lt(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:c(e)?(l={},t?l[t]=e:l.milliseconds=e):(u=Gt.exec(e))?(i="-"===u[1]?-1:1,l={y:0,d:x(u[ve])*i,h:x(u[_e])*i,m:x(u[ye])*i,s:x(u[we])*i,ms:x(Rt(1e3*u[be]))*i}):(u=zt.exec(e))?(i="-"===u[1]?-1:(u[1],1),l={y:Bt(u[2],i),M:Bt(u[3],i),w:Bt(u[4],i),d:Bt(u[5],i),h:Bt(u[6],i),m:Bt(u[7],i),s:Bt(u[8],i)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(a=Tt(l.from),s=Tt(l.to),r=a.isValid()&&s.isValid()?(s=Ut(s,a),a.isBefore(s)?o=Zt(a,s):((o=Zt(s,a)).milliseconds=-o.milliseconds,o.months=-o.months),o):{milliseconds:0,months:0},(l={}).ms=r.milliseconds,l.M=r.months),n=new At(l),Lt(e)&&v(e,"_locale")&&(n._locale=e._locale),n}function Bt(e,t){var i=e&&parseFloat(e.replace(",","."));return(isNaN(i)?0:i)*t}function Zt(e,t){var i={milliseconds:0,months:0};return i.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(i.months,"M").isAfter(t)&&--i.months,i.milliseconds=+t-+e.clone().add(i.months,"M"),i}function qt(n,r){return function(e,t){var i;return null===t||isNaN(+t)||(Y(r,"moment()."+r+"(period, number) is deprecated. Please use moment()."+r+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=e,e=t,t=i),Jt(this,$t(e="string"==typeof e?+e:e,t),n),this}}function Jt(e,t,i,n){var r=t._milliseconds,a=Rt(t._days),s=Rt(t._months);e.isValid()&&(n=null==n||n,s&&Le(e,je(e,"Month")+s*i),a&&Te(e,"Date",je(e,"Date")+a*i),r&&e._d.setTime(e._d.valueOf()+r*i),n&&g.updateOffset(e,a||s))}$t.fn=At.prototype,$t.invalid=function(){return $t(NaN)};var Kt=qt(1,"add"),Qt=qt(-1,"subtract");function Xt(e,t){var i,n,r=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(r,"months");return n=t-a<0?(i=e.clone().add(r-1,"months"),(t-a)/(a-i)):(i=e.clone().add(r+1,"months"),(t-a)/(i-a)),-(r+n)||0}function ei(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ht(e))&&(this._locale=t),this)}g.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",g.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var ti=i("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function ii(){return this._locale}function ni(e,t){V(0,[e,e.length],0,t)}function ri(e,t,i,n,r){var a;return null==e?Ge(this,n,r).year:((a=ze(e,n,r))<t&&(t=a),function(e,t,i,n,r){var a=Ve(e,t,i,n,r),s=Ue(a.year,0,a.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}.call(this,e,t,i,n,r))}V(0,["gg",2],0,function(){return this.weekYear()%100}),V(0,["GG",2],0,function(){return this.isoWeekYear()%100}),ni("gggg","weekYear"),ni("ggggg","weekYear"),ni("GGGG","isoWeekYear"),ni("GGGGG","isoWeekYear"),C("weekYear","gg"),C("isoWeekYear","GG"),L("weekYear",1),L("isoWeekYear",1),ue("G",re),ue("g",re),ue("GG",K,B),ue("gg",K,B),ue("GGGG",te,q),ue("gggg",te,q),ue("GGGGG",ie,J),ue("ggggg",ie,J),pe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,i,n){t[n.substr(0,2)]=x(e)}),pe(["gg","GG"],function(e,t,i,n){t[n]=g.parseTwoDigitYear(e)}),V("Q",0,"Qo","quarter"),C("quarter","Q"),L("quarter",7),ue("Q",$),fe("Q",function(e,t){t[ge]=3*(x(e)-1)}),V("D",["DD",2],"Do","date"),C("date","D"),L("date",9),ue("D",K),ue("DD",K,B),ue("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),fe(["D","DD"],ve),fe("Do",function(e,t){t[ve]=x(e.match(K)[0])});var ai=Oe("Date",!0);V("DDD",["DDDD",3],"DDDo","dayOfYear"),C("dayOfYear","DDD"),L("dayOfYear",4),ue("DDD",ee),ue("DDDD",Z),fe(["DDD","DDDD"],function(e,t,i){i._dayOfYear=x(e)}),V("m",["mm",2],0,"minute"),C("minute","m"),L("minute",14),ue("m",K),ue("mm",K,B),fe(["m","mm"],ye);var si=Oe("Minutes",!1);V("s",["ss",2],0,"second"),C("second","s"),L("second",15),ue("s",K),ue("ss",K,B),fe(["s","ss"],we);var oi,li=Oe("Seconds",!1);for(V("S",0,0,function(){return~~(this.millisecond()/100)}),V(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),V(0,["SSS",3],0,"millisecond"),V(0,["SSSS",4],0,function(){return 10*this.millisecond()}),V(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),V(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),V(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),V(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),V(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),C("millisecond","ms"),L("millisecond",16),ue("S",ee,$),ue("SS",ee,B),ue("SSS",ee,Z),oi="SSSS";oi.length<=9;oi+="S")ue(oi,ne);function ui(e,t){t[be]=x(1e3*("0."+e))}for(oi="S";oi.length<=9;oi+="S")fe(oi,ui);var ci=Oe("Milliseconds",!1);V("z",0,0,"zoneAbbr"),V("zz",0,0,"zoneName");var di=w.prototype;function hi(e){return e}di.add=Kt,di.calendar=function(e,t){var i=e||Tt(),n=Ut(i,this).startOf("day"),r=g.calendarFormat(this,n)||"sameElse",a=t&&(O(t[r])?t[r].call(this,i):t[r]);return this.format(a||this.localeData().calendar(r,this,Tt(i)))},di.clone=function(){return new w(this)},di.diff=function(e,t,i){var n,r,a;if(!this.isValid())return NaN;if(!(n=Ut(e,this)).isValid())return NaN;switch(r=6e4*(n.utcOffset()-this.utcOffset()),t=N(t)){case"year":a=Xt(this,n)/12;break;case"month":a=Xt(this,n);break;case"quarter":a=Xt(this,n)/3;break;case"second":a=(this-n)/1e3;break;case"minute":a=(this-n)/6e4;break;case"hour":a=(this-n)/36e5;break;case"day":a=(this-n-r)/864e5;break;case"week":a=(this-n-r)/6048e5;break;default:a=this-n}return i?a:k(a)},di.endOf=function(e){return void 0===(e=N(e))||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))},di.format=function(e){e||(e=this.isUtc()?g.defaultFormatUtc:g.defaultFormat);var t=G(this,e);return this.localeData().postformat(t)},di.from=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Tt(e).isValid())?$t({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},di.fromNow=function(e){return this.from(Tt(),e)},di.to=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Tt(e).isValid())?$t({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},di.toNow=function(e){return this.to(Tt(),e)},di.get=function(e){return O(this[e=N(e)])?this[e]():this},di.invalidAt=function(){return _(this).overflow},di.isAfter=function(e,t){var i=b(e)?e:Tt(e);return!(!this.isValid()||!i.isValid())&&("millisecond"===(t=N(a(t)?"millisecond":t))?this.valueOf()>i.valueOf():i.valueOf()<this.clone().startOf(t).valueOf())},di.isBefore=function(e,t){var i=b(e)?e:Tt(e);return!(!this.isValid()||!i.isValid())&&("millisecond"===(t=N(a(t)?"millisecond":t))?this.valueOf()<i.valueOf():this.clone().endOf(t).valueOf()<i.valueOf())},di.isBetween=function(e,t,i,n){return("("===(n=n||"()")[0]?this.isAfter(e,i):!this.isBefore(e,i))&&(")"===n[1]?this.isBefore(t,i):!this.isAfter(t,i))},di.isSame=function(e,t){var i,n=b(e)?e:Tt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t||"millisecond"))?this.valueOf()===n.valueOf():(i=n.valueOf(),this.clone().startOf(t).valueOf()<=i&&i<=this.clone().endOf(t).valueOf()))},di.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},di.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},di.isValid=function(){return f(this)},di.lang=ti,di.locale=ei,di.localeData=ii,di.max=Ct,di.min=Pt,di.parsingFlags=function(){return d({},_(this))},di.set=function(e,t){if("object"==typeof e)for(var i=R(e=W(e)),n=0;n<i.length;n++)this[i[n].unit](e[i[n].unit]);else if(O(this[e=N(e)]))return this[e](t);return this},di.startOf=function(e){switch(e=N(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this},di.subtract=Qt,di.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},di.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},di.toDate=function(){return new Date(this.valueOf())},di.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,i=t?this.clone().utc():this;return i.year()<0||9999<i.year()?G(i,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):O(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this._d.valueOf()).toISOString().replace("Z",G(i,"Z")):G(i,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},di.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var i="["+e+'("]',n=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",r=t+'[")]';return this.format(i+n+"-MM-DD[T]HH:mm:ss.SSS"+r)},di.toJSON=function(){return this.isValid()?this.toISOString():null},di.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},di.unix=function(){return Math.floor(this.valueOf()/1e3)},di.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},di.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},di.year=Ye,di.isLeapYear=function(){return Me(this.year())},di.weekYear=function(e){return ri.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},di.isoWeekYear=function(e){return ri.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},di.quarter=di.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},di.month=Re,di.daysInMonth=function(){return Pe(this.year(),this.month())},di.week=di.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},di.isoWeek=di.isoWeeks=function(e){var t=Ge(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},di.weeksInYear=function(){var e=this.localeData()._week;return ze(this.year(),e.dow,e.doy)},di.isoWeeksInYear=function(){return ze(this.year(),1,4)},di.date=ai,di.day=di.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t,i,n=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(t=e,i=this.localeData(),e="string"==typeof t?isNaN(t)?"number"!=typeof(t=i.weekdaysParse(t))?null:t:parseInt(t,10):t,this.add(e-n,"d")):n},di.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},di.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null==e)return this.day()||7;var t,i,n=(t=e,i=this.localeData(),"string"!=typeof t?isNaN(t)?null:t:i.weekdaysParse(t)%7||7);return this.day(this.day()%7?n:n-7)},di.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},di.hour=di.hours=rt,di.minute=di.minutes=si,di.second=di.seconds=li,di.millisecond=di.milliseconds=ci,di.utcOffset=function(e,t,i){var n,r=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null==e)return this._isUTC?r:It(this);if("string"==typeof e){if(null===(e=Ft(se,e)))return this}else Math.abs(e)<16&&!i&&(e*=60);return!this._isUTC&&t&&(n=It(this)),this._offset=e,this._isUTC=!0,null!=n&&this.add(n,"m"),r!==e&&(!t||this._changeInProgress?Jt(this,$t(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,g.updateOffset(this,!0),this._changeInProgress=null)),this},di.utc=function(e){return this.utcOffset(0,e)},di.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(It(this),"m")),this},di.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Ft(ae,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},di.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Tt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},di.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},di.isLocal=function(){return!!this.isValid()&&!this._isUTC},di.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},di.isUtc=Vt,di.isUTC=Vt,di.zoneAbbr=function(){return this._isUTC?"UTC":""},di.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},di.dates=i("dates accessor is deprecated. Use date instead.",ai),di.months=i("months accessor is deprecated. Use month instead",Re),di.years=i("years accessor is deprecated. Use year instead",Ye),di.zone=i("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),di.isDSTShifted=i("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!a(this._isDSTShifted))return this._isDSTShifted;var e={};if(y(e,this),(e=Ot(e))._a){var t=e._isUTC?h(e._a):Tt(e._a);this._isDSTShifted=this.isValid()&&0<S(e._a,t.toArray())}else this._isDSTShifted=!1;return this._isDSTShifted});var fi=T.prototype;function pi(e,t,i,n){var r=ht(),a=h().set(n,t);return r[i](a,e)}function mi(e,t,i){if(c(e)&&(t=e,e=void 0),e=e||"",null!=t)return pi(e,t,i,"month");var n,r=[];for(n=0;n<12;n++)r[n]=pi(e,n,i,"month");return r}function gi(e,t,i,n){"boolean"==typeof e?c(t)&&(i=t,t=void 0):(t=e,e=!1,c(i=t)&&(i=t,t=void 0)),t=t||"";var r,a=ht(),s=e?a._week.dow:0;if(null!=i)return pi(t,(i+s)%7,n,"day");var o=[];for(r=0;r<7;r++)o[r]=pi(t,(r+s)%7,n,"day");return o}fi.calendar=function(e,t,i){var n=this._calendar[e]||this._calendar.sameElse;return O(n)?n.call(t,i):n},fi.longDateFormat=function(e){var t=this._longDateFormat[e],i=this._longDateFormat[e.toUpperCase()];return!t&&i?(this._longDateFormat[e]=i.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e]):t},fi.invalidDate=function(){return this._invalidDate},fi.ordinal=function(e){return this._ordinal.replace("%d",e)},fi.preparse=hi,fi.postformat=hi,fi.relativeTime=function(e,t,i,n){var r=this._relativeTime[i];return O(r)?r(e,t,i,n):r.replace(/%d/i,e)},fi.pastFuture=function(e,t){var i=this._relativeTime[0<e?"future":"past"];return O(i)?i(t):i.replace(/%s/i,t)},fi.set=function(e){var t,i;for(i in e)O(t=e[i])?this[i]=t:this["_"+i]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},fi.months=function(e,t){return e?o(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ce).test(t)?"format":"standalone"][e.month()]:o(this._months)?this._months:this._months.standalone},fi.monthsShort=function(e,t){return e?o(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ce.test(t)?"format":"standalone"][e.month()]:o(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},fi.monthsParse=function(e,t,i){var n,r,a;if(this._monthsParseExact)return Ae.call(this,e,t,i);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),n=0;n<12;n++){if(r=h([2e3,n]),i&&!this._longMonthsParse[n]&&(this._longMonthsParse[n]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[n]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),i||this._monthsParse[n]||(a="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[n]=new RegExp(a.replace(".",""),"i")),i&&"MMMM"===t&&this._longMonthsParse[n].test(e))return n;if(i&&"MMM"===t&&this._shortMonthsParse[n].test(e))return n;if(!i&&this._monthsParse[n].test(e))return n}},fi.monthsRegex=function(e){return this._monthsParseExact?(v(this,"_monthsRegex")||Fe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(v(this,"_monthsRegex")||(this._monthsRegex=He),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},fi.monthsShortRegex=function(e){return this._monthsParseExact?(v(this,"_monthsRegex")||Fe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(v(this,"_monthsShortRegex")||(this._monthsShortRegex=Ee),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},fi.week=function(e){return Ge(e,this._week.dow,this._week.doy).week},fi.firstDayOfYear=function(){return this._week.doy},fi.firstDayOfWeek=function(){return this._week.dow},fi.weekdays=function(e,t){return e?o(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]:o(this._weekdays)?this._weekdays:this._weekdays.standalone},fi.weekdaysMin=function(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin},fi.weekdaysShort=function(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort},fi.weekdaysParse=function(e,t,i){var n,r,a;if(this._weekdaysParseExact)return qe.call(this,e,t,i);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),n=0;n<7;n++){if(r=h([2e3,1]).day(n),i&&!this._fullWeekdaysParse[n]&&(this._fullWeekdaysParse[n]=new RegExp("^"+this.weekdays(r,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[n]=new RegExp("^"+this.weekdaysShort(r,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[n]=new RegExp("^"+this.weekdaysMin(r,"").replace(".",".?")+"$","i")),this._weekdaysParse[n]||(a="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[n]=new RegExp(a.replace(".",""),"i")),i&&"dddd"===t&&this._fullWeekdaysParse[n].test(e))return n;if(i&&"ddd"===t&&this._shortWeekdaysParse[n].test(e))return n;if(i&&"dd"===t&&this._minWeekdaysParse[n].test(e))return n;if(!i&&this._weekdaysParse[n].test(e))return n}},fi.weekdaysRegex=function(e){return this._weekdaysParseExact?(v(this,"_weekdaysRegex")||Xe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(v(this,"_weekdaysRegex")||(this._weekdaysRegex=Je),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},fi.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(v(this,"_weekdaysRegex")||Xe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(v(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ke),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},fi.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(v(this,"_weekdaysRegex")||Xe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(v(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Qe),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},fi.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},fi.meridiem=function(e,t,i){return 11<e?i?"pm":"PM":i?"am":"AM"},ct("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,i=1===x(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+i}}),g.lang=i("moment.lang is deprecated. Use moment.locale instead.",ct),g.langData=i("moment.langData is deprecated. Use moment.localeData instead.",ht);var vi=Math.abs;function _i(e,t,i,n){var r=$t(t,i);return e._milliseconds+=n*r._milliseconds,e._days+=n*r._days,e._months+=n*r._months,e._bubble()}function yi(e){return e<0?Math.floor(e):Math.ceil(e)}function wi(e){return 4800*e/146097}function bi(e){return 146097*e/4800}function ki(e){return function(){return this.as(e)}}var xi=ki("ms"),Si=ki("s"),Mi=ki("m"),Di=ki("h"),Yi=ki("d"),Oi=ki("w"),ji=ki("M"),Ti=ki("y");function Pi(e){return function(){return this.isValid()?this._data[e]:NaN}}var Ci=Pi("milliseconds"),Ni=Pi("seconds"),Wi=Pi("minutes"),Ai=Pi("hours"),Li=Pi("days"),Ri=Pi("months"),Ei=Pi("years"),Hi=Math.round,Fi={ss:44,s:45,m:45,h:22,d:26,M:11},Ui=Math.abs;function Ii(e){return(0<e)-(e<0)||+e}function Vi(){if(!this.isValid())return this.localeData().invalidDate();var e,t,i=Ui(this._milliseconds)/1e3,n=Ui(this._days),r=Ui(this._months);e=k(i/60),t=k(e/60),i%=60,e%=60;var a=k(r/12),s=r%=12,o=n,l=t,u=e,c=i?i.toFixed(3).replace(/\.?0+$/,""):"",d=this.asSeconds();if(!d)return"P0D";var h=d<0?"-":"",f=Ii(this._months)!==Ii(d)?"-":"",p=Ii(this._days)!==Ii(d)?"-":"",m=Ii(this._milliseconds)!==Ii(d)?"-":"";return h+"P"+(a?f+a+"Y":"")+(s?f+s+"M":"")+(o?p+o+"D":"")+(l||u||c?"T":"")+(l?m+l+"H":"")+(u?m+u+"M":"")+(c?m+c+"S":"")}var Gi=At.prototype;return Gi.isValid=function(){return this._isValid},Gi.abs=function(){var e=this._data;return this._milliseconds=vi(this._milliseconds),this._days=vi(this._days),this._months=vi(this._months),e.milliseconds=vi(e.milliseconds),e.seconds=vi(e.seconds),e.minutes=vi(e.minutes),e.hours=vi(e.hours),e.months=vi(e.months),e.years=vi(e.years),this},Gi.add=function(e,t){return _i(this,e,t,1)},Gi.subtract=function(e,t){return _i(this,e,t,-1)},Gi.as=function(e){if(!this.isValid())return NaN;var t,i,n=this._milliseconds;if("month"===(e=N(e))||"year"===e)return t=this._days+n/864e5,i=this._months+wi(t),"month"===e?i:i/12;switch(t=this._days+Math.round(bi(this._months)),e){case"week":return t/7+n/6048e5;case"day":return t+n/864e5;case"hour":return 24*t+n/36e5;case"minute":return 1440*t+n/6e4;case"second":return 86400*t+n/1e3;case"millisecond":return Math.floor(864e5*t)+n;default:throw new Error("Unknown unit "+e)}},Gi.asMilliseconds=xi,Gi.asSeconds=Si,Gi.asMinutes=Mi,Gi.asHours=Di,Gi.asDays=Yi,Gi.asWeeks=Oi,Gi.asMonths=ji,Gi.asYears=Ti,Gi.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*x(this._months/12):NaN},Gi._bubble=function(){var e,t,i,n,r,a=this._milliseconds,s=this._days,o=this._months,l=this._data;return 0<=a&&0<=s&&0<=o||a<=0&&s<=0&&o<=0||(a+=864e5*yi(bi(o)+s),o=s=0),l.milliseconds=a%1e3,e=k(a/1e3),l.seconds=e%60,t=k(e/60),l.minutes=t%60,i=k(t/60),l.hours=i%24,s+=k(i/24),r=k(wi(s)),o+=r,s-=yi(bi(r)),n=k(o/12),o%=12,l.days=s,l.months=o,l.years=n,this},Gi.clone=function(){return $t(this)},Gi.get=function(e){return e=N(e),this.isValid()?this[e+"s"]():NaN},Gi.milliseconds=Ci,Gi.seconds=Ni,Gi.minutes=Wi,Gi.hours=Ai,Gi.days=Li,Gi.weeks=function(){return k(this.days()/7)},Gi.months=Ri,Gi.years=Ei,Gi.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t,i,n,r,a,s,o,l,u,c,d,h=this.localeData(),f=(i=!e,n=h,r=$t(t=this).abs(),a=Hi(r.as("s")),s=Hi(r.as("m")),o=Hi(r.as("h")),l=Hi(r.as("d")),u=Hi(r.as("M")),c=Hi(r.as("y")),(d=a<=Fi.ss&&["s",a]||a<Fi.s&&["ss",a]||s<=1&&["m"]||s<Fi.m&&["mm",s]||o<=1&&["h"]||o<Fi.h&&["hh",o]||l<=1&&["d"]||l<Fi.d&&["dd",l]||u<=1&&["M"]||u<Fi.M&&["MM",u]||c<=1&&["y"]||["yy",c])[2]=i,d[3]=0<+t,d[4]=n,function(e,t,i,n,r){return r.relativeTime(t||1,!!i,e,n)}.apply(null,d));return e&&(f=h.pastFuture(+this,f)),h.postformat(f)},Gi.toISOString=Vi,Gi.toString=Vi,Gi.toJSON=Vi,Gi.locale=ei,Gi.localeData=ii,Gi.toIsoString=i("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Vi),Gi.lang=ti,V("X",0,0,"unix"),V("x",0,0,"valueOf"),ue("x",re),ue("X",/[+-]?\d+(\.\d{1,3})?/),fe("X",function(e,t,i){i._d=new Date(1e3*parseFloat(e,10))}),fe("x",function(e,t,i){i._d=new Date(x(e))}),g.version="2.20.1",e=Tt,g.fn=di,g.min=function(){return Nt("isBefore",[].slice.call(arguments,0))},g.max=function(){return Nt("isAfter",[].slice.call(arguments,0))},g.now=function(){return Date.now?Date.now():+new Date},g.utc=h,g.unix=function(e){return Tt(1e3*e)},g.months=function(e,t){return mi(e,t,"months")},g.isDate=s,g.locale=ct,g.invalid=p,g.duration=$t,g.isMoment=b,g.weekdays=function(e,t,i){return gi(e,t,i,"weekdays")},g.parseZone=function(){return Tt.apply(null,arguments).parseZone()},g.localeData=ht,g.isDuration=Lt,g.monthsShort=function(e,t){return mi(e,t,"monthsShort")},g.weekdaysMin=function(e,t,i){return gi(e,t,i,"weekdaysMin")},g.defineLocale=dt,g.updateLocale=function(e,t){if(null!=t){var i,n,r=at;null!=(n=ut(e))&&(r=n._config),t=j(r,t),(i=new T(t)).parentLocale=st[e],st[e]=i,ct(e)}else null!=st[e]&&(null!=st[e].parentLocale?st[e]=st[e].parentLocale:null!=st[e]&&delete st[e]);return st[e]},g.locales=function(){return n(st)},g.weekdaysShort=function(e,t,i){return gi(e,t,i,"weekdaysShort")},g.normalizeUnits=N,g.relativeTimeRounding=function(e){return void 0!==e?"function"==typeof e&&(Hi=e,!0):Hi},g.relativeTimeThreshold=function(e,t){return void 0!==Fi[e]&&(void 0===t?Fi[e]:(Fi[e]=t,"s"===e&&(Fi.ss=t-1),!0))},g.calendarFormat=function(e,t){var i=e.diff(t,"days",!0);return i<-6?"sameElse":i<-1?"lastWeek":i<0?"lastDay":i<1?"sameDay":i<2?"nextDay":i<7?"nextWeek":"sameElse"},g.prototype=di,g.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"YYYY-[W]WW",MONTH:"YYYY-MM"},g}()}).call(this,i(22)(e))},function(e,t,i){"use strict";var n,r=i(9);(n=r)&&n.__esModule;i(0).tag2("footer",'<div class="container"> <social></social> <p>© 2018 pvcresin</p> </div>','footer,[data-is="footer"]{ display: block; background: #0f0f0f; color: white; } footer > .container,[data-is="footer"] > .container{ text-align: center; padding: 1rem 0; } footer > .container > p,[data-is="footer"] > .container > p{ color: #525252; padding-bottom: 1rem; }',"",function(e){})},function(e,t,i){"use strict";var n,r=i(9);(n=r)&&n.__esModule;i(0).tag2("first",'<nav></nav> <div class="container"> <h1>Raika Toriyama</h1> <p>Android / Web Developer</p> <social></social> </div> <div class="container"> <div class="arrow"><i class="fas fa-chevron-down fa-3x"></i></div> </div>','first,[data-is="first"]{ text-align: center; background: #1a1819; color: white; min-height: 100vh; display: flex; flex-direction: column; justify-content: space-around; } first > nav,[data-is="first"] > nav{ margin: 0 auto; width: 100%; max-width: calc(1200px * 0.8); line-height: 3rem; } first > nav > ul,[data-is="first"] > nav > ul{ display: flex; justify-content: space-around; } first > nav > ul > li,[data-is="first"] > nav > ul > li{ display: inline-block; } first > .container > h1,[data-is="first"] > .container > h1{ font-size: calc(1.0rem + 250%); margin: 0; } first > .container > p,[data-is="first"] > .container > p{ font-size: 1.5rem; font-family: serif; margin-top: 1rem; } first > .container .arrow,[data-is="first"] > .container .arrow{ display: inline-block; } @media (max-width: 768px) { first .container > h1,[data-is="first"] .container > h1{ font-size: 2.5rem; } first .container > p,[data-is="first"] .container > p{ font-size: 1.2rem; margin-top: 0.5rem; } }',"",function(e){})},function(e,t,i){"use strict";n(i(25)),n(i(24)),n(i(8)),n(i(7)),n(i(21)),n(i(20)),n(i(19)),n(i(18));function n(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("top",'<first></first> <section> <div class="container"> <h2 class="section-title">About Me</h2> <about></about> <more text="detail" title="View detailed profile" link="#profile"></more> </div> </section> <section> <div class="container"> <h2 class="section-title">Projects</h2> <projects limit="3"></projects> <more title="View all projects" link="#projects"></more> </div> </section> <section> <div class="container"> <h2 class="section-title">Awards</h2> <awards></awards> <h2 class="section-title">Publications</h2> <publications></publications> <h2 class="section-title">Clubs</h2> <clubs></clubs> </div> </section> <footer></footer>','top,[data-is="top"]{ display: block; min-height: 100vh; } top > section:nth-child(2n),[data-is="top"] > section:nth-child(2n){ background: #2b2b2b; color: #efefef; } top > section:nth-child(2n+1),[data-is="top"] > section:nth-child(2n+1){ background: #eeeeee; color: #222222; }',"",function(e){this.on("route",function(){var e=window.location.hash;void 0===window.scrolls[""+e]?window.scroll(0,0):window.scroll(0,window.scrolls[""+e])})})},function(e,t,i){"use strict";n(i(5)),n(i(26)),n(i(17)),n(i(13)),n(i(12)),n(i(10));function n(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("app",'<router> <route path=""> <top></top> </route> <route path="profile.."> <profile></profile> </route> <route path="projects/*"> <projectdetail></projectDetail> </route> <route path="projects.."> <projectall></projectAll> </route> <route path=".."> <other></other> </route> </router>',"","",function(e){})},function(e,t,i){"use strict";var n=a(i(0)),r=a(i(2));a(i(27));function a(e){return e&&e.__esModule?e:{default:e}}n.default.mount(".root","app"),r.default.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,