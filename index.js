!function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(r,n,function(e){return t[e]}.bind(null,n));return r},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=10)}([function(t,e,i){
/* Riot v3.13.2, @license MIT */
!function(t){"use strict";function e(t,e){return(e||document).querySelector(t)}var i,r,n=[],a={},o=["ref","data-ref"],s="http://www.w3.org/2000/svg",l=/^xlink:(\w+)/,u="undefined"==typeof window?void 0:window,c=/^on/,d=/([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g,p={viewbox:"viewBox",preserveaspectratio:"preserveAspectRatio"},f=/^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/,h=0|(u&&u.document||{}).documentMode;function m(t){return"svg"===t?document.createElementNS(s,t):document.createElement(t)}function g(t,e,i){var r=l.exec(e);r&&r[1]?t.setAttributeNS("http://www.w3.org/1999/xlink",r[1],i):t.setAttribute(e,i)}var v,b,w={},y=!1;u&&(v=m("style"),b=e("style[type=riot]"),g(v,"type","text/css"),b?(b.id&&(v.id=b.id),b.parentNode.replaceChild(v,b)):document.head.appendChild(v),r=(i=v).styleSheet);var x={styleNode:i,add:function(t,e){w[e]=t,y=!0},inject:function(){if(u&&y){y=!1;var t=Object.keys(w).map((function(t){return w[t]})).join("\n");r?r.cssText=t:i.innerHTML=t}},remove:function(t){delete w[t],y=!0}},k=function(){var t=["case","default","do","else","in","instanceof","prefix","return","typeof","void","yield"],e=t.reduce((function(t,e){return t+e.slice(-1)}),""),i=/^\/(?=[^*>/])[^[/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\/]*)*?\/[gimuy]*/,r=/[$\w]/;function n(t,e){for(;--e>=0&&/\s/.test(t[e]););return e}return function(a,o){var s=/.*/g,l=s.lastIndex=o++,u=s.exec(a)[0].match(i);if(u){var c=l+u[0].length,d=a[l=n(a,l)];if(l<0||~"[{(,;:?=|&!^~>%*/".indexOf(d))return c;if("."===d)"."===a[l-1]&&(o=c);else if("+"===d||"-"===d)(a[--l]!==d||(l=n(a,l))<0||!r.test(a[l]))&&(o=c);else if(~e.indexOf(d)){for(var p=l+1;--l>=0&&r.test(a[l]););~t.indexOf(a.slice(l+1,p))&&(o=c)}}return o}}(),_=function(t){var e,i,r=/"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|`[^`\\]*(?:\\[\S\s][^`\\]*)*`/g,n=r.source+"|"+/(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source+"|"+/\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?([^<]\/)[gim]*/.source,a=RegExp("[\\x00-\\x1F<>a-zA-Z0-9'\",;\\\\]"),o=/(?=[[\]()*+?.^$|])/g,s=r.source+"|"+/(\/)(?![*\/])/.source,l={"(":RegExp("([()])|"+s,"g"),"[":RegExp("([[\\]])|"+s,"g"),"{":RegExp("([{}])|"+s,"g")},u=["{","}","{","}",/{[^}]*}/,/\\([{}])/g,/\\({)|{/g,RegExp("\\\\(})|([[({])|(})|"+s,"g"),"{ }",/^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,/(^|[^\\]){=[\S\s]*?}/],c=void 0,d=[];function p(t){return t}function f(t,e){return e||(e=d),new RegExp(t.source.replace(/{/g,e[2]).replace(/}/g,e[3]),t.global?"g":"")}function h(t){if("{ }"===t)return u;var e=t.split(" ");if(2!==e.length||a.test(t))throw new Error('Unsupported brackets "'+t+'"');return(e=e.concat(t.replace(o,"\\").split(" ")))[4]=f(e[1].length>1?/{[\S\s]*?}/:u[4],e),e[5]=f(t.length>3?/\\({|})/g:u[5],e),e[6]=f(u[6],e),e[7]=RegExp("\\\\("+e[3]+")|([[({])|("+e[3]+")|"+s,"g"),e[8]=t,e}function m(t){return t instanceof RegExp?e(t):d[t]}function g(t){(t||(t="{ }"))!==d[8]&&(d=h(t),e="{ }"===t?p:f,d[9]=e(u[9])),c=t}return m.split=function(t,e,i){i||(i=d);var r,n,a,o,s,u,c=[],p=i[6],f=[],h="";for(n=a=p.lastIndex=0;r=p.exec(t);){if(u=p.lastIndex,o=r.index,n){if(r[2]){var m=r[2],g=l[m],v=1;for(g.lastIndex=u;r=g.exec(t);)if(r[1]){if(r[1]===m)++v;else if(!--v)break}else g.lastIndex=w(r.index,g.lastIndex,r[2]);p.lastIndex=v?t.length:g.lastIndex;continue}if(!r[3]){p.lastIndex=w(o,u,r[4]);continue}}r[1]||(b(t.slice(a,o)),a=p.lastIndex,(p=i[6+(n^=1)]).lastIndex=a)}return t&&a<t.length&&b(t.slice(a)),c.qblocks=f,c;function b(t){h&&(t=h+t,h=""),e||n?c.push(t&&t.replace(i[5],"$1")):c.push(t)}function w(i,r,n){return n&&(r=k(t,i)),e&&r>i+2&&(s="⁗"+f.length+"~",f.push(t.slice(i,r)),h+=t.slice(a,i)+s,a=r),r}},m.hasExpr=function(t){return d[4].test(t)},m.loopKeys=function(t){var e=t.match(d[9]);return e?{key:e[1],pos:e[2],val:d[0]+e[3].trim()+d[1]}:{val:t.trim()}},m.array=function(t){return t?h(t):d},Object.defineProperty(m,"settings",{set:function(t){var e;e=(t=t||{}).brackets,Object.defineProperty(t,"brackets",{set:g,get:function(){return c},enumerable:!0}),i=t,g(e)},get:function(){return i}}),m.settings="undefined"!=typeof riot&&riot.settings||{},m.set=g,m.skipRegex=k,m.R_STRINGS=r,m.R_MLCOMMS=/\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,m.S_QBLOCKS=n,m.S_QBLOCK2=s,m}(),j=function(){var t={};function e(e,a){return e?(t[e]||(t[e]=function(t){var e=function(t){var e,i=_.split(t.replace(r,'"'),1),a=i.qblocks;if(i.length>2||i[0]){var o,l,u=[];for(o=l=0;o<i.length;++o)(e=i[o])&&(e=1&o?s(e,1,a):'"'+e.replace(/\\/g,"\\\\").replace(/\r\n?|\n/g,"\\n").replace(/"/g,'\\"')+'"')&&(u[l++]=e);e=l<2?u[0]:"["+u.join(",")+'].join("")'}else e=s(i[1],0,a);return a.length&&(e=e.replace(n,(function(t,e){return a[e].replace(/\r/g,"\\r").replace(/\n/g,"\\n")}))),e}(t);return"try{return "!==e.slice(0,11)&&(e="return "+e),new Function("E",e+";")}(e))).call(a,i.bind({data:a,tmpl:e})):e}function i(t,i){t.riotData={tagName:i&&i.__&&i.__.tagName,_riot_id:i&&i._riot_id},e.errorHandler?e.errorHandler(t):"undefined"!=typeof console&&"function"==typeof console.error&&(console.error(t.message),console.log("<%s> %s",t.riotData.tagName||"Unknown tag",this.tmpl),console.log(this.data))}e.hasExpr=_.hasExpr,e.loopKeys=_.loopKeys,e.clearCache=function(){t={}},e.errorHandler=null;var r=/\u2057/g,n=/\u2057(\d+)~/g,a=/^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/,o={"(":/[()]/g,"[":/[[\]]/g,"{":/[{}]/g};function s(t,e,i){if(t=t.replace(/\s+/g," ").trim().replace(/\ ?([[\({},?\.:])\ ?/g,"$1")){for(var r,n=[],s=0;t&&(r=t.match(a))&&!r.index;){var l,u,c=/,|([[{(])|$/g;for(t=RegExp.rightContext,l=r[2]?i[r[2]].slice(1,-1).trim().replace(/\s+/g," "):r[1];u=(r=c.exec(t))[1];)p(u,c);u=t.slice(0,r.index),t=RegExp.rightContext,n[s++]=d(u,1,l)}t=s?s>1?"["+n.join(",")+'].join(" ").trim()':n[0]:d(t,e)}return t;function p(e,i){var r,n=1,a=o[e];for(a.lastIndex=i.lastIndex;r=a.exec(t);)if(r[0]===e)++n;else if(!--n)break;i.lastIndex=n?t.length:a.lastIndex}}var l='"in this?this:'+("object"!=typeof window?"global":"window")+").",u=/[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,c=/^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;function d(t,e,i){var r;return t=t.replace(u,(function(t,e,i,n,a){return i&&(n=r?0:n+t.length,"this"!==i&&"global"!==i&&"window"!==i?(t=e+'("'+i+l+i,n&&(r="."===(a=a[n])||"("===a||"["===a)):n&&(r=!c.test(a.slice(n)))),t})),r&&(t="try{return "+t+"}catch(e){E(e,this)}"),i?t=(r?"function(){"+t+"}.call(this)":"("+t+")")+'?"'+i+'":""':e&&(t="function(v){"+(r?t.replace("return ","v="):"v=("+t+")")+';return v||v===0?v:""}.call(this)'),t}return e.version=_.version="v3.0.8",e}(),S=function(t){t=t||{};var e={},i=Array.prototype.slice;return Object.defineProperties(t,{on:{value:function(i,r){return"function"==typeof r&&(e[i]=e[i]||[]).push(r),t},enumerable:!1,writable:!1,configurable:!1},off:{value:function(i,r){if("*"!=i||r)if(r)for(var n,a=e[i],o=0;n=a&&a[o];++o)n==r&&a.splice(o--,1);else delete e[i];else e={};return t},enumerable:!1,writable:!1,configurable:!1},one:{value:function(e,i){return t.on(e,(function r(){t.off(e,r),i.apply(t,arguments)}))},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(r){var n,a,o,s=arguments,l=arguments.length-1,u=new Array(l);for(o=0;o<l;o++)u[o]=s[o+1];for(n=i.call(e[r]||[],0),o=0;a=n[o];++o)a.apply(t,u);return e["*"]&&"*"!=r&&t.trigger.apply(t,["*",r].concat(u)),t},enumerable:!1,writable:!1,configurable:!1}}),t};function A(t,e){return Object.getOwnPropertyDescriptor(t,e)}function M(t){return void 0===t}function $(t,e){var i=A(t,e);return M(t[e])||i&&i.writable}function C(t){for(var e,i=1,r=arguments,n=r.length;i<n;i++)if(e=r[i])for(var a in e)$(t,a)&&(t[a]=e[a]);return t}function O(t){return Object.create(t)}var P=C(O(_.settings),{skipAnonymousTags:!0,keepValueAttributes:!1,autoUpdate:!0});function N(t,e){return[].slice.call((e||document).querySelectorAll(t))}function D(){return document.createTextNode("")}function T(t,e){t.style.display=e?"":"none",t.hidden=!e}function I(t,e){return t.getAttribute(e)}function L(t,e){t.removeAttribute(e)}function E(t,e,i){if(i){var r=t.ownerDocument.importNode((new DOMParser).parseFromString('<svg xmlns="'+s+'">'+e+"</svg>","application/xml").documentElement,!0);t.appendChild(r)}else t.innerHTML=e}function H(t,e){if(t)for(var i;i=d.exec(t);)e(i[1].toLowerCase(),i[2]||i[3]||i[4])}function W(){return document.createDocumentFragment()}function z(t,e,i){t.insertBefore(e,i.parentNode&&i)}function R(t){return Object.keys(t).reduce((function(e,i){return e+" "+i+": "+t[i]+";"}),"")}function B(t,e,i){if(t){var r,n=e(t,i);if(!1===n)return;for(t=t.firstChild;t;)r=t.nextSibling,B(t,e,n),t=r}}var F=Object.freeze({$$:N,$:e,createDOMPlaceholder:D,mkEl:m,setAttr:g,toggleVisibility:T,getAttr:I,remAttr:L,setInnerHTML:E,walkAttrs:H,createFrag:W,safeInsert:z,styleObjectToString:R,walkNodes:B});function V(t){return M(t)||null===t}function U(t){return V(t)||""===t}function Y(t){return"function"==typeof t}function K(t){return t&&"object"==typeof t}function G(t){var e=t.ownerSVGElement;return!!e||null===e}function q(t){return Array.isArray(t)||t instanceof Array}function J(t){return f.test(t)}function Z(t){return"string"==typeof t}var X=Object.freeze({isBlank:U,isFunction:Y,isObject:K,isSvg:G,isWritable:$,isArray:q,isBoolAttr:J,isNil:V,isString:Z,isUndefined:M});function Q(t,e){return-1!==t.indexOf(e)}function tt(t,e){for(var i=t?t.length:0,r=0;r<i;r++)e(t[r],r);return t}function et(t,e){return t.slice(0,e.length)===e}var it,rt=(it=-1,function(){return++it});function nt(t,e,i,r){return Object.defineProperty(t,e,C({value:i,enumerable:!1,writable:!1,configurable:!0},r)),t}function at(t){return t.replace(/-(\w)/g,(function(t,e){return e.toUpperCase()}))}function ot(t){console&&console.warn&&console.warn(t)}var st=Object.freeze({contains:Q,each:tt,getPropDescriptor:A,startsWith:et,uid:rt,defineProperty:nt,objectCreate:O,extend:C,toCamel:at,warn:ot});function lt(t,e,i,r,n){var a=t[e],o=q(a),s=!M(n);if(!a||a!==i)if(!a&&r)t[e]=[i];else if(a)if(o){var l=a.indexOf(i);if(l===n)return;-1!==l&&a.splice(l,1),s?a.splice(n,0,i):a.push(i)}else t[e]=[a,i];else t[e]=i}function ut(t){return t.tagName&&a[I(t,"data-is")||I(t,"data-is")||t.tagName.toLowerCase()]}function ct(t,e){var i=ut(t),r=!e&&I(t,"data-is");return r&&!j.hasExpr(r)?r:i?i.name:t.tagName.toLowerCase()}function dt(){return this.parent?C(O(this),this.parent):this}var pt=/<yield\b/i,ft=/<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi,ht=/<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi,mt=/<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi,gt={tr:"tbody",th:"tr",td:"tr",col:"colgroup"},vt=h&&h<10?/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/:/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/;function bt(t,i,r){var n=t&&t.match(/^\s*<([-\w]+)/),a=n&&n[1].toLowerCase(),o=m(r?"svg":"div");return t=function(t,e){if(!pt.test(t))return t;var i={};return e=e&&e.replace(ht,(function(t,e,r){return i[e]=i[e]||r,""})).trim(),t.replace(mt,(function(t,e,r){return i[e]||r||""})).replace(ft,(function(t,i){return e||i||""}))}(t,i),vt.test(a)?o=function(t,i,r){var n="o"===r[0],a=n?"select>":"table>";if(t.innerHTML="<"+a+i.trim()+"</"+a,a=t.firstChild,n)a.selectedIndex=-1;else{var o=gt[r];o&&1===a.childElementCount&&(a=e(o,a))}return a}(o,t,a):E(o,t,r),o}var wt=/^on/;function yt(t){for(var e=t;e.__.isAnonymous&&e.parent;)e=e.parent;return e}function xt(t,e,i){var r=this.__.parent,n=this.__.item;if(!n)for(;r&&!n;)n=r.__.item,r=r.__.parent;if($(i,"currentTarget")&&(i.currentTarget=t),$(i,"target")&&(i.target=i.srcElement),$(i,"which")&&(i.which=i.charCode||i.keyCode),i.item=n,e.call(this,i),P.autoUpdate&&!i.preventUpdate){var a=yt(this);a.isMounted&&a.update()}}function kt(t,e,i,r){var n,a=xt.bind(r,i,e);i[t]=null,n=t.replace(c,""),Q(r.__.listeners,i)||r.__.listeners.push(i),i["__riot-events__"]||(i["__riot-events__"]={}),i["__riot-events__"][t]&&i.removeEventListener(n,i["__riot-events__"][t]),i["__riot-events__"][t]=a,i.addEventListener(n,a,!1)}function _t(t,e,i,r){var n=oe(t,e,i),a=e.tagName||ct(e.root,!0),o=yt(r);return nt(n,"parent",o),n.__.parent=r,lt(o.tags,a,n),o!==r&&lt(r.tags,a,n),n}function jt(t,e,i,r){if(q(t[e])){var n=t[e].indexOf(i);-1!==n&&t[e].splice(n,1),t[e].length?1!==t[e].length||r||(t[e]=t[e][0]):delete t[e]}else t[e]===i&&delete t[e]}function St(t,e){var i,r,n=D(),a=D(),o=W();for(this.root.insertBefore(n,this.root.firstChild),this.root.appendChild(a),this.__.head=r=n,this.__.tail=a;r;)i=r.nextSibling,o.appendChild(r),this.__.virts.push(r),r=i;e?t.insertBefore(o,e.__.head):t.appendChild(o)}function At(t,e){if(e.parentNode){var i=W();St.call(t,i),e.parentNode.replaceChild(i,e)}}function Mt(t){if(!this.root||!I(this.root,"virtualized")){var e,i=t.dom,r=function(t){return t?(t=t.replace("riot-",""),p[t]&&(t=p[t]),t):null}(t.attr),n=Q(["show","hide"],r),o=t.root&&"VIRTUAL"===t.root.tagName,s=this.__.isAnonymous,l=i&&(t.parent||i.parentNode),u=P.keepValueAttributes,c="style"===r,d="class"===r,f="value"===r;if(t._riot_id)t.__.wasCreated?t.update():(t.mount(),o&&At(t,t.root));else{if(t.update)return t.update();var m=n&&!s?dt.call(this):this,v=!U(e=j(t.expr,m)),b=K(e);if(b&&(d?e=j(JSON.stringify(e),this):c&&(e=R(e))),!t.attr||t.wasParsedOnce&&!1!==e&&(v||f&&(!f||u))||L(i,I(i,t.attr)?t.attr:r),t.bool&&(e=!!e&&r),t.isRtag)return function(t,e,i){var r,n=t.tag||t.dom._tag,o=(n?n.__:{}).head,s="VIRTUAL"===t.dom.tagName;n&&t.tagName===i?n.update():(n&&(s&&(r=D(),o.parentNode.insertBefore(r,o)),n.unmount(!0)),Z(i)&&(t.impl=a[i],t.impl&&(t.tag=n=_t(t.impl,{root:t.dom,parent:e,tagName:i},t.dom.innerHTML,e),tt(t.attrs,(function(t){return g(n.root,t.name,t.value)})),t.tagName=i,n.mount(),s&&At(n,r||n.root),e.__.onUnmount=function(){var t=n.opts.dataIs;jt(n.parent.tags,t,n),jt(n.__.parent.tags,t,n),n.unmount()})))}(t,this,e);if((!t.wasParsedOnce||t.value!==e)&&(t.value=e,t.wasParsedOnce=!0,!b||d||c||n)){if(v||(e=""),!r)return e+="",void(l&&(t.parent=l,"TEXTAREA"===l.tagName?(l.value=e,h||(i.nodeValue=e)):i.nodeValue=e));switch(!0){case Y(e):w=r,wt.test(w)&&kt(r,e,i,this);break;case n:T(i,"hide"===r?!e:e);break;default:t.bool&&(i[r]=e),f&&i.value!==e?i.value=e:v&&!1!==e&&g(i,r,e),c&&i.hidden&&T(i,!1)}var w}}}}function $t(t){tt(t,Mt.bind(this))}function Ct(t,e,i,r,n){if(!t||!i){var a=t?dt.call(this):e||this;tt(n,(function(t){t.expr&&Mt.call(a,t.expr),r[at(t.name).replace("riot-","")]=t.expr?t.expr.value:t.value}))}}function Ot(t){if(!t){var e=Object.keys(a);return e+Ot(e)}return t.filter((function(t){return!/[^-\w]/.test(t)})).reduce((function(t,e){return t+',[data-is="'+e.trim().toLowerCase()+'"]'}),"")}function Pt(t,e){var i=this.name,r=this.tmpl,n=this.css,o=this.attrs,s=this.onCreate;return a[i]||(Nt(i,r,n,o,s),a[i].class=this.constructor),se(t,i,e,this),n&&x.inject(),this}function Nt(t,e,i,r,n){return Y(r)&&(n=r,/^[\w-]+\s?=/.test(i)?(r=i,i=""):r=""),i&&(Y(i)?n=i:x.add(i,t)),t=t.toLowerCase(),a[t]={name:t,tmpl:e,attrs:r,fn:n},t}function Dt(t,e,i,r,n){return i&&x.add(i,t),a[t]={name:t,tmpl:e,attrs:r,fn:n},t}function Tt(t,e,i){var r,n,a=[];if(x.inject(),(K(e)||Y(e))&&(i=e,e=0),r=Z(t)?(t="*"===t?n=Ot():t+Ot(t.split(/, */)))?N(t):[]:t,"*"===e){if(e=n||Ot(),r.tagName)r=N(e,r);else{var o=[];tt(r,(function(t){return o.push(N(e,t))})),r=o}e=0}return function t(r){if(r.tagName){var n,o=I(r,"data-is");e&&o!==e&&(o=e,g(r,"data-is",e)),(n=se(r,o||r.tagName.toLowerCase(),Y(i)?i():i))&&a.push(n)}else r.length&&tt(r,t)}(r),a}var It={},Lt=It.__global_mixin={},Et=0;function Ht(t,e,i){if(K(t))Ht("__"+Et+++"__",t,!0);else{var r=i?Lt:It;if(!e){if(M(r[t]))throw new Error("Unregistered mixin: "+t);return r[t]}r[t]=Y(e)?C(e.prototype,r[t]||{})&&e:C(r[t]||{},e)}}function Wt(){return tt(n,(function(t){return t.update()}))}function zt(t){return x.remove(t),delete a[t]}var Rt=Object.freeze({Tag:Pt,tag:Nt,tag2:Dt,mount:Tt,mixin:Ht,update:Wt,unregister:zt,version:"v3.13.2"});function Bt(t){for(var e=[],i=arguments.length-1;i-- >0;)e[i]=arguments[i+1];return tt(e,(function(e){var i,r,n=[],a=["init","__proto__"];e=Z(e)?Ht(e):e,i=Y(e)?new e:e;var o=Object.getPrototypeOf(i);do{n=n.concat(Object.getOwnPropertyNames(r||i))}while(r=Object.getPrototypeOf(r||i));tt(n,(function(e){if(!Q(a,e)){var r=A(i,e)||A(o,e),n=r&&(r.get||r.set);!t.hasOwnProperty(e)&&n?Object.defineProperty(t,e,r):t[e]=Y(i[e])?i[e].bind(t):i[e]}})),i.init&&i.init.bind(t)(t.opts)})),t}function Ft(t,e){var i,r=this.parent;r&&(q(i=r.tags[t])?i.splice(e,0,i.splice(i.indexOf(this),1)[0]):lt(r.tags,t,this))}function Vt(t,e){for(var i,r=this.__.head,n=W();r;)if(i=r.nextSibling,n.appendChild(r),(r=i)===this.__.tail){n.appendChild(r),t.insertBefore(n,e.__.head);break}}function Ut(t,e,i){var r={};return r[t.key]=e,t.pos&&(r[t.pos]=i),r}function Yt(t,e){t.splice(e,1),this.unmount(),jt(this.parent,this,this.__.tagName,!0)}function Kt(t){var e=this;tt(Object.keys(this.tags),(function(i){Ft.apply(e.tags[i],[i,t])}))}function Gt(t,e,i){i?Vt.apply(this,[t,e]):z(t,this.root,e.root)}function qt(t,e,i){i?St.apply(this,[t,e]):z(t,this.root,e.root)}function Jt(t,e){e?St.call(this,t):t.appendChild(this.root)}function Zt(t,e,i){var r="string"!=typeof I(t,"no-reorder")||L(t,"no-reorder"),n=I(t,"key"),o=!!n&&j.hasExpr(n),s=ct(t),l=a[s],u=t.parentNode,c=D(),d=ut(t),p=I(t,"if"),f=[],h=t.innerHTML,m=!a[s],g="VIRTUAL"===t.tagName,v=[];return L(t,"each"),L(t,"key"),(i=j.loopKeys(i)).isLoop=!0,p&&L(t,"if"),u.insertBefore(c,t),u.removeChild(t),i.update=function(){i.value=j(i.val,e);var a=i.value,u=W(),b=!q(a)&&!Z(a),w=c.parentNode,y=[],x=b&&!!a;if(w){b&&(a=a?Object.keys(a).map((function(t){return Ut(i,a[t],t)})):[]);var k=0;tt(a,(function(c,_){var S=_-k,A=!x&&i.key?Ut(i,c,_):c;if(!p||j(p,C(O(e),A))){var M=function(t,e,i,r){return t?r?j(t,i):e[t]:e}(n,c,A,o),$=!b&&r&&"object"==typeof c||n,P=v.indexOf(M),N=-1===P,D=!N&&$?P:S,T=f[D],I=S>=v.length,L=$&&N||!$&&!T||!f[S];L?((T=oe(l,{parent:e,isLoop:!0,isAnonymous:m,tagName:s,root:t.cloneNode(m),item:A,index:S},h)).mount(),I?Jt.apply(T,[u||w,g]):qt.apply(T,[w,f[S],g]),I||v.splice(S,0,A),f.splice(S,0,T),d&&lt(e.tags,s,T,!0)):D!==S&&$&&((n||Q(a,v[D]))&&(Gt.apply(T,[w,f[S],g]),f.splice(S,0,f.splice(D,1)[0]),v.splice(S,0,v.splice(D,1)[0])),i.pos&&(T[i.pos]=S),!d&&T.tags&&Kt.call(T,S)),C(T.__,{item:A,index:S,parent:e}),y[S]=M,L||T.update(A)}else k++})),function(t,e,i){for(var r=e.length,n=t.length-i;r>n;)r--,Yt.apply(e[r],[e,r])}(a,f,k),v=y.slice(),w.insertBefore(u,c)}},i.unmount=function(){tt(f,(function(t){t.unmount()}))},i}var Xt={init:function(t,e,i,r){return this.dom=t,this.attr=i,this.rawValue=r,this.parent=e,this.hasExp=j.hasExpr(r),this},update:function(){var t=this.value,e=this.parent&&yt(this.parent),i=this.dom.__ref||this.tag||this.dom;this.value=this.hasExp?j(this.rawValue,this.parent):this.rawValue,!U(t)&&e&&jt(e.refs,t,i),!U(this.value)&&Z(this.value)?(e&&lt(e.refs,this.value,i,null,this.parent.__.index),this.value!==t&&g(this.dom,this.attr,this.value)):L(this.dom,this.attr),this.dom.__ref||(this.dom.__ref=i)},unmount:function(){var t=this.tag||this.dom,e=this.parent&&yt(this.parent);!U(this.value)&&e&&jt(e.refs,this.value,t)}};function Qt(t,e,i,r){return O(Xt).init(t,e,i,r)}function te(t){tt(t,(function(t){t.unmount?t.unmount(!0):t.tagName?t.tag.unmount(!0):t.unmount&&t.unmount()}))}var ee={init:function(t,e,i){L(t,"if"),C(this,{tag:e,expr:i,stub:D(),pristine:t});var r=t.parentNode;return r.insertBefore(this.stub,t),r.removeChild(t),this},update:function(){this.value=j(this.expr,this.tag),this.stub.parentNode&&(this.value&&!this.current?(this.current=this.pristine.cloneNode(!0),this.stub.parentNode.insertBefore(this.current,this.stub),this.expressions=re.apply(this.tag,[this.current,!0])):!this.value&&this.current&&(this.unmount(),this.current=null,this.expressions=[]),this.value&&$t.call(this.tag,this.expressions))},unmount:function(){this.current&&(this.current._tag?this.current._tag.unmount():this.current.parentNode&&this.current.parentNode.removeChild(this.current)),te(this.expressions||[])}};function ie(t,e,i){return O(ee).init(t,e,i)}function re(t,e){var i=this,r=[];return B(t,(function(n){var a,o,s=n.nodeType;if((e||n!==t)&&(3===s&&"STYLE"!==n.parentNode.tagName&&j.hasExpr(n.nodeValue)&&r.push({dom:n,expr:n.nodeValue}),1===s)){var l="VIRTUAL"===n.tagName;if(a=I(n,"each"))return l&&g(n,"loopVirtual",!0),r.push(Zt(n,i,a)),!1;if(a=I(n,"if"))return r.push(ie(n,i,a)),!1;if((a=I(n,"data-is"))&&j.hasExpr(a))return r.push({isRtag:!0,expr:a,dom:n,attrs:[].slice.call(n.attributes)}),!1;if(o=ut(n),l&&(I(n,"virtualized")&&n.parentElement.removeChild(n),o||I(n,"virtualized")||I(n,"loopVirtual")||(o={tmpl:n.outerHTML})),o&&(n!==t||e)){var u=I(n,"data-is");if(!l||u)return u&&l&&ot('Virtual tags shouldn\'t be used together with the "data-is" attribute - https://github.com/riot/riot/issues/2511'),r.push(_t(o,{root:n,parent:i},n.innerHTML,i)),!1;g(n,"virtualized",!0);var c=oe({tmpl:n.outerHTML},{root:n,parent:i},n.innerHTML);r.push(c)}ne.apply(i,[n,n.attributes,function(t,e){e&&r.push(e)}])}})),r}function ne(t,e,i){var r=this;tt(e,(function(e){if(!e)return!1;var n,a=e.name,s=J(a);Q(o,a)&&"yield"!==t.tagName.toLowerCase()?n=Qt(t,r,a,e.value):j.hasExpr(e.value)&&(n={dom:t,expr:e.value,attr:a,bool:s}),i(e,n)}))}function ae(t){var e=this.__,i=e.isAnonymous,r=e.skipAnonymous;nt(this,"isMounted",t),i&&r||(t?this.trigger("mount"):(this.trigger("unmount"),this.off("*"),this.__.wasCreated=!1))}function oe(t,e,i){void 0===t&&(t={}),void 0===e&&(e={});var r,a=e.context||{},o=e.opts||{},s=e.parent,l=e.isLoop,u=!!e.isAnonymous,c=P.skipAnonymousTags&&u,d=e.item,p=e.index,f=t.tmpl,h=[],m=e.root,v=e.tagName||ct(m),b="virtual"===v,w=!b&&!f;return w||l&&u?r=m:(b||(m.innerHTML=""),r=bt(f,i,G(m))),c||S(a),t.name&&m._tag&&m._tag.unmount(!0),nt(a,"__",{impl:t,root:m,skipAnonymous:c,implAttrs:[],isAnonymous:u,instAttrs:[],innerHTML:i,tagName:v,index:p,isLoop:l,isInline:w,item:d,parent:s,listeners:[],virts:[],wasCreated:!1,tail:null,head:null}),[["isMounted",!1],["_riot_id",rt()],["root",m],["opts",o,{writable:!0,enumerable:!0}],["parent",s||null],["tags",{}],["refs",{}],["update",function(t){return function(t,e,i){var r=t.__,n={},a=t.isMounted&&!r.skipAnonymous;return r.isAnonymous&&r.parent&&C(t,r.parent),C(t,e),Ct.apply(t,[r.isLoop,r.parent,r.isAnonymous,n,r.instAttrs]),a&&t.isMounted&&Y(t.shouldUpdate)&&!t.shouldUpdate(e,n)||(C(t.opts,n),a&&t.trigger("update",e),$t.call(t,i),a&&t.trigger("updated")),t}(a,t,h)}],["mixin",function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return Bt.apply(void 0,[a].concat(t))}],["mount",function(){return function(t,e,i,r){var n=t.__,a=n.root;a._tag=t,ne.apply(n.parent,[a,a.attributes,function(e,i){!n.isAnonymous&&Xt.isPrototypeOf(i)&&(i.tag=t),e.expr=i,n.instAttrs.push(e)}]),H(n.impl.attrs,(function(t,e){n.implAttrs.push({name:t,value:e})})),ne.apply(t,[a,n.implAttrs,function(t,e){e?i.push(e):g(a,t.name,t.value)}]),Ct.apply(t,[n.isLoop,n.parent,n.isAnonymous,r,n.instAttrs]);var o=Ht("__global_mixin");if(o&&!n.skipAnonymous)for(var s in o)o.hasOwnProperty(s)&&t.mixin(o[s]);if(n.impl.fn&&n.impl.fn.call(t,r),n.skipAnonymous||t.trigger("before-mount"),tt(re.apply(t,[e,n.isAnonymous]),(function(t){return i.push(t)})),t.update(n.item),!n.isAnonymous&&!n.isInline)for(;e.firstChild;)a.appendChild(e.firstChild);if(nt(t,"root",a),!n.skipAnonymous&&t.parent){var l=yt(t.parent);l.one(l.isMounted?"updated":"mount",(function(){ae.call(t,!0)}))}else ae.call(t,!0);return t.__.wasCreated=!0,t}(a,r,h,o)}],["unmount",function(t){return function(t,e,i){var r=t.__,a=r.root,o=n.indexOf(t),s=a.parentNode;if(r.skipAnonymous||t.trigger("before-unmount"),H(r.impl.attrs,(function(t){et(t,"riot-")&&(t=t.slice("riot-".length)),L(a,t)})),t.__.listeners.forEach((function(t){Object.keys(t["__riot-events__"]).forEach((function(e){t.removeEventListener(e,t["__riot-events__"][e])}))})),-1!==o&&n.splice(o,1),r.parent&&!r.isAnonymous){var l=yt(r.parent);r.isVirtual?Object.keys(t.tags).forEach((function(e){return jt(l.tags,e,t.tags[e])})):jt(l.tags,r.tagName,t)}return t.__.virts&&tt(t.__.virts,(function(t){t.parentNode&&t.parentNode.removeChild(t)})),te(i),tt(r.instAttrs,(function(t){return t.expr&&t.expr.unmount&&t.expr.unmount()})),e?E(a,""):s&&s.removeChild(a),r.onUnmount&&r.onUnmount(),t.isMounted||ae.call(t,!0),ae.call(t,!1),delete a._tag,t}(a,t,h)}]].reduce((function(t,e){var i=e[0],r=e[1],n=e[2];return nt(a,i,r,n),t}),C(a,d))}function se(t,e,i,r){var o,s=a[e],l=a[e].class,u=r||(l?O(l.prototype):{}),c=t._innerHTML=t._innerHTML||t.innerHTML,d=C({root:t,opts:i,context:u},{parent:i?i.parent:null});return s&&t&&(o=oe(s,d,c)),o&&o.mount&&(o.mount(!0),Q(n,o)||n.push(o)),o}var le=P,ue={tmpl:j,brackets:_,styleManager:x,vdom:n,styleNode:x.styleNode,dom:F,check:X,misc:st,tags:Object.freeze({arrayishAdd:lt,getTagName:ct,inheritParentProps:dt,mountTo:se,selectTags:Ot,arrayishRemove:jt,getTag:ut,initChildTag:_t,moveChildTag:Ft,makeReplaceVirtual:At,getImmediateCustomParentTag:yt,makeVirtual:St,moveVirtual:Vt,unmountAll:te,createIfDirective:ie,createRefDirective:Qt})},ce=Pt,de=Nt,pe=Dt,fe=Tt,he=Ht,me=Wt,ge=zt,ve=S,be=C({},Rt,{observable:S,settings:le,util:ue});t.settings=le,t.util=ue,t.Tag=ce,t.tag=de,t.tag2=pe,t.mount=fe,t.mixin=he,t.update=me,t.unregister=ge,t.version="v3.13.2",t.observable=ve,t.default=be,Object.defineProperty(t,"__esModule",{value:!0})}(e)},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.init=function(){window.scrolls=[],window.addEventListener("scroll",(function(){var t=window.pageYOffset,e=window.location.hash;window.scrolls[""+e]=t}))},t.move=function(){var t=window.location.hash;window.scrolls[""+t]?window.scroll(0,0):window.scroll(0,window.scrolls[""+t])},t}();e.default=r},function(t,e,i){"use strict";i(0).tag2("list",'<ul> <li each="{item in opts.items}"> <h3><a href="{item.link}" target="_blank">{item.title}</a> <div class="right"> <hr><span><span class="date" if="{item.date.length &lt;= 7}">{item.date}</span><span class="term" if="{item.date.length &gt; 7}">{item.date}</span></span> </div> </h3> <p class="sub" each="{t in item.texts}">{t}</p> </li> </ul>','list > ul,[data-is="list"] > ul{ padding: 0.75rem; } list > ul li,[data-is="list"] > ul li{ margin-bottom: 1rem; } list > ul li h3,[data-is="list"] > ul li h3{ display: flex; margin: auto; align-items: center; } list > ul li h3 a,[data-is="list"] > ul li h3 a{ color: #4e9adb; padding: 0.75rem; text-align: justify; } list > ul li h3 a:hover,[data-is="list"] > ul li h3 a:hover{ text-decoration: underline; } list > ul li h3 .right,[data-is="list"] > ul li h3 .right{ display: inline-flex; flex-grow: 1; align-items: center; } list > ul li h3 .right hr,[data-is="list"] > ul li h3 .right hr{ display: inline-flex; flex-grow: 1; border: 1.5px solid gray; border-radius: 1rem; min-width: 1rem; background: gray; } list > ul li h3 .right span,[data-is="list"] > ul li h3 .right span{ padding: 0.75rem; display: inline-flex; } list > ul li h3 .right span span,[data-is="list"] > ul li h3 .right span span{ background: #555; color: white; padding: 0.1rem 0.3rem; border-radius: 0.3rem; display: inline-block; text-align: center; font-size: 0.8rem; font-weight: normal; } list > ul li h3 .right span span.date,[data-is="list"] > ul li h3 .right span span.date{ min-width: 4rem; } list > ul li h3 .right span span.term,[data-is="list"] > ul li h3 .right span span.term{ min-width: 8rem; } list > ul li .sub,[data-is="list"] > ul li .sub{ color: #bdbdbd; padding: 0 0.75rem; font-weight: 300; text-align: justify; }','class="pure-g pure-u-1-1"',(function(t){}))},function(t,e,i){"use strict";i(0).tag2("webp",'<picture> <source srcset="resources/{opts.src||opts.riotSrc}.webp" type="image/webp"> <source srcset="resources/{opts.src||opts.riotSrc}.png" type="image/png"><img riot-src="resources/{opts.src||opts.riotSrc}.webp"> </picture>','webp,[data-is="webp"]{ display: block; } webp > picture,[data-is="webp"] > picture{ width: 100%; height: 100%; } webp > picture > img,[data-is="webp"] > picture > img{ width: 100%; }',"",(function(t){var e=this;this.on("mounted",(function(){console.log(e.opts)}))}))},function(t,e,i){"undefined"!=typeof window&&window,t.exports=function(t){t=t||{};var e={},i=Array.prototype.slice;return Object.defineProperties(t,{on:{value:function(i,r){return"function"==typeof r&&(e[i]=e[i]||[]).push(r),t},enumerable:!1,writable:!1,configurable:!1},off:{value:function(i,r){if("*"!=i||r)if(r)for(var n,a=e[i],o=0;n=a&&a[o];++o)n==r&&a.splice(o--,1);else delete e[i];else e={};return t},enumerable:!1,writable:!1,configurable:!1},one:{value:function(e,i){return t.on(e,(function r(){t.off(e,r),i.apply(t,arguments)}))},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(r){var n,a,o,s=arguments.length-1,l=new Array(s);for(o=0;o<s;o++)l[o]=arguments[o+1];for(n=i.call(e[r]||[],0),o=0;a=n[o];++o)a.apply(t,l);return e["*"]&&"*"!=r&&t.trigger.apply(t,["*",r].concat(l)),t},enumerable:!1,writable:!1,configurable:!1}}),t}},function(t,e,i){"use strict";i(0).tag2("social",'<ul> <li><a href="https://www.facebook.com/raika.toriyama" target="_blank" title="Facebook" rel="noopener noreferrer"><i class="fab fa-facebook-f fa-2x"></i></a></li> <li><a href="https://twitter.com/pvcresin/" target="_blank" title="Twitter" rel="noopener noreferrer"><i class="fab fa-twitter fa-2x"></i></a></li> <li><a href="https://github.com/pvcresin/" target="_blank" title="GitHub" rel="noopener noreferrer"><i class="fab fa-github fa-2x"></i></a></li> <li><a href="https://www.instagram.com/pvcresin/" target="_blank" title="Instagram" rel="noopener noreferrer"><i class="fab fa-instagram fa-2x"></i></a></li> <li><a href="https://pvcresin.hatenablog.com/" target="_blank" title="Hatena Blog" rel="noopener noreferrer"> <div class="icon-box hatena"></div></a></li> <li><a href="https://www.wantedly.com/users/18220619" target="_blank" title="Wantedly" rel="noopener noreferrer"> <div class="icon-box wantedly"></div></a></li> </ul>','social > ul,[data-is="social"] > ul{ display: flex; justify-content: center; align-items: center; padding: 1rem 0; } social > ul li,[data-is="social"] > ul li{ display: inline-block; } social > ul li a,[data-is="social"] > ul li a{ color: #525252; vertical-align: sub; display: inline-block; width: 3rem; } social > ul li a:hover,[data-is="social"] > ul li a:hover{ color: white; } social > ul li a .icon-box,[data-is="social"] > ul li a .icon-box{ margin: auto; width: 2rem; height: 2rem; background: #525252; } social > ul li a .icon-box:hover,[data-is="social"] > ul li a .icon-box:hover{ background: white; } social > ul li a .icon-box.hatena,[data-is="social"] > ul li a .icon-box.hatena{ mask-image: url(./resources/icon-hatena.svg); -webkit-mask-image: url(./resources/icon-hatena.svg); } social > ul li a .icon-box.wantedly,[data-is="social"] > ul li a .icon-box.wantedly{ mask-image: url(./resources/icon-wantedly.svg); -webkit-mask-image: url(./resources/icon-wantedly.svg); }','id="social"',(function(t){}))},function(t,e,i){"use strict";var r=n(i(15));n(i(3));function n(t){return t&&t.__esModule?t:{default:t}}i(0).tag2("about",'<div class="about-img pure-u-sm-1-4 pure-u-1-2"> <div class="face-wrapper pure-u-1-2"><img src="resources/icon-pvcresin.svg"></div> </div> <div class="pure-u-sm-1-24 pure-u-1-1"></div> <div class="about-text pure-u-sm-17-24 pure-u-1-1">Web Frontend が好きなエンジニア。<br>学生時代はインタラクション（HCI）を専攻し、主にモバイル / ウェアラブルデバイスに関する研究を行う。<br>人と意見を交換し、議論しながらモノ作りがしたい。<br>新しいものが好きなので、貪欲に学んでいく。 <ul> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-birthday-cake" aria-hidden="true"></i></div> <div class="right pure-u-11-12">{birthday} (Age: {age})</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-envelope" aria-hidden="true"></i></div> <div class="right pure-u-11-12">pvcresin0730@gmail.com</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-map-marker-alt" aria-hidden="true"></i></div> <div class="right pure-u-11-12">Omotesando, Tokyo</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-suitcase" aria-hidden="true"></i></div> <div class="right pure-u-11-12"><span>Frontend Engineer{\' \'}</span><a class="company" href="https://jp.corp-sansan.com/" target="_blank">@ Sansan</a></div> </li> </ul> </div>','about,[data-is="about"]{ padding: 0.75rem; } about > .about-img,[data-is="about"] > .about-img{ text-align: center; padding: 0.75rem; margin: 0 auto; } about > .about-img .face-wrapper,[data-is="about"] > .about-img .face-wrapper{ position: relative; width: 100%; } about > .about-img .face-wrapper:before,[data-is="about"] > .about-img .face-wrapper:before{ content: ""; display: block; padding-top: 100%; } about > .about-img .face-wrapper img,[data-is="about"] > .about-img .face-wrapper img{ position: absolute; top: 0; left: 0; bottom: 0; right: 0; border-radius: 50%; width: 100%; background: gray; } about > .about-text,[data-is="about"] > .about-text{ text-align: justify; display: flex; flex-direction: column; justify-content: center; padding: 0.75rem; font-size: 1.1rem; } about > .about-text ul li,[data-is="about"] > .about-text ul li{ display: flex; margin-top: 0.5rem; } about > .about-text ul li .icon,[data-is="about"] > .about-text ul li .icon{ display: flex; justify-content: center; align-items: baseline; font-size: 1.5rem; } about > .about-text ul li .right,[data-is="about"] > .about-text ul li .right{ display: flex; align-items: center; padding-left: 0.5rem; } about > .about-text ul li .right a,[data-is="about"] > .about-text ul li .right a{ color: #4e9adb; } about > .about-text ul li .right a:hover,[data-is="about"] > .about-text ul li .right a:hover{ text-decoration: underline; } about > .about-text ul li .right a.company,[data-is="about"] > .about-text ul li .right a.company{ margin-left: 0.3rem; }','class="pure-g"',(function(t){this.birthday="1994-07-30",this.age=(0,r.default)().diff(this.birthday,"years")}))},function(t,e,i){"use strict";var r=n(i(8));n(i(3));function n(t){return t&&t.__esModule?t:{default:t}}i(0).tag2("projects",'<div class="pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1" each="{w, i in projects}"> <div class="card"><a href="#projects/{w.name.replace(/ /g, `_`)}"> <div class="wrapper"> <webp class="thumbnail" riot-src="{w.img}"></webp> </div> <div class="content"> <h4>{w.name}</h4> <p>{w.sub}</p> </div></a></div> </div>','projects,[data-is="projects"]{ padding: 0.75rem; display: flex; flex-wrap: wrap; } projects > div,[data-is="projects"] > div{ padding: 0.75rem; } projects > div > .card,[data-is="projects"] > div > .card{ cursor: pointer; background: white; height: 100%; box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1); border-radius: 0.3rem; } projects > div > .card:hover,[data-is="projects"] > div > .card:hover{ box-shadow: 0 8px 10px rgba(10, 10, 10, 0.1), 0 0 6px 4px rgba(10, 10, 10, 0.1); } projects > div > .card > a > .wrapper,[data-is="projects"] > div > .card > a > .wrapper{ position: relative; width: 100%; } projects > div > .card > a > .wrapper:before,[data-is="projects"] > div > .card > a > .wrapper:before{ content: \'\'; display: block; padding-top: 56.25%; } projects > div > .card > a > .wrapper img,[data-is="projects"] > div > .card > a > .wrapper img{ position: absolute; top: 0; left: 0; border-radius: 0.3rem 0.3rem 0 0; display: block; width: 100%; background: #ddd; border-bottom: 1px solid #ddd; } projects > div > .card > a > .content,[data-is="projects"] > div > .card > a > .content{ padding: 0.8rem 1rem; } projects > div > .card > a > .content h4,[data-is="projects"] > div > .card > a > .content h4{ font-size: 1.2rem; margin-bottom: 0.3rem; } projects > div > .card > a > .content p,[data-is="projects"] > div > .card > a > .content p{ font-size: 0.9rem; }',"",(function(t){var e=this;this.category="All",this.projects=void 0===this.opts.limit?r.default:r.default.slice(0,this.opts.limit),this.on("updated",(function(){e.opts.category&&e.opts.category!==e.category&&e.update({category:e.opts.category,projects:"All"===e.opts.category?r.default:r.default.filter((function(t){return t.category===e.opts.category}))})}))}))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=[{name:"SensorPipe",sub:"PCとスマホを連携させるプログラミングを支援するスマホアプリ",img:"project-SensorPipe-16-9",category:"Android",video:"gwKyPqt2kd8",text:"スマートフォンのセンサ情報とPCを連携させたプログラミングを実現するには双方でのアプリケーション開発が必要となり、製作時間がかかる上にハードルが高いものであった。これを解決するため、スマートフォンの各種センサ情報をPCに送信し続け、PC側からもスマートフォンにバイブレーションやウェブサイト表示などの所定の動作をさせる事ができるアプリケーションを開発した。これにより、プログラマはスマートフォン側のプログラミングを一切行わずに、PCでのセンサ情報を用いたプログラミングを行うことができる。WISS2015で発表。",implement:"Androidアプリケーションとして実装。PCとスマートフォンを同じWi-Fiに接続後、UDP通信を確立することによってデータの送受信を行う。アプリケーションはバックグラウンドで動作する。PC側で利用するときは対応するProcessing用のライブラリを利用可能。",keywords:["Android","Programming Experience(PX)","UDP","cooperation programming","sensor"],links:{"プロジェクトページ":"https://research.miyashita.com/2015/D160/"}},{name:"MiddleDrive",sub:"Bluetooth通信によるアドホック型ドキュメント共同編集アプリ",img:"project-MiddleDrive-16-9",category:"Web",video:"vPAXrlKGeC8",text:"会議を行う際にその内容を複数人でウェブ上のドキュメントに書き出すことで記録をとったり、議題の整理をしたりすることが多くある。しかし、Wi-Fiの電波がない場所ではこれらのようなウェブアプリケーションは利用することができない。そこで、Wi-Fiなどのネットワーク環境が利用できない状況でも、リアルタイムに共同編集を行うことができるアプリケーションを開発した。ワイヤレスアドホックネットワークを構築し、ネットワーク内のPCとドキュメントの共同編集を行うことが出来る。",implement:"チームで制作。フロントエンドとWebサーバを担当した。動作プラットフォームはWindowsPC。BluetoothによってPC同士をペアリングし、双方向のデータ通信を行う。各PC内でWebサーバが起動しているため、通常のウェブアプリケーションと同じようにブラウザでアクセスすることが出来る。Bluetooth通信はC#でwin APIを利用することで実現し、WebサーバはNode.jsを用いて実装している。",keywords:["windows","Bluetooth","co-authoring","CSCW","win API","Ad-hoc network"],links:{"受賞ページ":"https://www.pref.nagano.lg.jp/joho/app-contest/app-contest0"}},{name:"InvisibleFlick",sub:"小型タッチスクリーン端末におけるキートップが透明な日本語入力キーボード",img:"project-InvisibleFlick-16-9",category:"Android",text:"スマートウォッチのような小型タッチスクリーン端末向けの日本語入力キーボードは、キーやテキストエリアが狭いため、ミスタップの頻発による文字入力速度の低下を招いている。そこで、テンキー部分のキートップを透明にし、背景にテキストエリアを表示する手法を提案。フリックキーボードとテキストエリアの2層のレイヤー構造の導入により、キーとテキストエリアを同時に拡大することができる。既存手法との比較して、文字入力速度・エラー率ともに優れていることが示された。第182回HCI研究会で発表し、学生奨励賞を受賞。修士論文。",implement:"実験用システムとして、Androidアプリケーションを実装。Google日本語入力APIを使用して、漢字などの文字変換を行っている。",keywords:["Android","Human Computer Interaction","smartwatch","text input","flick-keyboard"],links:{"プロジェクトページ":"https://research.miyashita.com/papers/D218","受賞ページ":"http://www.sighci.jp/contents/page/news","Google日本語入力API":"https://www.google.co.jp/ime/cgiapi.html"}},{name:"Ichimonitto",sub:"ビデオチャットをしながらクイズ番組形式で回答する一問一答学習支援サービス",img:"project-Ichimonitto-16-9",category:"Web",text:"英単語を知っていても、正確な発音ができなければ相手には伝わらない。そこで、WebRTCを利用した一問一答形式の学習支援サービスを制作した。カメラ映像とボイスチャットによって離れた場所でも一緒に学ぶことが出来る。画面に表示された単語の英語をいち早く、かつ正確に発音できたものがポイントを獲得する。Cloud n アプリケーションコンテストでWebRTC賞を受賞。",implement:"チームで制作。フロントエンドを担当。Google Speech APIを使うことで、しっかりと認識されるような正確な発音での回答のみ正解とする点がポイント。現在接続しているユーザなどの管理にSkywayのAPIを利用。",keywords:["Web RTC","quiz","video chat","Google Speech API"],links:{"受賞ページ":"http://www.cloudn-service.com/cam04-deven/decon/tohyo/"}},{name:"GeoMelody",sub:"環境音を録音してネット上に集約するサウンドスケープSNS",img:"project-GeoMelody-16-9",category:"Android",text:"位置情報と環境音を組み合わせて登録するサービス。風景には音が欠かせないという考え方、サウンドスケープをサービスとして組み込んだ作品。ユーザがスマートフォンで環境音を録音すると、音声をGPSや日付の情報と共にサーバにアップロードし、マップ上で閲覧することが出来る。Open Hack U 2014発表作品。",implement:"チームで制作。アプリの大部分を担当した。Androidアプリケーションとして実装。Yahoo Map APIを使用して、録音された音声のマッピングを行っている。",keywords:["Android","soundscape","map","record","microphone","GPS"]},{name:"WristSlide",sub:"イメージセンサを用いた手首を滑らせるスマートウォッチの片手操作",img:"project-WristSlide-16-9",category:"Android",video:"w9eHDKby8ro",text:"スマートウォッチにおいて、スワイプのような連続的な入力を行うには、装着している手と反対の手で操作する必要がある。そこで、手首を机や壁、自身の身体などの上で滑らせることによって、スマートウォッチを片手で操作する手法を提案。バンド下部に埋め込まれたイメージセンサによって、物体に接地した状態での手首の移動量を取得し、片手での2次元方向の入力を可能にした。",implement:"Android、Wear OSアプリケーションとして実装。スマートフォンと超小型ワイヤレスマウスをペアリングし、自端末にADBコマンドを発行することによってマウスイベントを監視。スマートフォンとペアリングされたスマートウォッチに移動量を送信してアプリケーションを操作する。",keywords:["Android","Wear OS","Android Debug Bridge","Human Computer Interaction","smartwatch","image sensor","mouse"]},{name:"SoumuSSML",sub:"視覚障害者のための新しい電子書籍形式に対応したクラウド編集システム",img:"project-SoumuSSML-16-9",category:"Web",text:"電子書籍を読む際などに用いられる、OS組み込みの読み上げ機能にはイントネーションの間違いが未だに多く残っている。そのため現在は、音声合成マークアップ言語SSMLを用いてイントネーションを出版社の人間が編集し、合成された音声を電子書籍に同封するというやり方が一般的である。そこで、電子書籍に音声ファイルではなくイントネーションを記したデータを同封する新しい電子書籍フォーマットの提案を行った。同時に、出版社の人間がイントネーションを編集し、音声をその都度確認しながらクラウド上で編集するシステムを構築した。実証実験により効果的なツールと認められ、W3Cによって電子書籍の形式EPUBの次期仕様に盛り込まれた。総務省とアルバイト先の想隆社との共同プロジェクト。",implement:"チームで制作。フロントエンドを担当した。サーバはPHPで実装。主な機能は以下の通り。電子書籍のアップロードと初期の発音記号の自動生成、編集した発音記号（イントネーションを表す）のバージョン管理とDiff表示、編集した音声をその場で再生、書籍内の文字検索、編集者の編集権限変更、ゲラ（校正用の印刷）の印刷機能とコメントのPDFアップロード、書籍内の画像表示。",keywords:["E-book","EPUB","SSML","W3C","co-authoring","version control"],links:{"実証実験報告書":"http://www.soumu.go.jp/main_content/000499711.pdf"}},{name:"BuddaBeautify",sub:"己の精神を磨くことで見た目も美しくなれるメディアアート作品",img:"project-BuddaBeautify-16-9",category:"Desktop",video:"X0SrajYh780",text:"Nam June PaikによるTV-Buddhaにインスパイアを受け、己の精神を磨くことと画像処理による美顔化を組み合わせた作品。カメラとプロジェクタによって作られた擬似的な鏡の前で、ユーザは座禅を行う。身体のブレが少ない時は心の乱れも少ないと判断し、鏡の自分の顔に徐々に美顔化処理を行っていく。体験時間は1分程度。",implement:"チームで制作。Processingで実装。身体にブレの度合いは動体験知によって数値化する。動体検知の実装を担当。顔の美顔化処理には、関川ら[1]のアルゴリズムを利用。",keywords:["media art","motion detection","image processing"],links:{"ε-フィルタを用いたリアルタイム顔画像美観化システム":"https://www.ieice.org/iss/jpn/Publications/issposter_2015/data/pdf/ISS-P-78.pdf"}},{name:"Make if",sub:"カードを並べてif文をつくるプログラミング教育カードゲーム",img:"project-Makeif-16-9",category:"Design",text:"プログラミングをする時に必ず使う「if文」をカードで遊びながら学べるゲーム。テキストエディタを模したプレイマットの上に順番にカードを置いていき、if文が完成すると条件分岐によってカードを引かなくてはならない。早く手札を使い切った人が勝利。プログラミング未経験者でも遊ぶことが可能。2017年にゲームマーケット、及びコミックマーケットにて頒布。",implement:"アナログゲームサークルfumblewaals（ファンブルワールス）で制作。主にデザインを担当。Adobe Illustratorを使用。",keywords:["programming","card game","analog game"],links:{"商品詳細ページ":"http://fumblewaals.com/portfolio/make-if/",fumblewaals:"http://fumblewaals.com"}}]},function(t,e,i){"use strict";i.r(e);var r,n,a,o,s=i(0),l=i.n(s),u=i(4),c=i.n(u),d=/^.+?\/\/+[^/]+/,p="undefined"!=typeof window&&window,f="undefined"!=typeof document&&document,h=p&&history,m=p&&(h.location||p.location),g=A.prototype,v=f&&f.ontouchstart?"touchstart":"click",b=c()(),w=!1,y=!1,x=[],k=0;function _(t){return t.split(/[/?#]/)}function j(t,e){var i=e.replace(/\?/g,"\\?").replace(/\*/g,"([^/?#]+?)").replace(/\.\./,".*"),r=new RegExp("^"+i+"$"),n=t.match(r);if(n)return n.slice(1)}function S(t){var e,i,n;e=P,i=1,r=function(){clearTimeout(n),n=setTimeout(e,i)},p.addEventListener("popstate",r),p.addEventListener("hashchange",r),f.addEventListener(v,N),t&&P(!0)}function A(){this.$=[],c()(this),b.on("stop",this.s.bind(this)),b.on("emit",this.e.bind(this))}function M(t){return t.replace(/^\/|\/$/,"")}function $(t){return"string"==typeof t}function C(t){return(t||m.href).replace(d,"")}function O(t){var e=I._.base;return"#"===e[0]?(t||m.href||"").split(e)[1]||"":(m?C(t):t||"").replace(e,"")}function P(t){var e=0===k;if(!(3<=k)&&(k++,x.push((function(){var e=O();(t||e!==n)&&(b.trigger("emit",e),n=e)})),e)){for(var i;i=x.shift();)i();k=0}}function N(t){if(!(1!==t.which||t.metaKey||t.ctrlKey||t.shiftKey||t.defaultPrevented)){for(var e=t.target;e&&"A"!==e.nodeName;)e=e.parentNode;if(e&&"A"===e.nodeName&&!e.hasAttribute("download")&&e.hasAttribute("href")&&(!e.target||"_self"===e.target)&&-1!==e.href.indexOf(m.href.match(d)[0])){var i=I._.base;e.href!==m.href&&(e.href.split("#")[0]===m.href.split("#")[0]||"#"!==i[0]&&0!==C(e.href).indexOf(i)||"#"===i[0]&&e.href.split(i)[0]!==m.href.split(i)[0]||!D(O(e.href),e.title||f.title))||t.preventDefault()}}}function D(t,e,i){return h?(t=I._.base+M(t),e=e||f.title,i?h.replaceState(null,e,t):h.pushState(null,e,t),f.title=e,y=!1,P(),y):b.trigger("emit",O(t))}g.m=function(t,e,i){!$(t)||e&&!$(e)?e?this.r(t,e):this.r("@",t):D(t,e,i||!1)},g.s=function(){this.off("*"),this.$=[]},g.e=function(t){this.$.concat("@").some((function(e){var i=("@"===e?a:o)(M(t),M(e));if(void 0!==i)return this.trigger.apply(null,[e].concat(i)),y=!0}),this)},g.r=function(t,e){"@"!==t&&(t="/"+M(t),this.$.push(t)),this.on(t,e)};var T=new A,I=T.m.bind(T);I._={base:null,getPathFromBase:O},I.create=function(){var t=new A,e=t.m.bind(t);return e.stop=t.s.bind(t),e},I.base=function(t){I._.base=t||"#",n=O()},I.exec=function(){P(!0)},I.parser=function(t,e){t||e||(a=_,o=j),t&&(a=t),e&&(o=e)},I.query=function(){var t={};return(m.href||n).replace(/[?&](.+?)=([^&]*)/g,(function(e,i,r){t[i]=r})),t},I.stop=function(){w&&(p&&(p.removeEventListener("popstate",r),p.removeEventListener("hashchange",r),f.removeEventListener(v,N)),b.trigger("stop"),w=!1)},I.start=function(t){w||(p&&("interactive"===document.readyState||"complete"===document.readyState?S(t):document.onreadystatechange=function(){"interactive"===document.readyState&&setTimeout((function(){S(t)}),1)}),w=!0)},I.base(),I.parser();var L=I;l.a.tag2("router","<yield></yield>","","",(function(t){var e=this;this.route=L.create(),this.select=function(t){[].concat(e.tags.route).forEach((function(e){return e.show=e===t}))},this.on("mount",(function(){window.setTimeout((function(){return L.start(!0)}),0)})),this.on("unmount",(function(){e.route.stop()}))})),l.a.tag2("route",'<virtual if="{show}"><yield></yield></virtual>',"","",(function(t){var e=this;this.show=!1;var i=function(){for(var t=[],i=arguments.length;i--;)t[i]=arguments[i];e.one("updated",(function(){n(e.tags).forEach((function(e){e.trigger.apply(e,["route"].concat(t)),e.update()}))})),e.parent.select(e),e.parent.update()},r=window&&window.route&&window.route._?window.route._.getPathFromBase:function(){return""};function n(t){return Object.keys(t).map((function(e){return t[e]})).reduce((function(t,e){return t.concat(e)}),[])}t.path===r()&&setTimeout(i,0),this.parent.route(t.path,i)}));e.default=L},function(t,e,i){"use strict";var r=a(i(0)),n=a(i(1));a(i(11));function a(t){return t&&t.__esModule?t:{default:t}}r.default.mount(".root","app"),n.default.init()},function(t,e,i){"use strict";r(i(9)),r(i(12)),r(i(20)),r(i(24)),r(i(25)),r(i(27));function r(t){return t&&t.__esModule?t:{default:t}}i(0).tag2("app",'<router> <route path=""> <top></top> </route> <route path="profile.."> <profile></profile> </route> <route path="projects/*"> <projectdetail></projectDetail> </route> <route path="projects.."> <projectall></projectAll> </route> <route path=".."> <other></other> </route> </router>',"","",(function(t){}))},function(t,e,i){"use strict";r(i(13)),r(i(14)),r(i(6)),r(i(7)),r(i(16)),r(i(17)),r(i(18)),r(i(19));function r(t){return t&&t.__esModule?t:{default:t}}i(0).tag2("top",'<first></first> <section> <div class="container"> <h2 class="section-title">About Me</h2> <about></about> <more text="detail" title="View detailed profile" link="#profile"></more> </div> </section> <section> <div class="container"> <h2 class="section-title">Projects</h2> <projects limit="3"></projects> <more title="View all projects" link="#projects"></more> </div> </section> <section> <div class="container"> <h2 class="section-title">Awards</h2> <awards></awards> <h2 class="section-title">Publications</h2> <publications></publications> <h2 class="section-title">Clubs</h2> <clubs></clubs> </div> </section> <footer></footer>','top,[data-is="top"]{ display: block; min-height: 100vh; } top > section:nth-child(2n),[data-is="top"] > section:nth-child(2n){ background: #2b2b2b; color: #efefef; } top > section:nth-child(2n+1),[data-is="top"] > section:nth-child(2n+1){ background: #eeeeee; color: #222222; }',"",(function(t){this.on("route",(function(){var t=window.location.hash;void 0===window.scrolls[""+t]?window.scroll(0,0):window.scroll(0,window.scrolls[""+t])}))}))},function(t,e,i){"use strict";var r,n=i(5);(r=n)&&r.__esModule;i(0).tag2("first",'<nav></nav> <div class="container"> <h1>Raika Toriyama</h1> <p> Web / Android Developer</p> <social></social> </div> <div class="container"> <div class="arrow"><i class="fas fa-chevron-down fa-3x"></i></div> </div>','first,[data-is="first"]{ text-align: center; background: #1a1819; color: white; min-height: 100vh; display: flex; flex-direction: column; justify-content: space-around; } first > nav,[data-is="first"] > nav{ margin: 0 auto; width: 100%; max-width: calc(1200px * 0.8); line-height: 3rem; } first > nav > ul,[data-is="first"] > nav > ul{ display: flex; justify-content: space-around; } first > nav > ul > li,[data-is="first"] > nav > ul > li{ display: inline-block; } first > .container > h1,[data-is="first"] > .container > h1{ font-size: calc(1.0rem + 250%); margin: 0; } first > .container > p,[data-is="first"] > .container > p{ font-size: 1.5rem; font-family: serif; margin-top: 1rem; } first > .container .arrow,[data-is="first"] > .container .arrow{ display: inline-block; } @media (max-width: 768px) { first .container > h1,[data-is="first"] .container > h1{ font-size: 2.5rem; } first .container > p,[data-is="first"] .container > p{ font-size: 1.2rem; margin-top: 0.5rem; } }',"",(function(t){}))},function(t,e,i){"use strict";var r,n=i(5);(r=n)&&r.__esModule;i(0).tag2("footer",'<div class="container"> <social></social> <p>© 2018 pvcresin</p> </div>','footer,[data-is="footer"]{ display: block; background: #0f0f0f; color: white; } footer > .container,[data-is="footer"] > .container{ text-align: center; padding: 1rem 0; } footer > .container > p,[data-is="footer"] > .container > p{ color: #525252; padding-bottom: 1rem; }',"",(function(t){}))},function(t,e,i){t.exports=function(){"use strict";var t="millisecond",e="second",i="minute",r="hour",n="day",a="week",o="month",s="quarter",l="year",u=/^(\d{4})-?(\d{1,2})-?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d{1,3})?$/,c=/\[([^\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,d=function(t,e,i){var r=String(t);return!r||r.length>=e?t:""+Array(e+1-r.length).join(i)+t},p={s:d,z:function(t){var e=-t.utcOffset(),i=Math.abs(e),r=Math.floor(i/60),n=i%60;return(e<=0?"+":"-")+d(r,2,"0")+":"+d(n,2,"0")},m:function(t,e){var i=12*(e.year()-t.year())+(e.month()-t.month()),r=t.clone().add(i,o),n=e-r<0,a=t.clone().add(i+(n?-1:1),o);return Number(-(i+(e-r)/(n?r-a:a-r))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(u){return{M:o,y:l,w:a,d:n,D:"date",h:r,m:i,s:e,ms:t,Q:s}[u]||String(u||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},f={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},h="en",m={};m[h]=f;var g=function(t){return t instanceof y},v=function(t,e,i){var r;if(!t)return h;if("string"==typeof t)m[t]&&(r=t),e&&(m[t]=e,r=t);else{var n=t.name;m[n]=t,r=n}return!i&&r&&(h=r),r||!i&&h},b=function(t,e,i){if(g(t))return t.clone();var r=e?"string"==typeof e?{format:e,pl:i}:e:{};return r.date=t,new y(r)},w=p;w.l=v,w.i=g,w.w=function(t,e){return b(t,{locale:e.$L,utc:e.$u,$offset:e.$offset})};var y=function(){function d(t){this.$L=this.$L||v(t.locale,null,!0),this.parse(t)}var p=d.prototype;return p.parse=function(t){this.$d=function(t){var e=t.date,i=t.utc;if(null===e)return new Date(NaN);if(w.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match(u);if(r)return i?new Date(Date.UTC(r[1],r[2]-1,r[3]||1,r[4]||0,r[5]||0,r[6]||0,r[7]||0)):new Date(r[1],r[2]-1,r[3]||1,r[4]||0,r[5]||0,r[6]||0,r[7]||0)}return new Date(e)}(t),this.init()},p.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},p.$utils=function(){return w},p.isValid=function(){return!("Invalid Date"===this.$d.toString())},p.isSame=function(t,e){var i=b(t);return this.startOf(e)<=i&&i<=this.endOf(e)},p.isAfter=function(t,e){return b(t)<this.startOf(e)},p.isBefore=function(t,e){return this.endOf(e)<b(t)},p.$g=function(t,e,i){return w.u(t)?this[e]:this.set(i,t)},p.year=function(t){return this.$g(t,"$y",l)},p.month=function(t){return this.$g(t,"$M",o)},p.day=function(t){return this.$g(t,"$W",n)},p.date=function(t){return this.$g(t,"$D","date")},p.hour=function(t){return this.$g(t,"$H",r)},p.minute=function(t){return this.$g(t,"$m",i)},p.second=function(t){return this.$g(t,"$s",e)},p.millisecond=function(e){return this.$g(e,"$ms",t)},p.unix=function(){return Math.floor(this.valueOf()/1e3)},p.valueOf=function(){return this.$d.getTime()},p.startOf=function(t,s){var u=this,c=!!w.u(s)||s,d=w.p(t),p=function(t,e){var i=w.w(u.$u?Date.UTC(u.$y,e,t):new Date(u.$y,e,t),u);return c?i:i.endOf(n)},f=function(t,e){return w.w(u.toDate()[t].apply(u.toDate(),(c?[0,0,0,0]:[23,59,59,999]).slice(e)),u)},h=this.$W,m=this.$M,g=this.$D,v="set"+(this.$u?"UTC":"");switch(d){case l:return c?p(1,0):p(31,11);case o:return c?p(1,m):p(0,m+1);case a:var b=this.$locale().weekStart||0,y=(h<b?h+7:h)-b;return p(c?g-y:g+(6-y),m);case n:case"date":return f(v+"Hours",0);case r:return f(v+"Minutes",1);case i:return f(v+"Seconds",2);case e:return f(v+"Milliseconds",3);default:return this.clone()}},p.endOf=function(t){return this.startOf(t,!1)},p.$set=function(a,s){var u,c=w.p(a),d="set"+(this.$u?"UTC":""),p=(u={},u.day=d+"Date",u.date=d+"Date",u[o]=d+"Month",u[l]=d+"FullYear",u[r]=d+"Hours",u[i]=d+"Minutes",u[e]=d+"Seconds",u[t]=d+"Milliseconds",u)[c],f=c===n?this.$D+(s-this.$W):s;if(c===o||c===l){var h=this.clone().set("date",1);h.$d[p](f),h.init(),this.$d=h.set("date",Math.min(this.$D,h.daysInMonth())).toDate()}else p&&this.$d[p](f);return this.init(),this},p.set=function(t,e){return this.clone().$set(t,e)},p.get=function(t){return this[w.p(t)]()},p.add=function(t,s){var u,c=this;t=Number(t);var d=w.p(s),p=function(e){var i=b(c);return w.w(i.date(i.date()+Math.round(e*t)),c)};if(d===o)return this.set(o,this.$M+t);if(d===l)return this.set(l,this.$y+t);if(d===n)return p(1);if(d===a)return p(7);var f=(u={},u[i]=6e4,u[r]=36e5,u[e]=1e3,u)[d]||1,h=this.$d.getTime()+t*f;return w.w(h,this)},p.subtract=function(t,e){return this.add(-1*t,e)},p.format=function(t){var e=this;if(!this.isValid())return"Invalid Date";var i=t||"YYYY-MM-DDTHH:mm:ssZ",r=w.z(this),n=this.$locale(),a=this.$H,o=this.$m,s=this.$M,l=n.weekdays,u=n.months,d=function(t,r,n,a){return t&&(t[r]||t(e,i))||n[r].substr(0,a)},p=function(t){return w.s(a%12||12,t,"0")},f=n.meridiem||function(t,e,i){var r=t<12?"AM":"PM";return i?r.toLowerCase():r},h={YY:String(this.$y).slice(-2),YYYY:this.$y,M:s+1,MM:w.s(s+1,2,"0"),MMM:d(n.monthsShort,s,u,3),MMMM:u[s]||u(this,i),D:this.$D,DD:w.s(this.$D,2,"0"),d:String(this.$W),dd:d(n.weekdaysMin,this.$W,l,2),ddd:d(n.weekdaysShort,this.$W,l,3),dddd:l[this.$W],H:String(a),HH:w.s(a,2,"0"),h:p(1),hh:p(2),a:f(a,o,!0),A:f(a,o,!1),m:String(o),mm:w.s(o,2,"0"),s:String(this.$s),ss:w.s(this.$s,2,"0"),SSS:w.s(this.$ms,3,"0"),Z:r};return i.replace(c,(function(t,e){return e||h[t]||r.replace(":","")}))},p.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},p.diff=function(t,n,u){var c,d=w.p(n),p=b(t),f=6e4*(p.utcOffset()-this.utcOffset()),h=this-p,m=w.m(this,p);return m=(c={},c[l]=m/12,c[o]=m,c[s]=m/3,c[a]=(h-f)/6048e5,c.day=(h-f)/864e5,c[r]=h/36e5,c[i]=h/6e4,c[e]=h/1e3,c)[d]||h,u?m:w.a(m)},p.daysInMonth=function(){return this.endOf(o).$D},p.$locale=function(){return m[this.$L]},p.locale=function(t,e){if(!t)return this.$L;var i=this.clone(),r=v(t,e,!0);return r&&(i.$L=r),i},p.clone=function(){return w.w(this.$d,this)},p.toDate=function(){return new Date(this.valueOf())},p.toJSON=function(){return this.isValid()?this.toISOString():null},p.toISOString=function(){return this.$d.toISOString()},p.toString=function(){return this.$d.toUTCString()},d}();return b.prototype=y.prototype,b.extend=function(t,e){return t(e,y,b),b},b.locale=v,b.isDayjs=g,b.unix=function(t){return b(1e3*t)},b.en=m[h],b.Ls=m,b}()},function(t,e,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("awards",'<list items="{awards}"></list>',"","",(function(t){this.awards=[{date:"2015-05",title:"Cloud n アプリケーションコンテスト",texts:["WebRTC賞 受賞","チーム：意識中くらいとして参加","プロジェクト: Ichimonitto"],link:"http://www.cloudn-service.com/cam04-deven/decon/tohyo/"},{date:"2017-12",title:"信州未来アプリコンテスト0",texts:["信越情報通信懇談会会長賞 受賞","チーム：意識中くらいとして参加","プロジェクト: MiddleDrive"],link:"https://shinshu-futureapp.net/information/contest/"},{date:"2010-03",title:"第182回 HCI研究会",texts:["学生奨励賞 受賞","スマートウォッチ向けのソフトウェアキーボードに関する研究（修士論文）","プロジェクト: InvisibleFlick"],link:"http://www.sighci.jp/contents/page/news"}]}))},function(t,e,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("publications",'<list items="{publications}"></list>',"","",(function(t){this.publications=[{date:"2015-12",title:"SensorPipe",texts:["鳥山 らいか, 宮下 芳明. SensorPipe: スマートフォン側のプログラミングを一切行わないスマートフォン連携プログラミング, 第23回インタラクティブシステムとソフトウェアに関するワークショップ論文集 (WISS 2015), 2015."],link:"https://research.miyashita.com/2015/D160/"},{date:"2018-03",title:"インタラクティブパッケージ",texts:["加藤邦拓, 薄羽大樹, 鳥山らいか, 竹内まゆ, 野崎玲那, 細谷美月, 宮下芳明. タッチパネルを拡張する紙製インタフェースを搭載したインタラクティブパッケージの開発, インタラクション2018論文集, pp.889-894, 2018."],link:"https://research.miyashita.com/2018/D193/"},{date:"2018-09",title:"透明キーボード",texts:["鳥山らいか, 宮下芳明. スマートウォッチ向けのキートップが透明な日本語かな入力インタフェース, 第26回インタラクティブシステムとソフトウェアに関するワークショップ論文集 (WISS 2018), 2018."],link:"https://research.miyashita.com/papers/D202"},{date:"2019-03",title:"InvisibleFlick",texts:["鳥山らいか, 宮下芳明. InvisibleFlick: 小型タッチスクリーン端末におけるキートップが透明な日本語入力キーボード, 研究報告ヒューマンコンピュータインタラクション(HCI), Vol.2019-HCI-182, Issue.27, pp. 1-8, 2019."],link:"https://research.miyashita.com/papers/D218"}]}))},function(t,e,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("clubs",'<list items="{clubs}"></list>',"","",(function(t){this.clubs=[{date:"2013-04 - 2017-03",title:"総合コンテンツ制作サークル",texts:["デジタルコンテンツ制作（音楽・動画・ゲーム・イラスト・文芸）を行う大学内のサークル","同人イベントでの頒布（コミックマーケット・M3）","設立メンバー＆幹事長"],link:"https://sokon.jp/"},{date:"2016-04 - 2017-06",title:"Nakano Computer Club",texts:["プログラミングに関する情報共有や勉強会の実施を行う大学内のサークル","同人イベントでの頒布（コミックマーケット・技術書典）"],link:"https://meiji-ncc.tech/"},{date:"2017-04 - 2019-03",title:"fumble waals",texts:["オリジナルボードゲームの制作を行う有志によるサークル","同人イベントでの頒布（コミックマーケット・ゲームマーケット）","企画から制作、販売まで行うが、主にデザインを担当"],link:"http://fumblewaals.com/"}]}))},function(t,e,i){"use strict";i(0).tag2("more",'<a href="{opts.link}" title="{opts.title}"><span class="more-button">{text}</span></a>','more,[data-is="more"]{ padding: 0 1.5rem 1.5rem 1.5rem; display: flex; justify-content: center; } more > a > span,[data-is="more"] > a > span{ padding: 0.5rem; background: grey; color: white; border-radius: 3rem; min-width: 10rem; text-align: center; display: block; } more > a > span:hover,[data-is="more"] > a > span:hover{ background: #a3a3a3; }',"",(function(t){this.text=void 0!==this.opts.text?this.opts.text:"more"}))},function(t,e,i){"use strict";n(i(6)),n(i(21)),n(i(22)),n(i(23));var r=n(i(1));function n(t){return t&&t.__esModule?t:{default:t}}i(0).tag2("profile",'<section> <div class="container"> <h2 class="section-title">Profile</h2> <about></about> <like></like> <skills></skills> <education></education> </div> </section> <footer></footer>','profile,[data-is="profile"]{ display: block; background: #2b2b2b; color: #efefef; }',"",(function(t){this.on("route",(function(){r.default.move()}))}))},function(t,e,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("education",'<h2 class="section-title">Education</h2> <list items="{schools}"></list>',"","",(function(t){this.schools=[{date:"2010-04 - 2013-03",title:"本郷高等学校",texts:["東京・巣鴨にある私立の中高一貫校","生徒会・料理研究会・美術部に所属"],link:"http://www.hongo.ed.jp/"},{date:"2013-04 - 2017-03",title:"明治大学",texts:["総合数理学部 先端メディアサイエンス学科 1期生","PCでコンテンツ制作をするサークルを立ち上げ、幹事長を務める"],link:"http://www.meiji.ac.jp/ims/subject/fms/"},{date:"2017-04 - 2019-03",title:"明治大学大学院",texts:["先端数理科学研究科 先端メディアサイエンス専攻 修士（工学）","モバイル / ウェアラブルデバイスに関するインタラクションの研究","アルバイトでフロントエンドエンジニアとして働く"],link:"http://www.meiji.ac.jp/ams/professor/FMS.html"}]}))},function(t,e,i){"use strict";i(0).tag2("skills",'<h2 class="section-title">Skills</h2> <div class="pure-g"> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills1}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills2}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> </div>','skills > div,[data-is="skills"] > div{ padding: 0.75rem; } skills > div .skill-box,[data-is="skills"] > div .skill-box{ padding: 0.75rem; } skills > div .skill-box > li,[data-is="skills"] > div .skill-box > li{ margin-bottom: 1.2rem; } skills > div .skill-box > li .skill-info,[data-is="skills"] > div .skill-box > li .skill-info{ display: flex; justify-content: space-between; align-items: baseline; } skills > div .skill-box > li .name,[data-is="skills"] > div .skill-box > li .name{ font-size: 1.3em; margin-right: 0.5rem; font-weight: 300; } skills > div .skill-box > li .sub,[data-is="skills"] > div .skill-box > li .sub{ font-size: 0.85rem; color: #bdbdbd; } skills > div .skill-box > li .bar,[data-is="skills"] > div .skill-box > li .bar{ background: #4b4b4b; border-radius: 1rem; } skills > div .skill-box > li .bar .level,[data-is="skills"] > div .skill-box > li .bar .level{ height: 0.7rem; border-radius: 1rem; background: #eaeaea; }',"",(function(t){this.skills=[{name:"Android",sub:"Rx Okhttp Retrofit",level:"70%"},{name:"Kotlin",sub:"Anko Ktor",level:"80%"},{name:"Java",sub:"",level:"85%"},{name:"Processing",sub:"",level:"90%"}],this.skills1=[{name:"HTML",sub:"Pug Markdown",level:"90%"},{name:"CSS",sub:"Sass PostCSS CSS-Modules",level:"85%"},{name:"JavaScript",sub:"React Vue Node",level:"90%"},{name:"PHP",sub:"",level:"40%"}],this.skills2=[{name:"Git",sub:"",level:"60%"},{name:"Illustrator",sub:"",level:"80%"},{name:"Cacoo",sub:"",level:"40%"},{name:"Prott",sub:"",level:"30%"}]}))},function(t,e,i){"use strict";i(0).tag2("like",'<h2 class="section-title">Like</h2> <div class="pure-g"> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Do</h3> <hr> <ul> <li each="{t, i in do}">{l}<span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Watch</h3> <hr> <ul> <li each="{t, i in watch}"><span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Eat</h3> <hr> <ul> <li each="{t, i in eat}"><span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> </div>','like,[data-is="like"]{ display: block; } like > div,[data-is="like"] > div{ padding: 0.75rem; } like > div .like-box,[data-is="like"] > div .like-box{ padding: 0.75rem; } like > div .like-box .like,[data-is="like"] > div .like-box .like{ background: #414141; padding: 0.6rem 1rem; border-radius: 0.3rem; } like > div .like-box .like h3,[data-is="like"] > div .like-box .like h3{ font-size: 1.4rem; margin-bottom: 0.5rem; } like > div .like-box .like hr,[data-is="like"] > div .like-box .like hr{ border-radius: 1rem; margin: 0.5rem 0; border: 1.5px solid; border-color: grey; background: gray; } like > div .like-box .like ul li,[data-is="like"] > div .like-box .like ul li{ line-height: 2rem; } like > div .like-box .like ul li .icon,[data-is="like"] > div .like-box .like ul li .icon{ font-size: 1.4rem; width: 2rem; display: inline-flex; justify-content: center; } like > div .like-box .like ul li .text,[data-is="like"] > div .like-box .like ul li .text{ font-size: 1.2rem; }',"",(function(t){this.do={"💻":"プログラミング","👟":"散歩","🎤":"一人カラオケ","🚗":"ミニチュア集め"},this.watch={"🎬":"映画","😆":"お笑いネタ","👖":"服","📺":"メディアアート"},this.eat={"🍣":"寿司","🍕":"ピザ","🍜":"ラーメン","🍰":"ケーキ"}}))},function(t,e,i){"use strict";a(i(7));var r=a(i(9)),n=a(i(1));function a(t){return t&&t.__esModule?t:{default:t}}i(0).tag2("projectall",'<section> <div class="container"> <h2 class="section-title">Projects</h2> <ul><a each="{p in categories}" onclick="{click.bind(this, p)}"> <li if="{selectedCategory !== p}">{p}</li> <li class="selected" if="{selectedCategory === p}">{p}</li></a></ul> <projects category="{selectedCategory}"></projects> </div> </section> <footer></footer>','projectall > section,[data-is="projectall"] > section{ background: #eeeeee; color: #222222; min-height: 100vh; } projectall > section .container ul,[data-is="projectall"] > section .container ul{ display: flex; justify-content: space-between; max-width: 400px; padding: 0 1.5rem; margin: 1rem auto 0 auto; } projectall > section .container ul li,[data-is="projectall"] > section .container ul li{ font-size: 0.8rem; display: inline-block; color: gray; padding: 0.5rem 0.5rem; cursor: pointer; border: 1px solid; border-radius: 2rem; text-align: center; } projectall > section .container ul li.selected,[data-is="projectall"] > section .container ul li.selected{ color: white; background: gray; border-color: gray; }',"",(function(t){var e=this;this.categories=["All","Android","Web","Desktop","Design"],this.selectedCategory,this.on("route",(function(){void 0!==r.default.query().category?e.update({selectedCategory:r.default.query().category}):e.update({selectedCategory:e.categories[0]}),n.default.move()})),this.click=function(t){this.update({selectedCategory:t})}.bind(this)}))},function(t,e,i){"use strict";a(i(26));var r=a(i(8)),n=(a(i(3)),a(i(1)));function a(t){return t&&t.__esModule?t:{default:t}}i(0).tag2("projectdetail",'<div class="container"> <section> <div class="video-frame" if="{project.video !== undefined}"> <iframe riot-src="https://www.youtube.com/embed/{project.video}?rel=0" frameborder="0" allow="encrypted-media" allowfullscreen></iframe> </div> <div class="img-frame" if="{project.video === undefined}"> <webp riot-src="{project.img}"></webp> </div> <h1> <p>{project.name + \': \'}</p><span>{project.sub}</span> </h1> <tags tags="{project.keywords}"></tags> <div class="chapter"> <div class="chapter-title"> <h2>Abstract</h2> <hr> </div> <p>{project.text}</p> </div> <div class="chapter"> <div class="chapter-title"> <h2>Implementation</h2> <hr> </div> <p>{project.implement}</p> </div> <div class="chapter" if="{project.links !== undefined}"> <div class="chapter-title"> <h2>Links</h2> <hr> </div> <ol> <li each="{value, key in project.links}"><span>{key + \': \'}</span><span><a href="{value}">{value}</a></span></li> </ol> </div> </section> </div> <footer></footer>','projectdetail,[data-is="projectdetail"]{ min-height: 100vh; display: block; background: #2b2b2b; color: #efefef; } projectdetail > div > section,[data-is="projectdetail"] > div > section{ padding: 1.5rem; } projectdetail > div > section .video-frame,[data-is="projectdetail"] > div > section .video-frame{ position: relative; width: 100%; padding-top: 56.25%; } projectdetail > div > section .video-frame > iframe,[data-is="projectdetail"] > div > section .video-frame > iframe{ position: absolute; top: 0; right: 0; width: 100%; height: 100%; background: black; } projectdetail > div > section .img-frame,[data-is="projectdetail"] > div > section .img-frame{ width: 100%; } projectdetail > div > section .img-frame > img,[data-is="projectdetail"] > div > section .img-frame > img{ width: 100%; height: 100%; background: black; } projectdetail > div > section h1,[data-is="projectdetail"] > div > section h1{ color: white; margin: 1rem 0; text-align: justify; } projectdetail > div > section .chapter .chapter-title,[data-is="projectdetail"] > div > section .chapter .chapter-title{ display: flex; justify-content: space-between; align-items: center; margin: 1.5rem 0 1rem 0; } projectdetail > div > section .chapter .chapter-title > h2,[data-is="projectdetail"] > div > section .chapter .chapter-title > h2{ font-size: 1.5rem; margin-right: 0.5rem; color: white; } projectdetail > div > section .chapter .chapter-title > hr,[data-is="projectdetail"] > div > section .chapter .chapter-title > hr{ flex-grow: 1; border: 1.5px solid gray; border-radius: 1rem; min-width: 1rem; background: gray; } projectdetail > div > section .chapter p,[data-is="projectdetail"] > div > section .chapter p{ margin: 0.6rem 0; text-align: justify; } projectdetail > div > section .chapter ol,[data-is="projectdetail"] > div > section .chapter ol{ padding-left: 2rem; } projectdetail > div > section .chapter ol li,[data-is="projectdetail"] > div > section .chapter ol li{ list-style-type: decimal; line-height: 1.8rem; } projectdetail > div > section .chapter ol li a,[data-is="projectdetail"] > div > section .chapter ol li a{ color: #4e9adb; } projectdetail > div > section .chapter ol li a:hover,[data-is="projectdetail"] > div > section .chapter ol li a:hover{ text-decoration: underline; } @media (max-width: 768px) { projectdetail h1,[data-is="projectdetail"] h1{ font-size: 1.5rem; } projectdetail h2,[data-is="projectdetail"] h2{ font-size: 1.3rem; } }',"",(function(t){var e=this;this.project={name:"",sub:"",img:"",video:"",text:"",implement:"",keywords:[]},this.on("route",(function(t){e.update({project:r.default.filter((function(e){return e.name===t.replace(/_/g," ")}))[0]}),n.default.move()}))}))},function(t,e,i){"use strict";i(0).tag2("tags",'<span each="{t in opts.tags}">{t}</span>','tags,[data-is="tags"]{ display: flex; flex-wrap: wrap; margin: 1rem 0; margin: 0.75rem 0; } tags > span,[data-is="tags"] > span{ margin: 0 0.5rem 0.5rem 0; padding: 0.1rem 0.3rem; border-radius: 0.2rem; background: #555; color: #eee; }',"",(function(t){}))},function(t,e,i){"use strict";i(0).tag2("other",'<section> <div class="container"> <h1>Page Not Found</h1> </div> </section> <footer></footer>','other,[data-is="other"]{ text-align: center; min-height: 100vh; display: flex; flex-direction: column; background: #2b2b2b; color: #efefef; } other section,[data-is="other"] section{ flex-grow: 1; display: flex; align-items: center; }',"",(function(t){}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,