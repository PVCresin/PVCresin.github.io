/*! For license information please see index.js.LICENSE */
!function(i){var r={};function n(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return i[e].call(t.exports,t,t.exports,n),t.l=!0,t.exports}n.m=i,n.c=r,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}([function(e,t,i){!function(e){"use strict";function s(e,t){return(t||document).querySelector(e)}var c=[],d={},o="yield",u="__global_mixin",l="riot-",f=["ref","data-ref"],p="data-is",h="if",v="each",i="no-reorder",m="show",g="hide",r="key",b="__riot-events__",n="string",I="object",t="undefined",a="function",w="http://www.w3.org/1999/xlink",y="http://www.w3.org/2000/svg",x=/^xlink:(\w+)/,k=typeof window===t?undefined:window,_=/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/,j=/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/,S=/^on/,M=/([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g,A={viewbox:"viewBox",preserveaspectratio:"preserveAspectRatio"},$=/^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/,C=(k&&k.document||{}).documentMode|0,O,P;function N(e){return e==="svg"?document.createElementNS(y,e):document.createElement(e)}function D(e,t,i){var r=x.exec(t);if(r&&r[1]){e.setAttributeNS(w,r[1],i)}else{e.setAttribute(t,i)}}var T={},L=false;if(k){O=function(){var e=N("style");var t=s("style[type=riot]");D(e,"type","text/css");if(t){if(t.id){e.id=t.id}t.parentNode.replaceChild(e,t)}else{document.head.appendChild(e)}return e}();P=O.styleSheet}var E={styleNode:O,add:function e(t,i){T[i]=t;L=true},inject:function e(){if(!k||!L){return}L=false;var t=Object.keys(T).map(function(e){return T[e]}).join("\n");if(P){P.cssText=t}else{O.innerHTML=t}},remove:function e(t){delete T[t];L=true}},H=function(){var l="[{(,;:?=|&!^~>%*/";var u=["case","default","do","else","in","instanceof","prefix","return","typeof","void","yield"];var c=u.reduce(function(e,t){return e+t.slice(-1)},"");var d=/^\/(?=[^*>/])[^[/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\/]*)*?\/[gimuy]*/;var f=/[$\w]/;function p(e,t){while(--t>=0&&/\s/.test(e[t])){}return t}function e(e,t){var i=/.*/g;var r=i.lastIndex=t++;var n=i.exec(e)[0].match(d);if(n){var a=r+n[0].length;r=p(e,r);var s=e[r];if(r<0||~l.indexOf(s)){return a}if(s==="."){if(e[r-1]==="."){t=a}}else if(s==="+"||s==="-"){if(e[--r]!==s||(r=p(e,r))<0||!f.test(e[r])){t=a}}else if(~c.indexOf(s)){var o=r+1;while(--r>=0&&f.test(e[r])){}if(~u.indexOf(e.slice(r+1,o))){t=a}}}return t}return e}(),W=function(e){var i="g",t=/\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,r=/"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|`[^`\\]*(?:\\[\S\s][^`\\]*)*`/g,n=r.source+"|"+/(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source+"|"+/\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?([^<]\/)[gim]*/.source,a=RegExp("[\\"+"x00-\\x1F<>a-zA-Z0-9'\",;\\\\]"),s=/(?=[[\]()*+?.^$|])/g,o=r.source+"|"+/(\/)(?![*\/])/.source,w={"(":RegExp("([()])|"+o,i),"[":RegExp("([[\\]])|"+o,i),"{":RegExp("([{}])|"+o,i)},l="{ }";var u=["{","}","{","}",/{[^}]*}/,/\\([{}])/g,/\\({)|{/g,RegExp("\\\\(})|([[({])|(})|"+o,i),l,/^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,/(^|[^\\]){=[\S\s]*?}/];var c=e,d,y=[],f;function p(e){return e}function h(e,t){if(!t){t=y}return new RegExp(e.source.replace(/{/g,t[2]).replace(/}/g,t[3]),e.global?i:"")}function v(e){if(e===l){return u}var t=e.split(" ");if(t.length!==2||a.test(e)){throw new Error('Unsupported brackets "'+e+'"')}t=t.concat(e.replace(s,"\\").split(" "));t[4]=h(t[1].length>1?/{[\S\s]*?}/:u[4],t);t[5]=h(e.length>3?/\\({|})/g:u[5],t);t[6]=h(u[6],t);t[7]=RegExp("\\\\("+t[3]+")|([[({])|("+t[3]+")|"+o,i);t[8]=e;return t}function m(e){return e instanceof RegExp?d(e):y[e]}m.split=function e(r,n,t){if(!t){t=y}var i=[],a,s,o,l,u=t[6];var c=[];var d="";var f,p;s=o=u.lastIndex=0;while(a=u.exec(r)){p=u.lastIndex;l=a.index;if(s){if(a[2]){var h=a[2];var v=w[h];var m=1;v.lastIndex=p;while(a=v.exec(r)){if(a[1]){if(a[1]===h){++m}else if(!--m){break}}else{v.lastIndex=b(a.index,v.lastIndex,a[2])}}u.lastIndex=m?r.length:v.lastIndex;continue}if(!a[3]){u.lastIndex=b(l,p,a[4]);continue}}if(!a[1]){g(r.slice(o,l));o=u.lastIndex;u=t[6+(s^=1)];u.lastIndex=o}}if(r&&o<r.length){g(r.slice(o))}i.qblocks=c;return i;function g(e){if(d){e=d+e;d=""}if(n||s){i.push(e&&e.replace(t[5],"$1"))}else{i.push(e)}}function b(e,t,i){if(i){t=H(r,e)}if(n&&t>e+2){f="‚Åó"+c.length+"~";c.push(r.slice(e,t));d+=r.slice(o,e)+f;o=t}return t}};m.hasExpr=function e(t){return y[4].test(t)};m.loopKeys=function e(t){var i=t.match(y[9]);return i?{key:i[1],pos:i[2],val:y[0]+i[3].trim()+y[1]}:{val:t.trim()}};m.array=function e(t){return t?v(t):y};function g(e){if((e||(e=l))!==y[8]){y=v(e);d=e===l?p:h;y[9]=d(u[9])}c=e}function b(e){var t;e=e||{};t=e.brackets;Object.defineProperty(e,"brackets",{set:g,get:function(){return c},enumerable:true});f=e;g(t)}Object.defineProperty(m,"settings",{set:b,get:function(){return f}});m.settings=typeof riot!=="undefined"&&riot.settings||{};m.set=g;m.skipRegex=H;m.R_STRINGS=r;m.R_MLCOMMS=t;m.S_QBLOCKS=n;m.S_QBLOCK2=o;return m}(),z=function(){var i={};function r(e,t){if(!e){return e}return(i[e]||(i[e]=a(e))).call(t,n.bind({data:t,tmpl:e}))}r.hasExpr=W.hasExpr;r.loopKeys=W.loopKeys;r.clearCache=function(){i={}};r.errorHandler=null;function n(e,t){e.riotData={tagName:t&&t.__&&t.__.tagName,_riot_id:t&&t._riot_id};if(r.errorHandler){r.errorHandler(e)}else if(typeof console!=="undefined"&&typeof console.error==="function"){console.error(e.message);console.log("<%s> %s",e.riotData.tagName||"Unknown tag",this.tmpl);console.log(this.data)}}function a(e){var t=s(e);if(t.slice(0,11)!=="try{return "){t="return "+t}return new Function("E",t+";")}var o=/\u2057/g;var l=/\u2057(\d+)~/g;function s(e){var t=W.split(e.replace(o,'"'),1);var i=t.qblocks;var r;if(t.length>2||t[0]){var n,a,s=[];for(n=a=0;n<t.length;++n){r=t[n];if(r&&(r=n&1?u(r,1,i):'"'+r.replace(/\\/g,"\\\\").replace(/\r\n?|\n/g,"\\n").replace(/"/g,'\\"')+'"')){s[a++]=r}}r=a<2?s[0]:"["+s.join(",")+'].join("")'}else{r=u(t[1],0,i)}if(i.length){r=r.replace(l,function(e,t){return i[t].replace(/\r/g,"\\r").replace(/\n/g,"\\n")})}return r}var c=/^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/;var d={"(":/[()]/g,"[":/[[\]]/g,"{":/[{}]/g};function u(a,e,t){a=a.replace(/\s+/g," ").trim().replace(/\ ?([[\({},?\.:])\ ?/g,"$1");if(a){var i=[],r=0,n;while(a&&(n=a.match(c))&&!n.index){var s,o,l=/,|([[{(])|$/g;a=RegExp.rightContext;s=n[2]?t[n[2]].slice(1,-1).trim().replace(/\s+/g," "):n[1];while(o=(n=l.exec(a))[1]){u(o,l)}o=a.slice(0,n.index);a=RegExp.rightContext;i[r++]=v(o,1,s)}a=!r?v(a,e):r>1?"["+i.join(",")+'].join(" ").trim()':i[0]}return a;function u(e,t){var i,r=1,n=d[e];n.lastIndex=t.lastIndex;while(i=n.exec(a)){if(i[0]===e){++r}else if(!--r){break}}t.lastIndex=r?a.length:n.lastIndex}}var f='"in this?this:'+(typeof window!=="object"?"global":"window")+").",p=/[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,h=/^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;function v(e,t,i){var a;e=e.replace(p,function(e,t,i,r,n){if(i){r=a?0:r+e.length;if(i!=="this"&&i!=="global"&&i!=="window"){e=t+'("'+i+f+i;if(r){a=(n=n[r])==="."||n==="("||n==="["}}else if(r){a=!h.test(n.slice(r))}}return e});if(a){e="try{return "+e+"}catch(e){E(e,this)}"}if(i){e=(a?"function(){"+e+"}.call(this)":"("+e+")")+'?"'+i+'":""'}else if(t){e="function(v){"+(a?e.replace("return ","v="):"v=("+e+")")+';return v||v===0?v:""}.call(this)'}return e}r.version=W.version="v3.0.8";return r}(),R=function(o){o=o||{};var l={},u=Array.prototype.slice;Object.defineProperties(o,{on:{value:function(e,t){if(typeof t=="function"){(l[e]=l[e]||[]).push(t)}return o},enumerable:false,writable:false,configurable:false},off:{value:function(e,t){if(e=="*"&&!t){l={}}else{if(t){var i=l[e];for(var r=0,n;n=i&&i[r];++r){if(n==t){i.splice(r--,1)}}}else{delete l[e]}}return o},enumerable:false,writable:false,configurable:false},one:{value:function(e,t){function i(){o.off(e,i);t.apply(o,arguments)}return o.on(e,i)},enumerable:false,writable:false,configurable:false},trigger:{value:function(e){var t=arguments;var i=arguments.length-1,r=new Array(i),n,a,s;for(s=0;s<i;s++){r[s]=t[s+1]}n=u.call(l[e]||[],0);for(s=0;a=n[s];++s){a.apply(o,r)}if(l["*"]&&e!="*"){o.trigger.apply(o,["*",e].concat(r))}return o},enumerable:false,writable:false,configurable:false}});return o};function B(e,t){return Object.getOwnPropertyDescriptor(e,t)}function F(e){return typeof e===t}function V(e,t){var i=B(e,t);return F(e[t])||i&&i.writable}function U(e){var t;var i=1;var r=arguments;var n=r.length;for(;i<n;i++){if(t=r[i]){for(var a in t){if(V(e,a)){e[a]=t[a]}}}}return e}function Y(e){return Object.create(e)}var K=U(Y(W.settings),{skipAnonymousTags:true,keepValueAttributes:false,autoUpdate:true});function G(e,t){return[].slice.call((t||document).querySelectorAll(e))}function q(){return document.createTextNode("")}function J(e,t){e.style.display=t?"":"none";e.hidden=t?false:true}function Z(e,t){return e.getAttribute(t)}function X(e,t){e.removeAttribute(t)}function Q(e,t,i){if(i){var r=e.ownerDocument.importNode((new DOMParser).parseFromString('<svg xmlns="'+y+'">'+t+"</svg>","application/xml").documentElement,true);e.appendChild(r)}else{e.innerHTML=t}}function ee(e,t){if(!e){return}var i;while(i=M.exec(e)){t(i[1].toLowerCase(),i[2]||i[3]||i[4])}}function te(){return document.createDocumentFragment()}function ie(e,t,i){e.insertBefore(t,i.parentNode&&i)}function re(i){return Object.keys(i).reduce(function(e,t){return e+" "+t+": "+i[t]+";"},"")}function ne(e,t,i){if(e){var r=t(e,i);var n;if(r===false){return}e=e.firstChild;while(e){n=e.nextSibling;ne(e,t,r);e=n}}}var ae=Object.freeze({$$:G,$:s,createDOMPlaceholder:q,mkEl:N,setAttr:D,toggleVisibility:J,getAttr:Z,remAttr:X,setInnerHTML:Q,walkAttrs:ee,createFrag:te,safeInsert:ie,styleObjectToString:re,walkNodes:ne});function se(e){return F(e)||e===null}function oe(e){return se(e)||e===""}function le(e){return typeof e===a}function ue(e){return e&&typeof e===I}function ce(e){var t=e.ownerSVGElement;return!!t||t===null}function de(e){return Array.isArray(e)||e instanceof Array}function fe(e){return $.test(e)}function pe(e){return typeof e===n}var he=Object.freeze({isBlank:oe,isFunction:le,isObject:ue,isSvg:ce,isWritable:V,isArray:de,isBoolAttr:fe,isNil:se,isString:pe,isUndefined:F});function ve(e,t){return e.indexOf(t)!==-1}function me(e,t){var i=e?e.length:0;var r=0;for(;r<i;r++){t(e[r],r)}return e}function ge(e,t){return e.slice(0,t.length)===t}var be=function e(){var t=-1;return function(){return++t}}();function we(e,t,i,r){Object.defineProperty(e,t,U({value:i,enumerable:false,writable:false,configurable:true},r));return e}function ye(e){return e.replace(/-(\w)/g,function(e,t){return t.toUpperCase()})}function xe(e){if(console&&console.warn){console.warn(e)}}var ke=Object.freeze({contains:ve,each:me,getPropDescriptor:B,startsWith:ge,uid:be,defineProperty:we,objectCreate:Y,extend:U,toCamel:ye,warn:xe});function _e(e,t,i,r,n){var a=e[t];var s=de(a);var o=!F(n);if(a&&a===i){return}if(!a&&r){e[t]=[i]}else if(!a){e[t]=i}else{if(s){var l=a.indexOf(i);if(l===n){return}if(l!==-1){a.splice(l,1)}if(o){a.splice(n,0,i)}else{a.push(i)}}else{e[t]=[a,i]}}}function je(e){return e.tagName&&d[Z(e,p)||Z(e,p)||e.tagName.toLowerCase()]}function Se(e,t){var i=je(e);var r=!t&&Z(e,p);return r&&!z.hasExpr(r)?r:i?i.name:e.tagName.toLowerCase()}function Me(){if(this.parent){return U(Y(this),this.parent)}return this}var Ae=/<yield\b/i,$e=/<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi,Ce=/<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi,Oe=/<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi,Pe={tr:"tbody",th:"tr",td:"tr",col:"colgroup"},Ne=C&&C<10?_:j,De="div",Te="svg";function Ie(e,t,i){var r=i[0]==="o",n=r?"select>":"table>";e.innerHTML="<"+n+t.trim()+"</"+n;n=e.firstChild;if(r){n.selectedIndex=-1}else{var a=Pe[i];if(a&&n.childElementCount===1){n=s(a,n)}}return n}function Le(e,i){if(!Ae.test(e)){return e}var r={};i=i&&i.replace(Ce,function(e,t,i){r[t]=r[t]||i;return""}).trim();return e.replace(Oe,function(e,t,i){return r[t]||i||""}).replace($e,function(e,t){return i||t||""})}function Ee(e,t,i){var r=e&&e.match(/^\s*<([-\w]+)/);var n=r&&r[1].toLowerCase();var a=N(i?Te:De);e=Le(e,t);if(Ne.test(n)){a=Ie(a,e,n)}else{Q(a,e,i)}return a}var He=/^on/;function We(e){return He.test(e)}function ze(e){var t=e;while(t.__.isAnonymous){if(!t.parent){break}t=t.parent}return t}function Re(e,t,i){var r=this.__.parent;var n=this.__.item;if(!n){while(r&&!n){n=r.__.item;r=r.__.parent}}if(V(i,"currentTarget")){i.currentTarget=e}if(V(i,"target")){i.target=i.srcElement}if(V(i,"which")){i.which=i.charCode||i.keyCode}i.item=n;t.call(this,i);if(!K.autoUpdate){return}if(!i.preventUpdate){var a=ze(this);if(a.isMounted){a.update()}}}function Be(e,t,i,r){var n;var a=Re.bind(r,i,t);i[e]=null;n=e.replace(S,"");if(!ve(r.__.listeners,i)){r.__.listeners.push(i)}if(!i[b]){i[b]={}}if(i[b][e]){i.removeEventListener(n,i[b][e])}i[b][e]=a;i.addEventListener(n,a,false)}function Fe(e,t,i,r){var n=Tt(e,t,i);var a=t.tagName||Se(t.root,true);var s=ze(r);we(n,"parent",s);n.__.parent=r;_e(s.tags,a,n);if(s!==r){_e(r.tags,a,n)}return n}function Ve(e,t,i,r){if(de(e[t])){var n=e[t].indexOf(i);if(n!==-1){e[t].splice(n,1)}if(!e[t].length){delete e[t]}else if(e[t].length===1&&!r){e[t]=e[t][0]}}else if(e[t]===i){delete e[t]}}function Ue(e,t){var i=this;var r=q();var n=q();var a=te();var s;var o;this.root.insertBefore(r,this.root.firstChild);this.root.appendChild(n);this.__.head=o=r;this.__.tail=n;while(o){s=o.nextSibling;a.appendChild(o);i.__.virts.push(o);o=s}if(t){e.insertBefore(a,t.__.head)}else{e.appendChild(a)}}function Ye(e,t){if(!t.parentNode){return}var i=te();Ue.call(e,i);t.parentNode.replaceChild(i,t)}function Ke(e,t,i){var r=e.tag||e.dom._tag;var n;var a=r?r.__:{};var s=a.head;var o=e.dom.tagName==="VIRTUAL";if(r&&e.tagName===i){r.update();return}if(r){if(o){n=q();s.parentNode.insertBefore(n,s)}r.unmount(true)}if(!pe(i)){return}e.impl=d[i];if(!e.impl){return}e.tag=r=Fe(e.impl,{root:e.dom,parent:t,tagName:i},e.dom.innerHTML,t);me(e.attrs,function(e){return D(r.root,e.name,e.value)});e.tagName=i;r.mount();if(o){Ye(r,n||r.root)}t.__.onUnmount=function(){var e=r.opts.dataIs;Ve(r.parent.tags,e,r);Ve(r.__.parent.tags,e,r);r.unmount()}}function Ge(e){if(!e){return null}e=e.replace(l,"");if(A[e]){e=A[e]}return e}function qe(e){if(this.root&&Z(this.root,"virtualized")){return}var t=e.dom;var i=Ge(e.attr);var r=ve([m,g],i);var n=e.root&&e.root.tagName==="VIRTUAL";var a=this.__;var s=a.isAnonymous;var o=t&&(e.parent||t.parentNode);var l=K.keepValueAttributes;var u=i==="style";var c=i==="class";var d=i==="value";var f;if(e._riot_id){if(e.__.wasCreated){e.update()}else{e.mount();if(n){Ye(e,e.root)}}return}if(e.update){return e.update()}var p=r&&!s?Me.call(this):this;f=z(e.expr,p);var h=!oe(f);var v=ue(f);if(v){if(c){f=z(JSON.stringify(f),this)}else if(u){f=re(f)}}if(e.attr&&(!e.wasParsedOnce||f===false||!h&&(!d||d&&!l))){X(t,Z(t,e.attr)?e.attr:i)}if(e.bool){f=f?i:false}if(e.isRtag){return Ke(e,this,f)}if(e.wasParsedOnce&&e.value===f){return}e.value=f;e.wasParsedOnce=true;if(v&&!c&&!u&&!r){return}if(!h){f=""}if(!i){f+="";if(o){e.parent=o;if(o.tagName==="TEXTAREA"){o.value=f;if(!C){t.nodeValue=f}}else{t.nodeValue=f}}return}switch(true){case le(f):if(We(i)){Be(i,f,t,this)}break;case r:J(t,i===g?!f:f);break;default:if(e.bool){t[i]=f}if(d&&t.value!==f){t.value=f}else if(h&&f!==false){D(t,i,f)}if(u&&t.hidden){J(t,false)}}}function Je(e){me(e,qe.bind(this))}function Ze(e,t,i,r,n){if(e&&i){return}var a=e?Me.call(this):t||this;me(n,function(e){if(e.expr){qe.call(a,e.expr)}r[ye(e.name).replace(l,"")]=e.expr?e.expr.value:e.value})}function Xe(e,t,i){var r=e.__;var n={};var a=e.isMounted&&!r.skipAnonymous;if(r.isAnonymous&&r.parent){U(e,r.parent)}U(e,t);Ze.apply(e,[r.isLoop,r.parent,r.isAnonymous,n,r.instAttrs]);if(a&&e.isMounted&&le(e.shouldUpdate)&&!e.shouldUpdate(t,n)){return e}U(e.opts,n);if(a){e.trigger("update",t)}Je.call(e,i);if(a){e.trigger("updated")}return e}function Qe(e){if(!e){var t=Object.keys(d);return t+Qe(t)}return e.filter(function(e){return!/[^-\w]/.test(e)}).reduce(function(e,t){var i=t.trim().toLowerCase();return e+",["+p+'="'+i+'"]'},"")}function et(e,t){var i=this;var r=i.name;var n=i.tmpl;var a=i.css;var s=i.attrs;var o=i.onCreate;if(!d[r]){tt(r,n,a,s,o);d[r].class=this.constructor}It(e,r,t,this);if(a){E.inject()}return this}function tt(e,t,i,r,n){if(le(r)){n=r;if(/^[\w-]+\s?=/.test(i)){r=i;i=""}else{r=""}}if(i){if(le(i)){n=i}else{E.add(i,e)}}e=e.toLowerCase();d[e]={name:e,tmpl:t,attrs:r,fn:n};return e}function it(e,t,i,r,n){if(i){E.add(i,e)}d[e]={name:e,tmpl:t,attrs:r,fn:n};return e}function rt(e,r,n){var a=[];var t,i;function s(e){if(e.tagName){var t=Z(e,p),i;if(r&&t!==r){t=r;D(e,p,r)}i=It(e,t||e.tagName.toLowerCase(),le(n)?n():n);if(i){a.push(i)}}else if(e.length){me(e,s)}}E.inject();if(ue(r)||le(r)){n=r;r=0}if(pe(e)){e=e==="*"?i=Qe():e+Qe(e.split(/, */));t=e?G(e):[]}else{t=e}if(r==="*"){r=i||Qe();if(t.tagName){t=G(r,t)}else{var o=[];me(t,function(e){return o.push(G(r,e))});t=o}r=0}s(t);return a}var nt={},at=nt[u]={},st=0;function ot(e,t,i){if(ue(e)){ot("__"+st+++"__",e,true);return}var r=i?at:nt;if(!t){if(F(r[e])){throw new Error("Unregistered mixin: "+e)}return r[e]}r[e]=le(t)?U(t.prototype,r[e]||{})&&t:U(r[e]||{},t)}function lt(){return me(c,function(e){return e.update()})}function ut(e){E.remove(e);return delete d[e]}var ct="v3.13.2",dt=Object.freeze({Tag:et,tag:tt,tag2:it,mount:rt,mixin:ot,update:lt,unregister:ut,version:ct});function ft(s){var e=[],t=arguments.length-1;while(t-- >0)e[t]=arguments[t+1];me(e,function(e){var r;var t;var i=[];var n=["init","__proto__"];e=pe(e)?ot(e):e;if(le(e)){r=new e}else{r=e}var a=Object.getPrototypeOf(r);do{i=i.concat(Object.getOwnPropertyNames(t||r))}while(t=Object.getPrototypeOf(t||r));me(i,function(e){if(!ve(n,e)){var t=B(r,e)||B(a,e);var i=t&&(t.get||t.set);if(!s.hasOwnProperty(e)&&i){Object.defineProperty(s,e,t)}else{s[e]=le(r[e])?r[e].bind(s):r[e]}}});if(r.init){r.init.bind(s)(s.opts)}});return s}function pt(e,t){var i=this.parent;var r;if(!i){return}r=i.tags[e];if(de(r)){r.splice(t,0,r.splice(r.indexOf(this),1)[0])}else{_e(i.tags,e,this)}}function ht(e,t){var i=this;var r=this.__.head;var n;var a=te();while(r){n=r.nextSibling;a.appendChild(r);r=n;if(r===i.__.tail){a.appendChild(r);e.insertBefore(a,t.__.head);break}}}function vt(e,t,i){var r={};r[e.key]=t;if(e.pos){r[e.pos]=i}return r}function mt(e,t,i){var r=t.length;var n=e.length-i;while(r>n){r--;gt.apply(t[r],[t,r])}}function gt(e,t){e.splice(t,1);this.unmount();Ve(this.parent,this,this.__.tagName,true)}function bt(t){var i=this;me(Object.keys(this.tags),function(e){pt.apply(i.tags[e],[e,t])})}function wt(e,t,i){if(i){ht.apply(this,[e,t])}else{ie(e,this.root,t.root)}}function yt(e,t,i){if(i){Ue.apply(this,[e,t])}else{ie(e,this.root,t.root)}}function xt(e,t){if(t){Ue.call(this,e)}else{e.appendChild(this.root)}}function kt(e,t,i,r){if(e){return r?z(e,i):t[e]}return t}function _t(w,y,x){var k=typeof Z(w,i)!==n||X(w,i);var _=Z(w,r);var j=_?z.hasExpr(_):false;var S=Se(w);var M=d[S];var e=w.parentNode;var t=q();var A=je(w);var $=Z(w,h);var C=[];var O=true;var P=w.innerHTML;var N=!d[S];var D=w.tagName==="VIRTUAL";var T=[];X(w,v);X(w,r);x=z.loopKeys(x);x.isLoop=true;if($){X(w,h)}e.insertBefore(t,w);e.removeChild(w);x.update=function e(){x.value=z(x.val,y);var f=x.value;var p=te();var h=!de(f)&&!pe(f);var v=t.parentNode;var m=[];var g=h&&!!f;if(!v){return}if(h){f=f?Object.keys(f).map(function(e){return vt(x,f[e],e)}):[]}var b=0;me(f,function(e,t){var i=t-b;var r=!g&&x.key?vt(x,e,t):e;if($&&!z($,U(Y(y),r))){b++;return}var n=kt(_,e,r,j);var a=!h&&k&&typeof e===I||_;var s=T.indexOf(n);var o=s===-1;var l=!o&&a?s:i;var u=C[l];var c=i>=T.length;var d=a&&o||!a&&!u||!C[i];if(d){u=Tt(M,{parent:y,isLoop:O,isAnonymous:N,tagName:S,root:w.cloneNode(N),item:r,index:i},P);u.mount();if(c){xt.apply(u,[p||v,D])}else{yt.apply(u,[v,C[i],D])}if(!c){T.splice(i,0,r)}C.splice(i,0,u);if(A){_e(y.tags,S,u,true)}}else if(l!==i&&a){if(_||ve(f,T[l])){wt.apply(u,[v,C[i],D]);C.splice(i,0,C.splice(l,1)[0]);T.splice(i,0,T.splice(l,1)[0])}if(x.pos){u[x.pos]=i}if(!A&&u.tags){bt.call(u,i)}}U(u.__,{item:r,index:i,parent:y});m[i]=n;if(!d){u.update(r)}});mt(f,C,b);T=m.slice();v.insertBefore(p,t)};x.unmount=function(){me(C,function(e){e.unmount()})};return x}var jt={init:function e(t,i,r,n){this.dom=t;this.attr=r;this.rawValue=n;this.parent=i;this.hasExp=z.hasExpr(n);return this},update:function e(){var t=this.value;var i=this.parent&&ze(this.parent);var r=this.dom.__ref||this.tag||this.dom;this.value=this.hasExp?z(this.rawValue,this.parent):this.rawValue;if(!oe(t)&&i){Ve(i.refs,t,r)}if(!oe(this.value)&&pe(this.value)){if(i){_e(i.refs,this.value,r,null,this.parent.__.index)}if(this.value!==t){D(this.dom,this.attr,this.value)}}else{X(this.dom,this.attr)}if(!this.dom.__ref){this.dom.__ref=r}},unmount:function e(){var t=this.tag||this.dom;var i=this.parent&&ze(this.parent);if(!oe(this.value)&&i){Ve(i.refs,this.value,t)}}};function St(e,t,i,r){return Y(jt).init(e,t,i,r)}function Mt(e){me(e,function(e){if(e.unmount){e.unmount(true)}else if(e.tagName){e.tag.unmount(true)}else if(e.unmount){e.unmount()}})}var At={init:function e(t,i,r){X(t,h);U(this,{tag:i,expr:r,stub:q(),pristine:t});var n=t.parentNode;n.insertBefore(this.stub,t);n.removeChild(t);return this},update:function e(){this.value=z(this.expr,this.tag);if(!this.stub.parentNode){return}if(this.value&&!this.current){this.current=this.pristine.cloneNode(true);this.stub.parentNode.insertBefore(this.current,this.stub);this.expressions=Ct.apply(this.tag,[this.current,true])}else if(!this.value&&this.current){this.unmount();this.current=null;this.expressions=[]}if(this.value){Je.call(this.tag,this.expressions)}},unmount:function e(){if(this.current){if(this.current._tag){this.current._tag.unmount()}else if(this.current.parentNode){this.current.parentNode.removeChild(this.current)}}Mt(this.expressions||[])}};function $t(e,t,i){return Y(At).init(e,t,i)}function Ct(o,l){var u=this;var c=[];ne(o,function(e){var t=e.nodeType;var i;var r;if(!l&&e===o){return}if(t===3&&e.parentNode.tagName!=="STYLE"&&z.hasExpr(e.nodeValue)){c.push({dom:e,expr:e.nodeValue})}if(t!==1){return}var n=e.tagName==="VIRTUAL";if(i=Z(e,v)){if(n){D(e,"loopVirtual",true)}c.push(_t(e,u,i));return false}if(i=Z(e,h)){c.push($t(e,u,i));return false}if(i=Z(e,p)){if(z.hasExpr(i)){c.push({isRtag:true,expr:i,dom:e,attrs:[].slice.call(e.attributes)});return false}}r=je(e);if(n){if(Z(e,"virtualized")){e.parentElement.removeChild(e)}if(!r&&!Z(e,"virtualized")&&!Z(e,"loopVirtual")){r={tmpl:e.outerHTML}}}if(r&&(e!==o||l)){var a=Z(e,p);if(n&&!a){D(e,"virtualized",true);var s=Tt({tmpl:e.outerHTML},{root:e,parent:u},e.innerHTML);c.push(s)}else{if(a&&n){xe("Virtual tags shouldn't be used together with the \""+p+'" attribute - https://github.com/riot/riot/issues/2511')}c.push(Fe(r,{root:e,parent:u},e.innerHTML,u));return false}}Ot.apply(u,[e,e.attributes,function(e,t){if(!t){return}c.push(t)}])});return c}function Ot(n,e,a){var s=this;me(e,function(e){if(!e){return false}var t=e.name;var i=fe(t);var r;if(ve(f,t)&&n.tagName.toLowerCase()!==o){r=St(n,s,t,e.value)}else if(z.hasExpr(e.value)){r={dom:n,expr:e.value,attr:t,bool:i}}a(e,r)})}function Pt(e){var t=this.__;var i=t.isAnonymous;var r=t.skipAnonymous;we(this,"isMounted",e);if(!i||!r){if(e){this.trigger("mount")}else{this.trigger("unmount");this.off("*");this.__.wasCreated=false}}}function Nt(i,e,r,t){var n=i.__;var a=n.root;a._tag=i;Ot.apply(n.parent,[a,a.attributes,function(e,t){if(!n.isAnonymous&&jt.isPrototypeOf(t)){t.tag=i}e.expr=t;n.instAttrs.push(e)}]);ee(n.impl.attrs,function(e,t){n.implAttrs.push({name:e,value:t})});Ot.apply(i,[a,n.implAttrs,function(e,t){if(t){r.push(t)}else{D(a,e.name,e.value)}}]);Ze.apply(i,[n.isLoop,n.parent,n.isAnonymous,t,n.instAttrs]);var s=ot(u);if(s&&!n.skipAnonymous){for(var o in s){if(s.hasOwnProperty(o)){i.mixin(s[o])}}}if(n.impl.fn){n.impl.fn.call(i,t)}if(!n.skipAnonymous){i.trigger("before-mount")}me(Ct.apply(i,[e,n.isAnonymous]),function(e){return r.push(e)});i.update(n.item);if(!n.isAnonymous&&!n.isInline){while(e.firstChild){a.appendChild(e.firstChild)}}we(i,"root",a);if(!n.skipAnonymous&&i.parent){var l=ze(i.parent);l.one(!l.isMounted?"mount":"updated",function(){Pt.call(i,true)})}else{Pt.call(i,true)}i.__.wasCreated=true;return i}function Dt(t,e,i){var r=t.__;var n=r.root;var a=c.indexOf(t);var s=n.parentNode;if(!r.skipAnonymous){t.trigger("before-unmount")}ee(r.impl.attrs,function(e){if(ge(e,l)){e=e.slice(l.length)}X(n,e)});t.__.listeners.forEach(function(t){Object.keys(t[b]).forEach(function(e){t.removeEventListener(e,t[b][e])})});if(a!==-1){c.splice(a,1)}if(r.parent&&!r.isAnonymous){var o=ze(r.parent);if(r.isVirtual){Object.keys(t.tags).forEach(function(e){return Ve(o.tags,e,t.tags[e])})}else{Ve(o.tags,r.tagName,t)}}if(t.__.virts){me(t.__.virts,function(e){if(e.parentNode){e.parentNode.removeChild(e)}})}Mt(i);me(r.instAttrs,function(e){return e.expr&&e.expr.unmount&&e.expr.unmount()});if(e){Q(n,"")}else if(s){s.removeChild(n)}if(r.onUnmount){r.onUnmount()}if(!t.isMounted){Pt.call(t,true)}Pt.call(t,false);delete n._tag;return t}function Tt(e,t,i){if(e===void 0)e={};if(t===void 0)t={};var a=t.context||{};var r=t.opts||{};var n=t.parent;var s=t.isLoop;var o=!!t.isAnonymous;var l=K.skipAnonymousTags&&o;var u=t.item;var c=t.index;var d=[];var f=[];var p=e.tmpl;var h=[];var v=t.root;var m=t.tagName||Se(v);var g=m==="virtual";var b=!g&&!p;var w;if(b||s&&o){w=v}else{if(!g){v.innerHTML=""}w=Ee(p,i,ce(v))}if(!l){R(a)}if(e.name&&v._tag){v._tag.unmount(true)}we(a,"__",{impl:e,root:v,skipAnonymous:l,implAttrs:f,isAnonymous:o,instAttrs:d,innerHTML:i,tagName:m,index:c,isLoop:s,isInline:b,item:u,parent:n,listeners:[],virts:[],wasCreated:false,tail:null,head:null});return[["isMounted",false],["_riot_id",be()],["root",v],["opts",r,{writable:true,enumerable:true}],["parent",n||null],["tags",{}],["refs",{}],["update",function(e){return Xe(a,e,h)}],["mixin",function(){var e=[],t=arguments.length;while(t--)e[t]=arguments[t];return ft.apply(void 0,[a].concat(e))}],["mount",function(){return Nt(a,w,h,r)}],["unmount",function(e){return Dt(a,e,h)}]].reduce(function(e,t){var i=t[0];var r=t[1];var n=t[2];we(a,i,r,n);return e},U(a,u))}function It(e,t,i,r){var n=d[t];var a=d[t].class;var s=r||(a?Y(a.prototype):{});var o=e._innerHTML=e._innerHTML||e.innerHTML;var l=U({root:e,opts:i,context:s},{parent:i?i.parent:null});var u;if(n&&e){u=Tt(n,l,o)}if(u&&u.mount){u.mount(true);if(!ve(c,u)){c.push(u)}}return u}var Lt=Object.freeze({arrayishAdd:_e,getTagName:Se,inheritParentProps:Me,mountTo:It,selectTags:Qe,arrayishRemove:Ve,getTag:je,initChildTag:Fe,moveChildTag:pt,makeReplaceVirtual:Ye,getImmediateCustomParentTag:ze,makeVirtual:Ue,moveVirtual:ht,unmountAll:Mt,createIfDirective:$t,createRefDirective:St}),Et=K,Ht={tmpl:z,brackets:W,styleManager:E,vdom:c,styleNode:E.styleNode,dom:ae,check:he,misc:ke,tags:Lt},Wt=et,zt=tt,Rt=it,Bt=rt,Ft=ot,Vt=lt,Ut=ut,Yt=ct,Kt=R,Gt=U({},dt,{observable:R,settings:Et,util:Ht});e.settings=Et,e.util=Ht,e.Tag=Wt,e.tag=zt,e.tag2=Rt,e.mount=Bt,e.mixin=Ft,e.update=Vt,e.unregister=Ut,e.version=Yt,e.observable=Kt,e.default=Gt,Object.defineProperty(e,"__esModule",{value:true})}(t)},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=(n.init=function(){window.scrolls=[],window.addEventListener("scroll",function(){var e=window.pageYOffset,t=window.location.hash;window.scrolls[""+t]=e})},n.move=function(){var e=window.location.hash;window.scrolls[""+e]?window.scroll(0,0):window.scroll(0,window.scrolls[""+e])},n);function n(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n)}t.default=r},function(e,t,i){"use strict";i(0).tag2("list",'<ul> <li each="{item in opts.items}"> <h3><a href="{item.link}" target="_blank">{item.title}</a> <div class="right"> <hr><span><span class="date" if="{item.date.length &lt;= 7}">{item.date}</span><span class="term" if="{item.date.length &gt; 7}">{item.date}</span></span> </div> </h3> <p class="sub" each="{t in item.texts}">{t}</p> </li> </ul>','list > ul,[data-is="list"] > ul{ padding: 0.75rem; } list > ul li,[data-is="list"] > ul li{ margin-bottom: 1rem; } list > ul li h3,[data-is="list"] > ul li h3{ display: flex; margin: auto; align-items: center; } list > ul li h3 a,[data-is="list"] > ul li h3 a{ color: #4e9adb; padding: 0.75rem; text-align: justify; } list > ul li h3 a:hover,[data-is="list"] > ul li h3 a:hover{ text-decoration: underline; } list > ul li h3 .right,[data-is="list"] > ul li h3 .right{ display: inline-flex; flex-grow: 1; align-items: center; } list > ul li h3 .right hr,[data-is="list"] > ul li h3 .right hr{ display: inline-flex; flex-grow: 1; border: 1.5px solid gray; border-radius: 1rem; min-width: 1rem; background: gray; } list > ul li h3 .right span,[data-is="list"] > ul li h3 .right span{ padding: 0.75rem; display: inline-flex; } list > ul li h3 .right span span,[data-is="list"] > ul li h3 .right span span{ background: #555; color: white; padding: 0.1rem 0.3rem; border-radius: 0.3rem; display: inline-block; text-align: center; font-size: 0.8rem; font-weight: normal; } list > ul li h3 .right span span.date,[data-is="list"] > ul li h3 .right span span.date{ min-width: 4rem; } list > ul li h3 .right span span.term,[data-is="list"] > ul li h3 .right span span.term{ min-width: 8rem; } list > ul li .sub,[data-is="list"] > ul li .sub{ color: #bdbdbd; padding: 0 0.75rem; font-weight: 300; text-align: justify; }','class="pure-g pure-u-1-1"',function(e){})},function(e,t,i){"use strict";i(0).tag2("webp",'<picture> <source srcset="resources/{opts.src||opts.riotSrc}.webp" type="image/webp"> <source srcset="resources/{opts.src||opts.riotSrc}.png" type="image/png"><img riot-src="resources/{opts.src||opts.riotSrc}.webp"> </picture>','webp,[data-is="webp"]{ display: block; } webp > picture,[data-is="webp"] > picture{ width: 100%; height: 100%; } webp > picture > img,[data-is="webp"] > picture > img{ width: 100%; }',"",function(e){this.on("mounted",function(){})})},function(e,t,i){e.exports=function(s){s=s||{};var o={},l=Array.prototype.slice;return Object.defineProperties(s,{on:{value:function(e,t){return"function"==typeof t&&(o[e]=o[e]||[]).push(t),s},enumerable:!1,writable:!1,configurable:!1},off:{value:function(e,t){if("*"!=e||t)if(t)for(var i,r=o[e],n=0;i=r&&r[n];++n)i==t&&r.splice(n--,1);else delete o[e];else o={};return s},enumerable:!1,writable:!1,configurable:!1},one:{value:function(t,i){return s.on(t,function e(){s.off(t,e),i.apply(s,arguments)})},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(e){var t,i,r,n=arguments.length-1,a=new Array(n);for(r=0;r<n;r++)a[r]=arguments[r+1];for(t=l.call(o[e]||[],0),r=0;i=t[r];++r)i.apply(s,a);return o["*"]&&"*"!=e&&s.trigger.apply(s,["*",e].concat(a)),s},enumerable:!1,writable:!1,configurable:!1}}),s}},function(e,t,i){"use strict";i(0).tag2("social",'<ul> <li><a href="https://www.facebook.com/raika.toriyama" target="_blank" title="Facebook" rel="noopener noreferrer"><i class="fab fa-facebook-f fa-2x"></i></a></li> <li><a href="https://twitter.com/pvcresin/" target="_blank" title="Twitter" rel="noopener noreferrer"><i class="fab fa-twitter fa-2x"></i></a></li> <li><a href="https://github.com/pvcresin/" target="_blank" title="GitHub" rel="noopener noreferrer"><i class="fab fa-github fa-2x"></i></a></li> <li><a href="https://www.instagram.com/pvcresin/" target="_blank" title="Instagram" rel="noopener noreferrer"><i class="fab fa-instagram fa-2x"></i></a></li> <li><a href="https://pvcresin.hatenablog.com/" target="_blank" title="Hatena Blog" rel="noopener noreferrer"> <div class="icon-box hatena"></div></a></li> <li><a href="https://www.wantedly.com/users/18220619" target="_blank" title="Wantedly" rel="noopener noreferrer"> <div class="icon-box wantedly"></div></a></li> </ul>','social > ul,[data-is="social"] > ul{ display: flex; justify-content: center; align-items: center; padding: 1rem 0; } social > ul li,[data-is="social"] > ul li{ display: inline-block; } social > ul li a,[data-is="social"] > ul li a{ color: #525252; vertical-align: sub; display: inline-block; width: 3rem; } social > ul li a:hover,[data-is="social"] > ul li a:hover{ color: white; } social > ul li a .icon-box,[data-is="social"] > ul li a .icon-box{ margin: auto; width: 2rem; height: 2rem; background: #525252; } social > ul li a .icon-box:hover,[data-is="social"] > ul li a .icon-box:hover{ background: white; } social > ul li a .icon-box.hatena,[data-is="social"] > ul li a .icon-box.hatena{ mask-image: url(./resources/icon-hatena.svg); -webkit-mask-image: url(./resources/icon-hatena.svg); } social > ul li a .icon-box.wantedly,[data-is="social"] > ul li a .icon-box.wantedly{ mask-image: url(./resources/icon-wantedly.svg); -webkit-mask-image: url(./resources/icon-wantedly.svg); }','id="social"',function(e){})},function(e,t,i){"use strict";var r=n(i(15));n(i(3));function n(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("about",'<div class="about-img pure-u-sm-1-4 pure-u-1-2"> <div class="face-wrapper pure-u-1-2"><img src="resources/icon-pvcresin.svg"></div> </div> <div class="pure-u-sm-1-24 pure-u-1-1"></div> <div class="about-text pure-u-sm-17-24 pure-u-1-1">Web Frontend „ÅåÂ•Ω„Åç„Å™„Ç®„É≥„Ç∏„Éã„Ç¢„ÄÇ<br>Â≠¶ÁîüÊôÇ‰ª£„ÅØ„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥ÔºàHCIÔºâ„ÇíÂ∞ÇÊîª„Åó„ÄÅ‰∏ª„Å´„É¢„Éê„Ç§„É´ / „Ç¶„Çß„Ç¢„É©„Éñ„É´„Éá„Éê„Ç§„Çπ„Å´Èñ¢„Åô„ÇãÁ†îÁ©∂„ÇíË°å„ÅÜ„ÄÇ<br>‰∫∫„Å®ÊÑèË¶ã„Çí‰∫§Êèõ„Åó„ÄÅË≠∞Ë´ñ„Åó„Å™„Åå„Çâ„É¢„Éé‰Ωú„Çä„Åå„Åó„Åü„ÅÑ„ÄÇ<br>Êñ∞„Åó„ÅÑ„ÇÇ„ÅÆ„ÅåÂ•Ω„Åç„Å™„ÅÆ„Åß„ÄÅË≤™Ê¨≤„Å´Â≠¶„Çì„Åß„ÅÑ„Åè„ÄÇ <ul> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-birthday-cake" aria-hidden="true"></i></div> <div class="right pure-u-11-12">{birthday} (Age: {age})</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-envelope" aria-hidden="true"></i></div> <div class="right pure-u-11-12">pvcresin0730@gmail.com</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-map-marker-alt" aria-hidden="true"></i></div> <div class="right pure-u-11-12">Omotesando, Tokyo</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-suitcase" aria-hidden="true"></i></div> <div class="right pure-u-11-12"><span>Frontend Engineer{\' \'}</span><a class="company" href="https://jp.corp-sansan.com/" target="_blank">@ Sansan</a></div> </li> </ul> </div>','about,[data-is="about"]{ padding: 0.75rem; } about > .about-img,[data-is="about"] > .about-img{ text-align: center; padding: 0.75rem; margin: 0 auto; } about > .about-img .face-wrapper,[data-is="about"] > .about-img .face-wrapper{ position: relative; width: 100%; } about > .about-img .face-wrapper:before,[data-is="about"] > .about-img .face-wrapper:before{ content: ""; display: block; padding-top: 100%; } about > .about-img .face-wrapper img,[data-is="about"] > .about-img .face-wrapper img{ position: absolute; top: 0; left: 0; bottom: 0; right: 0; border-radius: 50%; width: 100%; background: gray; } about > .about-text,[data-is="about"] > .about-text{ text-align: justify; display: flex; flex-direction: column; justify-content: center; padding: 0.75rem; font-size: 1.1rem; } about > .about-text ul li,[data-is="about"] > .about-text ul li{ display: flex; margin-top: 0.5rem; } about > .about-text ul li .icon,[data-is="about"] > .about-text ul li .icon{ display: flex; justify-content: center; align-items: baseline; font-size: 1.5rem; } about > .about-text ul li .right,[data-is="about"] > .about-text ul li .right{ display: flex; align-items: center; padding-left: 0.5rem; } about > .about-text ul li .right a,[data-is="about"] > .about-text ul li .right a{ color: #4e9adb; } about > .about-text ul li .right a:hover,[data-is="about"] > .about-text ul li .right a:hover{ text-decoration: underline; } about > .about-text ul li .right a.company,[data-is="about"] > .about-text ul li .right a.company{ margin-left: 0.3rem; }','class="pure-g"',function(e){this.birthday="1994-07-30",this.age=(0,r.default)().diff(this.birthday,"years")})},function(e,t,i){"use strict";var r=n(i(8));n(i(3));function n(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projects",'<div class="pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1" each="{w, i in projects}"> <div class="card"><a href="#projects/{w.name.replace(/ /g, `_`)}"> <div class="wrapper"> <webp class="thumbnail" riot-src="{w.img}"></webp> </div> <div class="content"> <h4>{w.name}</h4> <p>{w.sub}</p> </div></a></div> </div>','projects,[data-is="projects"]{ padding: 0.75rem; display: flex; flex-wrap: wrap; } projects > div,[data-is="projects"] > div{ padding: 0.75rem; } projects > div > .card,[data-is="projects"] > div > .card{ cursor: pointer; background: white; height: 100%; box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1); border-radius: 0.3rem; } projects > div > .card:hover,[data-is="projects"] > div > .card:hover{ box-shadow: 0 8px 10px rgba(10, 10, 10, 0.1), 0 0 6px 4px rgba(10, 10, 10, 0.1); } projects > div > .card > a > .wrapper,[data-is="projects"] > div > .card > a > .wrapper{ position: relative; width: 100%; } projects > div > .card > a > .wrapper:before,[data-is="projects"] > div > .card > a > .wrapper:before{ content: \'\'; display: block; padding-top: 56.25%; } projects > div > .card > a > .wrapper img,[data-is="projects"] > div > .card > a > .wrapper img{ position: absolute; top: 0; left: 0; border-radius: 0.3rem 0.3rem 0 0; display: block; width: 100%; background: #ddd; border-bottom: 1px solid #ddd; } projects > div > .card > a > .content,[data-is="projects"] > div > .card > a > .content{ padding: 0.8rem 1rem; } projects > div > .card > a > .content h4,[data-is="projects"] > div > .card > a > .content h4{ font-size: 1.2rem; margin-bottom: 0.3rem; } projects > div > .card > a > .content p,[data-is="projects"] > div > .card > a > .content p{ font-size: 0.9rem; }',"",function(e){var t=this;this.category="All",this.projects=void 0===this.opts.limit?r.default:r.default.slice(0,this.opts.limit),this.on("updated",function(){t.opts.category&&t.opts.category!==t.category&&t.update({category:t.opts.category,projects:"All"===t.opts.category?r.default:r.default.filter(function(e){return e.category===t.opts.category})})})})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=[{name:"SensorPipe",sub:"PC„Å®„Çπ„Éû„Éõ„ÇíÈÄ£Êê∫„Åï„Åõ„Çã„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÇíÊîØÊè¥„Åô„Çã„Çπ„Éû„Éõ„Ç¢„Éó„É™",img:"project-SensorPipe-16-9",category:"Android",video:"gwKyPqt2kd8",text:"„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„ÅÆ„Çª„É≥„ÇµÊÉÖÂ†±„Å®PC„ÇíÈÄ£Êê∫„Åï„Åõ„Åü„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÇíÂÆüÁèæ„Åô„Çã„Å´„ÅØÂèåÊñπ„Åß„ÅÆ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÈñãÁô∫„ÅåÂøÖË¶Å„Å®„Å™„Çä„ÄÅË£Ω‰ΩúÊôÇÈñì„Åå„Åã„Åã„Çã‰∏ä„Å´„Éè„Éº„Éâ„É´„ÅåÈ´ò„ÅÑ„ÇÇ„ÅÆ„Åß„ÅÇ„Å£„Åü„ÄÇ„Åì„Çå„ÇíËß£Ê±∫„Åô„Çã„Åü„ÇÅ„ÄÅ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„ÅÆÂêÑÁ®Æ„Çª„É≥„ÇµÊÉÖÂ†±„ÇíPC„Å´ÈÄÅ‰ø°„ÅóÁ∂ö„Åë„ÄÅPCÂÅ¥„Åã„Çâ„ÇÇ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„Å´„Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥„ÇÑ„Ç¶„Çß„Éñ„Çµ„Ç§„ÉàË°®Á§∫„Å™„Å©„ÅÆÊâÄÂÆö„ÅÆÂãï‰Ωú„Çí„Åï„Åõ„Çã‰∫ã„Åå„Åß„Åç„Çã„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÈñãÁô∫„Åó„Åü„ÄÇ„Åì„Çå„Å´„Çà„Çä„ÄÅ„Éó„É≠„Ç∞„É©„Éû„ÅØ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥ÂÅ¥„ÅÆ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Çí‰∏ÄÂàáË°å„Çè„Åö„Å´„ÄÅPC„Åß„ÅÆ„Çª„É≥„ÇµÊÉÖÂ†±„ÇíÁî®„ÅÑ„Åü„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÇíË°å„ÅÜ„Åì„Å®„Åå„Åß„Åç„Çã„ÄÇWISS2015„ÅßÁô∫Ë°®„ÄÇ",implement:"Android„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å®„Åó„Å¶ÂÆüË£Ö„ÄÇPC„Å®„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„ÇíÂêå„ÅòWi-Fi„Å´Êé•Á∂öÂæå„ÄÅUDPÈÄö‰ø°„ÇíÁ¢∫Á´ã„Åô„Çã„Åì„Å®„Å´„Çà„Å£„Å¶„Éá„Éº„Çø„ÅÆÈÄÅÂèó‰ø°„ÇíË°å„ÅÜ„ÄÇ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅØ„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂãï‰Ωú„Åô„Çã„ÄÇPCÂÅ¥„ÅßÂà©Áî®„Åô„Çã„Å®„Åç„ÅØÂØæÂøú„Åô„ÇãProcessingÁî®„ÅÆ„É©„Ç§„Éñ„É©„É™„ÇíÂà©Áî®ÂèØËÉΩ„ÄÇ",keywords:["Android","Programming Experience(PX)","UDP","cooperation programming","sensor"],links:{"„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éö„Éº„Ç∏":"https://research.miyashita.com/2015/D160/"}},{name:"MiddleDrive",sub:"BluetoothÈÄö‰ø°„Å´„Çà„Çã„Ç¢„Éâ„Éõ„ÉÉ„ÇØÂûã„Éâ„Ç≠„É•„É°„É≥„ÉàÂÖ±ÂêåÁ∑®ÈõÜ„Ç¢„Éó„É™",img:"project-MiddleDrive-16-9",category:"Web",video:"vPAXrlKGeC8",text:"‰ºöË≠∞„ÇíË°å„ÅÜÈöõ„Å´„Åù„ÅÆÂÜÖÂÆπ„ÇíË§áÊï∞‰∫∫„Åß„Ç¶„Çß„Éñ‰∏ä„ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„Å´Êõ∏„ÅçÂá∫„Åô„Åì„Å®„ÅßË®òÈå≤„Çí„Å®„Å£„Åü„Çä„ÄÅË≠∞È°å„ÅÆÊï¥ÁêÜ„Çí„Åó„Åü„Çä„Åô„Çã„Åì„Å®„ÅåÂ§ö„Åè„ÅÇ„Çã„ÄÇ„Åó„Åã„Åó„ÄÅWi-Fi„ÅÆÈõªÊ≥¢„Åå„Å™„ÅÑÂ†¥ÊâÄ„Åß„ÅØ„Åì„Çå„Çâ„ÅÆ„Çà„ÅÜ„Å™„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅØÂà©Áî®„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Å™„ÅÑ„ÄÇ„Åù„Åì„Åß„ÄÅWi-Fi„Å™„Å©„ÅÆ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁí∞Â¢É„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÁä∂Ê≥Å„Åß„ÇÇ„ÄÅ„É™„Ç¢„É´„Çø„Ç§„É†„Å´ÂÖ±ÂêåÁ∑®ÈõÜ„ÇíË°å„ÅÜ„Åì„Å®„Åå„Åß„Åç„Çã„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÈñãÁô∫„Åó„Åü„ÄÇ„ÉØ„Ç§„É§„É¨„Çπ„Ç¢„Éâ„Éõ„ÉÉ„ÇØ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„ÇíÊßãÁØâ„Åó„ÄÅ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂÜÖ„ÅÆPC„Å®„Éâ„Ç≠„É•„É°„É≥„Éà„ÅÆÂÖ±ÂêåÁ∑®ÈõÜ„ÇíË°å„ÅÜ„Åì„Å®„ÅåÂá∫Êù•„Çã„ÄÇ",implement:"„ÉÅ„Éº„É†„ÅßÂà∂‰Ωú„ÄÇ„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Å®Web„Çµ„Éº„Éê„ÇíÊãÖÂΩì„Åó„Åü„ÄÇÂãï‰Ωú„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„ÅØWindowsPC„ÄÇBluetooth„Å´„Çà„Å£„Å¶PCÂêåÂ£´„Çí„Éö„Ç¢„É™„É≥„Ç∞„Åó„ÄÅÂèåÊñπÂêë„ÅÆ„Éá„Éº„ÇøÈÄö‰ø°„ÇíË°å„ÅÜ„ÄÇÂêÑPCÂÜÖ„ÅßWeb„Çµ„Éº„Éê„ÅåËµ∑Âãï„Åó„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅÈÄöÂ∏∏„ÅÆ„Ç¶„Çß„Éñ„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å®Âêå„Åò„Çà„ÅÜ„Å´„Éñ„É©„Ç¶„Ç∂„Åß„Ç¢„ÇØ„Çª„Çπ„Åô„Çã„Åì„Å®„ÅåÂá∫Êù•„Çã„ÄÇBluetoothÈÄö‰ø°„ÅØC#„Åßwin API„ÇíÂà©Áî®„Åô„Çã„Åì„Å®„ÅßÂÆüÁèæ„Åó„ÄÅWeb„Çµ„Éº„Éê„ÅØNode.js„ÇíÁî®„ÅÑ„Å¶ÂÆüË£Ö„Åó„Å¶„ÅÑ„Çã„ÄÇ",keywords:["windows","Bluetooth","co-authoring","CSCW","win API","Ad-hoc network"],links:{"ÂèóË≥û„Éö„Éº„Ç∏":"https://www.pref.nagano.lg.jp/joho/app-contest/app-contest0"}},{name:"InvisibleFlick",sub:"Â∞èÂûã„Çø„ÉÉ„ÉÅ„Çπ„ÇØ„É™„Éº„É≥Á´ØÊú´„Å´„Åä„Åë„Çã„Ç≠„Éº„Éà„ÉÉ„Éó„ÅåÈÄèÊòé„Å™Êó•Êú¨Ë™ûÂÖ•Âäõ„Ç≠„Éº„Éú„Éº„Éâ",img:"project-InvisibleFlick-16-9",category:"Android",text:"„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅ„ÅÆ„Çà„ÅÜ„Å™Â∞èÂûã„Çø„ÉÉ„ÉÅ„Çπ„ÇØ„É™„Éº„É≥Á´ØÊú´Âêë„Åë„ÅÆÊó•Êú¨Ë™ûÂÖ•Âäõ„Ç≠„Éº„Éú„Éº„Éâ„ÅØ„ÄÅ„Ç≠„Éº„ÇÑ„ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„ÅåÁã≠„ÅÑ„Åü„ÇÅ„ÄÅ„Éü„Çπ„Çø„ÉÉ„Éó„ÅÆÈ†ªÁô∫„Å´„Çà„ÇãÊñáÂ≠óÂÖ•ÂäõÈÄüÂ∫¶„ÅÆ‰Ωé‰∏ã„ÇíÊãõ„ÅÑ„Å¶„ÅÑ„Çã„ÄÇ„Åù„Åì„Åß„ÄÅ„ÉÜ„É≥„Ç≠„ÉºÈÉ®ÂàÜ„ÅÆ„Ç≠„Éº„Éà„ÉÉ„Éó„ÇíÈÄèÊòé„Å´„Åó„ÄÅËÉåÊôØ„Å´„ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„ÇíË°®Á§∫„Åô„ÇãÊâãÊ≥ï„ÇíÊèêÊ°à„ÄÇ„Éï„É™„ÉÉ„ÇØ„Ç≠„Éº„Éú„Éº„Éâ„Å®„ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„ÅÆ2Â±§„ÅÆ„É¨„Ç§„É§„ÉºÊßãÈÄ†„ÅÆÂ∞éÂÖ•„Å´„Çà„Çä„ÄÅ„Ç≠„Éº„Å®„ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢„ÇíÂêåÊôÇ„Å´Êã°Â§ß„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Çã„ÄÇÊó¢Â≠òÊâãÊ≥ï„Å®„ÅÆÊØîËºÉ„Åó„Å¶„ÄÅÊñáÂ≠óÂÖ•ÂäõÈÄüÂ∫¶„Éª„Ç®„É©„ÉºÁéá„Å®„ÇÇ„Å´ÂÑ™„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÅåÁ§∫„Åï„Çå„Åü„ÄÇÁ¨¨182ÂõûHCIÁ†îÁ©∂‰ºö„ÅßÁô∫Ë°®„Åó„ÄÅÂ≠¶ÁîüÂ•®Âä±Ë≥û„ÇíÂèóË≥û„ÄÇ‰øÆÂ£´Ë´ñÊñá„ÄÇ",implement:"ÂÆüÈ®ìÁî®„Ç∑„Çπ„ÉÜ„É†„Å®„Åó„Å¶„ÄÅAndroid„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÂÆüË£Ö„ÄÇGoogleÊó•Êú¨Ë™ûÂÖ•ÂäõAPI„Çí‰ΩøÁî®„Åó„Å¶„ÄÅÊº¢Â≠ó„Å™„Å©„ÅÆÊñáÂ≠óÂ§âÊèõ„ÇíË°å„Å£„Å¶„ÅÑ„Çã„ÄÇ",keywords:["Android","Human Computer Interaction","smartwatch","text input","flick-keyboard"],links:{"„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éö„Éº„Ç∏":"https://research.miyashita.com/papers/D218","ÂèóË≥û„Éö„Éº„Ç∏":"http://www.sighci.jp/contents/page/news","GoogleÊó•Êú¨Ë™ûÂÖ•ÂäõAPI":"https://www.google.co.jp/ime/cgiapi.html"}},{name:"Ichimonitto",sub:"„Éì„Éá„Ç™„ÉÅ„É£„ÉÉ„Éà„Çí„Åó„Å™„Åå„Çâ„ÇØ„Ç§„Ç∫Áï™ÁµÑÂΩ¢Âºè„ÅßÂõûÁ≠î„Åô„Çã‰∏ÄÂïè‰∏ÄÁ≠îÂ≠¶ÁøíÊîØÊè¥„Çµ„Éº„Éì„Çπ",img:"project-Ichimonitto-16-9",category:"Web",text:"Ëã±ÂçòË™û„ÇíÁü•„Å£„Å¶„ÅÑ„Å¶„ÇÇ„ÄÅÊ≠£Á¢∫„Å™Áô∫Èü≥„Åå„Åß„Åç„Å™„Åë„Çå„Å∞Áõ∏Êâã„Å´„ÅØ‰ºù„Çè„Çâ„Å™„ÅÑ„ÄÇ„Åù„Åì„Åß„ÄÅWebRTC„ÇíÂà©Áî®„Åó„Åü‰∏ÄÂïè‰∏ÄÁ≠îÂΩ¢Âºè„ÅÆÂ≠¶ÁøíÊîØÊè¥„Çµ„Éº„Éì„Çπ„ÇíÂà∂‰Ωú„Åó„Åü„ÄÇ„Ç´„É°„É©Êò†ÂÉè„Å®„Éú„Ç§„Çπ„ÉÅ„É£„ÉÉ„Éà„Å´„Çà„Å£„Å¶Èõ¢„Çå„ÅüÂ†¥ÊâÄ„Åß„ÇÇ‰∏ÄÁ∑í„Å´Â≠¶„Å∂„Åì„Å®„ÅåÂá∫Êù•„Çã„ÄÇÁîªÈù¢„Å´Ë°®Á§∫„Åï„Çå„ÅüÂçòË™û„ÅÆËã±Ë™û„Çí„ÅÑ„Å°Êó©„Åè„ÄÅ„Åã„Å§Ê≠£Á¢∫„Å´Áô∫Èü≥„Åß„Åç„Åü„ÇÇ„ÅÆ„Åå„Éù„Ç§„É≥„Éà„ÇíÁç≤Âæó„Åô„Çã„ÄÇCloud n „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Ç≥„É≥„ÉÜ„Çπ„Éà„ÅßWebRTCË≥û„ÇíÂèóË≥û„ÄÇ",implement:"„ÉÅ„Éº„É†„ÅßÂà∂‰Ωú„ÄÇ„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÇíÊãÖÂΩì„ÄÇGoogle Speech API„Çí‰Ωø„ÅÜ„Åì„Å®„Åß„ÄÅ„Åó„Å£„Åã„Çä„Å®Ë™çË≠ò„Åï„Çå„Çã„Çà„ÅÜ„Å™Ê≠£Á¢∫„Å™Áô∫Èü≥„Åß„ÅÆÂõûÁ≠î„ÅÆ„ÅøÊ≠£Ëß£„Å®„Åô„ÇãÁÇπ„Åå„Éù„Ç§„É≥„Éà„ÄÇÁèæÂú®Êé•Á∂ö„Åó„Å¶„ÅÑ„Çã„É¶„Éº„Ç∂„Å™„Å©„ÅÆÁÆ°ÁêÜ„Å´Skyway„ÅÆAPI„ÇíÂà©Áî®„ÄÇ",keywords:["Web RTC","quiz","video chat","Google Speech API"],links:{"ÂèóË≥û„Éö„Éº„Ç∏":"http://www.cloudn-service.com/cam04-deven/decon/tohyo/"}},{name:"GeoMelody",sub:"Áí∞Â¢ÉÈü≥„ÇíÈå≤Èü≥„Åó„Å¶„Éç„ÉÉ„Éà‰∏ä„Å´ÈõÜÁ¥Ñ„Åô„Çã„Çµ„Ç¶„É≥„Éâ„Çπ„Ç±„Éº„ÉóSNS",img:"project-GeoMelody-16-9",category:"Android",text:"‰ΩçÁΩÆÊÉÖÂ†±„Å®Áí∞Â¢ÉÈü≥„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Å¶ÁôªÈå≤„Åô„Çã„Çµ„Éº„Éì„Çπ„ÄÇÈ¢®ÊôØ„Å´„ÅØÈü≥„ÅåÊ¨†„Åã„Åõ„Å™„ÅÑ„Å®„ÅÑ„ÅÜËÄÉ„ÅàÊñπ„ÄÅ„Çµ„Ç¶„É≥„Éâ„Çπ„Ç±„Éº„Éó„Çí„Çµ„Éº„Éì„Çπ„Å®„Åó„Å¶ÁµÑ„ÅøËæº„Çì„Å†‰ΩúÂìÅ„ÄÇ„É¶„Éº„Ç∂„Åå„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„ÅßÁí∞Â¢ÉÈü≥„ÇíÈå≤Èü≥„Åô„Çã„Å®„ÄÅÈü≥Â£∞„ÇíGPS„ÇÑÊó•‰ªò„ÅÆÊÉÖÂ†±„Å®ÂÖ±„Å´„Çµ„Éº„Éê„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„ÄÅ„Éû„ÉÉ„Éó‰∏ä„ÅßÈñ≤Ë¶ß„Åô„Çã„Åì„Å®„ÅåÂá∫Êù•„Çã„ÄÇOpen Hack U 2014Áô∫Ë°®‰ΩúÂìÅ„ÄÇ",implement:"„ÉÅ„Éº„É†„ÅßÂà∂‰Ωú„ÄÇ„Ç¢„Éó„É™„ÅÆÂ§ßÈÉ®ÂàÜ„ÇíÊãÖÂΩì„Åó„Åü„ÄÇAndroid„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å®„Åó„Å¶ÂÆüË£Ö„ÄÇYahoo Map API„Çí‰ΩøÁî®„Åó„Å¶„ÄÅÈå≤Èü≥„Åï„Çå„ÅüÈü≥Â£∞„ÅÆ„Éû„ÉÉ„Éî„É≥„Ç∞„ÇíË°å„Å£„Å¶„ÅÑ„Çã„ÄÇ",keywords:["Android","soundscape","map","record","microphone","GPS"]},{name:"WristSlide",sub:"„Ç§„É°„Éº„Ç∏„Çª„É≥„Çµ„ÇíÁî®„ÅÑ„ÅüÊâãÈ¶ñ„ÇíÊªë„Çâ„Åõ„Çã„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅ„ÅÆÁâáÊâãÊìç‰Ωú",img:"project-WristSlide-16-9",category:"Android",video:"w9eHDKby8ro",text:"„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅ„Å´„Åä„ÅÑ„Å¶„ÄÅ„Çπ„ÉØ„Ç§„Éó„ÅÆ„Çà„ÅÜ„Å™ÈÄ£Á∂öÁöÑ„Å™ÂÖ•Âäõ„ÇíË°å„ÅÜ„Å´„ÅØ„ÄÅË£ÖÁùÄ„Åó„Å¶„ÅÑ„ÇãÊâã„Å®ÂèçÂØæ„ÅÆÊâã„ÅßÊìç‰Ωú„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÄÇ„Åù„Åì„Åß„ÄÅÊâãÈ¶ñ„ÇíÊú∫„ÇÑÂ£Å„ÄÅËá™Ë∫´„ÅÆË∫´‰Ωì„Å™„Å©„ÅÆ‰∏ä„ÅßÊªë„Çâ„Åõ„Çã„Åì„Å®„Å´„Çà„Å£„Å¶„ÄÅ„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅ„ÇíÁâáÊâã„ÅßÊìç‰Ωú„Åô„ÇãÊâãÊ≥ï„ÇíÊèêÊ°à„ÄÇ„Éê„É≥„Éâ‰∏ãÈÉ®„Å´Âüã„ÇÅËæº„Åæ„Çå„Åü„Ç§„É°„Éº„Ç∏„Çª„É≥„Çµ„Å´„Çà„Å£„Å¶„ÄÅÁâ©‰Ωì„Å´Êé•Âú∞„Åó„ÅüÁä∂ÊÖã„Åß„ÅÆÊâãÈ¶ñ„ÅÆÁßªÂãïÈáè„ÇíÂèñÂæó„Åó„ÄÅÁâáÊâã„Åß„ÅÆ2Ê¨°ÂÖÉÊñπÂêë„ÅÆÂÖ•Âäõ„ÇíÂèØËÉΩ„Å´„Åó„Åü„ÄÇ",implement:"Android„ÄÅWear OS„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Å®„Åó„Å¶ÂÆüË£Ö„ÄÇ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„Å®Ë∂ÖÂ∞èÂûã„ÉØ„Ç§„É§„É¨„Çπ„Éû„Ç¶„Çπ„Çí„Éö„Ç¢„É™„É≥„Ç∞„Åó„ÄÅËá™Á´ØÊú´„Å´ADB„Ç≥„Éû„É≥„Éâ„ÇíÁô∫Ë°å„Åô„Çã„Åì„Å®„Å´„Çà„Å£„Å¶„Éû„Ç¶„Çπ„Ç§„Éô„É≥„Éà„ÇíÁõ£Ë¶ñ„ÄÇ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„Å®„Éö„Ç¢„É™„É≥„Ç∞„Åï„Çå„Åü„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅ„Å´ÁßªÂãïÈáè„ÇíÈÄÅ‰ø°„Åó„Å¶„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÊìç‰Ωú„Åô„Çã„ÄÇ",keywords:["Android","Wear OS","Android Debug Bridge","Human Computer Interaction","smartwatch","image sensor","mouse"]},{name:"SoumuSSML",sub:"Ë¶ñË¶öÈöúÂÆ≥ËÄÖ„ÅÆ„Åü„ÇÅ„ÅÆÊñ∞„Åó„ÅÑÈõªÂ≠êÊõ∏Á±çÂΩ¢Âºè„Å´ÂØæÂøú„Åó„Åü„ÇØ„É©„Ç¶„ÉâÁ∑®ÈõÜ„Ç∑„Çπ„ÉÜ„É†",img:"project-SoumuSSML-16-9",category:"Web",text:"ÈõªÂ≠êÊõ∏Á±ç„ÇíË™≠„ÇÄÈöõ„Å™„Å©„Å´Áî®„ÅÑ„Çâ„Çå„Çã„ÄÅOSÁµÑ„ÅøËæº„Åø„ÅÆË™≠„Åø‰∏ä„ÅíÊ©üËÉΩ„Å´„ÅØ„Ç§„É≥„Éà„Éç„Éº„Ç∑„Éß„É≥„ÅÆÈñìÈÅï„ÅÑ„ÅåÊú™„Å†„Å´Â§ö„ÅèÊÆã„Å£„Å¶„ÅÑ„Çã„ÄÇ„Åù„ÅÆ„Åü„ÇÅÁèæÂú®„ÅØ„ÄÅÈü≥Â£∞ÂêàÊàê„Éû„Éº„ÇØ„Ç¢„ÉÉ„ÉóË®ÄË™ûSSML„ÇíÁî®„ÅÑ„Å¶„Ç§„É≥„Éà„Éç„Éº„Ç∑„Éß„É≥„ÇíÂá∫ÁâàÁ§æ„ÅÆ‰∫∫Èñì„ÅåÁ∑®ÈõÜ„Åó„ÄÅÂêàÊàê„Åï„Çå„ÅüÈü≥Â£∞„ÇíÈõªÂ≠êÊõ∏Á±ç„Å´ÂêåÂ∞Å„Åô„Çã„Å®„ÅÑ„ÅÜ„ÇÑ„ÇäÊñπ„Åå‰∏ÄËà¨ÁöÑ„Åß„ÅÇ„Çã„ÄÇ„Åù„Åì„Åß„ÄÅÈõªÂ≠êÊõ∏Á±ç„Å´Èü≥Â£∞„Éï„Ç°„Ç§„É´„Åß„ÅØ„Å™„Åè„Ç§„É≥„Éà„Éç„Éº„Ç∑„Éß„É≥„ÇíË®ò„Åó„Åü„Éá„Éº„Çø„ÇíÂêåÂ∞Å„Åô„ÇãÊñ∞„Åó„ÅÑÈõªÂ≠êÊõ∏Á±ç„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅÆÊèêÊ°à„ÇíË°å„Å£„Åü„ÄÇÂêåÊôÇ„Å´„ÄÅÂá∫ÁâàÁ§æ„ÅÆ‰∫∫Èñì„Åå„Ç§„É≥„Éà„Éç„Éº„Ç∑„Éß„É≥„ÇíÁ∑®ÈõÜ„Åó„ÄÅÈü≥Â£∞„Çí„Åù„ÅÆÈÉΩÂ∫¶Á¢∫Ë™ç„Åó„Å™„Åå„Çâ„ÇØ„É©„Ç¶„Éâ‰∏ä„ÅßÁ∑®ÈõÜ„Åô„Çã„Ç∑„Çπ„ÉÜ„É†„ÇíÊßãÁØâ„Åó„Åü„ÄÇÂÆüË®ºÂÆüÈ®ì„Å´„Çà„ÇäÂäπÊûúÁöÑ„Å™„ÉÑ„Éº„É´„Å®Ë™ç„ÇÅ„Çâ„Çå„ÄÅW3C„Å´„Çà„Å£„Å¶ÈõªÂ≠êÊõ∏Á±ç„ÅÆÂΩ¢ÂºèEPUB„ÅÆÊ¨°Êúü‰ªïÊßò„Å´Áõõ„ÇäËæº„Åæ„Çå„Åü„ÄÇÁ∑èÂãôÁúÅ„Å®„Ç¢„É´„Éê„Ç§„ÉàÂÖà„ÅÆÊÉ≥ÈöÜÁ§æ„Å®„ÅÆÂÖ±Âêå„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÄÇ",implement:"„ÉÅ„Éº„É†„ÅßÂà∂‰Ωú„ÄÇ„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÇíÊãÖÂΩì„Åó„Åü„ÄÇ„Çµ„Éº„Éê„ÅØPHP„ÅßÂÆüË£Ö„ÄÇ‰∏ª„Å™Ê©üËÉΩ„ÅØ‰ª•‰∏ã„ÅÆÈÄö„Çä„ÄÇÈõªÂ≠êÊõ∏Á±ç„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å®ÂàùÊúü„ÅÆÁô∫Èü≥Ë®òÂè∑„ÅÆËá™ÂãïÁîüÊàê„ÄÅÁ∑®ÈõÜ„Åó„ÅüÁô∫Èü≥Ë®òÂè∑Ôºà„Ç§„É≥„Éà„Éç„Éº„Ç∑„Éß„É≥„ÇíË°®„ÅôÔºâ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Å®DiffË°®Á§∫„ÄÅÁ∑®ÈõÜ„Åó„ÅüÈü≥Â£∞„Çí„Åù„ÅÆÂ†¥„ÅßÂÜçÁîü„ÄÅÊõ∏Á±çÂÜÖ„ÅÆÊñáÂ≠óÊ§úÁ¥¢„ÄÅÁ∑®ÈõÜËÄÖ„ÅÆÁ∑®ÈõÜÊ®©ÈôêÂ§âÊõ¥„ÄÅ„Ç≤„É©ÔºàÊ†°Ê≠£Áî®„ÅÆÂç∞Âà∑Ôºâ„ÅÆÂç∞Âà∑Ê©üËÉΩ„Å®„Ç≥„É°„É≥„Éà„ÅÆPDF„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÄÅÊõ∏Á±çÂÜÖ„ÅÆÁîªÂÉèË°®Á§∫„ÄÇ",keywords:["E-book","EPUB","SSML","W3C","co-authoring","version control"],links:{"ÂÆüË®ºÂÆüÈ®ìÂ†±ÂëäÊõ∏":"http://www.soumu.go.jp/main_content/000499711.pdf"}},{name:"BuddaBeautify",sub:"Â∑±„ÅÆÁ≤æÁ•û„ÇíÁ£®„Åè„Åì„Å®„ÅßË¶ã„ÅüÁõÆ„ÇÇÁæé„Åó„Åè„Å™„Çå„Çã„É°„Éá„Ç£„Ç¢„Ç¢„Éº„Éà‰ΩúÂìÅ",img:"project-BuddaBeautify-16-9",category:"Desktop",video:"X0SrajYh780",text:"Nam June Paik„Å´„Çà„ÇãTV-Buddha„Å´„Ç§„É≥„Çπ„Éë„Ç§„Ç¢„ÇíÂèó„Åë„ÄÅÂ∑±„ÅÆÁ≤æÁ•û„ÇíÁ£®„Åè„Åì„Å®„Å®ÁîªÂÉèÂá¶ÁêÜ„Å´„Çà„ÇãÁæéÈ°îÂåñ„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Åü‰ΩúÂìÅ„ÄÇ„Ç´„É°„É©„Å®„Éó„É≠„Ç∏„Çß„ÇØ„Çø„Å´„Çà„Å£„Å¶‰Ωú„Çâ„Çå„ÅüÊì¨‰ººÁöÑ„Å™Èè°„ÅÆÂâç„Åß„ÄÅ„É¶„Éº„Ç∂„ÅØÂ∫ßÁ¶Ö„ÇíË°å„ÅÜ„ÄÇË∫´‰Ωì„ÅÆ„Éñ„É¨„ÅåÂ∞ë„Å™„ÅÑÊôÇ„ÅØÂøÉ„ÅÆ‰π±„Çå„ÇÇÂ∞ë„Å™„ÅÑ„Å®Âà§Êñ≠„Åó„ÄÅÈè°„ÅÆËá™ÂàÜ„ÅÆÈ°î„Å´Âæê„ÄÖ„Å´ÁæéÈ°îÂåñÂá¶ÁêÜ„ÇíË°å„Å£„Å¶„ÅÑ„Åè„ÄÇ‰ΩìÈ®ìÊôÇÈñì„ÅØ1ÂàÜÁ®ãÂ∫¶„ÄÇ",implement:"„ÉÅ„Éº„É†„ÅßÂà∂‰Ωú„ÄÇProcessing„ÅßÂÆüË£Ö„ÄÇË∫´‰Ωì„Å´„Éñ„É¨„ÅÆÂ∫¶Âêà„ÅÑ„ÅØÂãï‰ΩìÈ®ìÁü•„Å´„Çà„Å£„Å¶Êï∞ÂÄ§Âåñ„Åô„Çã„ÄÇÂãï‰ΩìÊ§úÁü•„ÅÆÂÆüË£Ö„ÇíÊãÖÂΩì„ÄÇÈ°î„ÅÆÁæéÈ°îÂåñÂá¶ÁêÜ„Å´„ÅØ„ÄÅÈñ¢Â∑ù„Çâ[1]„ÅÆ„Ç¢„É´„Ç¥„É™„Ç∫„É†„ÇíÂà©Áî®„ÄÇ",keywords:["media art","motion detection","image processing"],links:{"Œµ-„Éï„Ç£„É´„Çø„ÇíÁî®„ÅÑ„Åü„É™„Ç¢„É´„Çø„Ç§„É†È°îÁîªÂÉèÁæéË¶≥Âåñ„Ç∑„Çπ„ÉÜ„É†":"https://www.ieice.org/iss/jpn/Publications/issposter_2015/data/pdf/ISS-P-78.pdf"}},{name:"Make if",sub:"„Ç´„Éº„Éâ„Çí‰∏¶„Åπ„Å¶ifÊñá„Çí„Å§„Åè„Çã„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞ÊïôËÇ≤„Ç´„Éº„Éâ„Ç≤„Éº„É†",img:"project-Makeif-16-9",category:"Design",text:"„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Çí„Åô„ÇãÊôÇ„Å´ÂøÖ„Åö‰Ωø„ÅÜ„ÄåifÊñá„Äç„Çí„Ç´„Éº„Éâ„ÅßÈÅä„Å≥„Å™„Åå„ÇâÂ≠¶„Åπ„Çã„Ç≤„Éº„É†„ÄÇ„ÉÜ„Ç≠„Çπ„Éà„Ç®„Éá„Ç£„Çø„ÇíÊ®°„Åó„Åü„Éó„É¨„Ç§„Éû„ÉÉ„Éà„ÅÆ‰∏ä„Å´È†ÜÁï™„Å´„Ç´„Éº„Éâ„ÇíÁΩÆ„ÅÑ„Å¶„ÅÑ„Åç„ÄÅifÊñá„ÅåÂÆåÊàê„Åô„Çã„Å®Êù°‰ª∂ÂàÜÂ≤ê„Å´„Çà„Å£„Å¶„Ç´„Éº„Éâ„ÇíÂºï„Åã„Å™„Åè„Å¶„ÅØ„Å™„Çâ„Å™„ÅÑ„ÄÇÊó©„ÅèÊâãÊú≠„Çí‰Ωø„ÅÑÂàá„Å£„Åü‰∫∫„ÅåÂãùÂà©„ÄÇ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Êú™ÁµåÈ®ìËÄÖ„Åß„ÇÇÈÅä„Å∂„Åì„Å®„ÅåÂèØËÉΩ„ÄÇ2017Âπ¥„Å´„Ç≤„Éº„É†„Éû„Éº„Ç±„ÉÉ„Éà„ÄÅÂèä„Å≥„Ç≥„Éü„ÉÉ„ÇØ„Éû„Éº„Ç±„ÉÉ„Éà„Å´„Å¶È†íÂ∏É„ÄÇ",implement:"„Ç¢„Éä„É≠„Ç∞„Ç≤„Éº„É†„Çµ„Éº„ÇØ„É´fumblewaalsÔºà„Éï„Ç°„É≥„Éñ„É´„ÉØ„Éº„É´„ÇπÔºâ„ÅßÂà∂‰Ωú„ÄÇ‰∏ª„Å´„Éá„Ç∂„Ç§„É≥„ÇíÊãÖÂΩì„ÄÇAdobe Illustrator„Çí‰ΩøÁî®„ÄÇ",keywords:["programming","card game","analog game"],links:{"ÂïÜÂìÅË©≥Á¥∞„Éö„Éº„Ç∏":"http://fumblewaals.com/portfolio/make-if/",fumblewaals:"http://fumblewaals.com"}}]},function(e,t,i){"use strict";i.r(t);var n,a,r,s,o=i(0),l=i.n(o),u=i(4),c=i.n(u),d=/^.+?\/\/+[^/]+/,f="EventListener",p="remove"+f,h="add"+f,v="hasAttribute",m="popstate",g="hashchange",b="trigger",w=3,y="undefined"!=typeof window&&window,x="undefined"!=typeof document&&document,k=y&&history,_=y&&(k.location||y.location),j=T.prototype,S=x&&x.ontouchstart?"touchstart":"click",M=c()(),A=!1,$=!1,C=[],O=0;function P(e){return e.split(/[/?#]/)}function N(e,t){var i=t.replace(/\?/g,"\\?").replace(/\*/g,"([^/?#]+?)").replace(/\.\./,".*"),r=new RegExp("^"+i+"$"),n=e.match(r);if(n)return n.slice(1)}function D(e){var t,i,r;t=W,i=1,n=function(){clearTimeout(r),r=setTimeout(t,i)},y[h](m,n),y[h](g,n),x[h](S,z),e&&W(!0)}function T(){this.$=[],c()(this),M.on("stop",this.s.bind(this)),M.on("emit",this.e.bind(this))}function I(e){return e.replace(/^\/|\/$/,"")}function L(e){return"string"==typeof e}function E(e){return(e||_.href).replace(d,"")}function H(e){var t=F._.base;return"#"===t[0]?(e||_.href||"").split(t)[1]||"":(_?E(e):e||"").replace(t,"")}function W(t){var e=0===O;if(!(w<=O)&&(O++,C.push(function(){var e=H();!t&&e===a||(M[b]("emit",e),a=e)}),e)){for(var i;i=C.shift();)i();O=0}}function z(e){if(!(1!==e.which||e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){for(var t=e.target;t&&"A"!==t.nodeName;)t=t.parentNode;if(t&&"A"===t.nodeName&&!t[v]("download")&&t[v]("href")&&(!t.target||"_self"===t.target)&&-1!==t.href.indexOf(_.href.match(d)[0])){var i=F._.base;t.href!==_.href&&(t.href.split("#")[0]===_.href.split("#")[0]||"#"!==i[0]&&0!==E(t.href).indexOf(i)||"#"===i[0]&&t.href.split(i)[0]!==_.href.split(i)[0]||!R(H(t.href),t.title||x.title))||e.preventDefault()}}}function R(e,t,i){return k?(e=F._.base+I(e),t=t||x.title,i?k.replaceState(null,t,e):k.pushState(null,t,e),x.title=t,$=!1,W(),$):M[b]("emit",H(e))}j.m=function(e,t,i){!L(e)||t&&!L(t)?t?this.r(e,t):this.r("@",e):R(e,t,i||!1)},j.s=function(){this.off("*"),this.$=[]},j.e=function(i){this.$.concat("@").some(function(e){var t=("@"===e?r:s)(I(i),I(e));if(void 0!==t)return this[b].apply(null,[e].concat(t)),$=!0},this)},j.r=function(e,t){"@"!==e&&(e="/"+I(e),this.$.push(e)),this.on(e,t)};var B=new T,F=B.m.bind(B);F._={base:null,getPathFromBase:H},F.create=function(){var e=new T,t=e.m.bind(e);return t.stop=e.s.bind(e),t},F.base=function(e){F._.base=e||"#",a=H()},F.exec=function(){W(!0)},F.parser=function(e,t){e||t||(r=P,s=N),e&&(r=e),t&&(s=t)},F.query=function(){var r={};return(_.href||a).replace(/[?&](.+?)=([^&]*)/g,function(e,t,i){r[t]=i}),r},F.stop=function(){A&&(y&&(y[p](m,n),y[p](g,n),x[p](S,z)),M[b]("stop"),A=!1)},F.start=function(e){A||(y&&("interactive"===document.readyState||"complete"===document.readyState?D(e):document.onreadystatechange=function(){"interactive"===document.readyState&&setTimeout(function(){D(e)},1)}),A=!0)},F.base(),F.parser();var V=F;l.a.tag2("router","<yield></yield>","","",function(e){var i=this;this.route=V.create(),this.select=function(t){[].concat(i.tags.route).forEach(function(e){return e.show=e===t})},this.on("mount",function(){window.setTimeout(function(){return V.start(!0)},0)}),this.on("unmount",function(){i.route.stop()})}),l.a.tag2("route",'<virtual if="{show}"><yield></yield></virtual>',"","",function(e){var r=this;this.show=!1;function t(){for(var i=[],e=arguments.length;e--;)i[e]=arguments[e];r.one("updated",function(){var t;t=r.tags,Object.keys(t).map(function(e){return t[e]}).reduce(function(e,t){return e.concat(t)},[]).forEach(function(e){e.trigger.apply(e,["route"].concat(i)),e.update()})}),r.parent.select(r),r.parent.update()}var i=window&&window.route&&window.route._?window.route._.getPathFromBase:function(){return""};e.path===i()&&setTimeout(t,0),this.parent.route(e.path,t)});t.default=V},function(e,t,i){"use strict";var r=a(i(0)),n=a(i(1));a(i(11));function a(e){return e&&e.__esModule?e:{default:e}}r.default.mount(".root","app"),n.default.init()},function(e,t,i){"use strict";r(i(9)),r(i(12)),r(i(20)),r(i(24)),r(i(25)),r(i(27));function r(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("app",'<router> <route path=""> <top></top> </route> <route path="profile.."> <profile></profile> </route> <route path="projects/*"> <projectdetail></projectDetail> </route> <route path="projects.."> <projectall></projectAll> </route> <route path=".."> <other></other> </route> </router>',"","",function(e){})},function(e,t,i){"use strict";r(i(13)),r(i(14)),r(i(6)),r(i(7)),r(i(16)),r(i(17)),r(i(18)),r(i(19));function r(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("top",'<first></first> <section> <div class="container"> <h2 class="section-title">About Me</h2> <about></about> <more text="detail" title="View detailed profile" link="#profile"></more> </div> </section> <section> <div class="container"> <h2 class="section-title">Projects</h2> <projects limit="3"></projects> <more title="View all projects" link="#projects"></more> </div> </section> <section> <div class="container"> <h2 class="section-title">Awards</h2> <awards></awards> <h2 class="section-title">Publications</h2> <publications></publications> <h2 class="section-title">Clubs</h2> <clubs></clubs> </div> </section> <footer></footer>','top,[data-is="top"]{ display: block; min-height: 100vh; } top > section:nth-child(2n),[data-is="top"] > section:nth-child(2n){ background: #2b2b2b; color: #efefef; } top > section:nth-child(2n+1),[data-is="top"] > section:nth-child(2n+1){ background: #eeeeee; color: #222222; }',"",function(e){this.on("route",function(){var e=window.location.hash;void 0===window.scrolls[""+e]?window.scroll(0,0):window.scroll(0,window.scrolls[""+e])})})},function(e,t,i){"use strict";var r,n=i(5);(r=n)&&r.__esModule;i(0).tag2("first",'<nav></nav> <div class="container"> <h1>Raika Toriyama</h1> <p> Web / Android Developer</p> <social></social> </div> <div class="container"> <div class="arrow"><i class="fas fa-chevron-down fa-3x"></i></div> </div>','first,[data-is="first"]{ text-align: center; background: #1a1819; color: white; min-height: 100vh; display: flex; flex-direction: column; justify-content: space-around; } first > nav,[data-is="first"] > nav{ margin: 0 auto; width: 100%; max-width: calc(1200px * 0.8); line-height: 3rem; } first > nav > ul,[data-is="first"] > nav > ul{ display: flex; justify-content: space-around; } first > nav > ul > li,[data-is="first"] > nav > ul > li{ display: inline-block; } first > .container > h1,[data-is="first"] > .container > h1{ font-size: calc(1.0rem + 250%); margin: 0; } first > .container > p,[data-is="first"] > .container > p{ font-size: 1.5rem; font-family: serif; margin-top: 1rem; } first > .container .arrow,[data-is="first"] > .container .arrow{ display: inline-block; } @media (max-width: 768px) { first .container > h1,[data-is="first"] .container > h1{ font-size: 2.5rem; } first .container > p,[data-is="first"] .container > p{ font-size: 1.2rem; margin-top: 0.5rem; } }',"",function(e){})},function(e,t,i){"use strict";var r,n=i(5);(r=n)&&r.__esModule;i(0).tag2("footer",'<div class="container"> <social></social> <p>¬© 2018 pvcresin</p> </div>','footer,[data-is="footer"]{ display: block; background: #0f0f0f; color: white; } footer > .container,[data-is="footer"] > .container{ text-align: center; padding: 1rem 0; } footer > .container > p,[data-is="footer"] > .container > p{ color: #525252; padding-bottom: 1rem; }',"",function(e){})},function(e,t,i){e.exports=function(){"use strict";var l="millisecond",p="second",h="minute",v="hour",m="day",g="week",b="month",u="quarter",w="year",n=/^(\d{4})-?(\d{1,2})-?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d{1,3})?$/,y=/\[([^\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,a=function(e,t,i){var r=String(e);return!r||r.length>=t?e:""+Array(t+1-r.length).join(i)+e},e={s:a,z:function(e){var t=-e.utcOffset(),i=Math.abs(t),r=Math.floor(i/60),n=i%60;return(t<=0?"+":"-")+a(r,2,"0")+":"+a(n,2,"0")},m:function(e,t){var i=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(i,b),n=t-r<0,a=e.clone().add(i+(n?-1:1),b);return Number(-(i+(t-r)/(n?r-a:a-r))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(e){return{M:b,y:w,w:g,d:m,D:"date",h:v,m:h,s:p,ms:l,Q:u}[e]||String(e||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},t={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},s="en",o={};o[s]=t;var c=function(e){return e instanceof k},d=function(e,t,i){var r;if(!e)return s;if("string"==typeof e)o[e]&&(r=e),t&&(o[e]=t,r=e);else{var n=e.name;o[n]=e,r=n}return!i&&r&&(s=r),r||!i&&s},f=function(e,t,i){if(c(e))return e.clone();var r=t?"string"==typeof t?{format:t,pl:i}:t:{};return r.date=e,new k(r)},x=e;x.l=d,x.i=c,x.w=function(e,t){return f(e,{locale:t.$L,utc:t.$u,$offset:t.$offset})};var k=function(){function e(e){this.$L=this.$L||d(e.locale,null,!0),this.parse(e)}var t=e.prototype;return t.parse=function(e){this.$d=function(e){var t=e.date,i=e.utc;if(null===t)return new Date(NaN);if(x.u(t))return new Date;if(t instanceof Date)return new Date(t);if("string"==typeof t&&!/Z$/i.test(t)){var r=t.match(n);if(r)return i?new Date(Date.UTC(r[1],r[2]-1,r[3]||1,r[4]||0,r[5]||0,r[6]||0,r[7]||0)):new Date(r[1],r[2]-1,r[3]||1,r[4]||0,r[5]||0,r[6]||0,r[7]||0)}return new Date(t)}(e),this.init()},t.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},t.$utils=function(){return x},t.isValid=function(){return!("Invalid Date"===this.$d.toString())},t.isSame=function(e,t){var i=f(e);return this.startOf(t)<=i&&i<=this.endOf(t)},t.isAfter=function(e,t){return f(e)<this.startOf(t)},t.isBefore=function(e,t){return this.endOf(t)<f(e)},t.$g=function(e,t,i){return x.u(e)?this[t]:this.set(i,e)},t.year=function(e){return this.$g(e,"$y",w)},t.month=function(e){return this.$g(e,"$M",b)},t.day=function(e){return this.$g(e,"$W",m)},t.date=function(e){return this.$g(e,"$D","date")},t.hour=function(e){return this.$g(e,"$H",v)},t.minute=function(e){return this.$g(e,"$m",h)},t.second=function(e){return this.$g(e,"$s",p)},t.millisecond=function(e){return this.$g(e,"$ms",l)},t.unix=function(){return Math.floor(this.valueOf()/1e3)},t.valueOf=function(){return this.$d.getTime()},t.startOf=function(e,t){var r=this,n=!!x.u(t)||t,i=x.p(e),a=function(e,t){var i=x.w(r.$u?Date.UTC(r.$y,t,e):new Date(r.$y,t,e),r);return n?i:i.endOf(m)},s=function(e,t){return x.w(r.toDate()[e].apply(r.toDate(),(n?[0,0,0,0]:[23,59,59,999]).slice(t)),r)},o=this.$W,l=this.$M,u=this.$D,c="set"+(this.$u?"UTC":"");switch(i){case w:return n?a(1,0):a(31,11);case b:return n?a(1,l):a(0,l+1);case g:var d=this.$locale().weekStart||0,f=(o<d?o+7:o)-d;return a(n?u-f:u+(6-f),l);case m:case"date":return s(c+"Hours",0);case v:return s(c+"Minutes",1);case h:return s(c+"Seconds",2);case p:return s(c+"Milliseconds",3);default:return this.clone()}},t.endOf=function(e){return this.startOf(e,!1)},t.$set=function(e,t){var i,r=x.p(e),n="set"+(this.$u?"UTC":""),a=(i={},i[m]=n+"Date",i.date=n+"Date",i[b]=n+"Month",i[w]=n+"FullYear",i[v]=n+"Hours",i[h]=n+"Minutes",i[p]=n+"Seconds",i[l]=n+"Milliseconds",i)[r],s=r===m?this.$D+(t-this.$W):t;if(r===b||r===w){var o=this.clone().set("date",1);o.$d[a](s),o.init(),this.$d=o.set("date",Math.min(this.$D,o.daysInMonth())).toDate()}else a&&this.$d[a](s);return this.init(),this},t.set=function(e,t){return this.clone().$set(e,t)},t.get=function(e){return this[x.p(e)]()},t.add=function(i,e){var t,r=this;i=Number(i);var n=x.p(e),a=function(e){var t=f(r);return x.w(t.date(t.date()+Math.round(e*i)),r)};if(n===b)return this.set(b,this.$M+i);if(n===w)return this.set(w,this.$y+i);if(n===m)return a(1);if(n===g)return a(7);var s=(t={},t[h]=6e4,t[v]=36e5,t[p]=1e3,t)[n]||1,o=this.$d.getTime()+i*s;return x.w(o,this)},t.subtract=function(e,t){return this.add(-1*e,t)},t.format=function(e){var n=this;if(!this.isValid())return"Invalid Date";var a=e||"YYYY-MM-DDTHH:mm:ssZ",i=x.z(this),t=this.$locale(),r=this.$H,s=this.$m,o=this.$M,l=t.weekdays,u=t.months,c=function(e,t,i,r){return e&&(e[t]||e(n,a))||i[t].substr(0,r)},d=function(e){return x.s(r%12||12,e,"0")},f=t.meridiem||function(e,t,i){var r=e<12?"AM":"PM";return i?r.toLowerCase():r},p={YY:String(this.$y).slice(-2),YYYY:this.$y,M:o+1,MM:x.s(o+1,2,"0"),MMM:c(t.monthsShort,o,u,3),MMMM:u[o]||u(this,a),D:this.$D,DD:x.s(this.$D,2,"0"),d:String(this.$W),dd:c(t.weekdaysMin,this.$W,l,2),ddd:c(t.weekdaysShort,this.$W,l,3),dddd:l[this.$W],H:String(r),HH:x.s(r,2,"0"),h:d(1),hh:d(2),a:f(r,s,!0),A:f(r,s,!1),m:String(s),mm:x.s(s,2,"0"),s:String(this.$s),ss:x.s(this.$s,2,"0"),SSS:x.s(this.$ms,3,"0"),Z:i};return a.replace(y,function(e,t){return t||p[e]||i.replace(":","")})},t.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},t.diff=function(e,t,i){var r,n=x.p(t),a=f(e),s=6e4*(a.utcOffset()-this.utcOffset()),o=this-a,l=x.m(this,a);return l=(r={},r[w]=l/12,r[b]=l,r[u]=l/3,r[g]=(o-s)/6048e5,r[m]=(o-s)/864e5,r[v]=o/36e5,r[h]=o/6e4,r[p]=o/1e3,r)[n]||o,i?l:x.a(l)},t.daysInMonth=function(){return this.endOf(b).$D},t.$locale=function(){return o[this.$L]},t.locale=function(e,t){if(!e)return this.$L;var i=this.clone(),r=d(e,t,!0);return r&&(i.$L=r),i},t.clone=function(){return x.w(this.$d,this)},t.toDate=function(){return new Date(this.valueOf())},t.toJSON=function(){return this.isValid()?this.toISOString():null},t.toISOString=function(){return this.$d.toISOString()},t.toString=function(){return this.$d.toUTCString()},e}();return f.prototype=k.prototype,f.extend=function(e,t){return e(t,k,f),f},f.locale=d,f.isDayjs=c,f.unix=function(e){return f(1e3*e)},f.en=o[s],f.Ls=o,f}()},function(e,t,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("awards",'<list items="{awards}"></list>',"","",function(e){this.awards=[{date:"2015-05",title:"Cloud n „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Ç≥„É≥„ÉÜ„Çπ„Éà",texts:["WebRTCË≥û ÂèóË≥û","„ÉÅ„Éº„É†ÔºöÊÑèË≠ò‰∏≠„Åè„Çâ„ÅÑ„Å®„Åó„Å¶ÂèÇÂä†","„Éó„É≠„Ç∏„Çß„ÇØ„Éà: Ichimonitto"],link:"http://www.cloudn-service.com/cam04-deven/decon/tohyo/"},{date:"2017-12",title:"‰ø°Â∑ûÊú™Êù•„Ç¢„Éó„É™„Ç≥„É≥„ÉÜ„Çπ„Éà0",texts:["‰ø°Ë∂äÊÉÖÂ†±ÈÄö‰ø°ÊááË´á‰ºö‰ºöÈï∑Ë≥û ÂèóË≥û","„ÉÅ„Éº„É†ÔºöÊÑèË≠ò‰∏≠„Åè„Çâ„ÅÑ„Å®„Åó„Å¶ÂèÇÂä†","„Éó„É≠„Ç∏„Çß„ÇØ„Éà: MiddleDrive"],link:"https://shinshu-futureapp.net/information/contest/"},{date:"2010-03",title:"Á¨¨182Âõû HCIÁ†îÁ©∂‰ºö",texts:["Â≠¶ÁîüÂ•®Âä±Ë≥û ÂèóË≥û","„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅÂêë„Åë„ÅÆ„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Ç≠„Éº„Éú„Éº„Éâ„Å´Èñ¢„Åô„ÇãÁ†îÁ©∂Ôºà‰øÆÂ£´Ë´ñÊñáÔºâ","„Éó„É≠„Ç∏„Çß„ÇØ„Éà: InvisibleFlick"],link:"http://www.sighci.jp/contents/page/news"}]})},function(e,t,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("publications",'<list items="{publications}"></list>',"","",function(e){this.publications=[{date:"2015-12",title:"SensorPipe",texts:["È≥•Â±± „Çâ„ÅÑ„Åã, ÂÆÆ‰∏ã Ëä≥Êòé. SensorPipe: „Çπ„Éû„Éº„Éà„Éï„Ç©„É≥ÂÅ¥„ÅÆ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Çí‰∏ÄÂàáË°å„Çè„Å™„ÅÑ„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥ÈÄ£Êê∫„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞, Á¨¨23Âõû„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Çπ„ÉÜ„É†„Å®„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Å´Èñ¢„Åô„Çã„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„ÉóË´ñÊñáÈõÜ (WISS 2015), 2015."],link:"https://research.miyashita.com/2015/D160/"},{date:"2018-03",title:"„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Éë„ÉÉ„Ç±„Éº„Ç∏",texts:["Âä†Ëó§ÈÇ¶Êãì, ËñÑÁæΩÂ§ßÊ®π, È≥•Â±±„Çâ„ÅÑ„Åã, Á´πÂÜÖ„Åæ„ÇÜ, ÈáéÂ¥éÁé≤ÈÇ£, Á¥∞Ë∞∑ÁæéÊúà, ÂÆÆ‰∏ãËä≥Êòé. „Çø„ÉÉ„ÉÅ„Éë„Éç„É´„ÇíÊã°Âºµ„Åô„ÇãÁ¥ôË£Ω„Ç§„É≥„Çø„Éï„Çß„Éº„Çπ„ÇíÊê≠Ëºâ„Åó„Åü„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÈñãÁô∫, „Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥2018Ë´ñÊñáÈõÜ, pp.889-894, 2018."],link:"https://research.miyashita.com/2018/D193/"},{date:"2018-09",title:"ÈÄèÊòé„Ç≠„Éº„Éú„Éº„Éâ",texts:["È≥•Â±±„Çâ„ÅÑ„Åã, ÂÆÆ‰∏ãËä≥Êòé. „Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅÂêë„Åë„ÅÆ„Ç≠„Éº„Éà„ÉÉ„Éó„ÅåÈÄèÊòé„Å™Êó•Êú¨Ë™û„Åã„Å™ÂÖ•Âäõ„Ç§„É≥„Çø„Éï„Çß„Éº„Çπ, Á¨¨26Âõû„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Çπ„ÉÜ„É†„Å®„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„Å´Èñ¢„Åô„Çã„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„ÉóË´ñÊñáÈõÜ (WISS 2018), 2018."],link:"https://research.miyashita.com/papers/D202"},{date:"2019-03",title:"InvisibleFlick",texts:["È≥•Â±±„Çâ„ÅÑ„Åã, ÂÆÆ‰∏ãËä≥Êòé. InvisibleFlick: Â∞èÂûã„Çø„ÉÉ„ÉÅ„Çπ„ÇØ„É™„Éº„É≥Á´ØÊú´„Å´„Åä„Åë„Çã„Ç≠„Éº„Éà„ÉÉ„Éó„ÅåÈÄèÊòé„Å™Êó•Êú¨Ë™ûÂÖ•Âäõ„Ç≠„Éº„Éú„Éº„Éâ, Á†îÁ©∂Â†±Âëä„Éí„É•„Éº„Éû„É≥„Ç≥„É≥„Éî„É•„Éº„Çø„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥(HCI), Vol.2019-HCI-182, Issue.27, pp. 1-8, 2019."],link:"https://research.miyashita.com/papers/D218"}]})},function(e,t,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("clubs",'<list items="{clubs}"></list>',"","",function(e){this.clubs=[{date:"2013-04 - 2017-03",title:"Á∑èÂêà„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰Ωú„Çµ„Éº„ÇØ„É´",texts:["„Éá„Ç∏„Çø„É´„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰ΩúÔºàÈü≥Ê•Ω„ÉªÂãïÁîª„Éª„Ç≤„Éº„É†„Éª„Ç§„É©„Çπ„Éà„ÉªÊñáËä∏Ôºâ„ÇíË°å„ÅÜÂ§ßÂ≠¶ÂÜÖ„ÅÆ„Çµ„Éº„ÇØ„É´","Âêå‰∫∫„Ç§„Éô„É≥„Éà„Åß„ÅÆÈ†íÂ∏ÉÔºà„Ç≥„Éü„ÉÉ„ÇØ„Éû„Éº„Ç±„ÉÉ„Éà„ÉªM3Ôºâ","Ë®≠Á´ã„É°„É≥„Éê„ÉºÔºÜÂππ‰∫ãÈï∑"],link:"https://sokon.jp/"},{date:"2016-04 - 2017-06",title:"Nakano Computer Club",texts:["„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Å´Èñ¢„Åô„ÇãÊÉÖÂ†±ÂÖ±Êúâ„ÇÑÂãâÂº∑‰ºö„ÅÆÂÆüÊñΩ„ÇíË°å„ÅÜÂ§ßÂ≠¶ÂÜÖ„ÅÆ„Çµ„Éº„ÇØ„É´","Âêå‰∫∫„Ç§„Éô„É≥„Éà„Åß„ÅÆÈ†íÂ∏ÉÔºà„Ç≥„Éü„ÉÉ„ÇØ„Éû„Éº„Ç±„ÉÉ„Éà„ÉªÊäÄË°ìÊõ∏ÂÖ∏Ôºâ"],link:"https://meiji-ncc.tech/"},{date:"2017-04 - 2019-03",title:"fumble waals",texts:["„Ç™„É™„Ç∏„Éä„É´„Éú„Éº„Éâ„Ç≤„Éº„É†„ÅÆÂà∂‰Ωú„ÇíË°å„ÅÜÊúâÂøó„Å´„Çà„Çã„Çµ„Éº„ÇØ„É´","Âêå‰∫∫„Ç§„Éô„É≥„Éà„Åß„ÅÆÈ†íÂ∏ÉÔºà„Ç≥„Éü„ÉÉ„ÇØ„Éû„Éº„Ç±„ÉÉ„Éà„Éª„Ç≤„Éº„É†„Éû„Éº„Ç±„ÉÉ„ÉàÔºâ","‰ºÅÁîª„Åã„ÇâÂà∂‰Ωú„ÄÅË≤©Â£≤„Åæ„ÅßË°å„ÅÜ„Åå„ÄÅ‰∏ª„Å´„Éá„Ç∂„Ç§„É≥„ÇíÊãÖÂΩì"],link:"http://fumblewaals.com/"}]})},function(e,t,i){"use strict";i(0).tag2("more",'<a href="{opts.link}" title="{opts.title}"><span class="more-button">{text}</span></a>','more,[data-is="more"]{ padding: 0 1.5rem 1.5rem 1.5rem; display: flex; justify-content: center; } more > a > span,[data-is="more"] > a > span{ padding: 0.5rem; background: grey; color: white; border-radius: 3rem; min-width: 10rem; text-align: center; display: block; } more > a > span:hover,[data-is="more"] > a > span:hover{ background: #a3a3a3; }',"",function(e){this.text=void 0!==this.opts.text?this.opts.text:"more"})},function(e,t,i){"use strict";n(i(6)),n(i(21)),n(i(22)),n(i(23));var r=n(i(1));function n(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("profile",'<section> <div class="container"> <h2 class="section-title">Profile</h2> <about></about> <like></like> <skills></skills> <education></education> </div> </section> <footer></footer>','profile,[data-is="profile"]{ display: block; background: #2b2b2b; color: #efefef; }',"",function(e){this.on("route",function(){r.default.move()})})},function(e,t,i){"use strict";var r,n=i(2);(r=n)&&r.__esModule;i(0).tag2("education",'<h2 class="section-title">Education</h2> <list items="{schools}"></list>',"","",function(e){this.schools=[{date:"2010-04 - 2013-03",title:"Êú¨ÈÉ∑È´òÁ≠âÂ≠¶Ê†°",texts:["Êù±‰∫¨„ÉªÂ∑£È¥®„Å´„ÅÇ„ÇãÁßÅÁ´ã„ÅÆ‰∏≠È´ò‰∏ÄË≤´Ê†°","ÁîüÂæí‰ºö„ÉªÊñôÁêÜÁ†îÁ©∂‰ºö„ÉªÁæéË°ìÈÉ®„Å´ÊâÄÂ±û"],link:"http://www.hongo.ed.jp/"},{date:"2013-04 - 2017-03",title:"ÊòéÊ≤ªÂ§ßÂ≠¶",texts:["Á∑èÂêàÊï∞ÁêÜÂ≠¶ÈÉ® ÂÖàÁ´Ø„É°„Éá„Ç£„Ç¢„Çµ„Ç§„Ç®„É≥„ÇπÂ≠¶Áßë 1ÊúüÁîü","PC„Åß„Ç≥„É≥„ÉÜ„É≥„ÉÑÂà∂‰Ωú„Çí„Åô„Çã„Çµ„Éº„ÇØ„É´„ÇíÁ´ã„Å°‰∏ä„Åí„ÄÅÂππ‰∫ãÈï∑„ÇíÂãô„ÇÅ„Çã"],link:"http://www.meiji.ac.jp/ims/subject/fms/"},{date:"2017-04 - 2019-03",title:"ÊòéÊ≤ªÂ§ßÂ≠¶Â§ßÂ≠¶Èô¢",texts:["ÂÖàÁ´ØÊï∞ÁêÜÁßëÂ≠¶Á†îÁ©∂Áßë ÂÖàÁ´Ø„É°„Éá„Ç£„Ç¢„Çµ„Ç§„Ç®„É≥„ÇπÂ∞ÇÊîª ‰øÆÂ£´ÔºàÂ∑•Â≠¶Ôºâ","„É¢„Éê„Ç§„É´ / „Ç¶„Çß„Ç¢„É©„Éñ„É´„Éá„Éê„Ç§„Çπ„Å´Èñ¢„Åô„Çã„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÅÆÁ†îÁ©∂","„Ç¢„É´„Éê„Ç§„Éà„Åß„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Ç®„É≥„Ç∏„Éã„Ç¢„Å®„Åó„Å¶ÂÉç„Åè"],link:"http://www.meiji.ac.jp/ams/professor/FMS.html"}]})},function(e,t,i){"use strict";i(0).tag2("skills",'<h2 class="section-title">Skills</h2> <div class="pure-g"> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills1}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills2}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> </div>','skills > div,[data-is="skills"] > div{ padding: 0.75rem; } skills > div .skill-box,[data-is="skills"] > div .skill-box{ padding: 0.75rem; } skills > div .skill-box > li,[data-is="skills"] > div .skill-box > li{ margin-bottom: 1.2rem; } skills > div .skill-box > li .skill-info,[data-is="skills"] > div .skill-box > li .skill-info{ display: flex; justify-content: space-between; align-items: baseline; } skills > div .skill-box > li .name,[data-is="skills"] > div .skill-box > li .name{ font-size: 1.3em; margin-right: 0.5rem; font-weight: 300; } skills > div .skill-box > li .sub,[data-is="skills"] > div .skill-box > li .sub{ font-size: 0.85rem; color: #bdbdbd; } skills > div .skill-box > li .bar,[data-is="skills"] > div .skill-box > li .bar{ background: #4b4b4b; border-radius: 1rem; } skills > div .skill-box > li .bar .level,[data-is="skills"] > div .skill-box > li .bar .level{ height: 0.7rem; border-radius: 1rem; background: #eaeaea; }',"",function(e){this.skills=[{name:"Android",sub:"Rx Okhttp Retrofit",level:"70%"},{name:"Kotlin",sub:"Anko Ktor",level:"80%"},{name:"Java",sub:"",level:"85%"},{name:"Processing",sub:"",level:"90%"}],this.skills1=[{name:"HTML",sub:"Pug Markdown",level:"90%"},{name:"CSS",sub:"Sass PostCSS CSS-Modules",level:"85%"},{name:"JavaScript",sub:"React Vue Node",level:"90%"},{name:"PHP",sub:"",level:"40%"}],this.skills2=[{name:"Git",sub:"",level:"60%"},{name:"Illustrator",sub:"",level:"80%"},{name:"Cacoo",sub:"",level:"40%"},{name:"Prott",sub:"",level:"30%"}]})},function(e,t,i){"use strict";i(0).tag2("like",'<h2 class="section-title">Like</h2> <div class="pure-g"> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Do</h3> <hr> <ul> <li each="{t, i in do}">{l}<span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Watch</h3> <hr> <ul> <li each="{t, i in watch}"><span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Eat</h3> <hr> <ul> <li each="{t, i in eat}"><span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> </div>','like,[data-is="like"]{ display: block; } like > div,[data-is="like"] > div{ padding: 0.75rem; } like > div .like-box,[data-is="like"] > div .like-box{ padding: 0.75rem; } like > div .like-box .like,[data-is="like"] > div .like-box .like{ background: #414141; padding: 0.6rem 1rem; border-radius: 0.3rem; } like > div .like-box .like h3,[data-is="like"] > div .like-box .like h3{ font-size: 1.4rem; margin-bottom: 0.5rem; } like > div .like-box .like hr,[data-is="like"] > div .like-box .like hr{ border-radius: 1rem; margin: 0.5rem 0; border: 1.5px solid; border-color: grey; background: gray; } like > div .like-box .like ul li,[data-is="like"] > div .like-box .like ul li{ line-height: 2rem; } like > div .like-box .like ul li .icon,[data-is="like"] > div .like-box .like ul li .icon{ font-size: 1.4rem; width: 2rem; display: inline-flex; justify-content: center; } like > div .like-box .like ul li .text,[data-is="like"] > div .like-box .like ul li .text{ font-size: 1.2rem; }',"",function(e){this.do={"üíª":"„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞","üëü":"Êï£Ê≠©","üé§":"‰∏Ä‰∫∫„Ç´„É©„Ç™„Ç±","üöó":"„Éü„Éã„ÉÅ„É•„Ç¢ÈõÜ„ÇÅ"},this.watch={"üé¨":"Êò†Áîª","üòÜ":"„ÅäÁ¨ë„ÅÑ„Éç„Çø","üëñ":"Êúç","üì∫":"„É°„Éá„Ç£„Ç¢„Ç¢„Éº„Éà"},this.eat={"üç£":"ÂØøÂè∏","üçï":"„Éî„Ç∂","üçú":"„É©„Éº„É°„É≥","üç∞":"„Ç±„Éº„Ç≠"}})},function(e,t,i){"use strict";a(i(7));var r=a(i(9)),n=a(i(1));function a(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projectall",'<section> <div class="container"> <h2 class="section-title">Projects</h2> <ul><a each="{p in categories}" onclick="{click.bind(this, p)}"> <li if="{selectedCategory !== p}">{p}</li> <li class="selected" if="{selectedCategory === p}">{p}</li></a></ul> <projects category="{selectedCategory}"></projects> </div> </section> <footer></footer>','projectall > section,[data-is="projectall"] > section{ background: #eeeeee; color: #222222; min-height: 100vh; } projectall > section .container ul,[data-is="projectall"] > section .container ul{ display: flex; justify-content: space-between; max-width: 400px; padding: 0 1.5rem; margin: 1rem auto 0 auto; } projectall > section .container ul li,[data-is="projectall"] > section .container ul li{ font-size: 0.8rem; display: inline-block; color: gray; padding: 0.5rem 0.5rem; cursor: pointer; border: 1px solid; border-radius: 2rem; text-align: center; } projectall > section .container ul li.selected,[data-is="projectall"] > section .container ul li.selected{ color: white; background: gray; border-color: gray; }',"",function(e){var t=this;this.categories=["All","Android","Web","Desktop","Design"],this.selectedCategory,this.on("route",function(){void 0!==r.default.query().category?t.update({selectedCategory:r.default.query().category}):t.update({selectedCategory:t.categories[0]}),n.default.move()}),this.click=function(e){this.update({selectedCategory:e})}.bind(this)})},function(e,t,i){"use strict";a(i(26));var r=a(i(8)),n=(a(i(3)),a(i(1)));function a(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projectdetail",'<div class="container"> <section> <div class="video-frame" if="{project.video !== undefined}"> <iframe riot-src="https://www.youtube.com/embed/{project.video}?rel=0" frameborder="0" allow="encrypted-media" allowfullscreen></iframe> </div> <div class="img-frame" if="{project.video === undefined}"> <webp riot-src="{project.img}"></webp> </div> <h1> <p>{project.name + \': \'}</p><span>{project.sub}</span> </h1> <tags tags="{project.keywords}"></tags> <div class="chapter"> <div class="chapter-title"> <h2>Abstract</h2> <hr> </div> <p>{project.text}</p> </div> <div class="chapter"> <div class="chapter-title"> <h2>Implementation</h2> <hr> </div> <p>{project.implement}</p> </div> <div class="chapter" if="{project.links !== undefined}"> <div class="chapter-title"> <h2>Links</h2> <hr> </div> <ol> <li each="{value, key in project.links}"><span>{key + \': \'}</span><span><a href="{value}">{value}</a></span></li> </ol> </div> </section> </div> <footer></footer>','projectdetail,[data-is="projectdetail"]{ min-height: 100vh; display: block; background: #2b2b2b; color: #efefef; } projectdetail > div > section,[data-is="projectdetail"] > div > section{ padding: 1.5rem; } projectdetail > div > section .video-frame,[data-is="projectdetail"] > div > section .video-frame{ position: relative; width: 100%; padding-top: 56.25%; } projectdetail > div > section .video-frame > iframe,[data-is="projectdetail"] > div > section .video-frame > iframe{ position: absolute; top: 0; right: 0; width: 100%; height: 100%; background: black; } projectdetail > div > section .img-frame,[data-is="projectdetail"] > div > section .img-frame{ width: 100%; } projectdetail > div > section .img-frame > img,[data-is="projectdetail"] > div > section .img-frame > img{ width: 100%; height: 100%; background: black; } projectdetail > div > section h1,[data-is="projectdetail"] > div > section h1{ color: white; margin: 1rem 0; text-align: justify; } projectdetail > div > section .chapter .chapter-title,[data-is="projectdetail"] > div > section .chapter .chapter-title{ display: flex; justify-content: space-between; align-items: center; margin: 1.5rem 0 1rem 0; } projectdetail > div > section .chapter .chapter-title > h2,[data-is="projectdetail"] > div > section .chapter .chapter-title > h2{ font-size: 1.5rem; margin-right: 0.5rem; color: white; } projectdetail > div > section .chapter .chapter-title > hr,[data-is="projectdetail"] > div > section .chapter .chapter-title > hr{ flex-grow: 1; border: 1.5px solid gray; border-radius: 1rem; min-width: 1rem; background: gray; } projectdetail > div > section .chapter p,[data-is="projectdetail"] > div > section .chapter p{ margin: 0.6rem 0; text-align: justify; } projectdetail > div > section .chapter ol,[data-is="projectdetail"] > div > section .chapter ol{ padding-left: 2rem; } projectdetail > div > section .chapter ol li,[data-is="projectdetail"] > div > section .chapter ol li{ list-style-type: decimal; line-height: 1.8rem; } projectdetail > div > section .chapter ol li a,[data-is="projectdetail"] > div > section .chapter ol li a{ color: #4e9adb; } projectdetail > div > section .chapter ol li a:hover,[data-is="projectdetail"] > div > section .chapter ol li a:hover{ text-decoration: underline; } @media (max-width: 768px) { projectdetail h1,[data-is="projectdetail"] h1{ font-size: 1.5rem; } projectdetail h2,[data-is="projectdetail"] h2{ font-size: 1.3rem; } }',"",function(e){var i=this;this.project={name:"",sub:"",img:"",video:"",text:"",implement:"",keywords:[]},this.on("route",function(t){i.update({project:r.default.filter(function(e){return e.name===t.replace(/_/g," ")})[0]}),n.default.move()})})},function(e,t,i){"use strict";i(0).tag2("tags",'<span each="{t in opts.tags}">{t}</span>','tags,[data-is="tags"]{ display: flex; flex-wrap: wrap; margin: 1rem 0; margin: 0.75rem 0; } tags > span,[data-is="tags"] > span{ margin: 0 0.5rem 0.5rem 0; padding: 0.1rem 0.3rem; border-radius: 0.2rem; background: #555; color: #eee; }',"",function(e){})},function(e,t,i){"use strict";i(0).tag2("other",'<section> <div class="container"> <h1>Page Not Found</h1> </div> </section> <footer></footer>','other,[data-is="other"]{ text-align: center; min-height: 100vh; display: flex; flex-direction: column; background: #2b2b2b; color: #efefef; } other section,[data-is="other"] section{ flex-grow: 1; display: flex; align-items: center; }',"",function(e){})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,