/*! For license information please see index.js.LICENSE */
!function(i){var n={};function r(e){if(n[e])return n[e].exports;var t=n[e]={i:e,l:!1,exports:{}};return i[e].call(t.exports,t,t.exports,r),t.l=!0,t.exports}r.m=i,r.c=n,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=28)}([function(e,t,i){!function(e){"use strict";var y=[],W={},o="yield",w="__global_mixin",k="riot-",l=["ref","data-ref"],c="data-is",d="if",h="each",i="no-reorder",x="show",S="hide",r="key",b="__riot-events__",a="string",A="object",t="undefined",n="function",s="http://www.w3.org/1999/xlink",u="http://www.w3.org/2000/svg",f=/^xlink:(\w+)/,p=typeof window===t?void 0:window,m=/^on/,g=/([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g,M={viewbox:"viewBox",preserveaspectratio:"preserveAspectRatio"},v=/^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/,D=0|(p&&p.document||{}).documentMode;function _(e,t){return[].slice.call((t||document).querySelectorAll(e))}function Y(e,t){return(t||document).querySelector(e)}function L(){return document.createDocumentFragment()}function R(){return document.createTextNode("")}function j(e){var t=e.ownerSVGElement;return!!t||null===t}function O(e){return"svg"===e?document.createElementNS(u,e):document.createElement(e)}function T(e,t,i){if(i){var n=e.ownerDocument.importNode((new DOMParser).parseFromString('<svg xmlns="'+u+'">'+t+"</svg>","application/xml").documentElement,!0);e.appendChild(n)}else e.innerHTML=t}function P(e,t){e.style.display=t?"":"none",e.hidden=!t}function E(e,t){e.removeAttribute(t)}function C(i){return Object.keys(i).reduce(function(e,t){return e+" "+t+": "+i[t]+";"},"")}function H(e,t){return e.getAttribute(t)}function N(e,t,i){var n=f.exec(t);n&&n[1]?e.setAttributeNS(s,n[1],i):e.setAttribute(t,i)}function I(e,t,i){e.insertBefore(t,i.parentNode&&i)}function F(e,t){if(e)for(var i;i=g.exec(e);)t(i[1].toLowerCase(),i[2]||i[3]||i[4])}function U(e,t,i){if(e){var n,r=t(e,i);if(!1===r)return;for(e=e.firstChild;e;)n=e.nextSibling,U(e,t,r),e=n}}var V,G,z,$,B=Object.freeze({$$:_,$:Y,createFrag:L,createDOMPlaceholder:R,isSvg:j,mkEl:O,setInnerHTML:T,toggleVisibility:P,remAttr:E,styleObjectToString:C,getAttr:H,setAttr:N,safeInsert:I,walkAttrs:F,walkNodes:U}),Z={},q=[],J=!1;p&&(z=O("style"),$=Y("style[type=riot]"),N(z,"type","text/css"),$?($.id&&(z.id=$.id),$.parentNode.replaceChild(z,$)):document.head.appendChild(z),G=(V=z).styleSheet);var K={styleNode:V,add:function(e,t){t?Z[t]=e:q.push(e),J=!0},inject:function(){if(p&&J){J=!1;var e=Object.keys(Z).map(function(e){return Z[e]}).concat(q).join("\n");G?G.cssText=e:V.innerHTML=e}}},Q=function(){var l=["case","default","do","else","in","instanceof","prefix","return","typeof","void","yield"],u=l.reduce(function(e,t){return e+t.slice(-1)},""),c=/^\/(?=[^*>/])[^[/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\/]*)*?\/[gimuy]*/,d=/[$\w]/;function h(e,t){for(;0<=--t&&/\s/.test(e[t]););return t}return function(e,t){var i=/.*/g,n=i.lastIndex=t++,r=i.exec(e)[0].match(c);if(r){var a=n+r[0].length;n=h(e,n);var s=e[n];if(n<0||~"[{(,;:?=|&!^~>%*/".indexOf(s))return a;if("."===s)"."===e[n-1]&&(t=a);else if("+"===s||"-"===s)(e[--n]!==s||(n=h(e,n))<0||!d.test(e[n]))&&(t=a);else if(~u.indexOf(s)){for(var o=n+1;0<=--n&&d.test(e[n]););~l.indexOf(e.slice(n+1,o))&&(t=a)}}return t}}(),X=function(e){var t,i,n="g",r=/"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'|`[^`\\]*(?:\\[\S\s][^`\\]*)*`/g,a=r.source+"|"+/(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source+"|"+/\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?([^<]\/)[gim]*/.source,s=RegExp("[\\x00-\\x1F<>a-zA-Z0-9'\",;\\\\]"),o=/(?=[[\]()*+?.^$|])/g,l=r.source+"|"+/(\/)(?![*\/])/.source,_={"(":RegExp("([()])|"+l,n),"[":RegExp("([[\\]])|"+l,n),"{":RegExp("([{}])|"+l,n)},u="{ }",c=["{","}","{","}",/{[^}]*}/,/\\([{}])/g,/\\({)|{/g,RegExp("\\\\(})|([[({])|(})|"+l,n),u,/^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,/(^|[^\\]){=[\S\s]*?}/],d=void 0,y=[];function h(e){return e}function f(e,t){return t||(t=y),new RegExp(e.source.replace(/{/g,t[2]).replace(/}/g,t[3]),e.global?n:"")}function p(e){if(e===u)return c;var t=e.split(" ");if(2!==t.length||s.test(e))throw new Error('Unsupported brackets "'+e+'"');return(t=t.concat(e.replace(o,"\\").split(" ")))[4]=f(1<t[1].length?/{[\S\s]*?}/:c[4],t),t[5]=f(3<e.length?/\\({|})/g:c[5],t),t[6]=f(c[6],t),t[7]=RegExp("\\\\("+t[3]+")|([[({])|("+t[3]+")|"+l,n),t[8]=e,t}function m(e){return e instanceof RegExp?t(e):y[e]}function g(e){(e||(e=u))!==y[8]&&(y=p(e),t=e===u?h:f,y[9]=t(c[9])),d=e}return m.split=function(n,r,t){t||(t=y);var e,i,a,s,o,l,u=[],c=t[6],d=[],h="";for(i=a=c.lastIndex=0;e=c.exec(n);){if(l=c.lastIndex,s=e.index,i){if(e[2]){var f=e[2],p=_[f],m=1;for(p.lastIndex=l;e=p.exec(n);)if(e[1]){if(e[1]===f)++m;else if(!--m)break}else p.lastIndex=v(e.index,p.lastIndex,e[2]);c.lastIndex=m?n.length:p.lastIndex;continue}if(!e[3]){c.lastIndex=v(s,l,e[4]);continue}}e[1]||(g(n.slice(a,s)),a=c.lastIndex,(c=t[6+(i^=1)]).lastIndex=a)}return n&&a<n.length&&g(n.slice(a)),u.qblocks=d,u;function g(e){h&&(e=h+e,h=""),r||i?u.push(e&&e.replace(t[5],"$1")):u.push(e)}function v(e,t,i){return i&&(t=Q(n,e)),r&&e+2<t&&(o="⁗"+d.length+"~",d.push(n.slice(e,t)),h+=n.slice(a,e)+o,a=t),t}},m.hasExpr=function(e){return y[4].test(e)},m.loopKeys=function(e){var t=e.match(y[9]);return t?{key:t[1],pos:t[2],val:y[0]+t[3].trim()+y[1]}:{val:e.trim()}},m.array=function(e){return e?p(e):y},Object.defineProperty(m,"settings",{set:function(e){var t;t=(e=e||{}).brackets,Object.defineProperty(e,"brackets",{set:g,get:function(){return d},enumerable:!0}),i=e,g(t)},get:function(){return i}}),m.settings="undefined"!=typeof riot&&riot.settings||{},m.set=g,m.skipRegex=Q,m.R_STRINGS=r,m.R_MLCOMMS=/\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,m.S_QBLOCKS=a,m.S_QBLOCK2=l,m}(),ee=function(){var r={};function a(e,t){return e?(r[e]||(r[e]=(i=e,n=function(e){var t,i=X.split(e.replace(o,'"'),1),n=i.qblocks;if(2<i.length||i[0]){var r,a,s=[];for(r=a=0;r<i.length;++r)(t=i[r])&&(t=1&r?u(t,1,n):'"'+t.replace(/\\/g,"\\\\").replace(/\r\n?|\n/g,"\\n").replace(/"/g,'\\"')+'"')&&(s[a++]=t);t=a<2?s[0]:"["+s.join(",")+'].join("")'}else t=u(i[1],0,n);return n.length&&(t=t.replace(l,function(e,t){return n[t].replace(/\r/g,"\\r").replace(/\n/g,"\\n")})),t}(i),"try{return "!==n.slice(0,11)&&(n="return "+n),new Function("E",n+";")))).call(t,function(e,t){e.riotData={tagName:t&&t.__&&t.__.tagName,_riot_id:t&&t._riot_id},a.errorHandler?a.errorHandler(e):"undefined"!=typeof console&&console.error}.bind({data:t,tmpl:e})):e;var i,n}a.hasExpr=X.hasExpr,a.loopKeys=X.loopKeys,a.clearCache=function(){r={}},a.errorHandler=null;var o=/\u2057/g,l=/\u2057(\d+)~/g,c=/^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/,d={"(":/[()]/g,"[":/[[\]]/g,"{":/[{}]/g};function u(a,e,t){if(a=a.replace(/\s+/g," ").trim().replace(/\ ?([[\({},?\.:])\ ?/g,"$1")){for(var i,n=[],r=0;a&&(i=a.match(c))&&!i.index;){var s,o,l=/,|([[{(])|$/g;for(a=RegExp.rightContext,s=i[2]?t[i[2]].slice(1,-1).trim().replace(/\s+/g," "):i[1];o=(i=l.exec(a))[1];)u(o,l);o=a.slice(0,i.index),a=RegExp.rightContext,n[r++]=f(o,1,s)}a=r?1<r?"["+n.join(",")+'].join(" ").trim()':n[0]:f(a,e)}return a;function u(e,t){var i,n=1,r=d[e];for(r.lastIndex=t.lastIndex;i=r.exec(a);)if(i[0]===e)++n;else if(!--n)break;t.lastIndex=n?a.length:r.lastIndex}}var s='"in this?this:'+("object"!=typeof window?"global":"window")+").",n=/[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,h=/^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;function f(e,t,i){var a;return e=e.replace(n,function(e,t,i,n,r){return i&&(n=a?0:n+e.length,"this"!==i&&"global"!==i&&"window"!==i?(e=t+'("'+i+s+i,n&&(a="."===(r=r[n])||"("===r||"["===r)):n&&(a=!h.test(r.slice(n)))),e}),a&&(e="try{return "+e+"}catch(e){E(e,this)}"),i?e=(a?"function(){"+e+"}.call(this)":"("+e+")")+'?"'+i+'":""':t&&(e="function(v){"+(a?e.replace("return ","v="):"v=("+e+")")+';return v||v===0?v:""}.call(this)'),e}return a.version=X.version="v3.0.8",a}(),te=function(o){o=o||{};var l={},u=Array.prototype.slice;return Object.defineProperties(o,{on:{value:function(e,t){return"function"==typeof t&&(l[e]=l[e]||[]).push(t),o},enumerable:!1,writable:!1,configurable:!1},off:{value:function(e,t){if("*"!=e||t)if(t)for(var i,n=l[e],r=0;i=n&&n[r];++r)i==t&&n.splice(r--,1);else delete l[e];else l={};return o},enumerable:!1,writable:!1,configurable:!1},one:{value:function(t,i){return o.on(t,function e(){o.off(t,e),i.apply(o,arguments)})},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(e){var t,i,n,r=arguments,a=arguments.length-1,s=new Array(a);for(n=0;n<a;n++)s[n]=r[n+1];for(t=u.call(l[e]||[],0),n=0;i=t[n];++n)i.apply(o,s);return l["*"]&&"*"!=e&&o.trigger.apply(o,["*",e].concat(s)),o},enumerable:!1,writable:!1,configurable:!1}}),o};function ie(e){return v.test(e)}function ne(e){return typeof e===n}function re(e){return e&&typeof e===A}function ae(e){return typeof e===t}function se(e){return typeof e===a}function oe(e){return le(e)||""===e}function le(e){return ae(e)||null===e}function ue(e){return Array.isArray(e)||e instanceof Array}function ce(e,t){var i=we(e,t);return ae(e[t])||i&&i.writable}var de=Object.freeze({isBoolAttr:ie,isFunction:ne,isObject:re,isUndefined:ae,isString:se,isBlank:oe,isNil:le,isArray:ue,isWritable:ce});function he(e,t){for(var i=e?e.length:0,n=0;n<i;n++)t(e[n],n);return e}function fe(e,t){return-1!==e.indexOf(t)}function pe(e){return e.replace(/-(\w)/g,function(e,t){return t.toUpperCase()})}function me(e,t){return e.slice(0,t.length)===t}function ge(e,t,i,n){return Object.defineProperty(e,t,be({value:i,enumerable:!1,writable:!1,configurable:!0},n)),e}var ve,_e=(ve=-1,function(){return++ve});function ye(e){console&&console.warn}var we=function(e,t){return Object.getOwnPropertyDescriptor(e,t)};function be(e){for(var t,i=1,n=arguments,r=n.length;i<r;i++)if(t=n[i])for(var a in t)ce(e,a)&&(e[a]=t[a]);return e}var ke=Object.freeze({each:he,contains:fe,toCamel:pe,startsWith:me,defineProperty:ge,uid:_e,warn:ye,getPropDescriptor:we,extend:be}),xe=be(Object.create(X.settings),{skipAnonymousTags:!0,autoUpdate:!0});function Se(e,t,i,n){var r,a=function(e,t,i){var n=this.__.parent,r=this.__.item;if(!r)for(;n&&!r;)r=n.__.item,n=n.__.parent;if(ce(i,"currentTarget")&&(i.currentTarget=e),ce(i,"target")&&(i.target=i.srcElement),ce(i,"which")&&(i.which=i.charCode||i.keyCode),i.item=r,t.call(this,i),xe.autoUpdate&&!i.preventUpdate){var a=st(this);a.isMounted&&a.update()}}.bind(n,i,t);i[e]=null,r=e.replace(m,""),fe(n.__.listeners,i)||n.__.listeners.push(i),i[b]||(i[b]={}),i[b][e]&&i.removeEventListener(r,i[b][e]),i[b][e]=a,i.addEventListener(r,a,!1)}function Me(e){if(!this.root||!H(this.root,"virtualized")){var t,i=e.dom,n=(b=e.attr)?(b=b.replace(k,""),M[b]&&(b=M[b]),b):null,r=fe([x,S],n),a=e.root&&"VIRTUAL"===e.root.tagName,s=this.__,o=s.isAnonymous,l=i&&(e.parent||i.parentNode),u="style"===n,c="class"===n;if(e._riot_id)e.__.wasCreated?e.update():(e.mount(),a&&ht(e,e.root));else{if(e.update)return e.update();var d=r&&!o?pt.call(this):this,h=!oe(t=ee(e.expr,d)),f=re(t);if(f&&(c?t=ee(JSON.stringify(t),this):u&&(t=C(t))),!e.attr||e.wasParsedOnce&&h&&!1!==t||E(i,H(i,e.attr)?e.attr:n),e.bool&&(t=!!t&&n),e.isRtag)return m=this,g=t,_=(p=e).tag||p.dom._tag,y=(_?_.__:{}).head,w="VIRTUAL"===p.dom.tagName,void(_&&p.tagName===g?_.update():(_&&(w&&(v=R(),y.parentNode.insertBefore(v,y)),_.unmount(!0)),se(g)&&(p.impl=W[g],p.impl&&(p.tag=_=at(p.impl,{root:p.dom,parent:m,tagName:g},p.dom.innerHTML,m),he(p.attrs,function(e){return N(_.root,e.name,e.value)}),p.tagName=g,_.mount(),w&&ht(_,v||_.root),m.__.onUnmount=function(){var e=_.opts.dataIs;ct(_.parent.tags,e,_),ct(_.__.parent.tags,e,_),_.unmount()}))));if((!e.wasParsedOnce||e.value!==t)&&(e.value=t,e.wasParsedOnce=!0,!f||c||u||r)){if(h||(t=""),!n)return t+="",void(l&&("TEXTAREA"===(e.parent=l).tagName?(l.value=t,D||(i.nodeValue=t)):i.nodeValue=t));ne(t)?Se(n,t,i,this):r?P(i,n===S?!t:t):(e.bool&&(i[n]=t),"value"===n&&i.value!==t?i.value=t:h&&!1!==t&&N(i,n,t),u&&i.hidden&&P(i,!1))}}}var p,m,g,v,_,y,w,b}function De(e){he(e,Me.bind(this))}var Ye={init:function(e,t,i){E(e,d),this.tag=t,this.expr=i,this.stub=R();var n=(this.pristine=e).parentNode;return n.insertBefore(this.stub,e),n.removeChild(e),this},update:function(){this.value=ee(this.expr,this.tag),this.value&&!this.current?(this.current=this.pristine.cloneNode(!0),this.stub.parentNode.insertBefore(this.current,this.stub),this.expressions=Ce.apply(this.tag,[this.current,!0])):!this.value&&this.current&&(ot(this.expressions),this.current._tag?this.current._tag.unmount():this.current.parentNode&&this.current.parentNode.removeChild(this.current),this.current=null,this.expressions=[]),this.value&&De.call(this.tag,this.expressions)},unmount:function(){ot(this.expressions||[])}},je={init:function(e,t,i,n){return this.dom=e,this.attr=i,this.rawValue=n,this.parent=t,this.hasExp=ee.hasExpr(n),this},update:function(){var e=this.value,t=this.parent&&st(this.parent),i=this.dom.__ref||this.tag||this.dom;this.value=this.hasExp?ee(this.rawValue,this.parent):this.rawValue,!oe(e)&&t&&ct(t.refs,e,i),!oe(this.value)&&se(this.value)?(t&&ut(t.refs,this.value,i,null,this.parent.__.index),this.value!==e&&N(this.dom,this.attr,this.value)):E(this.dom,this.attr),this.dom.__ref||(this.dom.__ref=i)},unmount:function(){var e=this.tag||this.dom,t=this.parent&&st(this.parent);!oe(this.value)&&t&&ct(t.refs,this.value,e)}};function Oe(e,t,i,n){var r=n?Object.create(n):{};return r[e.key]=t,e.pos&&(r[e.pos]=i),r}function Te(e,t){e.splice(t,1),this.unmount(),ct(this.parent,this,this.__.tagName,!0)}function Pe(y,w,b){var k,x=typeof H(y,i)!==a||E(y,i),S=H(y,r),M=!!S&&ee.hasExpr(S),D=lt(y),Y=W[D],e=y.parentNode,t=R(),j=nt(y),n=H(y,d),O=[],T=y.innerHTML,P=!W[D],C="VIRTUAL"===y.tagName,N=[];return E(y,h),E(y,r),(b=ee.loopKeys(b)).isLoop=!0,n&&E(y,d),e.insertBefore(t,y),e.removeChild(y),b.update=function(){b.value=ee(b.val,w);var m=b.value,g=L(),i=!ue(m)&&!se(m),v=t.parentNode,_=[];v&&(i?m=(k=m||!1)?Object.keys(m).map(function(e){return Oe(b,m[e],e)}):[]:k=!1,n&&(m=m.filter(function(e,t){return b.key&&!i?!!ee(n,Oe(b,e,t,w)):!!ee(n,be(Object.create(w),e))})),he(m,function(e,t){var i,n,r,a,s=!k&&b.key?Oe(b,e,t):e,o=(n=e,r=s,a=M,(i=S)?a?ee(i,r):n[i]:n),l=x&&typeof e===A&&!k,u=N.indexOf(o),c=-1===u,d=!c&&l?u:t,h=O[d],f=t>=N.length,p=l&&c||!l&&!h;p?((h=it(Y,{parent:w,isLoop:!0,isAnonymous:P,tagName:D,root:y.cloneNode(P),item:s,index:t},T)).mount(),f?function(e,t){t?ft.call(this,e):e.appendChild(this.root)}.apply(h,[g||v,C]):function(e,t,i){i?ft.apply(this,[e,t]):I(e,this.root,t.root)}.apply(h,[v,O[t],C]),f||N.splice(t,0,s),O.splice(t,0,h),j&&ut(w.tags,D,h,!0)):d!==t&&l&&((S||fe(m,N[d]))&&(function(e,t,i){i?mt.apply(this,[e,t]):I(e,this.root,t.root)}.apply(h,[v,O[t],C]),O.splice(t,0,O.splice(d,1)[0]),N.splice(t,0,N.splice(d,1)[0])),b.pos&&(h[b.pos]=t),!j&&h.tags&&function(t){var i=this;he(Object.keys(this.tags),function(e){rt.apply(i.tags[e],[e,t])})}.call(h,t)),h.__.item=s,h.__.index=t,h.__.parent=w,_[t]=o,p||h.update(s)}),function(e,t){for(var i=t.length,n=e.length;n<i;)Te.apply(t[--i],[t,i])}(m,O),N=_.slice(),v.insertBefore(g,t))},b.unmount=function(){he(O,function(e){e.unmount()})},b}function Ce(s,o){var l=this,u=[];return U(s,function(e){var t,i,n=e.nodeType;if((o||e!==s)&&(3===n&&"STYLE"!==e.parentNode.tagName&&ee.hasExpr(e.nodeValue)&&u.push({dom:e,expr:e.nodeValue}),1===n)){var r="VIRTUAL"===e.tagName;if(t=H(e,h))return r&&N(e,"loopVirtual",!0),u.push(Pe(e,l,t)),!1;if(t=H(e,d))return u.push(Object.create(Ye).init(e,l,t)),!1;if((t=H(e,c))&&ee.hasExpr(t))return u.push({isRtag:!0,expr:t,dom:e,attrs:[].slice.call(e.attributes)}),!1;if(i=nt(e),r&&(H(e,"virtualized")&&e.parentElement.removeChild(e),i||H(e,"virtualized")||H(e,"loopVirtual")||(i={tmpl:e.outerHTML})),i&&(e!==s||o)){if(!r)return u.push(at(i,{root:e,parent:l},e.innerHTML,l)),!1;H(e,c)&&ye(),N(e,"virtualized",!0);var a=it({tmpl:e.outerHTML},{root:e,parent:l},e.innerHTML);u.push(a)}Ne.apply(l,[e,e.attributes,function(e,t){t&&u.push(t)}])}}),u}function Ne(r,e,a){var s=this;he(e,function(e){if(!e)return!1;var t,i=e.name,n=ie(i);fe(l,i)&&r.tagName.toLowerCase()!==o?t=Object.create(je).init(r,s,i,e.value):ee.hasExpr(e.value)&&(t={dom:r,expr:e.value,attr:i,bool:n}),a(e,t)})}var We=/<yield\b/i,Ae=/<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi,Le=/<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi,Re=/<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi,Ee={tr:"tbody",th:"tr",td:"tr",col:"colgroup"},He=D&&D<10?/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/:/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/,Ie="div",Fe="svg";function Ue(e,t,i){var n=e&&e.match(/^\s*<([-\w]+)/),r=n&&n[1].toLowerCase(),a=O(i?Fe:Ie);return e=function(e,i){if(!We.test(e))return e;var n={};return i=i&&i.replace(Le,function(e,t,i){return n[t]=n[t]||i,""}).trim(),e.replace(Re,function(e,t,i){return n[t]||i||""}).replace(Ae,function(e,t){return i||t||""})}(e,t),He.test(r)?a=function(e,t,i){var n="o"===i[0],r=n?"select>":"table>";if(e.innerHTML="<"+r+t.trim()+"</"+r,r=e.firstChild,n)r.selectedIndex=-1;else{var a=Ee[i];a&&1===r.childElementCount&&(r=Y(a,r))}return r}(a,e,r):T(a,e,i),a}function Ve(e,t){var i=this,n=i.name,r=i.tmpl,a=i.css,s=i.attrs,o=i.onCreate;return W[n]||(Ge(n,r,a,s,o),W[n].class=this.constructor),dt(e,n,t,this),a&&K.inject(),this}function Ge(e,t,i,n,r){return ne(n)&&(r=n,/^[\w-]+\s?=/.test(i)?(n=i,i=""):n=""),i&&(ne(i)?r=i:K.add(i)),e=e.toLowerCase(),W[e]={name:e,tmpl:t,attrs:n,fn:r},e}function ze(e,t,i,n,r){return i&&K.add(i,e),W[e]={name:e,tmpl:t,attrs:n,fn:r},e}function $e(e,r,a){var t,i,s=[];if(K.inject(),re(r)&&(a=r,r=0),t=se(e)?(e="*"===e?i=gt():e+gt(e.split(/, */)))?_(e):[]:e,"*"===r){if(r=i||gt(),t.tagName)t=_(r,t);else{var n=[];he(t,function(e){return n.push(_(r,e))}),t=n}r=0}return function e(t){if(t.tagName){var i,n=H(t,c);r&&n!==r&&N(t,c,n=r),(i=dt(t,n||t.tagName.toLowerCase(),a))&&s.push(i)}else t.length&&he(t,e)}(t),s}var Be={},Ze=Be[w]={},qe=0;function Je(e,t,i){if(re(e))Je("__"+qe+++"__",e,!0);else{var n=i?Ze:Be;if(!t){if(ae(n[e]))throw new Error("Unregistered mixin: "+e);return n[e]}n[e]=ne(t)?be(t.prototype,n[e]||{})&&t:be(n[e]||{},t)}}function Ke(){return he(y,function(e){return e.update()})}function Qe(e){W[e]=null}var Xe=Object.freeze({Tag:Ve,tag:Ge,tag2:ze,mount:$e,mixin:Je,update:Ke,unregister:Qe,version:"v3.8.1"});function et(e,t,i,n,r){if(!e||!i){var a=e?pt.call(this):t||this;he(r,function(e){e.expr&&Me.call(a,e.expr),n[pe(e.name).replace(k,"")]=e.expr?e.expr.value:e.value})}}function tt(e){var t=this.__,i=t.isAnonymous;ge(this,"isMounted",e),i||(e?this.trigger("mount"):(this.trigger("unmount"),this.off("*"),this.__.wasCreated=!1))}function it(a,e,t){void 0===a&&(a={}),void 0===e&&(e={});var n,s=e.context||{},o=be({},e.opts),l=e.parent,r=e.isLoop,u=!!e.isAnonymous,c=xe.skipAnonymousTags&&u,d=e.item,i=e.index,h=[],f=[],p=[],m=e.root,g=e.tagName||lt(m),v="virtual"===g,_=!v&&!a.tmpl;return c||te(s),a.name&&m._tag&&m._tag.unmount(!0),ge(s,"isMounted",!1),ge(s,"__",{isAnonymous:u,instAttrs:h,innerHTML:t,tagName:g,index:i,isLoop:r,isInline:_,listeners:[],virts:[],wasCreated:!1,tail:null,head:null,parent:null,item:null}),ge(s,"_riot_id",_e()),ge(s,"root",m),be(s,{opts:o},d),ge(s,"parent",l||null),ge(s,"tags",{}),ge(s,"refs",{}),n=_||r&&u?m:(v||(m.innerHTML=""),Ue(a.tmpl,t,j(m))),ge(s,"update",function(e){var t={},i=s.isMounted&&!c;return u&&l&&be(s,l),be(s,e),et.apply(s,[r,l,u,t,h]),i&&s.isMounted&&ne(s.shouldUpdate)&&!s.shouldUpdate(e,t)||(be(o,t),i&&s.trigger("update",e),De.call(s,p),i&&s.trigger("updated")),s}),ge(s,"mixin",function(){return he(arguments,function(e){var n,t,i=[],r=["init","__proto__"];e=se(e)?Je(e):e,n=ne(e)?new e:e;for(var a=Object.getPrototypeOf(n);i=i.concat(Object.getOwnPropertyNames(t||n)),t=Object.getPrototypeOf(t||n););he(i,function(e){if(!fe(r,e)){var t=we(n,e)||we(a,e),i=t&&(t.get||t.set);!s.hasOwnProperty(e)&&i?Object.defineProperty(s,e,t):s[e]=ne(n[e])?n[e].bind(s):n[e]}}),n.init&&n.init.bind(s)(o)}),s}),ge(s,"mount",function(){m._tag=s,Ne.apply(l,[m,m.attributes,function(e,t){!u&&je.isPrototypeOf(t)&&(t.tag=s),e.expr=t,h.push(e)}]),F(a.attrs,function(e,t){f.push({name:e,value:t})}),Ne.apply(s,[m,f,function(e,t){t?p.push(t):N(m,e.name,e.value)}]),et.apply(s,[r,l,u,o,h]);var e=Je(w);if(e&&!c)for(var t in e)e.hasOwnProperty(t)&&s.mixin(e[t]);if(a.fn&&a.fn.call(s,o),c||s.trigger("before-mount"),he(Ce.apply(s,[n,u]),function(e){return p.push(e)}),s.update(d),!u&&!_)for(;n.firstChild;)m.appendChild(n.firstChild);if(ge(s,"root",m),!c&&s.parent){var i=st(s.parent);i.one(i.isMounted?"updated":"mount",function(){tt.call(s,!0)})}else tt.call(s,!0);return s.__.wasCreated=!0,s}),ge(s,"unmount",function(e){var t=s.root,i=t.parentNode,n=y.indexOf(s);if(c||s.trigger("before-unmount"),F(a.attrs,function(e){me(e,k)&&(e=e.slice(k.length)),E(m,e)}),s.__.listeners.forEach(function(t){Object.keys(t[b]).forEach(function(e){t.removeEventListener(e,t[b][e])})}),-1!==n&&y.splice(n,1),l&&!u){var r=st(l);v?Object.keys(s.tags).forEach(function(e){return ct(r.tags,e,s.tags[e])}):ct(r.tags,g,s)}return s.__.virts&&he(s.__.virts,function(e){e.parentNode&&e.parentNode.removeChild(e)}),ot(p),he(h,function(e){return e.expr&&e.expr.unmount&&e.expr.unmount()}),e?T(t,""):i&&i.removeChild(t),s.__.onUnmount&&s.__.onUnmount(),s.isMounted||tt.call(s,!0),tt.call(s,!1),delete s.root._tag,s}),s}function nt(e){return e.tagName&&W[H(e,c)||H(e,c)||e.tagName.toLowerCase()]}function rt(e,t){var i,n=this.parent;n&&(ue(i=n.tags[e])?i.splice(t,0,i.splice(i.indexOf(this),1)[0]):ut(n.tags,e,this))}function at(e,t,i,n){var r=it(e,t,i),a=t.tagName||lt(t.root,!0),s=st(n);return ge(r,"parent",s),r.__.parent=n,ut(s.tags,a,r),s!==n&&ut(n.tags,a,r),r}function st(e){for(var t=e;t.__.isAnonymous&&t.parent;)t=t.parent;return t}function ot(e){he(e,function(e){e.unmount?e.unmount(!0):e.tagName?e.tag.unmount(!0):e.unmount&&e.unmount()})}function lt(e,t){var i=nt(e),n=!t&&H(e,c);return n&&!ee.hasExpr(n)?n:i?i.name:e.tagName.toLowerCase()}function ut(e,t,i,n,r){var a=e[t],s=ue(a),o=!ae(r);if(!a||a!==i)if(!a&&n)e[t]=[i];else if(a)if(s){var l=a.indexOf(i);if(l===r)return;-1!==l&&a.splice(l,1),o?a.splice(r,0,i):a.push(i)}else e[t]=[a,i];else e[t]=i}function ct(e,t,i,n){if(ue(e[t])){var r=e[t].indexOf(i);-1!==r&&e[t].splice(r,1),e[t].length?1!==e[t].length||n||(e[t]=e[t][0]):delete e[t]}else e[t]===i&&delete e[t]}function dt(e,t,i,n){var r,a=W[t],s=W[t].class,o=n||(s?Object.create(s.prototype):{}),l=e._innerHTML=e._innerHTML||e.innerHTML,u=be({root:e,opts:i,context:o},{parent:i?i.parent:null});return a&&e&&(r=it(a,u,l)),r&&r.mount&&(r.mount(!0),fe(y,r)||y.push(r)),r}function ht(e,t){var i=L();ft.call(e,i),t.parentNode.replaceChild(i,t)}function ft(e,t){var i,n,r=R(),a=R(),s=L();for(this.root.insertBefore(r,this.root.firstChild),this.root.appendChild(a),this.__.head=n=r,this.__.tail=a;n;)i=n.nextSibling,s.appendChild(n),this.__.virts.push(n),n=i;t?e.insertBefore(s,t.__.head):e.appendChild(s)}function pt(){return this.parent?be(Object.create(this),this.parent):this}function mt(e,t){for(var i,n=this.__.head,r=L();n;)if(i=n.nextSibling,r.appendChild(n),(n=i)===this.__.tail){r.appendChild(n),e.insertBefore(r,t.__.head);break}}function gt(e){if(e)return e.filter(function(e){return!/[^-\w]/.test(e)}).reduce(function(e,t){var i=t.trim().toLowerCase();return e+",["+c+'="'+i+'"]'},"");var t=Object.keys(W);return t+gt(t)}var vt=Object.freeze({getTag:nt,moveChildTag:rt,initChildTag:at,getImmediateCustomParentTag:st,unmountAll:ot,getTagName:lt,arrayishAdd:ut,arrayishRemove:ct,mountTo:dt,makeReplaceVirtual:ht,makeVirtual:ft,inheritParentProps:pt,moveVirtual:mt,selectTags:gt}),_t=xe,yt={tmpl:ee,brackets:X,styleManager:K,vdom:y,styleNode:K.styleNode,dom:B,check:de,misc:ke,tags:vt},wt=Ve,bt=Ge,kt=ze,xt=$e,St=Je,Mt=Ke,Dt=Qe,Yt=te,jt=be({},Xe,{observable:te,settings:_t,util:yt});e.settings=_t,e.util=yt,e.Tag=wt,e.tag=bt,e.tag2=kt,e.mount=xt,e.mixin=St,e.update=Mt,e.unregister=Dt,e.version="v3.8.1",e.observable=Yt,e.default=jt,Object.defineProperty(e,"__esModule",{value:!0})}(t)},function(e,t,i){"use strict";i(0).tag2("list",'<ul> <li each="{item in opts.items}"> <h3><a href="{item.link}" target="_blank">{item.title}</a> <div class="right"> <hr><span><span class="date" if="{item.date.length &lt;= 7}">{item.date}</span><span class="term" if="{item.date.length &gt; 7}">{item.date}</span></span> </div> </h3> <p class="sub" each="{t in item.texts}">{t}</p> </li> </ul>','list > ul,[data-is="list"] > ul{ padding: 0.75rem; } list > ul li,[data-is="list"] > ul li{ margin-bottom: 1rem; } list > ul li h3,[data-is="list"] > ul li h3{ display: flex; margin: auto; align-items: center; } list > ul li h3 a,[data-is="list"] > ul li h3 a{ color: #4e9adb; padding: 0.75rem; text-align: justify; } list > ul li h3 a:hover,[data-is="list"] > ul li h3 a:hover{ text-decoration: underline; } list > ul li h3 .right,[data-is="list"] > ul li h3 .right{ display: inline-flex; flex-grow: 1; align-items: center; } list > ul li h3 .right hr,[data-is="list"] > ul li h3 .right hr{ display: inline-flex; flex-grow: 1; border: 1.5px solid gray; border-radius: 1rem; min-width: 1rem; background: gray; } list > ul li h3 .right span,[data-is="list"] > ul li h3 .right span{ padding: 0.75rem; display: inline-flex; } list > ul li h3 .right span span,[data-is="list"] > ul li h3 .right span span{ background: #555; color: white; padding: 0.1rem 0.3rem; border-radius: 0.3rem; display: inline-block; text-align: center; font-size: 0.8rem; font-weight: normal; } list > ul li h3 .right span span.date,[data-is="list"] > ul li h3 .right span span.date{ min-width: 4rem; } list > ul li h3 .right span span.term,[data-is="list"] > ul li h3 .right span span.term{ min-width: 8rem; } list > ul li .sub,[data-is="list"] > ul li .sub{ color: #bdbdbd; padding: 0 0.75rem; font-weight: 300; text-align: justify; }','class="pure-g pure-u-1-1"',function(e){})},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return e.init=function(){window.scrolls=[],window.addEventListener("scroll",function(){var e=window.pageYOffset,t=window.location.hash;window.scrolls[""+t]=e})},e.move=function(){var e=window.location.hash;window.scrolls[""+e]?window.scroll(0,0):window.scroll(0,window.scrolls[""+e])},e}();t.default=n},function(e,t,i){"use strict";i(0).tag2("webp",'<picture> <source srcset="resources/{opts.src||opts.riotSrc}.webp" type="image/webp"> <source srcset="resources/{opts.src||opts.riotSrc}.png" type="image/png"><img riot-src="resources/{opts.src||opts.riotSrc}.webp"> </picture>','webp,[data-is="webp"]{ display: block; } webp > picture,[data-is="webp"] > picture{ width: 100%; height: 100%; } webp > picture > img,[data-is="webp"] > picture > img{ width: 100%; }',"",function(e){this.on("mounted",function(){})})},function(e,t,i){"undefined"!=typeof window&&window,e.exports=function(s){s=s||{};var o={},l=Array.prototype.slice;return Object.defineProperties(s,{on:{value:function(e,t){return"function"==typeof t&&(o[e]=o[e]||[]).push(t),s},enumerable:!1,writable:!1,configurable:!1},off:{value:function(e,t){if("*"!=e||t)if(t)for(var i,n=o[e],r=0;i=n&&n[r];++r)i==t&&n.splice(r--,1);else delete o[e];else o={};return s},enumerable:!1,writable:!1,configurable:!1},one:{value:function(t,i){return s.on(t,function e(){s.off(t,e),i.apply(s,arguments)})},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(e){var t,i,n,r=arguments.length-1,a=new Array(r);for(n=0;n<r;n++)a[n]=arguments[n+1];for(t=l.call(o[e]||[],0),n=0;i=t[n];++n)i.apply(s,a);return o["*"]&&"*"!=e&&s.trigger.apply(s,["*",e].concat(a)),s},enumerable:!1,writable:!1,configurable:!1}}),s}},function(e,t,i){"use strict";i.r(t);var r,n,a,s,o,l=i(4),u=i.n(l),c=/^.+?\/\/+[^/]+/,d="EventListener",h="remove"+d,f="add"+d,p="hasAttribute",m="popstate",g="hashchange",v="trigger",_=3,y="undefined"!=typeof window&&window,w="undefined"!=typeof document&&document,b=y&&history,k=y&&(b.location||y.location),x=N.prototype,S=w&&w.ontouchstart?"touchstart":"click",M=u()(),D=!1,Y=!1,j=[],O=0;function T(e){return e.split(/[/?#]/)}function P(e,t){var i=t.replace(/\?/g,"\\?").replace(/\*/g,"([^/?#]+?)").replace(/\.\./,".*"),n=new RegExp("^"+i+"$"),r=e.match(n);if(r)return r.slice(1)}function C(e){var t,i,n;t=E,i=1,r=function(){clearTimeout(n),n=setTimeout(t,i)},y[f](m,r),y[f](g,r),w[f](S,H),e&&E(!0)}function N(){this.$=[],u()(this),M.on("stop",this.s.bind(this)),M.on("emit",this.e.bind(this))}function W(e){return e.replace(/^\/|\/$/,"")}function A(e){return"string"==typeof e}function L(e){return(e||k.href).replace(c,"")}function R(e){return"#"===n[0]?(e||k.href||"").split(n)[1]||"":(k?L(e):e||"").replace(n,"")}function E(t){var e=0===O;if(!(_<=O)&&(O++,j.push(function(){var e=R();(t||e!==a)&&(M[v]("emit",e),a=e)}),e)){for(var i;i=j.shift();)i();O=0}}function H(e){if(!(1!==e.which||e.metaKey||e.ctrlKey||e.shiftKey||e.defaultPrevented)){for(var t=e.target;t&&"A"!==t.nodeName;)t=t.parentNode;!t||"A"!==t.nodeName||t[p]("download")||!t[p]("href")||t.target&&"_self"!==t.target||-1===t.href.indexOf(k.href.match(c)[0])||t.href!==k.href&&(t.href.split("#")[0]===k.href.split("#")[0]||"#"!==n[0]&&0!==L(t.href).indexOf(n)||"#"===n[0]&&t.href.split(n)[0]!==k.href.split(n)[0]||!I(R(t.href),t.title||w.title))||e.preventDefault()}}function I(e,t,i){return b?(e=n+W(e),t=t||w.title,i?b.replaceState(null,t,e):b.pushState(null,t,e),w.title=t,Y=!1,E(),Y):M[v]("emit",R(e))}x.m=function(e,t,i){!A(e)||t&&!A(t)?t?this.r(e,t):this.r("@",e):I(e,t,i||!1)},x.s=function(){this.off("*"),this.$=[]},x.e=function(i){this.$.concat("@").some(function(e){var t=("@"===e?s:o)(W(i),W(e));if(void 0!==t)return this[v].apply(null,[e].concat(t)),Y=!0},this)},x.r=function(e,t){"@"!==e&&(e="/"+W(e),this.$.push(e)),this.on(e,t)};var F=new N,U=F.m.bind(F);U.create=function(){var e=new N,t=e.m.bind(e);return t.stop=e.s.bind(e),t},U.base=function(e){n=e||"#",a=R()},U.exec=function(){E(!0)},U.parser=function(e,t){e||t||(s=T,o=P),e&&(s=e),t&&(o=t)},U.query=function(){var n={};return(k.href||a).replace(/[?&](.+?)=([^&]*)/g,function(e,t,i){n[t]=i}),n},U.stop=function(){D&&(y&&(y[h](m,r),y[h](g,r),w[h](S,H)),M[v]("stop"),D=!1)},U.start=function(e){D||(y&&("interactive"===document.readyState||"complete"===document.readyState?C(e):document.onreadystatechange=function(){"interactive"===document.readyState&&setTimeout(function(){C(e)},1)}),D=!0)},U.base(),U.parser();var V=U,G=i(0),z=i.n(G);z.a.tag2("router","<yield></yield>","","",function(e){var i=this;this.route=V.create(),this.select=function(t){[].concat(i.tags.route).forEach(function(e){return e.show=e===t})},this.on("mount",function(){window.setTimeout(function(){return V.start(!0)},0)}),this.on("unmount",function(){i.route.stop()})}),z.a.tag2("route",'<virtual if="{show}"><yield></yield></virtual>',"","",function(e){var n=this;this.show=!1,this.parent.route(e.path,function(){for(var i=[],e=arguments.length;e--;)i[e]=arguments[e];n.one("updated",function(){var t;(t=n.tags,Object.keys(t).map(function(e){return t[e]}).reduce(function(e,t){return e.concat(t)},[])).forEach(function(e){e.trigger.apply(e,["route"].concat(i)),e.update()})}),n.parent.select(n),n.parent.update()})});t.default=V},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=[{name:"SensorPipe",sub:"PCとスマホを連携させるプログラミングを支援するスマホアプリ",img:"project-SensorPipe-16-9",category:"Android",video:"gwKyPqt2kd8",text:"スマートフォンのセンサ情報とPCを連携させたプログラミングを実現するには双方でのアプリケーション開発が必要となり、製作時間がかかる上にハードルが高いものであった。これを解決するため、スマートフォンの各種センサ情報をPCに送信し続け、PC側からもスマートフォンにバイブレーションやウェブサイト表示などの所定の動作をさせる事ができるアプリケーションを開発した。これにより、プログラマはスマートフォン側のプログラミングを一切行わずに、PCでのセンサ情報を用いたプログラミングを行うことができる。WISS2015で発表。",implement:"Androidアプリケーションとして実装。PCとスマートフォンを同じWi-Fiに接続後、UDP通信を確立することによってデータの送受信を行う。アプリケーションはバックグラウンドで動作する。PC側で利用するときは対応するProcessing用のライブラリを利用可能。",keywords:["Android","Programming Experience(PX)","UDP","cooperation programming","sensor"],links:{"プロジェクトページ":"https://research.miyashita.com/2015/D160/"}},{name:"MiddleDrive",sub:"Bluetooth通信によるアドホック型ドキュメント共同編集アプリ",img:"project-MiddleDrive-16-9",category:"Web",video:"vPAXrlKGeC8",text:"会議を行う際にその内容を複数人でウェブ上のドキュメントに書き出すことで記録をとったり、議題の整理をしたりすることが多くある。しかし、Wi-Fiの電波がない場所ではこれらのようなウェブアプリケーションは利用することができない。そこで、Wi-Fiなどのネットワーク環境が利用できない状況でも、リアルタイムに共同編集を行うことができるアプリケーションを開発した。ワイヤレスアドホックネットワークを構築し、ネットワーク内のPCとドキュメントの共同編集を行うことが出来る。",implement:"チームで制作。フロントエンドとWebサーバを担当した。動作プラットフォームはWindowsPC。BluetoothによってPC同士をペアリングし、双方向のデータ通信を行う。各PC内でWebサーバが起動しているため、通常のウェブアプリケーションと同じようにブラウザでアクセスすることが出来る。Bluetooth通信はC#でwin APIを利用することで実現し、WebサーバはNode.jsを用いて実装している。",keywords:["windows","Bluetooth","co-authoring","CSCW","win API","Ad-hoc network"],links:{"受賞ページ":"https://www.pref.nagano.lg.jp/joho/app-contest/app-contest0"}},{name:"InvisibleFlick",sub:"小型タッチスクリーン端末におけるキートップが透明な日本語入力キーボード",img:"project-InvisibleFlick-16-9",category:"Android",text:"スマートウォッチのような小型タッチスクリーン端末向けの日本語入力キーボードは、キーやテキストエリアが狭いため、ミスタップの頻発による文字入力速度の低下を招いている。そこで、テンキー部分のキートップを透明にし、背景にテキストエリアを表示する手法を提案。フリックキーボードとテキストエリアの2層のレイヤー構造の導入により、キーとテキストエリアを同時に拡大することができる。既存手法との比較して、文字入力速度・エラー率ともに優れていることが示された。第182回HCI研究会で発表し、学生奨励賞を受賞。修士論文。",implement:"実験用システムとして、Androidアプリケーションを実装。Google日本語入力APIを使用して、漢字などの文字変換を行っている。",keywords:["Android","Human Computer Interaction","smartwatch","text input","flick-keyboard"],links:{"プロジェクトページ":"https://research.miyashita.com/papers/D218","受賞ページ":"http://www.sighci.jp/contents/page/news","Google日本語入力API":"https://www.google.co.jp/ime/cgiapi.html"}},{name:"Ichimonitto",sub:"ビデオチャットをしながらクイズ番組形式で回答する一問一答学習支援サービス",img:"project-Ichimonitto-16-9",category:"Web",text:"英単語を知っていても、正確な発音ができなければ相手には伝わらない。そこで、WebRTCを利用した一問一答形式の学習支援サービスを制作した。カメラ映像とボイスチャットによって離れた場所でも一緒に学ぶことが出来る。画面に表示された単語の英語をいち早く、かつ正確に発音できたものがポイントを獲得する。Cloud n アプリケーションコンテストでWebRTC賞を受賞。",implement:"チームで制作。フロントエンドを担当。Google Speech APIを使うことで、しっかりと認識されるような正確な発音での回答のみ正解とする点がポイント。現在接続しているユーザなどの管理にSkywayのAPIを利用。",keywords:["Web RTC","quiz","video chat","Google Speech API"],links:{"受賞ページ":"http://www.cloudn-service.com/cam04-deven/decon/tohyo/"}},{name:"GeoMelody",sub:"環境音を録音してネット上に集約するサウンドスケープSNS",img:"project-GeoMelody-16-9",category:"Android",text:"位置情報と環境音を組み合わせて登録するサービス。風景には音が欠かせないという考え方、サウンドスケープをサービスとして組み込んだ作品。ユーザがスマートフォンで環境音を録音すると、音声をGPSや日付の情報と共にサーバにアップロードし、マップ上で閲覧することが出来る。Open Hack U 2014発表作品。",implement:"チームで制作。アプリの大部分を担当した。Androidアプリケーションとして実装。Yahoo Map APIを使用して、録音された音声のマッピングを行っている。",keywords:["Android","soundscape","map","record","microphone","GPS"]},{name:"WristSlide",sub:"イメージセンサを用いた手首を滑らせるスマートウォッチの片手操作",img:"project-WristSlide-16-9",category:"Android",video:"w9eHDKby8ro",text:"スマートウォッチにおいて、スワイプのような連続的な入力を行うには、装着している手と反対の手で操作する必要がある。そこで、手首を机や壁、自身の身体などの上で滑らせることによって、スマートウォッチを片手で操作する手法を提案。バンド下部に埋め込まれたイメージセンサによって、物体に接地した状態での手首の移動量を取得し、片手での2次元方向の入力を可能にした。",implement:"Android、Wear OSアプリケーションとして実装。スマートフォンと超小型ワイヤレスマウスをペアリングし、自端末にADBコマンドを発行することによってマウスイベントを監視。スマートフォンとペアリングされたスマートウォッチに移動量を送信してアプリケーションを操作する。",keywords:["Android","Wear OS","Android Debug Bridge","Human Computer Interaction","smartwatch","image sensor","mouse"]},{name:"SoumuSSML",sub:"視覚障害者のための新しい電子書籍形式に対応したクラウド編集システム",img:"project-SoumuSSML-16-9",category:"Web",text:"電子書籍を読む際などに用いられる、OS組み込みの読み上げ機能にはイントネーションの間違いが未だに多く残っている。そのため現在は、音声合成マークアップ言語SSMLを用いてイントネーションを出版社の人間が編集し、合成された音声を電子書籍に同封するというやり方が一般的である。そこで、電子書籍に音声ファイルではなくイントネーションを記したデータを同封する新しい電子書籍フォーマットの提案を行った。同時に、出版社の人間がイントネーションを編集し、音声をその都度確認しながらクラウド上で編集するシステムを構築した。実証実験により効果的なツールと認められ、W3Cによって電子書籍の形式EPUBの次期仕様に盛り込まれた。総務省とアルバイト先の想隆社との共同プロジェクト。",implement:"チームで制作。フロントエンドを担当した。サーバはPHPで実装。主な機能は以下の通り。電子書籍のアップロードと初期の発音記号の自動生成、編集した発音記号（イントネーションを表す）のバージョン管理とDiff表示、編集した音声をその場で再生、書籍内の文字検索、編集者の編集権限変更、ゲラ（校正用の印刷）の印刷機能とコメントのPDFアップロード、書籍内の画像表示。",keywords:["E-book","EPUB","SSML","W3C","co-authoring","version control"],links:{"実証実験報告書":"http://www.soumu.go.jp/main_content/000499711.pdf"}},{name:"BuddaBeautify",sub:"己の精神を磨くことで見た目も美しくなれるメディアアート作品",img:"project-BuddaBeautify-16-9",category:"Desktop",video:"X0SrajYh780",text:"Nam June PaikによるTV-Buddhaにインスパイアを受け、己の精神を磨くことと画像処理による美顔化を組み合わせた作品。カメラとプロジェクタによって作られた擬似的な鏡の前で、ユーザは座禅を行う。身体のブレが少ない時は心の乱れも少ないと判断し、鏡の自分の顔に徐々に美顔化処理を行っていく。体験時間は1分程度。",implement:"チームで制作。Processingで実装。身体にブレの度合いは動体験知によって数値化する。動体検知の実装を担当。顔の美顔化処理には、関川ら[1]のアルゴリズムを利用。",keywords:["media art","motion detection","image processing"],links:{"ε-フィルタを用いたリアルタイム顔画像美観化システム":"https://www.ieice.org/iss/jpn/Publications/issposter_2015/data/pdf/ISS-P-78.pdf"}},{name:"Make if",sub:"カードを並べてif文をつくるプログラミング教育カードゲーム",img:"project-Makeif-16-9",category:"Design",text:"プログラミングをする時に必ず使う「if文」をカードで遊びながら学べるゲーム。テキストエディタを模したプレイマットの上に順番にカードを置いていき、if文が完成すると条件分岐によってカードを引かなくてはならない。早く手札を使い切った人が勝利。プログラミング未経験者でも遊ぶことが可能。2017年にゲームマーケット、及びコミックマーケットにて頒布。",implement:"アナログゲームサークルfumblewaals（ファンブルワールス）で制作。主にデザインを担当。Adobe Illustratorを使用。",keywords:["programming","card game","analog game"],links:{"商品詳細ページ":"http://fumblewaals.com/portfolio/make-if/",fumblewaals:"http://fumblewaals.com"}}]},function(e,t,i){"use strict";var n=r(i(6));r(i(3));function r(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projects",'<div class="pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1" each="{w, i in projects}"> <div class="card"><a href="#projects/{w.name.replace(/ /g, `_`)}"> <div class="wrapper"> <webp class="thumbnail" riot-src="{w.img}"></webp> </div> <div class="content"> <h4>{w.name}</h4> <p>{w.sub}</p> </div></a></div> </div>','projects,[data-is="projects"]{ padding: 0.75rem; display: flex; flex-wrap: wrap; } projects > div,[data-is="projects"] > div{ padding: 0.75rem; } projects > div > .card,[data-is="projects"] > div > .card{ cursor: pointer; background: white; height: 100%; box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1); border-radius: 0.3rem; } projects > div > .card:hover,[data-is="projects"] > div > .card:hover{ box-shadow: 0 8px 10px rgba(10, 10, 10, 0.1), 0 0 6px 4px rgba(10, 10, 10, 0.1); } projects > div > .card > a > .wrapper,[data-is="projects"] > div > .card > a > .wrapper{ position: relative; width: 100%; } projects > div > .card > a > .wrapper:before,[data-is="projects"] > div > .card > a > .wrapper:before{ content: \'\'; display: block; padding-top: 56.25%; } projects > div > .card > a > .wrapper img,[data-is="projects"] > div > .card > a > .wrapper img{ position: absolute; top: 0; left: 0; border-radius: 0.3rem 0.3rem 0 0; display: block; width: 100%; background: #ddd; border-bottom: 1px solid #ddd; } projects > div > .card > a > .content,[data-is="projects"] > div > .card > a > .content{ padding: 0.8rem 1rem; } projects > div > .card > a > .content h4,[data-is="projects"] > div > .card > a > .content h4{ font-size: 1.2rem; margin-bottom: 0.3rem; } projects > div > .card > a > .content p,[data-is="projects"] > div > .card > a > .content p{ font-size: 0.9rem; }',"",function(e){var t=this;this.category="All",this.projects=void 0===this.opts.limit?n.default:n.default.slice(0,this.opts.limit),this.on("updated",function(){t.opts.category&&t.opts.category!==t.category&&t.update({category:t.opts.category,projects:"All"===t.opts.category?n.default:n.default.filter(function(e){return e.category===t.opts.category})})})})},function(e,t,i){"use strict";var n=r(i(23));r(i(3));function r(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("about",'<div class="about-img pure-u-sm-1-4 pure-u-1-2"> <div class="face-wrapper pure-u-1-2"><img src="resources/icon-pvcresin.svg"></div> </div> <div class="pure-u-sm-1-24 pure-u-1-1"></div> <div class="about-text pure-u-sm-17-24 pure-u-1-1">Web Frontend が好きなエンジニア。<br>学生時代はインタラクション（HCI）を専攻し、主にモバイル / ウェアラブルデバイスに関する研究を行う。<br>人と意見を交換し、議論しながらモノ作りがしたい。<br>新しいものが好きなので、貪欲に学んでいく。 <ul> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-birthday-cake" aria-hidden="true"></i></div> <div class="right pure-u-11-12">{birthday} (Age: {age})</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-envelope" aria-hidden="true"></i></div> <div class="right pure-u-11-12">pvcresin0730@gmail.com</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-map-marker-alt" aria-hidden="true"></i></div> <div class="right pure-u-11-12">Omotesando, Tokyo</div> </li> <li class="pure-g"> <div class="icon pure-u-1-12 pure-u-lg-1-24"><i class="fa fa-suitcase" aria-hidden="true"></i></div> <div class="right pure-u-11-12"><span>Frontend Engineer{\' \'}</span><a class="company" href="https://jp.corp-sansan.com/" target="_blank">@ Sansan</a></div> </li> </ul> </div>','about,[data-is="about"]{ padding: 0.75rem; } about > .about-img,[data-is="about"] > .about-img{ text-align: center; padding: 0.75rem; margin: 0 auto; } about > .about-img .face-wrapper,[data-is="about"] > .about-img .face-wrapper{ position: relative; width: 100%; } about > .about-img .face-wrapper:before,[data-is="about"] > .about-img .face-wrapper:before{ content: ""; display: block; padding-top: 100%; } about > .about-img .face-wrapper img,[data-is="about"] > .about-img .face-wrapper img{ position: absolute; top: 0; left: 0; bottom: 0; right: 0; border-radius: 50%; width: 100%; background: gray; } about > .about-text,[data-is="about"] > .about-text{ text-align: justify; display: flex; flex-direction: column; justify-content: center; padding: 0.75rem; font-size: 1.1rem; } about > .about-text ul li,[data-is="about"] > .about-text ul li{ display: flex; margin-top: 0.5rem; } about > .about-text ul li .icon,[data-is="about"] > .about-text ul li .icon{ display: flex; justify-content: center; align-items: baseline; font-size: 1.5rem; } about > .about-text ul li .right,[data-is="about"] > .about-text ul li .right{ display: flex; align-items: center; padding-left: 0.5rem; } about > .about-text ul li .right a,[data-is="about"] > .about-text ul li .right a{ color: #4e9adb; } about > .about-text ul li .right a:hover,[data-is="about"] > .about-text ul li .right a:hover{ text-decoration: underline; } about > .about-text ul li .right a.company,[data-is="about"] > .about-text ul li .right a.company{ margin-left: 0.3rem; }','class="pure-g"',function(e){this.birthday="1994-07-30",this.age=(0,n.default)().diff(this.birthday,"years")})},function(e,t,i){"use strict";i(0).tag2("social",'<ul> <li><a href="https://www.facebook.com/raika.toriyama" target="_blank" title="Facebook" rel="noopener noreferrer"><i class="fab fa-facebook-f fa-2x"></i></a></li> <li><a href="https://twitter.com/pvcresin/" target="_blank" title="Twitter" rel="noopener noreferrer"><i class="fab fa-twitter fa-2x"></i></a></li> <li><a href="https://github.com/pvcresin/" target="_blank" title="GitHub" rel="noopener noreferrer"><i class="fab fa-github fa-2x"></i></a></li> <li><a href="https://www.instagram.com/pvcresin/" target="_blank" title="Instagram" rel="noopener noreferrer"><i class="fab fa-instagram fa-2x"></i></a></li> <li><a href="https://pvcresin.hatenablog.com/" target="_blank" title="Hatena Blog" rel="noopener noreferrer"> <div class="icon-box hatena"></div></a></li> <li><a href="https://www.wantedly.com/users/18220619" target="_blank" title="Wantedly" rel="noopener noreferrer"> <div class="icon-box wantedly"></div></a></li> </ul>','social > ul,[data-is="social"] > ul{ display: flex; justify-content: center; align-items: center; padding: 1rem 0; } social > ul li,[data-is="social"] > ul li{ display: inline-block; } social > ul li a,[data-is="social"] > ul li a{ color: #525252; vertical-align: sub; display: inline-block; width: 3rem; } social > ul li a:hover,[data-is="social"] > ul li a:hover{ color: white; } social > ul li a .icon-box,[data-is="social"] > ul li a .icon-box{ margin: auto; width: 2rem; height: 2rem; background: #525252; } social > ul li a .icon-box:hover,[data-is="social"] > ul li a .icon-box:hover{ background: white; } social > ul li a .icon-box.hatena,[data-is="social"] > ul li a .icon-box.hatena{ mask-image: url(./resources/icon-hatena.svg); -webkit-mask-image: url(./resources/icon-hatena.svg); } social > ul li a .icon-box.wantedly,[data-is="social"] > ul li a .icon-box.wantedly{ mask-image: url(./resources/icon-wantedly.svg); -webkit-mask-image: url(./resources/icon-wantedly.svg); }','id="social"',function(e){})},function(e,t,i){"use strict";i(0).tag2("other",'<section> <div class="container"> <h1>Page Not Found</h1> </div> </section> <footer></footer>','other,[data-is="other"]{ text-align: center; min-height: 100vh; display: flex; flex-direction: column; background: #2b2b2b; color: #efefef; } other section,[data-is="other"] section{ flex-grow: 1; display: flex; align-items: center; }',"",function(e){})},function(e,t,i){"use strict";i(0).tag2("tags",'<span each="{t in opts.tags}">{t}</span>','tags,[data-is="tags"]{ display: flex; flex-wrap: wrap; margin: 1rem 0; margin: 0.75rem 0; } tags > span,[data-is="tags"] > span{ margin: 0 0.5rem 0.5rem 0; padding: 0.1rem 0.3rem; border-radius: 0.2rem; background: #555; color: #eee; }',"",function(e){})},function(e,t,i){"use strict";a(i(11));var n=a(i(6)),r=(a(i(3)),a(i(2)));function a(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projectdetail",'<div class="container"> <section> <div class="video-frame" if="{project.video !== undefined}"> <iframe riot-src="https://www.youtube.com/embed/{project.video}?rel=0" frameborder="0" allow="encrypted-media" allowfullscreen></iframe> </div> <div class="img-frame" if="{project.video === undefined}"> <webp riot-src="{project.img}"></webp> </div> <h1> <p>{project.name + \': \'}</p><span>{project.sub}</span> </h1> <tags tags="{project.keywords}"></tags> <div class="chapter"> <div class="chapter-title"> <h2>Abstract</h2> <hr> </div> <p>{project.text}</p> </div> <div class="chapter"> <div class="chapter-title"> <h2>Implementation</h2> <hr> </div> <p>{project.implement}</p> </div> <div class="chapter" if="{project.links !== undefined}"> <div class="chapter-title"> <h2>Links</h2> <hr> </div> <ol> <li each="{value, key in project.links}"><span>{key + \': \'}</span><span><a href="{value}">{value}</a></span></li> </ol> </div> </section> </div> <footer></footer>','projectdetail,[data-is="projectdetail"]{ min-height: 100vh; display: block; background: #2b2b2b; color: #efefef; } projectdetail > div > section,[data-is="projectdetail"] > div > section{ padding: 1.5rem; } projectdetail > div > section .video-frame,[data-is="projectdetail"] > div > section .video-frame{ position: relative; width: 100%; padding-top: 56.25%; } projectdetail > div > section .video-frame > iframe,[data-is="projectdetail"] > div > section .video-frame > iframe{ position: absolute; top: 0; right: 0; width: 100%; height: 100%; background: black; } projectdetail > div > section .img-frame,[data-is="projectdetail"] > div > section .img-frame{ width: 100%; } projectdetail > div > section .img-frame > img,[data-is="projectdetail"] > div > section .img-frame > img{ width: 100%; height: 100%; background: black; } projectdetail > div > section h1,[data-is="projectdetail"] > div > section h1{ color: white; margin: 1rem 0; text-align: justify; } projectdetail > div > section .chapter .chapter-title,[data-is="projectdetail"] > div > section .chapter .chapter-title{ display: flex; justify-content: space-between; align-items: center; margin: 1.5rem 0 1rem 0; } projectdetail > div > section .chapter .chapter-title > h2,[data-is="projectdetail"] > div > section .chapter .chapter-title > h2{ font-size: 1.5rem; margin-right: 0.5rem; color: white; } projectdetail > div > section .chapter .chapter-title > hr,[data-is="projectdetail"] > div > section .chapter .chapter-title > hr{ flex-grow: 1; border: 1.5px solid gray; border-radius: 1rem; min-width: 1rem; background: gray; } projectdetail > div > section .chapter p,[data-is="projectdetail"] > div > section .chapter p{ margin: 0.6rem 0; text-align: justify; } projectdetail > div > section .chapter ol,[data-is="projectdetail"] > div > section .chapter ol{ padding-left: 2rem; } projectdetail > div > section .chapter ol li,[data-is="projectdetail"] > div > section .chapter ol li{ list-style-type: decimal; line-height: 1.8rem; } projectdetail > div > section .chapter ol li a,[data-is="projectdetail"] > div > section .chapter ol li a{ color: #4e9adb; } projectdetail > div > section .chapter ol li a:hover,[data-is="projectdetail"] > div > section .chapter ol li a:hover{ text-decoration: underline; } @media (max-width: 768px) { projectdetail h1,[data-is="projectdetail"] h1{ font-size: 1.5rem; } projectdetail h2,[data-is="projectdetail"] h2{ font-size: 1.3rem; } }',"",function(e){var i=this;this.project={name:"",sub:"",img:"",video:"",text:"",implement:"",keywords:[]},this.on("route",function(t){i.update({project:n.default.filter(function(e){return e.name===t.replace(/_/g," ")})[0]}),r.default.move()})})},function(e,t,i){"use strict";a(i(7));var n=a(i(5)),r=a(i(2));function a(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("projectall",'<section> <div class="container"> <h2 class="section-title">Projects</h2> <ul><a each="{p in categories}" onclick="{click.bind(this, p)}"> <li if="{selectedCategory !== p}">{p}</li> <li class="selected" if="{selectedCategory === p}">{p}</li></a></ul> <projects category="{selectedCategory}"></projects> </div> </section> <footer></footer>','projectall > section,[data-is="projectall"] > section{ background: #eeeeee; color: #222222; min-height: 100vh; } projectall > section .container ul,[data-is="projectall"] > section .container ul{ display: flex; justify-content: space-between; max-width: 400px; padding: 0 1.5rem; margin: 1rem auto 0 auto; } projectall > section .container ul li,[data-is="projectall"] > section .container ul li{ font-size: 0.8rem; display: inline-block; color: gray; padding: 0.5rem 0.5rem; cursor: pointer; border: 1px solid; border-radius: 2rem; text-align: center; } projectall > section .container ul li.selected,[data-is="projectall"] > section .container ul li.selected{ color: white; background: gray; border-color: gray; }',"",function(e){var t=this;this.categories=["All","Android","Web","Desktop","Design"],this.selectedCategory,this.on("route",function(){void 0!==n.default.query().category?t.update({selectedCategory:n.default.query().category}):t.update({selectedCategory:t.categories[0]}),r.default.move()}),this.click=function(e){this.update({selectedCategory:e})}.bind(this)})},function(e,t,i){"use strict";i(0).tag2("like",'<h2 class="section-title">Like</h2> <div class="pure-g"> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Do</h3> <hr> <ul> <li each="{t, i in do}">{l}<span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Watch</h3> <hr> <ul> <li each="{t, i in watch}"><span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> <div class="like-box pure-u-1-1 pure-u-sm-1-2 pure-u-md-1-3"> <div class="like"> <h3>Eat</h3> <hr> <ul> <li each="{t, i in eat}"><span class="icon">{i}</span><span class="text">{t}</span></li> </ul> </div> </div> </div>','like,[data-is="like"]{ display: block; } like > div,[data-is="like"] > div{ padding: 0.75rem; } like > div .like-box,[data-is="like"] > div .like-box{ padding: 0.75rem; } like > div .like-box .like,[data-is="like"] > div .like-box .like{ background: #414141; padding: 0.6rem 1rem; border-radius: 0.3rem; } like > div .like-box .like h3,[data-is="like"] > div .like-box .like h3{ font-size: 1.4rem; margin-bottom: 0.5rem; } like > div .like-box .like hr,[data-is="like"] > div .like-box .like hr{ border-radius: 1rem; margin: 0.5rem 0; border: 1.5px solid; border-color: grey; background: gray; } like > div .like-box .like ul li,[data-is="like"] > div .like-box .like ul li{ line-height: 2rem; } like > div .like-box .like ul li .icon,[data-is="like"] > div .like-box .like ul li .icon{ font-size: 1.4rem; width: 2rem; display: inline-flex; justify-content: center; } like > div .like-box .like ul li .text,[data-is="like"] > div .like-box .like ul li .text{ font-size: 1.2rem; }',"",function(e){this.do={"💻":"プログラミング","👟":"散歩","🎤":"一人カラオケ","🚗":"ミニチュア集め"},this.watch={"🎬":"映画","😆":"お笑いネタ","👖":"服","📺":"メディアアート"},this.eat={"🍣":"寿司","🍕":"ピザ","🍜":"ラーメン","🍰":"ケーキ"}})},function(e,t,i){"use strict";i(0).tag2("skills",'<h2 class="section-title">Skills</h2> <div class="pure-g"> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills1}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> <ul class="skill-box pure-u-sm-1-2 pure-u-md-1-3 pure-u-1-1"> <li each="{s in skills2}"> <div class="skill-info"><span class="name">{s.name}</span><span class="sub">{s.sub}</span></div> <div class="bar"> <div class="level" riot-style="width:{s.level};"></div> </div> </li> </ul> </div>','skills > div,[data-is="skills"] > div{ padding: 0.75rem; } skills > div .skill-box,[data-is="skills"] > div .skill-box{ padding: 0.75rem; } skills > div .skill-box > li,[data-is="skills"] > div .skill-box > li{ margin-bottom: 1.2rem; } skills > div .skill-box > li .skill-info,[data-is="skills"] > div .skill-box > li .skill-info{ display: flex; justify-content: space-between; align-items: baseline; } skills > div .skill-box > li .name,[data-is="skills"] > div .skill-box > li .name{ font-size: 1.3em; margin-right: 0.5rem; font-weight: 300; } skills > div .skill-box > li .sub,[data-is="skills"] > div .skill-box > li .sub{ font-size: 0.85rem; color: #bdbdbd; } skills > div .skill-box > li .bar,[data-is="skills"] > div .skill-box > li .bar{ background: #4b4b4b; border-radius: 1rem; } skills > div .skill-box > li .bar .level,[data-is="skills"] > div .skill-box > li .bar .level{ height: 0.7rem; border-radius: 1rem; background: #eaeaea; }',"",function(e){this.skills=[{name:"Android",sub:"Rx Okhttp Retrofit",level:"70%"},{name:"Kotlin",sub:"Anko Ktor",level:"80%"},{name:"Java",sub:"",level:"85%"},{name:"Processing",sub:"",level:"90%"}],this.skills1=[{name:"HTML",sub:"Pug Markdown",level:"90%"},{name:"CSS",sub:"Sass PostCSS CSS-Modules",level:"85%"},{name:"JavaScript",sub:"React Vue Node",level:"90%"},{name:"PHP",sub:"",level:"40%"}],this.skills2=[{name:"Git",sub:"",level:"60%"},{name:"Illustrator",sub:"",level:"80%"},{name:"Cacoo",sub:"",level:"40%"},{name:"Prott",sub:"",level:"30%"}]})},function(e,t,i){"use strict";var n,r=i(1);(n=r)&&n.__esModule;i(0).tag2("education",'<h2 class="section-title">Education</h2> <list items="{schools}"></list>',"","",function(e){this.schools=[{date:"2010-04 - 2013-03",title:"本郷高等学校",texts:["東京・巣鴨にある私立の中高一貫校","生徒会・料理研究会・美術部に所属"],link:"http://www.hongo.ed.jp/"},{date:"2013-04 - 2017-03",title:"明治大学",texts:["総合数理学部 先端メディアサイエンス学科 1期生","PCでコンテンツ制作をするサークルを立ち上げ、幹事長を務める"],link:"http://www.meiji.ac.jp/ims/subject/fms/"},{date:"2017-04 - 2019-03",title:"明治大学大学院",texts:["先端数理科学研究科 先端メディアサイエンス専攻 修士（工学）","モバイル / ウェアラブルデバイスに関するインタラクションの研究","アルバイトでフロントエンドエンジニアとして働く"],link:"http://www.meiji.ac.jp/ams/professor/FMS.html"}]})},function(e,t,i){"use strict";r(i(8)),r(i(16)),r(i(15)),r(i(14));var n=r(i(2));function r(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("profile",'<section> <div class="container"> <h2 class="section-title">Profile</h2> <about></about> <like></like> <skills></skills> <education></education> </div> </section> <footer></footer>','profile,[data-is="profile"]{ display: block; background: #2b2b2b; color: #efefef; }',"",function(e){this.on("route",function(){n.default.move()})})},function(e,t,i){"use strict";i(0).tag2("more",'<a href="{opts.link}" title="{opts.title}"><span class="more-button">{text}</span></a>','more,[data-is="more"]{ padding: 0 1.5rem 1.5rem 1.5rem; display: flex; justify-content: center; } more > a > span,[data-is="more"] > a > span{ padding: 0.5rem; background: grey; color: white; border-radius: 3rem; min-width: 10rem; text-align: center; display: block; } more > a > span:hover,[data-is="more"] > a > span:hover{ background: #a3a3a3; }',"",function(e){this.text=void 0!==this.opts.text?this.opts.text:"more"})},function(e,t,i){"use strict";var n,r=i(1);(n=r)&&n.__esModule;i(0).tag2("clubs",'<list items="{clubs}"></list>',"","",function(e){this.clubs=[{date:"2013-04 - 2017-03",title:"総合コンテンツ制作サークル",texts:["デジタルコンテンツ制作（音楽・動画・ゲーム・イラスト・文芸）を行う大学内のサークル","同人イベントでの頒布（コミックマーケット・M3）","設立メンバー＆幹事長"],link:"https://sokon.jp/"},{date:"2016-04 - 2017-06",title:"Nakano Computer Club",texts:["プログラミングに関する情報共有や勉強会の実施を行う大学内のサークル","同人イベントでの頒布（コミックマーケット・技術書典）"],link:"https://meiji-ncc.tech/"},{date:"2017-04 - 2019-03",title:"fumble waals",texts:["オリジナルボードゲームの制作を行う有志によるサークル","同人イベントでの頒布（コミックマーケット・ゲームマーケット）","企画から制作、販売まで行うが、主にデザインを担当"],link:"http://fumblewaals.com/"}]})},function(e,t,i){"use strict";var n,r=i(1);(n=r)&&n.__esModule;i(0).tag2("publications",'<list items="{publications}"></list>',"","",function(e){this.publications=[{date:"2015-12",title:"SensorPipe",texts:["鳥山 らいか, 宮下 芳明. SensorPipe: スマートフォン側のプログラミングを一切行わないスマートフォン連携プログラミング, 第23回インタラクティブシステムとソフトウェアに関するワークショップ論文集 (WISS 2015), 2015."],link:"https://research.miyashita.com/2015/D160/"},{date:"2018-03",title:"インタラクティブパッケージ",texts:["加藤邦拓, 薄羽大樹, 鳥山らいか, 竹内まゆ, 野崎玲那, 細谷美月, 宮下芳明. タッチパネルを拡張する紙製インタフェースを搭載したインタラクティブパッケージの開発, インタラクション2018論文集, pp.889-894, 2018."],link:"https://research.miyashita.com/2018/D193/"},{date:"2018-09",title:"透明キーボード",texts:["鳥山らいか, 宮下芳明. スマートウォッチ向けのキートップが透明な日本語かな入力インタフェース, 第26回インタラクティブシステムとソフトウェアに関するワークショップ論文集 (WISS 2018), 2018."],link:"https://research.miyashita.com/papers/D202"},{date:"2019-03",title:"InvisibleFlick",texts:["鳥山らいか, 宮下芳明. InvisibleFlick: 小型タッチスクリーン端末におけるキートップが透明な日本語入力キーボード, 研究報告ヒューマンコンピュータインタラクション(HCI), Vol.2019-HCI-182, Issue.27, pp. 1-8, 2019."],link:"https://research.miyashita.com/papers/D218"}]})},function(e,t,i){"use strict";var n,r=i(1);(n=r)&&n.__esModule;i(0).tag2("awards",'<list items="{awards}"></list>',"","",function(e){this.awards=[{date:"2015-05",title:"Cloud n アプリケーションコンテスト",texts:["WebRTC賞 受賞","チーム：意識中くらいとして参加","プロジェクト: Ichimonitto"],link:"http://www.cloudn-service.com/cam04-deven/decon/tohyo/"},{date:"2017-12",title:"信州未来アプリコンテスト0",texts:["信越情報通信懇談会会長賞 受賞","チーム：意識中くらいとして参加","プロジェクト: MiddleDrive"],link:"https://shinshu-futureapp.net/information/contest/"},{date:"2010-03",title:"第182回 HCI研究会",texts:["学生奨励賞 受賞","スマートウォッチ向けのソフトウェアキーボードに関する研究（修士論文）","プロジェクト: InvisibleFlick"],link:"http://www.sighci.jp/contents/page/news"}]})},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,i){(function(zi){zi.exports=function(){"use strict";var e,r;function g(){return e.apply(null,arguments)}function o(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function l(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function a(e){return void 0===e}function c(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function s(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function u(e,t){var i,n=[];for(i=0;i<e.length;++i)n.push(t(e[i],i));return n}function v(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e,t){for(var i in t)v(t,i)&&(e[i]=t[i]);return v(t,"toString")&&(e.toString=t.toString),v(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,i,n){return Ot(e,t,i,n,!0).utc()}function _(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function f(e){if(null==e._isValid){var t=_(e),i=r.call(t.parsedDateParts,function(e){return null!=e}),n=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&i);if(e._strict&&(n=n&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return n;e._isValid=n}return e._isValid}function p(e){var t=h(NaN);return null!=e?d(_(t),e):_(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),i=t.length>>>0,n=0;n<i;n++)if(n in t&&e.call(this,t[n],n,t))return!0;return!1};var m=g.momentProperties=[];function y(e,t){var i,n,r;if(a(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),a(t._i)||(e._i=t._i),a(t._f)||(e._f=t._f),a(t._l)||(e._l=t._l),a(t._strict)||(e._strict=t._strict),a(t._tzm)||(e._tzm=t._tzm),a(t._isUTC)||(e._isUTC=t._isUTC),a(t._offset)||(e._offset=t._offset),a(t._pf)||(e._pf=_(t)),a(t._locale)||(e._locale=t._locale),0<m.length)for(i=0;i<m.length;i++)n=m[i],a(r=t[n])||(e[n]=r);return e}var t=!1;function w(e){y(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===t&&(t=!0,g.updateOffset(this),t=!1)}function b(e){return e instanceof w||null!=e&&null!=e._isAMomentObject}function k(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function x(e){var t=+e,i=0;return 0!==t&&isFinite(t)&&(i=k(t)),i}function S(e,t,i){var n,r=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),s=0;for(n=0;n<r;n++)(i&&e[n]!==t[n]||!i&&x(e[n])!==x(t[n]))&&s++;return s+a}function M(e){!1===g.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn}function i(r,a){var s=!0;return d(function(){if(null!=g.deprecationHandler&&g.deprecationHandler(null,r),s){for(var e,t=[],i=0;i<arguments.length;i++){if(e="","object"==typeof arguments[i]){for(var n in e+="\n["+i+"] ",arguments[0])e+=n+": "+arguments[0][n]+", ";e=e.slice(0,-2)}else e=arguments[i];t.push(e)}M((Array.prototype.slice.call(t).join(""),(new Error).stack)),s=!1}return a.apply(this,arguments)},a)}var n,D={};function Y(e,t){null!=g.deprecationHandler&&g.deprecationHandler(e,t),D[e]||(M(),D[e]=!0)}function j(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function O(e,t){var i,n=d({},e);for(i in t)v(t,i)&&(l(e[i])&&l(t[i])?(n[i]={},d(n[i],e[i]),d(n[i],t[i])):null!=t[i]?n[i]=t[i]:delete n[i]);for(i in e)v(e,i)&&!v(t,i)&&l(e[i])&&(n[i]=d({},n[i]));return n}function T(e){null!=e&&this.set(e)}g.suppressDeprecationWarnings=!1,g.deprecationHandler=null,n=Object.keys?Object.keys:function(e){var t,i=[];for(t in e)v(e,t)&&i.push(t);return i};var P={};function C(e,t){var i=e.toLowerCase();P[i]=P[i+"s"]=P[t]=e}function N(e){return"string"==typeof e?P[e]||P[e.toLowerCase()]:void 0}function W(e){var t,i,n={};for(i in e)v(e,i)&&(t=N(i))&&(n[t]=e[i]);return n}var A={};function L(e,t){A[e]=t}function R(e){var t=[];for(var i in e)t.push({unit:i,priority:A[i]});return t.sort(function(e,t){return e.priority-t.priority}),t}function E(e,t,i){var n=""+Math.abs(e),r=t-n.length,a=0<=e;return(a?i?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+n}var H=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,I=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,F={},U={};function V(e,t,i,n){var r=n;"string"==typeof n&&(r=function(){return this[n]()}),e&&(U[e]=r),t&&(U[t[0]]=function(){return E(r.apply(this,arguments),t[1],t[2])}),i&&(U[i]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function G(e,t){return e.isValid()?(t=z(t,e.localeData()),F[t]=F[t]||function(n){var e,r,t,a=n.match(H);for(e=0,r=a.length;e<r;e++)U[a[e]]?a[e]=U[a[e]]:a[e]=(t=a[e]).match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"");return function(e){var t,i="";for(t=0;t<r;t++)i+=j(a[t])?a[t].call(e,n):a[t];return i}}(t),F[t](e)):e.localeData().invalidDate()}function z(e,t){var i=5;function n(e){return t.longDateFormat(e)||e}for(I.lastIndex=0;0<=i&&I.test(e);)e=e.replace(I,n),I.lastIndex=0,i-=1;return e}var $=/\d/,B=/\d\d/,Z=/\d{3}/,q=/\d{4}/,J=/[+-]?\d{6}/,K=/\d\d?/,Q=/\d\d\d\d?/,X=/\d\d\d\d\d\d?/,ee=/\d{1,3}/,te=/\d{1,4}/,ie=/[+-]?\d{1,6}/,ne=/\d+/,re=/[+-]?\d+/,ae=/Z|[+-]\d\d:?\d\d/gi,se=/Z|[+-]\d\d(?::?\d\d)?/gi,oe=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,le={};function ue(e,i,n){le[e]=j(i)?i:function(e,t){return e&&n?n:i}}function ce(e,t){return v(le,e)?le[e](t._strict,t._locale):new RegExp(de(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,i,n,r){return t||i||n||r})))}function de(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var he={};function fe(e,i){var t,n=i;for("string"==typeof e&&(e=[e]),c(i)&&(n=function(e,t){t[i]=x(e)}),t=0;t<e.length;t++)he[e[t]]=n}function pe(e,r){fe(e,function(e,t,i,n){i._w=i._w||{},r(e,i._w,i,n)})}var me=0,ge=1,ve=2,_e=3,ye=4,we=5,be=6,ke=7,xe=8;function Se(e){return Me(e)?366:365}function Me(e){return e%4==0&&e%100!=0||e%400==0}V("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),V(0,["YY",2],0,function(){return this.year()%100}),V(0,["YYYY",4],0,"year"),V(0,["YYYYY",5],0,"year"),V(0,["YYYYYY",6,!0],0,"year"),C("year","y"),L("year",1),ue("Y",re),ue("YY",K,B),ue("YYYY",te,q),ue("YYYYY",ie,J),ue("YYYYYY",ie,J),fe(["YYYYY","YYYYYY"],me),fe("YYYY",function(e,t){t[me]=2===e.length?g.parseTwoDigitYear(e):x(e)}),fe("YY",function(e,t){t[me]=g.parseTwoDigitYear(e)}),fe("Y",function(e,t){t[me]=parseInt(e,10)}),g.parseTwoDigitYear=function(e){return x(e)+(68<x(e)?1900:2e3)};var De,Ye=je("FullYear",!0);function je(t,i){return function(e){return null!=e?(Te(this,t,e),g.updateOffset(this,i),this):Oe(this,t)}}function Oe(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Te(e,t,i){e.isValid()&&!isNaN(i)&&("FullYear"===t&&Me(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](i,e.month(),Pe(i,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](i))}function Pe(e,t){if(isNaN(e)||isNaN(t))return NaN;var i,n=(t%(i=12)+i)%i;return e+=(t-n)/12,1===n?Me(e)?29:28:31-n%7%2}De=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},V("M",["MM",2],"Mo",function(){return this.month()+1}),V("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),V("MMMM",0,0,function(e){return this.localeData().months(this,e)}),C("month","M"),L("month",8),ue("M",K),ue("MM",K,B),ue("MMM",function(e,t){return t.monthsShortRegex(e)}),ue("MMMM",function(e,t){return t.monthsRegex(e)}),fe(["M","MM"],function(e,t){t[ge]=x(e)-1}),fe(["MMM","MMMM"],function(e,t,i,n){var r=i._locale.monthsParse(e,n,i._strict);null!=r?t[ge]=r:_(i).invalidMonth=e});var Ce=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ne="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),We="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ae(e,t,i){var n,r,a,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],n=0;n<12;++n)a=h([2e3,n]),this._shortMonthsParse[n]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[n]=this.months(a,"").toLocaleLowerCase();return i?"MMM"===t?-1!==(r=De.call(this._shortMonthsParse,s))?r:null:-1!==(r=De.call(this._longMonthsParse,s))?r:null:"MMM"===t?-1!==(r=De.call(this._shortMonthsParse,s))?r:-1!==(r=De.call(this._longMonthsParse,s))?r:null:-1!==(r=De.call(this._longMonthsParse,s))?r:-1!==(r=De.call(this._shortMonthsParse,s))?r:null}function Le(e,t){var i;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=x(t);else if(!c(t=e.localeData().monthsParse(t)))return e;return i=Math.min(e.date(),Pe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,i),e}function Re(e){return null!=e?(Le(this,e),g.updateOffset(this,!0),this):Oe(this,"Month")}var Ee=oe,He=oe;function Ie(){function e(e,t){return t.length-e.length}var t,i,n=[],r=[],a=[];for(t=0;t<12;t++)i=h([2e3,t]),n.push(this.monthsShort(i,"")),r.push(this.months(i,"")),a.push(this.months(i,"")),a.push(this.monthsShort(i,""));for(n.sort(e),r.sort(e),a.sort(e),t=0;t<12;t++)n[t]=de(n[t]),r[t]=de(r[t]);for(t=0;t<24;t++)a[t]=de(a[t]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+n.join("|")+")","i")}function Fe(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&0<=e&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function Ue(e,t,i){var n=7+t-i,r=(7+Fe(e,0,n).getUTCDay()-t)%7;return-r+n-1}function Ve(e,t,i,n,r){var a,s,o=(7+i-n)%7,l=Ue(e,n,r),u=1+7*(t-1)+o+l;return s=u<=0?Se(a=e-1)+u:u>Se(e)?(a=e+1,u-Se(e)):(a=e,u),{year:a,dayOfYear:s}}function Ge(e,t,i){var n,r,a=Ue(e.year(),t,i),s=Math.floor((e.dayOfYear()-a-1)/7)+1;return s<1?(r=e.year()-1,n=s+ze(r,t,i)):s>ze(e.year(),t,i)?(n=s-ze(e.year(),t,i),r=e.year()+1):(r=e.year(),n=s),{week:n,year:r}}function ze(e,t,i){var n=Ue(e,t,i),r=Ue(e+1,t,i);return(Se(e)-n+r)/7}V("w",["ww",2],"wo","week"),V("W",["WW",2],"Wo","isoWeek"),C("week","w"),C("isoWeek","W"),L("week",5),L("isoWeek",5),ue("w",K),ue("ww",K,B),ue("W",K),ue("WW",K,B),pe(["w","ww","W","WW"],function(e,t,i,n){t[n.substr(0,1)]=x(e)}),V("d",0,"do","day"),V("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),V("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),V("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),V("e",0,0,"weekday"),V("E",0,0,"isoWeekday"),C("day","d"),C("weekday","e"),C("isoWeekday","E"),L("day",11),L("weekday",11),L("isoWeekday",11),ue("d",K),ue("e",K),ue("E",K),ue("dd",function(e,t){return t.weekdaysMinRegex(e)}),ue("ddd",function(e,t){return t.weekdaysShortRegex(e)}),ue("dddd",function(e,t){return t.weekdaysRegex(e)}),pe(["dd","ddd","dddd"],function(e,t,i,n){var r=i._locale.weekdaysParse(e,n,i._strict);null!=r?t.d=r:_(i).invalidWeekday=e}),pe(["d","e","E"],function(e,t,i,n){t[n]=x(e)});var $e="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Be="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ze="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function qe(e,t,i){var n,r,a,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],n=0;n<7;++n)a=h([2e3,1]).day(n),this._minWeekdaysParse[n]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[n]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[n]=this.weekdays(a,"").toLocaleLowerCase();return i?"dddd"===t?-1!==(r=De.call(this._weekdaysParse,s))?r:null:"ddd"===t?-1!==(r=De.call(this._shortWeekdaysParse,s))?r:null:-1!==(r=De.call(this._minWeekdaysParse,s))?r:null:"dddd"===t?-1!==(r=De.call(this._weekdaysParse,s))?r:-1!==(r=De.call(this._shortWeekdaysParse,s))?r:-1!==(r=De.call(this._minWeekdaysParse,s))?r:null:"ddd"===t?-1!==(r=De.call(this._shortWeekdaysParse,s))?r:-1!==(r=De.call(this._weekdaysParse,s))?r:-1!==(r=De.call(this._minWeekdaysParse,s))?r:null:-1!==(r=De.call(this._minWeekdaysParse,s))?r:-1!==(r=De.call(this._weekdaysParse,s))?r:-1!==(r=De.call(this._shortWeekdaysParse,s))?r:null}var Je=oe,Ke=oe,Qe=oe;function Xe(){function e(e,t){return t.length-e.length}var t,i,n,r,a,s=[],o=[],l=[],u=[];for(t=0;t<7;t++)i=h([2e3,1]).day(t),n=this.weekdaysMin(i,""),r=this.weekdaysShort(i,""),a=this.weekdays(i,""),s.push(n),o.push(r),l.push(a),u.push(n),u.push(r),u.push(a);for(s.sort(e),o.sort(e),l.sort(e),u.sort(e),t=0;t<7;t++)o[t]=de(o[t]),l[t]=de(l[t]),u[t]=de(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function et(){return this.hours()%12||12}function tt(e,t){V(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function it(e,t){return t._meridiemParse}V("H",["HH",2],0,"hour"),V("h",["hh",2],0,et),V("k",["kk",2],0,function(){return this.hours()||24}),V("hmm",0,0,function(){return""+et.apply(this)+E(this.minutes(),2)}),V("hmmss",0,0,function(){return""+et.apply(this)+E(this.minutes(),2)+E(this.seconds(),2)}),V("Hmm",0,0,function(){return""+this.hours()+E(this.minutes(),2)}),V("Hmmss",0,0,function(){return""+this.hours()+E(this.minutes(),2)+E(this.seconds(),2)}),tt("a",!0),tt("A",!1),C("hour","h"),L("hour",13),ue("a",it),ue("A",it),ue("H",K),ue("h",K),ue("k",K),ue("HH",K,B),ue("hh",K,B),ue("kk",K,B),ue("hmm",Q),ue("hmmss",X),ue("Hmm",Q),ue("Hmmss",X),fe(["H","HH"],_e),fe(["k","kk"],function(e,t,i){var n=x(e);t[_e]=24===n?0:n}),fe(["a","A"],function(e,t,i){i._isPm=i._locale.isPM(e),i._meridiem=e}),fe(["h","hh"],function(e,t,i){t[_e]=x(e),_(i).bigHour=!0}),fe("hmm",function(e,t,i){var n=e.length-2;t[_e]=x(e.substr(0,n)),t[ye]=x(e.substr(n)),_(i).bigHour=!0}),fe("hmmss",function(e,t,i){var n=e.length-4,r=e.length-2;t[_e]=x(e.substr(0,n)),t[ye]=x(e.substr(n,2)),t[we]=x(e.substr(r)),_(i).bigHour=!0}),fe("Hmm",function(e,t,i){var n=e.length-2;t[_e]=x(e.substr(0,n)),t[ye]=x(e.substr(n))}),fe("Hmmss",function(e,t,i){var n=e.length-4,r=e.length-2;t[_e]=x(e.substr(0,n)),t[ye]=x(e.substr(n,2)),t[we]=x(e.substr(r))});var nt,rt=je("Hours",!0),at={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ne,monthsShort:We,week:{dow:0,doy:6},weekdays:$e,weekdaysMin:Ze,weekdaysShort:Be,meridiemParse:/[ap]\.?m?\.?/i},st={},ot={};function lt(e){return e?e.toLowerCase().replace("_","-"):e}function ut(e){var t=null;if(!st[e]&&void 0!==zi&&zi&&zi.exports)try{t=nt._abbr,!function(){var e=new Error('Cannot find module "undefined"');throw e.code="MODULE_NOT_FOUND",e}(),ct(t)}catch(e){}return st[e]}function ct(e,t){var i;return e&&(i=a(t)?ht(e):dt(e,t))&&(nt=i),nt._abbr}function dt(e,t){if(null===t)return delete st[e],null;var i=at;if(t.abbr=e,null!=st[e])Y("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),i=st[e]._config;else if(null!=t.parentLocale){if(null==st[t.parentLocale])return ot[t.parentLocale]||(ot[t.parentLocale]=[]),ot[t.parentLocale].push({name:e,config:t}),null;i=st[t.parentLocale]._config}return st[e]=new T(O(i,t)),ot[e]&&ot[e].forEach(function(e){dt(e.name,e.config)}),ct(e),st[e]}function ht(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return nt;if(!o(e)){if(t=ut(e))return t;e=[e]}return function(e){for(var t,i,n,r,a=0;a<e.length;){for(r=lt(e[a]).split("-"),t=r.length,i=(i=lt(e[a+1]))?i.split("-"):null;0<t;){if(n=ut(r.slice(0,t).join("-")))return n;if(i&&i.length>=t&&S(r,i,!0)>=t-1)break;t--}a++}return null}(e)}function ft(e){var t,i=e._a;return i&&-2===_(e).overflow&&(t=i[ge]<0||11<i[ge]?ge:i[ve]<1||i[ve]>Pe(i[me],i[ge])?ve:i[_e]<0||24<i[_e]||24===i[_e]&&(0!==i[ye]||0!==i[we]||0!==i[be])?_e:i[ye]<0||59<i[ye]?ye:i[we]<0||59<i[we]?we:i[be]<0||999<i[be]?be:-1,_(e)._overflowDayOfYear&&(t<me||ve<t)&&(t=ve),_(e)._overflowWeeks&&-1===t&&(t=ke),_(e)._overflowWeekday&&-1===t&&(t=xe),_(e).overflow=t),e}function pt(e,t,i){return null!=e?e:null!=t?t:i}function mt(e){var t,i,n,r,a,s,o,l=[];if(!e._d){for(s=e,o=void 0,o=new Date(g.now()),n=s._useUTC?[o.getUTCFullYear(),o.getUTCMonth(),o.getUTCDate()]:[o.getFullYear(),o.getMonth(),o.getDate()],e._w&&null==e._a[ve]&&null==e._a[ge]&&function(e){var t,i,n,r,a,s,o,l;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)a=1,s=4,i=pt(t.GG,e._a[me],Ge(Tt(),1,4).year),n=pt(t.W,1),((r=pt(t.E,1))<1||7<r)&&(l=!0);else{a=e._locale._week.dow,s=e._locale._week.doy;var u=Ge(Tt(),a,s);i=pt(t.gg,e._a[me],u.year),n=pt(t.w,u.week),null!=t.d?((r=t.d)<0||6<r)&&(l=!0):null!=t.e?(r=t.e+a,(t.e<0||6<t.e)&&(l=!0)):r=a}n<1||n>ze(i,a,s)?_(e)._overflowWeeks=!0:null!=l?_(e)._overflowWeekday=!0:(o=Ve(i,n,r,a,s),e._a[me]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(a=pt(e._a[me],n[me]),(e._dayOfYear>Se(a)||0===e._dayOfYear)&&(_(e)._overflowDayOfYear=!0),i=Fe(a,0,e._dayOfYear),e._a[ge]=i.getUTCMonth(),e._a[ve]=i.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=l[t]=n[t];for(;t<7;t++)e._a[t]=l[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[_e]&&0===e._a[ye]&&0===e._a[we]&&0===e._a[be]&&(e._nextDay=!0,e._a[_e]=0),e._d=(e._useUTC?Fe:function(e,t,i,n,r,a,s){var o=new Date(e,t,i,n,r,a,s);return e<100&&0<=e&&isFinite(o.getFullYear())&&o.setFullYear(e),o}).apply(null,l),r=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[_e]=24),e._w&&void 0!==e._w.d&&e._w.d!==r&&(_(e).weekdayMismatch=!0)}}var gt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,vt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,_t=/Z|[+-]\d\d(?::?\d\d)?/,yt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],wt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],bt=/^\/?Date\((\-?\d+)/i;function kt(e){var t,i,n,r,a,s,o=e._i,l=gt.exec(o)||vt.exec(o);if(l){for(_(e).iso=!0,t=0,i=yt.length;t<i;t++)if(yt[t][1].exec(l[1])){r=yt[t][0],n=!1!==yt[t][2];break}if(null==r)return void(e._isValid=!1);if(l[3]){for(t=0,i=wt.length;t<i;t++)if(wt[t][1].exec(l[3])){a=(l[2]||" ")+wt[t][0];break}if(null==a)return void(e._isValid=!1)}if(!n&&null!=a)return void(e._isValid=!1);if(l[4]){if(!_t.exec(l[4]))return void(e._isValid=!1);s="Z"}e._f=r+(a||"")+(s||""),Yt(e)}else e._isValid=!1}var xt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function St(e,t,i,n,r,a){var s,o,l=[(s=e,o=parseInt(s,10),o<=49?2e3+o:o<=999?1900+o:o),We.indexOf(t),parseInt(i,10),parseInt(n,10),parseInt(r,10)];return a&&l.push(parseInt(a,10)),l}var Mt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Dt(e){var t=xt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim());if(t){var i=St(t[4],t[3],t[2],t[5],t[6],t[7]);if(!function(e,t,i){if(e){var n=Be.indexOf(e),r=new Date(t[0],t[1],t[2]).getDay();if(n!==r)return _(i).weekdayMismatch=!0,i._isValid=!1}return!0}(t[1],i,e))return;e._a=i,e._tzm=function(e,t,i){if(e)return Mt[e];if(t)return 0;var n=parseInt(i,10),r=n%100,a=(n-r)/100;return 60*a+r}(t[8],t[9],t[10]),e._d=Fe.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),_(e).rfc2822=!0}else e._isValid=!1}function Yt(e){if(e._f!==g.ISO_8601)if(e._f!==g.RFC_2822){e._a=[],_(e).empty=!0;var t,i,n,r,a,s=""+e._i,o=s.length,l=0;for(n=z(e._f,e._locale).match(H)||[],t=0;t<n.length;t++)r=n[t],(i=(s.match(ce(r,e))||[])[0])&&(0<(a=s.substr(0,s.indexOf(i))).length&&_(e).unusedInput.push(a),s=s.slice(s.indexOf(i)+i.length),l+=i.length),U[r]?(i?_(e).empty=!1:_(e).unusedTokens.push(r),f=r,m=e,null!=(p=i)&&v(he,f)&&he[f](p,m._a,m,f)):e._strict&&!i&&_(e).unusedTokens.push(r);_(e).charsLeftOver=o-l,0<s.length&&_(e).unusedInput.push(s),e._a[_e]<=12&&!0===_(e).bigHour&&0<e._a[_e]&&(_(e).bigHour=void 0),_(e).parsedDateParts=e._a.slice(0),_(e).meridiem=e._meridiem,e._a[_e]=(u=e._locale,c=e._a[_e],null==(d=e._meridiem)?c:null!=u.meridiemHour?u.meridiemHour(c,d):(null!=u.isPM&&((h=u.isPM(d))&&c<12&&(c+=12),h||12!==c||(c=0)),c)),mt(e),ft(e)}else Dt(e);else kt(e);var u,c,d,h,f,p,m}function jt(e){var t,i,n=e._i,r=e._f;return e._locale=e._locale||ht(e._l),null===n||void 0===r&&""===n?p({nullInput:!0}):("string"==typeof n&&(e._i=n=e._locale.preparse(n)),b(n)?new w(ft(n)):(s(n)?e._d=n:o(r)?function(e){var t,i,n,r,a;if(0===e._f.length)return _(e).invalidFormat=!0,e._d=new Date(NaN);for(r=0;r<e._f.length;r++)a=0,t=y({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],Yt(t),f(t)&&(a+=_(t).charsLeftOver,a+=10*_(t).unusedTokens.length,_(t).score=a,(null==n||a<n)&&(n=a,i=t));d(e,i||t)}(e):r?Yt(e):a(i=(t=e)._i)?t._d=new Date(g.now()):s(i)?t._d=new Date(i.valueOf()):"string"==typeof i?function(e){var t=bt.exec(e._i);if(null!==t)return e._d=new Date(+t[1]);kt(e),!1===e._isValid&&(delete e._isValid,Dt(e),!1===e._isValid&&(delete e._isValid,g.createFromInputFallback(e)))}(t):o(i)?(t._a=u(i.slice(0),function(e){return parseInt(e,10)}),mt(t)):l(i)?function(e){if(!e._d){var t=W(e._i);e._a=u([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),mt(e)}}(t):c(i)?t._d=new Date(i):g.createFromInputFallback(t),f(e)||(e._d=null),e))}function Ot(e,t,i,n,r){var a,s={};return!0!==i&&!1!==i||(n=i,i=void 0),(l(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||o(e)&&0===e.length)&&(e=void 0),s._isAMomentObject=!0,s._useUTC=s._isUTC=r,s._l=i,s._i=e,s._f=t,s._strict=n,(a=new w(ft(jt(s))))._nextDay&&(a.add(1,"d"),a._nextDay=void 0),a}function Tt(e,t,i,n){return Ot(e,t,i,n,!1)}g.createFromInputFallback=i("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),g.ISO_8601=function(){},g.RFC_2822=function(){};var Pt=i("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Tt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()}),Ct=i("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Tt.apply(null,arguments);return this.isValid()&&e.isValid()?this<e?this:e:p()});function Nt(e,t){var i,n;if(1===t.length&&o(t[0])&&(t=t[0]),!t.length)return Tt();for(i=t[0],n=1;n<t.length;++n)t[n].isValid()&&!t[n][e](i)||(i=t[n]);return i}var Wt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function At(e){var t=W(e),i=t.year||0,n=t.quarter||0,r=t.month||0,a=t.week||0,s=t.day||0,o=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===De.call(Wt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var i=!1,n=0;n<Wt.length;++n)if(e[Wt[n]]){if(i)return!1;parseFloat(e[Wt[n]])!==x(e[Wt[n]])&&(i=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*o*60*60,this._days=+s+7*a,this._months=+r+3*n+12*i,this._data={},this._locale=ht(),this._bubble()}function Lt(e){return e instanceof At}function Rt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Et(e,i){V(e,0,0,function(){var e=this.utcOffset(),t="+";return e<0&&(e=-e,t="-"),t+E(~~(e/60),2)+i+E(~~e%60,2)})}Et("Z",":"),Et("ZZ",""),ue("Z",se),ue("ZZ",se),fe(["Z","ZZ"],function(e,t,i){i._useUTC=!0,i._tzm=It(se,e)});var Ht=/([\+\-]|\d\d)/gi;function It(e,t){var i=(t||"").match(e);if(null===i)return null;var n=i[i.length-1]||[],r=(n+"").match(Ht)||["-",0,0],a=60*r[1]+x(r[2]);return 0===a?0:"+"===r[0]?a:-a}function Ft(e,t){var i,n;return t._isUTC?(i=t.clone(),n=(b(e)||s(e)?e.valueOf():Tt(e).valueOf())-i.valueOf(),i._d.setTime(i._d.valueOf()+n),g.updateOffset(i,!1),i):Tt(e).local()}function Ut(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Vt(){return!!this.isValid()&&this._isUTC&&0===this._offset}g.updateOffset=function(){};var Gt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,zt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function $t(e,t){var i,n,r,a,s,o,l=e,u=null;return Lt(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:c(e)?(l={},t?l[t]=e:l.milliseconds=e):(u=Gt.exec(e))?(i="-"===u[1]?-1:1,l={y:0,d:x(u[ve])*i,h:x(u[_e])*i,m:x(u[ye])*i,s:x(u[we])*i,ms:x(Rt(1e3*u[be]))*i}):(u=zt.exec(e))?(i="-"===u[1]?-1:(u[1],1),l={y:Bt(u[2],i),M:Bt(u[3],i),w:Bt(u[4],i),d:Bt(u[5],i),h:Bt(u[6],i),m:Bt(u[7],i),s:Bt(u[8],i)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(a=Tt(l.from),s=Tt(l.to),r=a.isValid()&&s.isValid()?(s=Ft(s,a),a.isBefore(s)?o=Zt(a,s):((o=Zt(s,a)).milliseconds=-o.milliseconds,o.months=-o.months),o):{milliseconds:0,months:0},(l={}).ms=r.milliseconds,l.M=r.months),n=new At(l),Lt(e)&&v(e,"_locale")&&(n._locale=e._locale),n}function Bt(e,t){var i=e&&parseFloat(e.replace(",","."));return(isNaN(i)?0:i)*t}function Zt(e,t){var i={milliseconds:0,months:0};return i.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(i.months,"M").isAfter(t)&&--i.months,i.milliseconds=+t-+e.clone().add(i.months,"M"),i}function qt(n,r){return function(e,t){var i;return null===t||isNaN(+t)||(Y(r,"moment()."+r+"(period, number) is deprecated. Please use moment()."+r+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=e,e=t,t=i),Jt(this,$t(e="string"==typeof e?+e:e,t),n),this}}function Jt(e,t,i,n){var r=t._milliseconds,a=Rt(t._days),s=Rt(t._months);e.isValid()&&(n=null==n||n,s&&Le(e,Oe(e,"Month")+s*i),a&&Te(e,"Date",Oe(e,"Date")+a*i),r&&e._d.setTime(e._d.valueOf()+r*i),n&&g.updateOffset(e,a||s))}$t.fn=At.prototype,$t.invalid=function(){return $t(NaN)};var Kt=qt(1,"add"),Qt=qt(-1,"subtract");function Xt(e,t){var i,n,r=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(r,"months");return n=t-a<0?(i=e.clone().add(r-1,"months"),(t-a)/(a-i)):(i=e.clone().add(r+1,"months"),(t-a)/(i-a)),-(r+n)||0}function ei(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ht(e))&&(this._locale=t),this)}g.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",g.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var ti=i("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function ii(){return this._locale}function ni(e,t){V(0,[e,e.length],0,t)}function ri(e,t,i,n,r){var a;return null==e?Ge(this,n,r).year:((a=ze(e,n,r))<t&&(t=a),function(e,t,i,n,r){var a=Ve(e,t,i,n,r),s=Fe(a.year,0,a.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}.call(this,e,t,i,n,r))}V(0,["gg",2],0,function(){return this.weekYear()%100}),V(0,["GG",2],0,function(){return this.isoWeekYear()%100}),ni("gggg","weekYear"),ni("ggggg","weekYear"),ni("GGGG","isoWeekYear"),ni("GGGGG","isoWeekYear"),C("weekYear","gg"),C("isoWeekYear","GG"),L("weekYear",1),L("isoWeekYear",1),ue("G",re),ue("g",re),ue("GG",K,B),ue("gg",K,B),ue("GGGG",te,q),ue("gggg",te,q),ue("GGGGG",ie,J),ue("ggggg",ie,J),pe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,i,n){t[n.substr(0,2)]=x(e)}),pe(["gg","GG"],function(e,t,i,n){t[n]=g.parseTwoDigitYear(e)}),V("Q",0,"Qo","quarter"),C("quarter","Q"),L("quarter",7),ue("Q",$),fe("Q",function(e,t){t[ge]=3*(x(e)-1)}),V("D",["DD",2],"Do","date"),C("date","D"),L("date",9),ue("D",K),ue("DD",K,B),ue("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),fe(["D","DD"],ve),fe("Do",function(e,t){t[ve]=x(e.match(K)[0])});var ai=je("Date",!0);V("DDD",["DDDD",3],"DDDo","dayOfYear"),C("dayOfYear","DDD"),L("dayOfYear",4),ue("DDD",ee),ue("DDDD",Z),fe(["DDD","DDDD"],function(e,t,i){i._dayOfYear=x(e)}),V("m",["mm",2],0,"minute"),C("minute","m"),L("minute",14),ue("m",K),ue("mm",K,B),fe(["m","mm"],ye);var si=je("Minutes",!1);V("s",["ss",2],0,"second"),C("second","s"),L("second",15),ue("s",K),ue("ss",K,B),fe(["s","ss"],we);var oi,li=je("Seconds",!1);for(V("S",0,0,function(){return~~(this.millisecond()/100)}),V(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),V(0,["SSS",3],0,"millisecond"),V(0,["SSSS",4],0,function(){return 10*this.millisecond()}),V(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),V(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),V(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),V(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),V(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),C("millisecond","ms"),L("millisecond",16),ue("S",ee,$),ue("SS",ee,B),ue("SSS",ee,Z),oi="SSSS";oi.length<=9;oi+="S")ue(oi,ne);function ui(e,t){t[be]=x(1e3*("0."+e))}for(oi="S";oi.length<=9;oi+="S")fe(oi,ui);var ci=je("Milliseconds",!1);V("z",0,0,"zoneAbbr"),V("zz",0,0,"zoneName");var di=w.prototype;function hi(e){return e}di.add=Kt,di.calendar=function(e,t){var i=e||Tt(),n=Ft(i,this).startOf("day"),r=g.calendarFormat(this,n)||"sameElse",a=t&&(j(t[r])?t[r].call(this,i):t[r]);return this.format(a||this.localeData().calendar(r,this,Tt(i)))},di.clone=function(){return new w(this)},di.diff=function(e,t,i){var n,r,a;if(!this.isValid())return NaN;if(!(n=Ft(e,this)).isValid())return NaN;switch(r=6e4*(n.utcOffset()-this.utcOffset()),t=N(t)){case"year":a=Xt(this,n)/12;break;case"month":a=Xt(this,n);break;case"quarter":a=Xt(this,n)/3;break;case"second":a=(this-n)/1e3;break;case"minute":a=(this-n)/6e4;break;case"hour":a=(this-n)/36e5;break;case"day":a=(this-n-r)/864e5;break;case"week":a=(this-n-r)/6048e5;break;default:a=this-n}return i?a:k(a)},di.endOf=function(e){return void 0===(e=N(e))||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))},di.format=function(e){e||(e=this.isUtc()?g.defaultFormatUtc:g.defaultFormat);var t=G(this,e);return this.localeData().postformat(t)},di.from=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Tt(e).isValid())?$t({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},di.fromNow=function(e){return this.from(Tt(),e)},di.to=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Tt(e).isValid())?$t({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},di.toNow=function(e){return this.to(Tt(),e)},di.get=function(e){return j(this[e=N(e)])?this[e]():this},di.invalidAt=function(){return _(this).overflow},di.isAfter=function(e,t){var i=b(e)?e:Tt(e);return!(!this.isValid()||!i.isValid())&&("millisecond"===(t=N(a(t)?"millisecond":t))?this.valueOf()>i.valueOf():i.valueOf()<this.clone().startOf(t).valueOf())},di.isBefore=function(e,t){var i=b(e)?e:Tt(e);return!(!this.isValid()||!i.isValid())&&("millisecond"===(t=N(a(t)?"millisecond":t))?this.valueOf()<i.valueOf():this.clone().endOf(t).valueOf()<i.valueOf())},di.isBetween=function(e,t,i,n){return("("===(n=n||"()")[0]?this.isAfter(e,i):!this.isBefore(e,i))&&(")"===n[1]?this.isBefore(t,i):!this.isAfter(t,i))},di.isSame=function(e,t){var i,n=b(e)?e:Tt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=N(t||"millisecond"))?this.valueOf()===n.valueOf():(i=n.valueOf(),this.clone().startOf(t).valueOf()<=i&&i<=this.clone().endOf(t).valueOf()))},di.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},di.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},di.isValid=function(){return f(this)},di.lang=ti,di.locale=ei,di.localeData=ii,di.max=Ct,di.min=Pt,di.parsingFlags=function(){return d({},_(this))},di.set=function(e,t){if("object"==typeof e)for(var i=R(e=W(e)),n=0;n<i.length;n++)this[i[n].unit](e[i[n].unit]);else if(j(this[e=N(e)]))return this[e](t);return this},di.startOf=function(e){switch(e=N(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this},di.subtract=Qt,di.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},di.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},di.toDate=function(){return new Date(this.valueOf())},di.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,i=t?this.clone().utc():this;return i.year()<0||9999<i.year()?G(i,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):j(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this._d.valueOf()).toISOString().replace("Z",G(i,"Z")):G(i,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},di.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var i="["+e+'("]',n=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",r=t+'[")]';return this.format(i+n+"-MM-DD[T]HH:mm:ss.SSS"+r)},di.toJSON=function(){return this.isValid()?this.toISOString():null},di.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},di.unix=function(){return Math.floor(this.valueOf()/1e3)},di.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},di.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},di.year=Ye,di.isLeapYear=function(){return Me(this.year())},di.weekYear=function(e){return ri.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},di.isoWeekYear=function(e){return ri.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},di.quarter=di.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},di.month=Re,di.daysInMonth=function(){return Pe(this.year(),this.month())},di.week=di.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},di.isoWeek=di.isoWeeks=function(e){var t=Ge(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},di.weeksInYear=function(){var e=this.localeData()._week;return ze(this.year(),e.dow,e.doy)},di.isoWeeksInYear=function(){return ze(this.year(),1,4)},di.date=ai,di.day=di.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t,i,n=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(t=e,i=this.localeData(),e="string"==typeof t?isNaN(t)?"number"!=typeof(t=i.weekdaysParse(t))?null:t:parseInt(t,10):t,this.add(e-n,"d")):n},di.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},di.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null==e)return this.day()||7;var t,i,n=(t=e,i=this.localeData(),"string"!=typeof t?isNaN(t)?null:t:i.weekdaysParse(t)%7||7);return this.day(this.day()%7?n:n-7)},di.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},di.hour=di.hours=rt,di.minute=di.minutes=si,di.second=di.seconds=li,di.millisecond=di.milliseconds=ci,di.utcOffset=function(e,t,i){var n,r=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null==e)return this._isUTC?r:Ut(this);if("string"==typeof e){if(null===(e=It(se,e)))return this}else Math.abs(e)<16&&!i&&(e*=60);return!this._isUTC&&t&&(n=Ut(this)),this._offset=e,this._isUTC=!0,null!=n&&this.add(n,"m"),r!==e&&(!t||this._changeInProgress?Jt(this,$t(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,g.updateOffset(this,!0),this._changeInProgress=null)),this},di.utc=function(e){return this.utcOffset(0,e)},di.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ut(this),"m")),this},di.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=It(ae,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},di.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Tt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},di.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},di.isLocal=function(){return!!this.isValid()&&!this._isUTC},di.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},di.isUtc=Vt,di.isUTC=Vt,di.zoneAbbr=function(){return this._isUTC?"UTC":""},di.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},di.dates=i("dates accessor is deprecated. Use date instead.",ai),di.months=i("months accessor is deprecated. Use month instead",Re),di.years=i("years accessor is deprecated. Use year instead",Ye),di.zone=i("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),di.isDSTShifted=i("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!a(this._isDSTShifted))return this._isDSTShifted;var e={};if(y(e,this),(e=jt(e))._a){var t=e._isUTC?h(e._a):Tt(e._a);this._isDSTShifted=this.isValid()&&0<S(e._a,t.toArray())}else this._isDSTShifted=!1;return this._isDSTShifted});var fi=T.prototype;function pi(e,t,i,n){var r=ht(),a=h().set(n,t);return r[i](a,e)}function mi(e,t,i){if(c(e)&&(t=e,e=void 0),e=e||"",null!=t)return pi(e,t,i,"month");var n,r=[];for(n=0;n<12;n++)r[n]=pi(e,n,i,"month");return r}function gi(e,t,i,n){"boolean"==typeof e?c(t)&&(i=t,t=void 0):(t=e,e=!1,c(i=t)&&(i=t,t=void 0)),t=t||"";var r,a=ht(),s=e?a._week.dow:0;if(null!=i)return pi(t,(i+s)%7,n,"day");var o=[];for(r=0;r<7;r++)o[r]=pi(t,(r+s)%7,n,"day");return o}fi.calendar=function(e,t,i){var n=this._calendar[e]||this._calendar.sameElse;return j(n)?n.call(t,i):n},fi.longDateFormat=function(e){var t=this._longDateFormat[e],i=this._longDateFormat[e.toUpperCase()];return!t&&i?(this._longDateFormat[e]=i.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e]):t},fi.invalidDate=function(){return this._invalidDate},fi.ordinal=function(e){return this._ordinal.replace("%d",e)},fi.preparse=hi,fi.postformat=hi,fi.relativeTime=function(e,t,i,n){var r=this._relativeTime[i];return j(r)?r(e,t,i,n):r.replace(/%d/i,e)},fi.pastFuture=function(e,t){var i=this._relativeTime[0<e?"future":"past"];return j(i)?i(t):i.replace(/%s/i,t)},fi.set=function(e){var t,i;for(i in e)j(t=e[i])?this[i]=t:this["_"+i]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},fi.months=function(e,t){return e?o(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ce).test(t)?"format":"standalone"][e.month()]:o(this._months)?this._months:this._months.standalone},fi.monthsShort=function(e,t){return e?o(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ce.test(t)?"format":"standalone"][e.month()]:o(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},fi.monthsParse=function(e,t,i){var n,r,a;if(this._monthsParseExact)return Ae.call(this,e,t,i);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),n=0;n<12;n++){if(r=h([2e3,n]),i&&!this._longMonthsParse[n]&&(this._longMonthsParse[n]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[n]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),i||this._monthsParse[n]||(a="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[n]=new RegExp(a.replace(".",""),"i")),i&&"MMMM"===t&&this._longMonthsParse[n].test(e))return n;if(i&&"MMM"===t&&this._shortMonthsParse[n].test(e))return n;if(!i&&this._monthsParse[n].test(e))return n}},fi.monthsRegex=function(e){return this._monthsParseExact?(v(this,"_monthsRegex")||Ie.call(this),e?this._monthsStrictRegex:this._monthsRegex):(v(this,"_monthsRegex")||(this._monthsRegex=He),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},fi.monthsShortRegex=function(e){return this._monthsParseExact?(v(this,"_monthsRegex")||Ie.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(v(this,"_monthsShortRegex")||(this._monthsShortRegex=Ee),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},fi.week=function(e){return Ge(e,this._week.dow,this._week.doy).week},fi.firstDayOfYear=function(){return this._week.doy},fi.firstDayOfWeek=function(){return this._week.dow},fi.weekdays=function(e,t){return e?o(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]:o(this._weekdays)?this._weekdays:this._weekdays.standalone},fi.weekdaysMin=function(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin},fi.weekdaysShort=function(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort},fi.weekdaysParse=function(e,t,i){var n,r,a;if(this._weekdaysParseExact)return qe.call(this,e,t,i);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),n=0;n<7;n++){if(r=h([2e3,1]).day(n),i&&!this._fullWeekdaysParse[n]&&(this._fullWeekdaysParse[n]=new RegExp("^"+this.weekdays(r,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[n]=new RegExp("^"+this.weekdaysShort(r,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[n]=new RegExp("^"+this.weekdaysMin(r,"").replace(".",".?")+"$","i")),this._weekdaysParse[n]||(a="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[n]=new RegExp(a.replace(".",""),"i")),i&&"dddd"===t&&this._fullWeekdaysParse[n].test(e))return n;if(i&&"ddd"===t&&this._shortWeekdaysParse[n].test(e))return n;if(i&&"dd"===t&&this._minWeekdaysParse[n].test(e))return n;if(!i&&this._weekdaysParse[n].test(e))return n}},fi.weekdaysRegex=function(e){return this._weekdaysParseExact?(v(this,"_weekdaysRegex")||Xe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(v(this,"_weekdaysRegex")||(this._weekdaysRegex=Je),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},fi.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(v(this,"_weekdaysRegex")||Xe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(v(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ke),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},fi.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(v(this,"_weekdaysRegex")||Xe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(v(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Qe),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},fi.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},fi.meridiem=function(e,t,i){return 11<e?i?"pm":"PM":i?"am":"AM"},ct("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,i=1===x(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+i}}),g.lang=i("moment.lang is deprecated. Use moment.locale instead.",ct),g.langData=i("moment.langData is deprecated. Use moment.localeData instead.",ht);var vi=Math.abs;function _i(e,t,i,n){var r=$t(t,i);return e._milliseconds+=n*r._milliseconds,e._days+=n*r._days,e._months+=n*r._months,e._bubble()}function yi(e){return e<0?Math.floor(e):Math.ceil(e)}function wi(e){return 4800*e/146097}function bi(e){return 146097*e/4800}function ki(e){return function(){return this.as(e)}}var xi=ki("ms"),Si=ki("s"),Mi=ki("m"),Di=ki("h"),Yi=ki("d"),ji=ki("w"),Oi=ki("M"),Ti=ki("y");function Pi(e){return function(){return this.isValid()?this._data[e]:NaN}}var Ci=Pi("milliseconds"),Ni=Pi("seconds"),Wi=Pi("minutes"),Ai=Pi("hours"),Li=Pi("days"),Ri=Pi("months"),Ei=Pi("years"),Hi=Math.round,Ii={ss:44,s:45,m:45,h:22,d:26,M:11},Fi=Math.abs;function Ui(e){return(0<e)-(e<0)||+e}function Vi(){if(!this.isValid())return this.localeData().invalidDate();var e,t,i=Fi(this._milliseconds)/1e3,n=Fi(this._days),r=Fi(this._months);e=k(i/60),t=k(e/60),i%=60,e%=60;var a=k(r/12),s=r%=12,o=n,l=t,u=e,c=i?i.toFixed(3).replace(/\.?0+$/,""):"",d=this.asSeconds();if(!d)return"P0D";var h=d<0?"-":"",f=Ui(this._months)!==Ui(d)?"-":"",p=Ui(this._days)!==Ui(d)?"-":"",m=Ui(this._milliseconds)!==Ui(d)?"-":"";return h+"P"+(a?f+a+"Y":"")+(s?f+s+"M":"")+(o?p+o+"D":"")+(l||u||c?"T":"")+(l?m+l+"H":"")+(u?m+u+"M":"")+(c?m+c+"S":"")}var Gi=At.prototype;return Gi.isValid=function(){return this._isValid},Gi.abs=function(){var e=this._data;return this._milliseconds=vi(this._milliseconds),this._days=vi(this._days),this._months=vi(this._months),e.milliseconds=vi(e.milliseconds),e.seconds=vi(e.seconds),e.minutes=vi(e.minutes),e.hours=vi(e.hours),e.months=vi(e.months),e.years=vi(e.years),this},Gi.add=function(e,t){return _i(this,e,t,1)},Gi.subtract=function(e,t){return _i(this,e,t,-1)},Gi.as=function(e){if(!this.isValid())return NaN;var t,i,n=this._milliseconds;if("month"===(e=N(e))||"year"===e)return t=this._days+n/864e5,i=this._months+wi(t),"month"===e?i:i/12;switch(t=this._days+Math.round(bi(this._months)),e){case"week":return t/7+n/6048e5;case"day":return t+n/864e5;case"hour":return 24*t+n/36e5;case"minute":return 1440*t+n/6e4;case"second":return 86400*t+n/1e3;case"millisecond":return Math.floor(864e5*t)+n;default:throw new Error("Unknown unit "+e)}},Gi.asMilliseconds=xi,Gi.asSeconds=Si,Gi.asMinutes=Mi,Gi.asHours=Di,Gi.asDays=Yi,Gi.asWeeks=ji,Gi.asMonths=Oi,Gi.asYears=Ti,Gi.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*x(this._months/12):NaN},Gi._bubble=function(){var e,t,i,n,r,a=this._milliseconds,s=this._days,o=this._months,l=this._data;return 0<=a&&0<=s&&0<=o||a<=0&&s<=0&&o<=0||(a+=864e5*yi(bi(o)+s),o=s=0),l.milliseconds=a%1e3,e=k(a/1e3),l.seconds=e%60,t=k(e/60),l.minutes=t%60,i=k(t/60),l.hours=i%24,s+=k(i/24),r=k(wi(s)),o+=r,s-=yi(bi(r)),n=k(o/12),o%=12,l.days=s,l.months=o,l.years=n,this},Gi.clone=function(){return $t(this)},Gi.get=function(e){return e=N(e),this.isValid()?this[e+"s"]():NaN},Gi.milliseconds=Ci,Gi.seconds=Ni,Gi.minutes=Wi,Gi.hours=Ai,Gi.days=Li,Gi.weeks=function(){return k(this.days()/7)},Gi.months=Ri,Gi.years=Ei,Gi.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t,i,n,r,a,s,o,l,u,c,d,h=this.localeData(),f=(i=!e,n=h,r=$t(t=this).abs(),a=Hi(r.as("s")),s=Hi(r.as("m")),o=Hi(r.as("h")),l=Hi(r.as("d")),u=Hi(r.as("M")),c=Hi(r.as("y")),(d=a<=Ii.ss&&["s",a]||a<Ii.s&&["ss",a]||s<=1&&["m"]||s<Ii.m&&["mm",s]||o<=1&&["h"]||o<Ii.h&&["hh",o]||l<=1&&["d"]||l<Ii.d&&["dd",l]||u<=1&&["M"]||u<Ii.M&&["MM",u]||c<=1&&["y"]||["yy",c])[2]=i,d[3]=0<+t,d[4]=n,function(e,t,i,n,r){return r.relativeTime(t||1,!!i,e,n)}.apply(null,d));return e&&(f=h.pastFuture(+this,f)),h.postformat(f)},Gi.toISOString=Vi,Gi.toString=Vi,Gi.toJSON=Vi,Gi.locale=ei,Gi.localeData=ii,Gi.toIsoString=i("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Vi),Gi.lang=ti,V("X",0,0,"unix"),V("x",0,0,"valueOf"),ue("x",re),ue("X",/[+-]?\d+(\.\d{1,3})?/),fe("X",function(e,t,i){i._d=new Date(1e3*parseFloat(e,10))}),fe("x",function(e,t,i){i._d=new Date(x(e))}),g.version="2.20.1",e=Tt,g.fn=di,g.min=function(){return Nt("isBefore",[].slice.call(arguments,0))},g.max=function(){return Nt("isAfter",[].slice.call(arguments,0))},g.now=function(){return Date.now?Date.now():+new Date},g.utc=h,g.unix=function(e){return Tt(1e3*e)},g.months=function(e,t){return mi(e,t,"months")},g.isDate=s,g.locale=ct,g.invalid=p,g.duration=$t,g.isMoment=b,g.weekdays=function(e,t,i){return gi(e,t,i,"weekdays")},g.parseZone=function(){return Tt.apply(null,arguments).parseZone()},g.localeData=ht,g.isDuration=Lt,g.monthsShort=function(e,t){return mi(e,t,"monthsShort")},g.weekdaysMin=function(e,t,i){return gi(e,t,i,"weekdaysMin")},g.defineLocale=dt,g.updateLocale=function(e,t){if(null!=t){var i,n,r=at;null!=(n=ut(e))&&(r=n._config),t=O(r,t),(i=new T(t)).parentLocale=st[e],st[e]=i,ct(e)}else null!=st[e]&&(null!=st[e].parentLocale?st[e]=st[e].parentLocale:null!=st[e]&&delete st[e]);return st[e]},g.locales=function(){return n(st)},g.weekdaysShort=function(e,t,i){return gi(e,t,i,"weekdaysShort")},g.normalizeUnits=N,g.relativeTimeRounding=function(e){return void 0!==e?"function"==typeof e&&(Hi=e,!0):Hi},g.relativeTimeThreshold=function(e,t){return void 0!==Ii[e]&&(void 0===t?Ii[e]:(Ii[e]=t,"s"===e&&(Ii.ss=t-1),!0))},g.calendarFormat=function(e,t){var i=e.diff(t,"days",!0);return i<-6?"sameElse":i<-1?"lastWeek":i<0?"lastDay":i<1?"sameDay":i<2?"nextDay":i<7?"nextWeek":"sameElse"},g.prototype=di,g.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"YYYY-[W]WW",MONTH:"YYYY-MM"},g}()}).call(this,i(22)(e))},function(e,t,i){"use strict";var n,r=i(9);(n=r)&&n.__esModule;i(0).tag2("footer",'<div class="container"> <social></social> <p>© 2018 pvcresin</p> </div>','footer,[data-is="footer"]{ display: block; background: #0f0f0f; color: white; } footer > .container,[data-is="footer"] > .container{ text-align: center; padding: 1rem 0; } footer > .container > p,[data-is="footer"] > .container > p{ color: #525252; padding-bottom: 1rem; }',"",function(e){})},function(e,t,i){"use strict";var n,r=i(9);(n=r)&&n.__esModule;i(0).tag2("first",'<nav></nav> <div class="container"> <h1>Raika Toriyama</h1> <p> Web / Android Developer</p> <social></social> </div> <div class="container"> <div class="arrow"><i class="fas fa-chevron-down fa-3x"></i></div> </div>','first,[data-is="first"]{ text-align: center; background: #1a1819; color: white; min-height: 100vh; display: flex; flex-direction: column; justify-content: space-around; } first > nav,[data-is="first"] > nav{ margin: 0 auto; width: 100%; max-width: calc(1200px * 0.8); line-height: 3rem; } first > nav > ul,[data-is="first"] > nav > ul{ display: flex; justify-content: space-around; } first > nav > ul > li,[data-is="first"] > nav > ul > li{ display: inline-block; } first > .container > h1,[data-is="first"] > .container > h1{ font-size: calc(1.0rem + 250%); margin: 0; } first > .container > p,[data-is="first"] > .container > p{ font-size: 1.5rem; font-family: serif; margin-top: 1rem; } first > .container .arrow,[data-is="first"] > .container .arrow{ display: inline-block; } @media (max-width: 768px) { first .container > h1,[data-is="first"] .container > h1{ font-size: 2.5rem; } first .container > p,[data-is="first"] .container > p{ font-size: 1.2rem; margin-top: 0.5rem; } }',"",function(e){})},function(e,t,i){"use strict";n(i(25)),n(i(24)),n(i(8)),n(i(7)),n(i(21)),n(i(20)),n(i(19)),n(i(18));function n(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("top",'<first></first> <section> <div class="container"> <h2 class="section-title">About Me</h2> <about></about> <more text="detail" title="View detailed profile" link="#profile"></more> </div> </section> <section> <div class="container"> <h2 class="section-title">Projects</h2> <projects limit="3"></projects> <more title="View all projects" link="#projects"></more> </div> </section> <section> <div class="container"> <h2 class="section-title">Awards</h2> <awards></awards> <h2 class="section-title">Publications</h2> <publications></publications> <h2 class="section-title">Clubs</h2> <clubs></clubs> </div> </section> <footer></footer>','top,[data-is="top"]{ display: block; min-height: 100vh; } top > section:nth-child(2n),[data-is="top"] > section:nth-child(2n){ background: #2b2b2b; color: #efefef; } top > section:nth-child(2n+1),[data-is="top"] > section:nth-child(2n+1){ background: #eeeeee; color: #222222; }',"",function(e){this.on("route",function(){var e=window.location.hash;void 0===window.scrolls[""+e]?window.scroll(0,0):window.scroll(0,window.scrolls[""+e])})})},function(e,t,i){"use strict";n(i(5)),n(i(26)),n(i(17)),n(i(13)),n(i(12)),n(i(10));function n(e){return e&&e.__esModule?e:{default:e}}i(0).tag2("app",'<router> <route path=""> <top></top> </route> <route path="profile.."> <profile></profile> </route> <route path="projects/*"> <projectdetail></projectDetail> </route> <route path="projects.."> <projectall></projectAll> </route> <route path=".."> <other></other> </route> </router>',"","",function(e){})},function(e,t,i){"use strict";var n=a(i(0)),r=a(i(2));a(i(27));function a(e){return e&&e.__esModule?e:{default:e}}n.default.mount(".root","app"),r.default.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy90b3JpeWFtYS9EZXNrdG9wL3B2Y3Jlc2luLmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvcmlvdC9yaW90LmpzIiwid2VicGFjazovLy8uL3Njcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tcG9uZW50cy93ZWJwLnRhZyIsIndlYnBhY2s6Ly8vL1VzZXJzL3Rvcml5YW1hL0Rlc2t0b3AvcHZjcmVzaW4uZ2l0aHViLmlvL25vZGVfbW9kdWxlcy9yaW90LW9ic2VydmFibGUvZGlzdC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8vVXNlcnMvdG9yaXlhbWEvRGVza3RvcC9wdmNyZXNpbi5naXRodWIuaW8vbm9kZV9tb2R1bGVzL3Jpb3Qtcm91dGUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8vVXNlcnMvdG9yaXlhbWEvRGVza3RvcC9wdmNyZXNpbi5naXRodWIuaW8vbm9kZV9tb2R1bGVzL3Jpb3Qtcm91dGUvbGliL3RhZy5qcyIsIndlYnBhY2s6Ly8vLi4vZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tcG9uZW50cy9wcm9qZWN0cy50YWciLCJ3ZWJwYWNrOi8vLy4uL2NvbXBvbmVudHMvYWJvdXQudGFnIiwid2VicGFjazovLy8uLi9wYWdlcy9wcm9qZWN0RGV0YWlsLnRhZyIsIndlYnBhY2s6Ly8vLi4vcGFnZXMvcHJvamVjdEFsbC50YWciLCJ3ZWJwYWNrOi8vLy4uL2NvbXBvbmVudHMvbGlrZS50YWciLCJ3ZWJwYWNrOi8vLy4uL2NvbXBvbmVudHMvc2tpbGxzLnRhZyIsIndlYnBhY2s6Ly8vLi4vY29tcG9uZW50cy9lZHVjYXRpb24udGFnIiwid2VicGFjazovLy8uLi9wYWdlcy9wcm9maWxlLnRhZyIsIndlYnBhY2s6Ly8vLi4vY29tcG9uZW50cy9tb3JlLnRhZyIsIndlYnBhY2s6Ly8vLi4vY29tcG9uZW50cy9jbHVicy50YWciLCJ3ZWJwYWNrOi8vLy4uL2NvbXBvbmVudHMvcHVibGljYXRpb25zLnRhZyIsIndlYnBhY2s6Ly8vLi4vY29tcG9uZW50cy9hd2FyZHMudGFnIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy9Vc2Vycy90b3JpeWFtYS9EZXNrdG9wL3B2Y3Jlc2luLmdpdGh1Yi5pby9ub2RlX21vZHVsZXMvbW9tZW50L21vbWVudC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tcG9uZW50cy9mb290ZXIudGFnIiwid2VicGFjazovLy8uLi9jb21wb25lbnRzL2ZpcnN0LnRhZyIsIndlYnBhY2s6Ly8vLi4vcGFnZXMvdG9wLnRhZyIsIndlYnBhY2s6Ly8vLi4vcGFnZXMvYXBwLnRhZyIsIndlYnBhY2s6Ly8vLi9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX19UQUdTX0NBQ0hFIiwiX19UQUdfSU1QTCIsIllJRUxEX1RBRyIsIkdMT0JBTF9NSVhJTiIsIkFUVFJTX1BSRUZJWCIsIlJFRl9ESVJFQ1RJVkVTIiwiSVNfRElSRUNUSVZFIiwiQ09ORElUSU9OQUxfRElSRUNUSVZFIiwiTE9PUF9ESVJFQ1RJVkUiLCJMT09QX05PX1JFT1JERVJfRElSRUNUSVZFIiwiU0hPV19ESVJFQ1RJVkUiLCJISURFX0RJUkVDVElWRSIsIktFWV9ESVJFQ1RJVkUiLCJSSU9UX0VWRU5UU19LRVkiLCJUX1NUUklORyIsIlRfT0JKRUNUIiwiVF9VTkRFRiIsIlRfRlVOQ1RJT04iLCJYTElOS19OUyIsIlNWR19OUyIsIlhMSU5LX1JFR0VYIiwiV0lOIiwid2luZG93IiwidW5kZWZpbmVkIiwiUkVfRVZFTlRTX1BSRUZJWCIsIlJFX0hUTUxfQVRUUlMiLCJDQVNFX1NFTlNJVElWRV9BVFRSSUJVVEVTIiwidmlld2JveCIsInByZXNlcnZlYXNwZWN0cmF0aW8iLCJSRV9CT09MX0FUVFJTIiwiSUVfVkVSU0lPTiIsImRvY3VtZW50IiwiZG9jdW1lbnRNb2RlIiwiJCQiLCJzZWxlY3RvciIsImN0eCIsInNsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsIiQiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlRnJhZyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjcmVhdGVET01QbGFjZWhvbGRlciIsImNyZWF0ZVRleHROb2RlIiwiaXNTdmciLCJlbCIsIm93bmVyIiwib3duZXJTVkdFbGVtZW50IiwibWtFbCIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZUVsZW1lbnQiLCJzZXRJbm5lckhUTUwiLCJjb250YWluZXIiLCJodG1sIiwibm9kZSIsIm93bmVyRG9jdW1lbnQiLCJpbXBvcnROb2RlIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiZG9jdW1lbnRFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJ0b2dnbGVWaXNpYmlsaXR5IiwiZG9tIiwic2hvdyIsInN0eWxlIiwiZGlzcGxheSIsImhpZGRlbiIsInJlbUF0dHIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzdHlsZU9iamVjdFRvU3RyaW5nIiwia2V5cyIsInJlZHVjZSIsImFjYyIsInByb3AiLCJnZXRBdHRyIiwiZ2V0QXR0cmlidXRlIiwic2V0QXR0ciIsInZhbCIsInhsaW5rIiwiZXhlYyIsInNldEF0dHJpYnV0ZU5TIiwic2V0QXR0cmlidXRlIiwic2FmZUluc2VydCIsInJvb3QiLCJjdXJyIiwibmV4dCIsImluc2VydEJlZm9yZSIsInBhcmVudE5vZGUiLCJ3YWxrQXR0cnMiLCJmbiIsInRvTG93ZXJDYXNlIiwid2Fsa05vZGVzIiwiY29udGV4dCIsInJlcyIsImZpcnN0Q2hpbGQiLCJuZXh0U2libGluZyIsInN0eWxlTm9kZSIsImNzc1RleHRQcm9wIiwibmV3Tm9kZSIsInVzZXJOb2RlIiwiZnJlZXplIiwiYnlOYW1lIiwicmVtYWluZGVyIiwibmVlZHNJbmplY3QiLCJpZCIsInJlcGxhY2VDaGlsZCIsImhlYWQiLCJzdHlsZVNoZWV0Iiwic3R5bGVNYW5hZ2VyIiwiYWRkIiwiY3NzIiwicHVzaCIsImluamVjdCIsIm1hcCIsImsiLCJjb25jYXQiLCJqb2luIiwiY3NzVGV4dCIsInNraXBSZWdleCIsImJlZm9yZVJlV29yZHMiLCJ3b3Jkc0xhc3RDaGFyIiwidyIsIlJFX1JFR0VYIiwiUkVfVk5fQ0hBUiIsInByZXYiLCJjb2RlIiwicG9zIiwidGVzdCIsInN0YXJ0IiwicmUiLCJsYXN0SW5kZXgiLCJtYXRjaCIsImxlbmd0aCIsImluZGV4T2YiLCJlbmQiLCJicmFja2V0cyIsIlVOREVGIiwiX3JlZ2V4IiwiX3NldHRpbmdzIiwiUkVHTE9CIiwiUl9TVFJJTkdTIiwiU19RQkxPQ0tTIiwic291cmNlIiwiVU5TVVBQT1JURUQiLCJSZWdFeHAiLCJORUVEX0VTQ0FQRSIsIlNfUUJMT0NLMiIsIkZJTkRCUkFDRVMiLCIoIiwiWyIsInsiLCJERUZBVUxUIiwiX3BhaXJzIiwiY2FjaGVkQnJhY2tldHMiLCJfY2FjaGUiLCJfbG9vcGJhY2siLCJfcmV3cml0ZSIsImJwIiwicmVwbGFjZSIsImdsb2JhbCIsIl9jcmVhdGUiLCJwYWlyIiwiYXJyIiwic3BsaXQiLCJFcnJvciIsIl9icmFja2V0cyIsInJlT3JJZHgiLCJfcmVzZXQiLCJzdHIiLCJ0bXBsIiwiX2JwIiwiaXNleHByIiwibWFyayIsInBhcnRzIiwicWJsb2NrcyIsInByZXZTdHIiLCJpbmRleCIsImNoIiwicmVjaCIsIml4IiwicHVzaFFCbG9jayIsInVuZXNjYXBlU3RyIiwiX3BvcyIsIl9sYXN0SW5kZXgiLCJzbGFzaCIsImhhc0V4cHIiLCJsb29wS2V5cyIsImV4cHIiLCJrZXkiLCJ0cmltIiwiYXJyYXkiLCJzZXQiLCJiIiwic2V0dGluZ3MiLCJyaW90IiwiUl9NTENPTU1TIiwiX3RtcGwiLCJkYXRhIiwiUkVfRFFVT1RFIiwicXN0ciIsImoiLCJsaXN0IiwiX3BhcnNlRXhwciIsIlJFX1FCTUFSSyIsIl8iLCJfZ2V0VG1wbCIsIkZ1bmN0aW9uIiwiZXJyIiwicmlvdERhdGEiLCJ0YWdOYW1lIiwiX18iLCJfcmlvdF9pZCIsImVycm9ySGFuZGxlciIsImNvbnNvbGUiLCJlcnJvciIsImJpbmQiLCJjbGVhckNhY2hlIiwiUkVfQ1NOQU1FIiwiUkVfQlJFTkQiLCJhc1RleHQiLCJjbnQiLCJqc2IiLCJyaWdodENvbnRleHQiLCJza2lwQnJhY2VzIiwiX3dyYXBFeHByIiwibW0iLCJsdiIsImlyIiwiSlNfQ09OVEVYVCIsIkpTX1ZBUk5BTUUiLCJKU19OT1BST1BTIiwidGIiLCJtdmFyIiwidmVyc2lvbiIsIm9ic2VydmFibGUkMSIsImNhbGxiYWNrcyIsIkFycmF5IiwiZGVmaW5lUHJvcGVydGllcyIsIm9uIiwiZXZlbnQiLCJ3cml0YWJsZSIsIm9mZiIsImNiIiwic3BsaWNlIiwib25lIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJ0cmlnZ2VyIiwiZm5zIiwiYXJndW1lbnRzJDEiLCJhcmdsZW4iLCJhcmdzIiwiaXNCb29sQXR0ciIsImlzRnVuY3Rpb24iLCJpc09iamVjdCIsImlzVW5kZWZpbmVkIiwiaXNTdHJpbmciLCJpc0JsYW5rIiwiaXNOaWwiLCJpc0FycmF5IiwiaXNXcml0YWJsZSIsIm9iaiIsImRlc2NyaXB0b3IiLCJnZXRQcm9wRGVzY3JpcHRvciIsImNoZWNrIiwiZWFjaCIsImxlbiIsImNvbnRhaW5zIiwiaXRlbSIsInRvQ2FtZWwiLCJ0b1VwcGVyQ2FzZSIsInN0YXJ0c1dpdGgiLCJvcHRpb25zIiwiZXh0ZW5kIiwidWlkIiwid2FybiIsIm1lc3NhZ2UiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzcmMiLCJtaXNjIiwic2V0dGluZ3MkMSIsImNyZWF0ZSIsInNraXBBbm9ueW1vdXNUYWdzIiwiYXV0b1VwZGF0ZSIsInNldEV2ZW50SGFuZGxlciIsImhhbmRsZXIiLCJ0YWciLCJldmVudE5hbWUiLCJlIiwicHRhZyIsInRoaXMiLCJwYXJlbnQiLCJjdXJyZW50VGFyZ2V0IiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsIndoaWNoIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwicHJldmVudFVwZGF0ZSIsImdldEltbWVkaWF0ZUN1c3RvbVBhcmVudFRhZyIsImlzTW91bnRlZCIsInVwZGF0ZSIsImxpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwidXBkYXRlRXhwcmVzc2lvbiIsImF0dHJOYW1lIiwiYXR0ciIsImlzVG9nZ2xlIiwiaXNWaXJ0dWFsIiwicmVmIiwiaXNBbm9ueW1vdXMiLCJpc1N0eWxlQXR0ciIsImlzQ2xhc3NBdHRyIiwid2FzQ3JlYXRlZCIsIm1vdW50IiwibWFrZVJlcGxhY2VWaXJ0dWFsIiwiaW5oZXJpdFBhcmVudFByb3BzIiwiaGFzVmFsdWUiLCJpc09iaiIsIkpTT04iLCJzdHJpbmdpZnkiLCJ3YXNQYXJzZWRPbmNlIiwiYm9vbCIsImlzUnRhZyIsIl90YWciLCJ1bm1vdW50IiwiaW1wbCIsImluaXRDaGlsZFRhZyIsImF0dHJzIiwiYSIsIm9uVW5tb3VudCIsImRlbE5hbWUiLCJvcHRzIiwiZGF0YUlzIiwiYXJyYXlpc2hSZW1vdmUiLCJ0YWdzIiwibm9kZVZhbHVlIiwidXBkYXRlQWxsRXhwcmVzc2lvbnMiLCJleHByZXNzaW9ucyIsIklmRXhwciIsImluaXQiLCJzdHViIiwicHJpc3RpbmUiLCJyZW1vdmVDaGlsZCIsImN1cnJlbnQiLCJjbG9uZU5vZGUiLCJwYXJzZUV4cHJlc3Npb25zIiwidW5tb3VudEFsbCIsIlJlZkV4cHIiLCJhdHRyVmFsdWUiLCJyYXdWYWx1ZSIsImhhc0V4cCIsIm9sZCIsImN1c3RvbVBhcmVudCIsInRhZ09yRG9tIiwiX19yZWYiLCJyZWZzIiwiYXJyYXlpc2hBZGQiLCJta2l0ZW0iLCJiYXNlIiwicmVtb3ZlIiwiX2VhY2giLCJoYXNLZXlzIiwibXVzdFJlb3JkZXIiLCJrZXlBdHRyIiwiaGFzS2V5QXR0ckV4cHIiLCJnZXRUYWdOYW1lIiwicGxhY2Vob2xkZXIiLCJjaGlsZCIsImdldFRhZyIsImlmRXhwciIsIm9sZEl0ZW1zIiwiaXNMb29wIiwiaXRlbXMiLCJmcmFnIiwiaXNPYmplY3QkJDEiLCJ0bXBJdGVtcyIsImZpbHRlciIsIl9pdGVtIiwib3JpZ2luYWxJdGVtIiwia2V5ZWRJdGVtIiwiaXRlbUlkIiwiZG9SZW9yZGVyIiwib2xkUG9zIiwiaXNOZXciLCJtdXN0QXBwZW5kIiwibXVzdENyZWF0ZSIsImNyZWF0ZVRhZyIsIm1ha2VWaXJ0dWFsIiwibmV4dFRhZyIsIm1vdmVWaXJ0dWFsIiwidGhpcyQxIiwibW92ZUNoaWxkVGFnIiwidW5tb3VudFJlZHVuZGFudCIsInQiLCJtdXN0SW5jbHVkZVJvb3QiLCJ0YWdJbXBsIiwidHlwZSIsIm5vZGVUeXBlIiwiYXR0cmlidXRlcyIsInBhcmVudEVsZW1lbnQiLCJvdXRlckhUTUwiLCJwYXJzZUF0dHJpYnV0ZXMiLCJyZUhhc1lpZWxkIiwicmVZaWVsZEFsbCIsInJlWWllbGRTcmMiLCJyZVlpZWxkRGVzdCIsInJvb3RFbHMiLCJ0ciIsInRoIiwidGQiLCJjb2wiLCJ0YmxUYWdzIiwiR0VORVJJQyIsIlNWRyIsIm1rZG9tIiwiaXNTdmckJDEiLCJ0ZXh0IiwiZGVmIiwicmVwbGFjZVlpZWxkIiwic2VsZWN0Iiwic2VsZWN0ZWRJbmRleCIsInRuYW1lIiwiY2hpbGRFbGVtZW50Q291bnQiLCJzcGVjaWFsVGFncyIsIlRhZyQxIiwib25DcmVhdGUiLCJ0YWckMSIsImNsYXNzIiwiY29uc3RydWN0b3IiLCJtb3VudFRvIiwidGFnMiQxIiwibW91bnQkMSIsImVsZW0iLCJhbGxUYWdzIiwic2VsZWN0VGFncyIsIm5vZGVMaXN0IiwiX2VsIiwicHVzaFRhZ3NUbyIsInJpb3RUYWciLCJtaXhpbnMiLCJnbG9iYWxzIiwibWl4aW5zX2lkIiwibWl4aW4kMSIsIm1peCIsImciLCJzdG9yZSIsInVwZGF0ZSQxIiwidW5yZWdpc3RlciQxIiwiY29yZSIsIlRhZyIsInRhZzIiLCJtaXhpbiIsInVucmVnaXN0ZXIiLCJ1cGRhdGVPcHRzIiwiaW5zdEF0dHJzIiwic2V0TW91bnRTdGF0ZSIsImNvbmYiLCJza2lwQW5vbnltb3VzIiwiaW1wbEF0dHJzIiwiaXNJbmxpbmUiLCJ2aXJ0cyIsInRhaWwiLCJuZXh0T3B0cyIsImNhblRyaWdnZXIiLCJzaG91bGRVcGRhdGUiLCJpbnN0YW5jZSIsInByb3BzIiwicHJvcHNCbGFja2xpc3QiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImhhc0dldHRlclNldHRlciIsImlzUHJvdG90eXBlT2YiLCJ2IiwiZ2xvYmFsTWl4aW4iLCJtdXN0S2VlcFJvb3QiLCJ0YWdJbmRleCIsImZvckVhY2giLCJuZXdQb3MiLCJza2lwRGF0YUlzIiwibmFtZWRUYWciLCJlbnN1cmVBcnJheSIsImRlc3QiLCJpc0FyciIsImhhc0luZGV4Iiwib2xkSW5kZXgiLCJpbXBsQ2xhc3MiLCJfaW5uZXJIVE1MIiwic2liIiwidXRpbCIsInZkb20iLCJvYnNlcnZhYmxlIiwicmlvdCQxIiwidmVyc2lvbiQxIiwiZmFjdG9yeSIsIlNjcm9sbCIsInNjcm9sbHMiLCJwb3NZIiwicGFnZVlPZmZzZXQiLCJwYXRoIiwibG9jYXRpb24iLCJoYXNoIiwibW92ZSIsInNjcm9sbCIsImxpYl9kZWJvdW5jZWRFbWl0IiwibGliX2Jhc2UiLCJsaWJfY3VycmVudCIsImxpYl9wYXJzZXIiLCJsaWJfc2Vjb25kUGFyc2VyIiwibGliX1JFX09SSUdJTiIsImxpYl9FVkVOVF9MSVNURU5FUiIsImxpYl9SRU1PVkVfRVZFTlRfTElTVEVORVIiLCJsaWJfQUREX0VWRU5UX0xJU1RFTkVSIiwibGliX0hBU19BVFRSSUJVVEUiLCJsaWJfUE9QU1RBVEUiLCJsaWJfSEFTSENIQU5HRSIsImxpYl9UUklHR0VSIiwibGliX01BWF9FTUlUX1NUQUNLX0xFVkVMIiwibGliX3dpbiIsImxpYl9kb2MiLCJsaWJfaGlzdCIsImhpc3RvcnkiLCJsaWJfbG9jIiwibGliX3Byb3QiLCJsaWJfUm91dGVyIiwibGliX2NsaWNrRXZlbnQiLCJvbnRvdWNoc3RhcnQiLCJsaWJfY2VudHJhbCIsIm9ic2VydmFibGVfZGVmYXVsdCIsImxpYl9zdGFydGVkIiwibGliX3JvdXRlRm91bmQiLCJsaWJfZW1pdFN0YWNrIiwibGliX2VtaXRTdGFja0xldmVsIiwibGliX0RFRkFVTFRfUEFSU0VSIiwibGliX0RFRkFVTFRfU0VDT05EX1BBUlNFUiIsImYiLCJsaWJfc3RhcnQiLCJhdXRvRXhlYyIsImRlbGF5IiwibGliX2VtaXQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibGliX2NsaWNrIiwibGliX25vcm1hbGl6ZSIsImxpYl9pc1N0cmluZyIsImxpYl9nZXRQYXRoRnJvbVJvb3QiLCJocmVmIiwibGliX2dldFBhdGhGcm9tQmFzZSIsImZvcmNlIiwiaXNSb290IiwiZmlyc3QiLCJzaGlmdCIsIm1ldGFLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJkZWZhdWx0UHJldmVudGVkIiwibm9kZU5hbWUiLCJsaWJfZ28iLCJ0aXRsZSIsInByZXZlbnREZWZhdWx0Iiwic2hvdWxkUmVwbGFjZSIsInJlcGxhY2VTdGF0ZSIsInB1c2hTdGF0ZSIsInNlY29uZCIsInRoaXJkIiwic29tZSIsImFjdGlvbiIsImxpYl9tYWluUm91dGVyIiwibGliX3JvdXRlIiwibmV3U3ViUm91dGVyIiwicm91dGVyIiwic3RvcCIsImFyZyIsInBhcnNlciIsImZuMiIsInF1ZXJ5IiwicSIsInJlYWR5U3RhdGUiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJsaWIiLCJyaW90X2RlZmF1bHQiLCJyb3V0ZSIsIl9fd2VicGFja19leHBvcnRzX18iLCJzdWIiLCJpbWciLCJjYXRlZ29yeSIsInZpZGVvIiwiaW1wbGVtZW50Iiwia2V5d29yZHMiLCJsaW5rcyIsIuODl+ODreOCuOOCp+OCr+ODiOODmuODvOOCuCIsIuWPl+iznuODmuODvOOCuCIsIkdvb2dsZeaXpeacrOiqnuWFpeWKm0FQSSIsIuWun+iovOWun+mok+WgseWRiuabuCIsIs61LeODleOCo+ODq+OCv+OCkueUqOOBhOOBn+ODquOCouODq+OCv+OCpOODoOmhlOeUu+WDj+e+juims+WMluOCt+OCueODhuODoCIsIuWVhuWTgeips+e0sOODmuODvOOCuCIsImZ1bWJsZXdhYWxzIiwiX3RoaXMiLCJfZGF0YTIiLCJkZWZhdWx0IiwibGltaXQiLCJzZWxlY3RlZENhdGVnb3J5IiwiX2xpc3QiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImNoaWxkcmVuIiwiaG9va0NhbGxiYWNrIiwiaG9va3MiLCJpbnB1dCIsInRvU3RyaW5nIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJEYXRlIiwiaGFzT3duUHJvcCIsInZhbHVlT2YiLCJjcmVhdGVVVEMiLCJmb3JtYXQiLCJsb2NhbGUiLCJzdHJpY3QiLCJjcmVhdGVMb2NhbE9yVVRDIiwidXRjIiwiZ2V0UGFyc2luZ0ZsYWdzIiwiX3BmIiwiZW1wdHkiLCJ1bnVzZWRUb2tlbnMiLCJ1bnVzZWRJbnB1dCIsIm92ZXJmbG93IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRNb250aCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJpc28iLCJwYXJzZWREYXRlUGFydHMiLCJtZXJpZGllbSIsInJmYzI4MjIiLCJ3ZWVrZGF5TWlzbWF0Y2giLCJpc1ZhbGlkIiwiX2lzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwiaXNOb3dWYWxpZCIsImlzTmFOIiwiX2QiLCJnZXRUaW1lIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwiYmlnSG91ciIsImlzRnJvemVuIiwiY3JlYXRlSW52YWxpZCIsIk5hTiIsImZ1biIsIm1vbWVudFByb3BlcnRpZXMiLCJjb3B5Q29uZmlnIiwidG8iLCJmcm9tIiwiX2lzQU1vbWVudE9iamVjdCIsIl9pIiwiX2YiLCJfbCIsIl90em0iLCJfaXNVVEMiLCJfb2Zmc2V0IiwiX2xvY2FsZSIsInVwZGF0ZUluUHJvZ3Jlc3MiLCJNb21lbnQiLCJjb25maWciLCJ1cGRhdGVPZmZzZXQiLCJpc01vbWVudCIsImFic0Zsb29yIiwibnVtYmVyIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsInRvSW50IiwiYXJndW1lbnRGb3JDb2VyY2lvbiIsImNvZXJjZWROdW1iZXIiLCJpc0Zpbml0ZSIsImNvbXBhcmVBcnJheXMiLCJhcnJheTEiLCJhcnJheTIiLCJkb250Q29udmVydCIsIm1pbiIsImxlbmd0aERpZmYiLCJhYnMiLCJkaWZmcyIsIm1zZyIsInN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyIsImZpcnN0VGltZSIsImRlcHJlY2F0aW9uSGFuZGxlciIsInN0YWNrIiwiZGVwcmVjYXRpb25zIiwiZGVwcmVjYXRlU2ltcGxlIiwibWVyZ2VDb25maWdzIiwicGFyZW50Q29uZmlnIiwiY2hpbGRDb25maWciLCJMb2NhbGUiLCJhbGlhc2VzIiwiYWRkVW5pdEFsaWFzIiwidW5pdCIsInNob3J0aGFuZCIsImxvd2VyQ2FzZSIsIm5vcm1hbGl6ZVVuaXRzIiwidW5pdHMiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZFByb3AiLCJub3JtYWxpemVkSW5wdXQiLCJwcmlvcml0aWVzIiwiYWRkVW5pdFByaW9yaXR5IiwicHJpb3JpdHkiLCJnZXRQcmlvcml0aXplZFVuaXRzIiwidW5pdHNPYmoiLCJ1Iiwic29ydCIsInplcm9GaWxsIiwidGFyZ2V0TGVuZ3RoIiwiZm9yY2VTaWduIiwiYWJzTnVtYmVyIiwiemVyb3NUb0ZpbGwiLCJzaWduIiwicG93IiwibWF4Iiwic3Vic3RyIiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJjYWxsYmFjayIsImZ1bmMiLCJsb2NhbGVEYXRhIiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwibW9tIiwib3V0cHV0IiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiaW52YWxpZERhdGUiLCJyZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMiLCJsb25nRGF0ZUZvcm1hdCIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoT2Zmc2V0IiwibWF0Y2hTaG9ydE9mZnNldCIsIm1hdGNoV29yZCIsInJlZ2V4ZXMiLCJhZGRSZWdleFRva2VuIiwicmVnZXgiLCJzdHJpY3RSZWdleCIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJ0b2tlbnMiLCJhZGRQYXJzZVRva2VuIiwiYWRkV2Vla1BhcnNlVG9rZW4iLCJfdyIsIllFQVIiLCJNT05USCIsIkRBVEUiLCJIT1VSIiwiTUlOVVRFIiwiU0VDT05EIiwiTUlMTElTRUNPTkQiLCJXRUVLIiwiV0VFS0RBWSIsImRheXNJblllYXIiLCJ5ZWFyIiwiaXNMZWFwWWVhciIsInkiLCJwYXJzZVR3b0RpZ2l0WWVhciIsInBhcnNlSW50IiwiZ2V0U2V0WWVhciIsIm1ha2VHZXRTZXQiLCJrZWVwVGltZSIsInNldCQxIiwibW9udGgiLCJkYXRlIiwiZGF5c0luTW9udGgiLCJ4IiwibW9kTW9udGgiLCJtb250aHNTaG9ydCIsIm1vbnRocyIsIm1vbnRoc1Nob3J0UmVnZXgiLCJtb250aHNSZWdleCIsIm1vbnRoc1BhcnNlIiwiTU9OVEhTX0lOX0ZPUk1BVCIsImRlZmF1bHRMb2NhbGVNb250aHMiLCJkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQiLCJoYW5kbGVTdHJpY3RQYXJzZSIsIm1vbnRoTmFtZSIsImlpIiwibGxjIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJfbW9udGhzUGFyc2UiLCJfbG9uZ01vbnRoc1BhcnNlIiwiX3Nob3J0TW9udGhzUGFyc2UiLCJzZXRNb250aCIsImRheU9mTW9udGgiLCJnZXRTZXRNb250aCIsImRlZmF1bHRNb250aHNTaG9ydFJlZ2V4IiwiZGVmYXVsdE1vbnRoc1JlZ2V4IiwiY29tcHV0ZU1vbnRoc1BhcnNlIiwiY21wTGVuUmV2Iiwic2hvcnRQaWVjZXMiLCJsb25nUGllY2VzIiwibWl4ZWRQaWVjZXMiLCJfbW9udGhzUmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsIl9tb250aHNTdHJpY3RSZWdleCIsIl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IiwiY3JlYXRlVVRDRGF0ZSIsIlVUQyIsImdldFVUQ0Z1bGxZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJmaXJzdFdlZWtPZmZzZXQiLCJkb3ciLCJkb3kiLCJmd2QiLCJmd2RsdyIsImdldFVUQ0RheSIsImRheU9mWWVhckZyb21XZWVrcyIsIndlZWsiLCJ3ZWVrZGF5IiwicmVzWWVhciIsInJlc0RheU9mWWVhciIsImxvY2FsV2Vla2RheSIsIndlZWtPZmZzZXQiLCJkYXlPZlllYXIiLCJ3ZWVrT2ZZZWFyIiwicmVzV2VlayIsIndlZWtzSW5ZZWFyIiwid2Vla09mZnNldE5leHQiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5cyIsIndlZWtkYXlzTWluUmVnZXgiLCJ3ZWVrZGF5c1Nob3J0UmVnZXgiLCJ3ZWVrZGF5c1JlZ2V4Iiwid2Vla2RheXNQYXJzZSIsImRlZmF1bHRMb2NhbGVXZWVrZGF5cyIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0IiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluIiwiaGFuZGxlU3RyaWN0UGFyc2UkMSIsIndlZWtkYXlOYW1lIiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJkYXkiLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsImNvbXB1dGVXZWVrZGF5c1BhcnNlIiwibWlucCIsInNob3J0cCIsImxvbmdwIiwibWluUGllY2VzIiwiX3dlZWtkYXlzUmVnZXgiLCJfd2Vla2RheXNTaG9ydFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJfd2Vla2RheXNTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXgiLCJfd2Vla2RheXNNaW5TdHJpY3RSZWdleCIsImhGb3JtYXQiLCJob3VycyIsImxvd2VyY2FzZSIsIm1pbnV0ZXMiLCJtYXRjaE1lcmlkaWVtIiwiX21lcmlkaWVtUGFyc2UiLCJzZWNvbmRzIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zMSIsInBvczIiLCJnbG9iYWxMb2NhbGUiLCJnZXRTZXRIb3VyIiwiYmFzZUNvbmZpZyIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwiTFRTIiwiTFQiLCJMIiwiTEwiLCJMTEwiLCJMTExMIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsInJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsImgiLCJoaCIsImRkIiwiTSIsIk1NIiwieXkiLCJtZXJpZGllbVBhcnNlIiwibG9jYWxlcyIsImxvY2FsZUZhbWlsaWVzIiwibm9ybWFsaXplTG9jYWxlIiwibG9hZExvY2FsZSIsIm9sZExvY2FsZSIsIl9hYmJyIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwidmFsdWVzIiwiZ2V0TG9jYWxlIiwiZGVmaW5lTG9jYWxlIiwiYWJiciIsIl9jb25maWciLCJwYXJlbnRMb2NhbGUiLCJuYW1lcyIsImNob29zZUxvY2FsZSIsImNoZWNrT3ZlcmZsb3ciLCJfYSIsIl9vdmVyZmxvd0RheU9mWWVhciIsIl9vdmVyZmxvd1dlZWtzIiwiX292ZXJmbG93V2Vla2RheSIsImRlZmF1bHRzIiwiY29uZmlnRnJvbUFycmF5IiwiY3VycmVudERhdGUiLCJleHBlY3RlZFdlZWtkYXkiLCJ5ZWFyVG9Vc2UiLCJub3dWYWx1ZSIsIm5vdyIsIl91c2VVVEMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsIndlZWtZZWFyIiwidGVtcCIsIndlZWtkYXlPdmVyZmxvdyIsIkdHIiwiVyIsIkUiLCJjcmVhdGVMb2NhbCIsIl93ZWVrIiwiY3VyV2VlayIsImdnIiwiX2RheU9mWWVhciIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9uZXh0RGF5IiwibXMiLCJzZXRGdWxsWWVhciIsImdldERheSIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwiZXh0ZW5kZWRJc29SZWdleCIsImJhc2ljSXNvUmVnZXgiLCJ0elJlZ2V4IiwiaXNvRGF0ZXMiLCJpc29UaW1lcyIsImFzcE5ldEpzb25SZWdleCIsImNvbmZpZ0Zyb21JU08iLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0Iiwic3RyaW5nIiwiY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCIsImV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MiLCJ5ZWFyU3RyIiwibW9udGhTdHIiLCJkYXlTdHIiLCJob3VyU3RyIiwibWludXRlU3RyIiwic2Vjb25kU3RyIiwicmVzdWx0Iiwib2JzT2Zmc2V0cyIsIlVUIiwiR01UIiwiRURUIiwiRVNUIiwiQ0RUIiwiQ1NUIiwiTURUIiwiTVNUIiwiUERUIiwiUFNUIiwiY29uZmlnRnJvbVJGQzI4MjIiLCJwYXJzZWRBcnJheSIsIndlZWtkYXlTdHIiLCJwYXJzZWRJbnB1dCIsIndlZWtkYXlQcm92aWRlZCIsIndlZWtkYXlBY3R1YWwiLCJjaGVja1dlZWtkYXkiLCJvYnNPZmZzZXQiLCJtaWxpdGFyeU9mZnNldCIsIm51bU9mZnNldCIsImhtIiwiY2FsY3VsYXRlT2Zmc2V0IiwiSVNPXzg2MDEiLCJSRkNfMjgyMiIsInNraXBwZWQiLCJzdHJpbmdMZW5ndGgiLCJ0b3RhbFBhcnNlZElucHV0TGVuZ3RoIiwiaG91ciIsIm1lcmlkaWVtSG91ciIsImlzUG0iLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJ0ZW1wQ29uZmlnIiwiYmVzdE1vbWVudCIsInNjb3JlVG9CZWF0IiwiY3VycmVudFNjb3JlIiwic2NvcmUiLCJjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkiLCJjcmVhdGVGcm9tSW5wdXRGYWxsYmFjayIsImNvbmZpZ0Zyb21TdHJpbmciLCJtaW51dGUiLCJtaWxsaXNlY29uZCIsImNvbmZpZ0Zyb21PYmplY3QiLCJpc1VUQyIsImlzT2JqZWN0RW1wdHkiLCJwcm90b3R5cGVNaW4iLCJvdGhlciIsInByb3RvdHlwZU1heCIsInBpY2tCeSIsIm1vbWVudHMiLCJvcmRlcmluZyIsIkR1cmF0aW9uIiwiZHVyYXRpb24iLCJ5ZWFycyIsInF1YXJ0ZXJzIiwicXVhcnRlciIsIndlZWtzIiwiZGF5cyIsIm1pbGxpc2Vjb25kcyIsInVuaXRIYXNEZWNpbWFsIiwicGFyc2VGbG9hdCIsImlzRHVyYXRpb25WYWxpZCIsIl9taWxsaXNlY29uZHMiLCJfZGF5cyIsIl9tb250aHMiLCJfZGF0YSIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwiYWJzUm91bmQiLCJyb3VuZCIsIm9mZnNldCIsInNlcGFyYXRvciIsInV0Y09mZnNldCIsIm9mZnNldEZyb21TdHJpbmciLCJjaHVua09mZnNldCIsIm1hdGNoZXIiLCJtYXRjaGVzIiwiY2h1bmsiLCJjbG9uZVdpdGhPZmZzZXQiLCJtb2RlbCIsImRpZmYiLCJjbG9uZSIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsImNyZWF0ZUR1cmF0aW9uIiwicmV0IiwiZGlmZlJlcyIsInBhcnNlSXNvIiwiaXNCZWZvcmUiLCJwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlIiwiaW5wIiwiaXNBZnRlciIsImNyZWF0ZUFkZGVyIiwiZGlyZWN0aW9uIiwicGVyaW9kIiwidG1wIiwiYWRkU3VidHJhY3QiLCJpc0FkZGluZyIsImludmFsaWQiLCJzdWJ0cmFjdCIsIm1vbnRoRGlmZiIsImFuY2hvcjIiLCJhZGp1c3QiLCJ3aG9sZU1vbnRoRGlmZiIsImFuY2hvciIsIm5ld0xvY2FsZURhdGEiLCJkZWZhdWx0Rm9ybWF0IiwiZGVmYXVsdEZvcm1hdFV0YyIsImxhbmciLCJhZGRXZWVrWWVhckZvcm1hdFRva2VuIiwiZ2V0U2V0V2Vla1llYXJIZWxwZXIiLCJ3ZWVrc1RhcmdldCIsImRheU9mWWVhckRhdGEiLCJpc29XZWVrWWVhciIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwiX29yZGluYWxQYXJzZSIsIl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlTGVuaWVudCIsImdldFNldERheU9mTW9udGgiLCJnZXRTZXRNaW51dGUiLCJnZXRTZXRTZWNvbmQiLCJwYXJzZU1zIiwiZ2V0U2V0TWlsbGlzZWNvbmQiLCJwcmVQYXJzZVBvc3RGb3JtYXQiLCJ0aW1lIiwiZm9ybWF0cyIsInNvZCIsInN0YXJ0T2YiLCJjYWxlbmRhckZvcm1hdCIsImFzRmxvYXQiLCJ0aGF0Iiwiem9uZURlbHRhIiwiZW5kT2YiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJpc1NhbWUiLCJpbnB1dE1zIiwiaXNTYW1lT3JBZnRlciIsImlzU2FtZU9yQmVmb3JlIiwicGFyc2luZ0ZsYWdzIiwicHJpb3JpdGl6ZWQiLCJpc29XZWVrZGF5IiwidG9BcnJheSIsInRvT2JqZWN0IiwidG9EYXRlIiwidG9JU09TdHJpbmciLCJrZWVwT2Zmc2V0IiwiaW5zcGVjdCIsInpvbmUiLCJpc0xvY2FsIiwicHJlZml4Iiwic3VmZml4IiwidG9KU09OIiwidW5peCIsImNyZWF0aW9uRGF0YSIsImlzb1dlZWsiLCJpc29XZWVrcyIsIndlZWtJbmZvIiwiaXNvV2Vla3NJblllYXIiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIl9jaGFuZ2VJblByb2dyZXNzIiwicGFyc2Vab25lIiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRFNUIiwiaXNVdGNPZmZzZXQiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJpc0RTVFNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwicHJvdG8kMSIsImdldCQxIiwiZmllbGQiLCJzZXR0ZXIiLCJsaXN0TW9udGhzSW1wbCIsIm91dCIsImxpc3RXZWVrZGF5c0ltcGwiLCJsb2NhbGVTb3J0ZWQiLCJfY2FsZW5kYXIiLCJfbG9uZ0RhdGVGb3JtYXQiLCJmb3JtYXRVcHBlciIsIl9pbnZhbGlkRGF0ZSIsIl9vcmRpbmFsIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsImlzRm9ybWF0IiwiX21vbnRoc1Nob3J0IiwiX21vbnRoc1BhcnNlRXhhY3QiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwiX3dlZWtkYXlzIiwiX3dlZWtkYXlzTWluIiwiX3dlZWtkYXlzU2hvcnQiLCJfd2Vla2RheXNQYXJzZUV4YWN0IiwiX2Z1bGxXZWVrZGF5c1BhcnNlIiwiY2hhckF0IiwiaXNMb3dlciIsImxhbmdEYXRhIiwibWF0aEFicyIsImFkZFN1YnRyYWN0JDEiLCJhYnNDZWlsIiwiZGF5c1RvTW9udGhzIiwibW9udGhzVG9EYXlzIiwibWFrZUFzIiwiYWxpYXMiLCJhcyIsImFzTWlsbGlzZWNvbmRzIiwiYXNTZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzWWVhcnMiLCJtYWtlR2V0dGVyIiwidGhyZXNob2xkcyIsImFicyQxIiwidG9JU09TdHJpbmckMSIsIlkiLCJEIiwidG9GaXhlZCIsInRvdGFsIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwicHJvdG8kMiIsIm1vbnRoc0Zyb21EYXlzIiwid2l0aFN1ZmZpeCIsInBvc05lZ0R1cmF0aW9uIiwidG9Jc29TdHJpbmciLCJ1cGRhdGVMb2NhbGUiLCJ0bXBMb2NhbGUiLCJyZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJvdW5kaW5nRnVuY3Rpb24iLCJyZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJteU1vbWVudCIsIkhUTUw1X0ZNVCIsIkRBVEVUSU1FX0xPQ0FMIiwiREFURVRJTUVfTE9DQUxfU0VDT05EUyIsIkRBVEVUSU1FX0xPQ0FMX01TIiwiVElNRSIsIlRJTUVfU0VDT05EUyIsIlRJTUVfTVMiLCJfcmlvdDIiLCJfc2Nyb2xsMiJdLCJtYXBwaW5ncyI6IjthQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxFQUFBLENBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BWixFQUFBbUIsRUFBQSxT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a2UsS0FBQSxvNkJBQUF2SCxvTEN0Q0QzVyxFQUFBLE1BQ0FBLEVBQUEsT0FDQUEsRUFBQSxPQW5CRkEsRUFBQSw0RUFnQkUsNFZDaEJGLFFBQUFBLEVBQUEsUUFDQUEsRUFBQSxNQUNBQSxFQUFBLHdEQUVBeXdDLEVBQUFscEIsUUFBSzlSLE1BQU0sUUFBUyxPQUVwQmk3QixFQUFBbnBCLFFBQU9wUSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjgpO1xuIiwiLyogUmlvdCB2My44LjEsIEBsaWNlbnNlIE1JVCAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuXHQoZmFjdG9yeSgoZ2xvYmFsLnJpb3QgPSB7fSkpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIF9fVEFHU19DQUNIRSA9IFtdO1xudmFyIF9fVEFHX0lNUEwgPSB7fTtcbnZhciBZSUVMRF9UQUcgPSAneWllbGQnO1xudmFyIEdMT0JBTF9NSVhJTiA9ICdfX2dsb2JhbF9taXhpbic7XG52YXIgQVRUUlNfUFJFRklYID0gJ3Jpb3QtJztcbnZhciBSRUZfRElSRUNUSVZFUyA9IFsncmVmJywgJ2RhdGEtcmVmJ107XG52YXIgSVNfRElSRUNUSVZFID0gJ2RhdGEtaXMnO1xudmFyIENPTkRJVElPTkFMX0RJUkVDVElWRSA9ICdpZic7XG52YXIgTE9PUF9ESVJFQ1RJVkUgPSAnZWFjaCc7XG52YXIgTE9PUF9OT19SRU9SREVSX0RJUkVDVElWRSA9ICduby1yZW9yZGVyJztcbnZhciBTSE9XX0RJUkVDVElWRSA9ICdzaG93JztcbnZhciBISURFX0RJUkVDVElWRSA9ICdoaWRlJztcbnZhciBLRVlfRElSRUNUSVZFID0gJ2tleSc7XG52YXIgUklPVF9FVkVOVFNfS0VZID0gJ19fcmlvdC1ldmVudHNfXyc7XG52YXIgVF9TVFJJTkcgPSAnc3RyaW5nJztcbnZhciBUX09CSkVDVCA9ICdvYmplY3QnO1xudmFyIFRfVU5ERUYgID0gJ3VuZGVmaW5lZCc7XG52YXIgVF9GVU5DVElPTiA9ICdmdW5jdGlvbic7XG52YXIgWExJTktfTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG52YXIgU1ZHX05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbnZhciBYTElOS19SRUdFWCA9IC9eeGxpbms6KFxcdyspLztcbnZhciBXSU4gPSB0eXBlb2Ygd2luZG93ID09PSBUX1VOREVGID8gdW5kZWZpbmVkIDogd2luZG93O1xudmFyIFJFX1NQRUNJQUxfVEFHUyA9IC9eKD86dCg/OmJvZHl8aGVhZHxmb290fFtyaGRdKXxjYXB0aW9ufGNvbCg/Omdyb3VwKT98b3B0KD86aW9ufGdyb3VwKSkkLztcbnZhciBSRV9TUEVDSUFMX1RBR1NfTk9fT1BUSU9OID0gL14oPzp0KD86Ym9keXxoZWFkfGZvb3R8W3JoZF0pfGNhcHRpb258Y29sKD86Z3JvdXApPykkLztcbnZhciBSRV9FVkVOVFNfUFJFRklYID0gL15vbi87XG52YXIgUkVfSFRNTF9BVFRSUyA9IC8oWy1cXHddKykgPz0gPyg/OlwiKFteXCJdKil8JyhbXiddKil8KHtbXn1dKn0pKS9nO1xudmFyIENBU0VfU0VOU0lUSVZFX0FUVFJJQlVURVMgPSB7XG4gICAgJ3ZpZXdib3gnOiAndmlld0JveCcsXG4gICAgJ3ByZXNlcnZlYXNwZWN0cmF0aW8nOiAncHJlc2VydmVBc3BlY3RSYXRpbydcbiAgfTtcbnZhciBSRV9CT09MX0FUVFJTID0gL14oPzpkaXNhYmxlZHxjaGVja2VkfHJlYWRvbmx5fHJlcXVpcmVkfGFsbG93ZnVsbHNjcmVlbnxhdXRvKD86Zm9jdXN8cGxheSl8Y29tcGFjdHxjb250cm9sc3xkZWZhdWx0fGZvcm1ub3ZhbGlkYXRlfGhpZGRlbnxpc21hcHxpdGVtc2NvcGV8bG9vcHxtdWx0aXBsZXxtdXRlZHxubyg/OnJlc2l6ZXxzaGFkZXx2YWxpZGF0ZXx3cmFwKT98b3BlbnxyZXZlcnNlZHxzZWFtbGVzc3xzZWxlY3RlZHxzb3J0YWJsZXx0cnVlc3BlZWR8dHlwZW11c3RtYXRjaCkkLztcbnZhciBJRV9WRVJTSU9OID0gKFdJTiAmJiBXSU4uZG9jdW1lbnQgfHwge30pLmRvY3VtZW50TW9kZSB8IDA7XG5cbi8qKlxuICogU2hvcnRlciBhbmQgZmFzdCB3YXkgdG8gc2VsZWN0IG11bHRpcGxlIG5vZGVzIGluIHRoZSBET01cbiAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gc2VsZWN0b3IgLSBET00gc2VsZWN0b3JcbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gY3R4IC0gRE9NIG5vZGUgd2hlcmUgdGhlIHRhcmdldHMgb2Ygb3VyIHNlYXJjaCB3aWxsIGlzIGxvY2F0ZWRcbiAqIEByZXR1cm5zIHsgT2JqZWN0IH0gZG9tIG5vZGVzIGZvdW5kXG4gKi9cbmZ1bmN0aW9uICQkKHNlbGVjdG9yLCBjdHgpIHtcbiAgcmV0dXJuIFtdLnNsaWNlLmNhbGwoKGN0eCB8fCBkb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpXG59XG5cbi8qKlxuICogU2hvcnRlciBhbmQgZmFzdCB3YXkgdG8gc2VsZWN0IGEgc2luZ2xlIG5vZGUgaW4gdGhlIERPTVxuICogQHBhcmFtICAgeyBTdHJpbmcgfSBzZWxlY3RvciAtIHVuaXF1ZSBkb20gc2VsZWN0b3JcbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gY3R4IC0gRE9NIG5vZGUgd2hlcmUgdGhlIHRhcmdldCBvZiBvdXIgc2VhcmNoIHdpbGwgaXMgbG9jYXRlZFxuICogQHJldHVybnMgeyBPYmplY3QgfSBkb20gbm9kZSBmb3VuZFxuICovXG5mdW5jdGlvbiAkKHNlbGVjdG9yLCBjdHgpIHtcbiAgcmV0dXJuIChjdHggfHwgZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZG9jdW1lbnQgZnJhZ21lbnRcbiAqIEByZXR1cm5zIHsgT2JqZWN0IH0gZG9jdW1lbnQgZnJhZ21lbnRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRnJhZygpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRvY3VtZW50IHRleHQgbm9kZVxuICogQHJldHVybnMgeyBPYmplY3QgfSBjcmVhdGUgYSB0ZXh0IG5vZGUgdG8gdXNlIGFzIHBsYWNlaG9sZGVyXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURPTVBsYWNlaG9sZGVyKCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBET00gbm9kZSBpcyBhbiBzdmcgdGFnIG9yIHBhcnQgb2YgYW4gc3ZnXG4gKiBAcGFyYW0gICB7IEhUTUxFbGVtZW50IH0gIGVsIC0gbm9kZSB3ZSB3YW50IHRvIHRlc3RcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIGl0J3MgYW4gc3ZnIG5vZGVcbiAqL1xuZnVuY3Rpb24gaXNTdmcoZWwpIHtcbiAgdmFyIG93bmVyID0gZWwub3duZXJTVkdFbGVtZW50O1xuICByZXR1cm4gISFvd25lciB8fCBvd25lciA9PT0gbnVsbFxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGdlbmVyaWMgRE9NIG5vZGVcbiAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gbmFtZSAtIG5hbWUgb2YgdGhlIERPTSBub2RlIHdlIHdhbnQgdG8gY3JlYXRlXG4gKiBAcmV0dXJucyB7IE9iamVjdCB9IERPTSBub2RlIGp1c3QgY3JlYXRlZFxuICovXG5mdW5jdGlvbiBta0VsKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUgPT09ICdzdmcnID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgbmFtZSkgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpXG59XG5cbi8qKlxuICogU2V0IHRoZSBpbm5lciBodG1sIG9mIGFueSBET00gbm9kZSBTVkdzIGluY2x1ZGVkXG4gKiBAcGFyYW0geyBPYmplY3QgfSBjb250YWluZXIgLSBET00gbm9kZSB3aGVyZSB3ZSdsbCBpbmplY3QgbmV3IGh0bWxcbiAqIEBwYXJhbSB7IFN0cmluZyB9IGh0bWwgLSBodG1sIHRvIGluamVjdFxuICogQHBhcmFtIHsgQm9vbGVhbiB9IGlzU3ZnIC0gc3ZnIHRhZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgYSBiaXQgZGlmZmVyZW50bHlcbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHNldElubmVySFRNTChjb250YWluZXIsIGh0bWwsIGlzU3ZnKSB7XG4gIC8vIGlubmVySFRNTCBpcyBub3Qgc3VwcG9ydGVkIG9uIHN2ZyB0YWdzIHNvIHdlIG5lZXQgdG8gdHJlYXQgdGhlbSBkaWZmZXJlbnRseVxuICBpZiAoaXNTdmcpIHtcbiAgICB2YXIgbm9kZSA9IGNvbnRhaW5lci5vd25lckRvY3VtZW50LmltcG9ydE5vZGUoXG4gICAgICBuZXcgRE9NUGFyc2VyKClcbiAgICAgICAgLnBhcnNlRnJvbVN0cmluZygoXCI8c3ZnIHhtbG5zPVxcXCJcIiArIFNWR19OUyArIFwiXFxcIj5cIiArIGh0bWwgKyBcIjwvc3ZnPlwiKSwgJ2FwcGxpY2F0aW9uL3htbCcpXG4gICAgICAgIC5kb2N1bWVudEVsZW1lbnQsXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXIuaW5uZXJIVE1MID0gaHRtbDtcbiAgfVxufVxuXG4vKipcbiAqIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eSBvZiBhbnkgRE9NIG5vZGVcbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gIGRvbSAtIERPTSBub2RlIHdlIHdhbnQgdG8gaGlkZVxuICogQHBhcmFtICAgeyBCb29sZWFuIH0gc2hvdyAtIGRvIHdlIHdhbnQgdG8gc2hvdyBpdD9cbiAqL1xuXG5mdW5jdGlvbiB0b2dnbGVWaXNpYmlsaXR5KGRvbSwgc2hvdykge1xuICBkb20uc3R5bGUuZGlzcGxheSA9IHNob3cgPyAnJyA6ICdub25lJztcbiAgZG9tLmhpZGRlbiA9IHNob3cgPyBmYWxzZSA6IHRydWU7XG59XG5cbi8qKlxuICogUmVtb3ZlIGFueSBET00gYXR0cmlidXRlIGZyb20gYSBub2RlXG4gKiBAcGFyYW0gICB7IE9iamVjdCB9IGRvbSAtIERPTSBub2RlIHdlIHdhbnQgdG8gdXBkYXRlXG4gKiBAcGFyYW0gICB7IFN0cmluZyB9IG5hbWUgLSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB3ZSB3YW50IHRvIHJlbW92ZVxuICovXG5mdW5jdGlvbiByZW1BdHRyKGRvbSwgbmFtZSkge1xuICBkb20ucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSBzdHlsZSBvYmplY3QgdG8gYSBzdHJpbmdcbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gc3R5bGUgLSBzdHlsZSBvYmplY3Qgd2UgbmVlZCB0byBwYXJzZVxuICogQHJldHVybnMgeyBTdHJpbmcgfSByZXN1bHRpbmcgY3NzIHN0cmluZ1xuICogQGV4YW1wbGVcbiAqIHN0eWxlT2JqZWN0VG9TdHJpbmcoeyBjb2xvcjogJ3JlZCcsIGhlaWdodDogJzEwcHgnfSkgLy8gPT4gJ2NvbG9yOiByZWQ7IGhlaWdodDogMTBweCdcbiAqL1xuZnVuY3Rpb24gc3R5bGVPYmplY3RUb1N0cmluZyhzdHlsZSkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoc3R5bGUpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwcm9wKSB7XG4gICAgcmV0dXJuIChhY2MgKyBcIiBcIiArIHByb3AgKyBcIjogXCIgKyAoc3R5bGVbcHJvcF0pICsgXCI7XCIpXG4gIH0sICcnKVxufVxuXG4vKipcbiAqIEdldCB0aGUgdmFsdWUgb2YgYW55IERPTSBhdHRyaWJ1dGUgb24gYSBub2RlXG4gKiBAcGFyYW0gICB7IE9iamVjdCB9IGRvbSAtIERPTSBub2RlIHdlIHdhbnQgdG8gcGFyc2VcbiAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gbmFtZSAtIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB3ZSB3YW50IHRvIGdldFxuICogQHJldHVybnMgeyBTdHJpbmcgfCB1bmRlZmluZWQgfSBuYW1lIG9mIHRoZSBub2RlIGF0dHJpYnV0ZSB3aGV0aGVyIGl0IGV4aXN0c1xuICovXG5mdW5jdGlvbiBnZXRBdHRyKGRvbSwgbmFtZSkge1xuICByZXR1cm4gZG9tLmdldEF0dHJpYnV0ZShuYW1lKVxufVxuXG4vKipcbiAqIFNldCBhbnkgRE9NIGF0dHJpYnV0ZVxuICogQHBhcmFtIHsgT2JqZWN0IH0gZG9tIC0gRE9NIG5vZGUgd2Ugd2FudCB0byB1cGRhdGVcbiAqIEBwYXJhbSB7IFN0cmluZyB9IG5hbWUgLSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB3ZSB3YW50IHRvIHNldFxuICogQHBhcmFtIHsgU3RyaW5nIH0gdmFsIC0gdmFsdWUgb2YgdGhlIHByb3BlcnR5IHdlIHdhbnQgdG8gc2V0XG4gKi9cbmZ1bmN0aW9uIHNldEF0dHIoZG9tLCBuYW1lLCB2YWwpIHtcbiAgdmFyIHhsaW5rID0gWExJTktfUkVHRVguZXhlYyhuYW1lKTtcbiAgaWYgKHhsaW5rICYmIHhsaW5rWzFdKVxuICAgIHsgZG9tLnNldEF0dHJpYnV0ZU5TKFhMSU5LX05TLCB4bGlua1sxXSwgdmFsKTsgfVxuICBlbHNlXG4gICAgeyBkb20uc2V0QXR0cmlidXRlKG5hbWUsIHZhbCk7IH1cbn1cblxuLyoqXG4gKiBJbnNlcnQgc2FmZWx5IGEgdGFnIHRvIGZpeCAjMTk2MiAjMTY0OVxuICogQHBhcmFtICAgeyBIVE1MRWxlbWVudCB9IHJvb3QgLSBjaGlsZHJlbiBjb250YWluZXJcbiAqIEBwYXJhbSAgIHsgSFRNTEVsZW1lbnQgfSBjdXJyIC0gbm9kZSB0byBpbnNlcnRcbiAqIEBwYXJhbSAgIHsgSFRNTEVsZW1lbnQgfSBuZXh0IC0gbm9kZSB0aGF0IHNob3VsZCBwcmVjZWVkIHRoZSBjdXJyZW50IG5vZGUgaW5zZXJ0ZWRcbiAqL1xuZnVuY3Rpb24gc2FmZUluc2VydChyb290LCBjdXJyLCBuZXh0KSB7XG4gIHJvb3QuaW5zZXJ0QmVmb3JlKGN1cnIsIG5leHQucGFyZW50Tm9kZSAmJiBuZXh0KTtcbn1cblxuLyoqXG4gKiBNaW5pbWl6ZSByaXNrOiBvbmx5IHplcm8gb3Igb25lIF9zcGFjZV8gYmV0d2VlbiBhdHRyICYgdmFsdWVcbiAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gICBodG1sIC0gaHRtbCBzdHJpbmcgd2Ugd2FudCB0byBwYXJzZVxuICogQHBhcmFtICAgeyBGdW5jdGlvbiB9IGZuIC0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gYXBwbHkgb24gYW55IGF0dHJpYnV0ZSBmb3VuZFxuICovXG5mdW5jdGlvbiB3YWxrQXR0cnMoaHRtbCwgZm4pIHtcbiAgaWYgKCFodG1sKSB7IHJldHVybiB9XG4gIHZhciBtO1xuICB3aGlsZSAobSA9IFJFX0hUTUxfQVRUUlMuZXhlYyhodG1sKSlcbiAgICB7IGZuKG1bMV0udG9Mb3dlckNhc2UoKSwgbVsyXSB8fCBtWzNdIHx8IG1bNF0pOyB9XG59XG5cbi8qKlxuICogV2FsayBkb3duIHJlY3Vyc2l2ZWx5IGFsbCB0aGUgY2hpbGRyZW4gdGFncyBzdGFydGluZyBkb20gbm9kZVxuICogQHBhcmFtICAgeyBPYmplY3QgfSAgIGRvbSAtIHN0YXJ0aW5nIG5vZGUgd2hlcmUgd2Ugd2lsbCBzdGFydCB0aGUgcmVjdXJzaW9uXG4gKiBAcGFyYW0gICB7IEZ1bmN0aW9uIH0gZm4gLSBjYWxsYmFjayB0byB0cmFuc2Zvcm0gdGhlIGNoaWxkIG5vZGUganVzdCBmb3VuZFxuICogQHBhcmFtICAgeyBPYmplY3QgfSAgIGNvbnRleHQgLSBmbiBjYW4gb3B0aW9uYWxseSByZXR1cm4gYW4gb2JqZWN0LCB3aGljaCBpcyBwYXNzZWQgdG8gY2hpbGRyZW5cbiAqL1xuZnVuY3Rpb24gd2Fsa05vZGVzKGRvbSwgZm4sIGNvbnRleHQpIHtcbiAgaWYgKGRvbSkge1xuICAgIHZhciByZXMgPSBmbihkb20sIGNvbnRleHQpO1xuICAgIHZhciBuZXh0O1xuICAgIC8vIHN0b3AgdGhlIHJlY3Vyc2lvblxuICAgIGlmIChyZXMgPT09IGZhbHNlKSB7IHJldHVybiB9XG5cbiAgICBkb20gPSBkb20uZmlyc3RDaGlsZDtcblxuICAgIHdoaWxlIChkb20pIHtcbiAgICAgIG5leHQgPSBkb20ubmV4dFNpYmxpbmc7XG4gICAgICB3YWxrTm9kZXMoZG9tLCBmbiwgcmVzKTtcbiAgICAgIGRvbSA9IG5leHQ7XG4gICAgfVxuICB9XG59XG5cbnZhciBkb20gPSBPYmplY3QuZnJlZXplKHtcblx0JCQ6ICQkLFxuXHQkOiAkLFxuXHRjcmVhdGVGcmFnOiBjcmVhdGVGcmFnLFxuXHRjcmVhdGVET01QbGFjZWhvbGRlcjogY3JlYXRlRE9NUGxhY2Vob2xkZXIsXG5cdGlzU3ZnOiBpc1N2Zyxcblx0bWtFbDogbWtFbCxcblx0c2V0SW5uZXJIVE1MOiBzZXRJbm5lckhUTUwsXG5cdHRvZ2dsZVZpc2liaWxpdHk6IHRvZ2dsZVZpc2liaWxpdHksXG5cdHJlbUF0dHI6IHJlbUF0dHIsXG5cdHN0eWxlT2JqZWN0VG9TdHJpbmc6IHN0eWxlT2JqZWN0VG9TdHJpbmcsXG5cdGdldEF0dHI6IGdldEF0dHIsXG5cdHNldEF0dHI6IHNldEF0dHIsXG5cdHNhZmVJbnNlcnQ6IHNhZmVJbnNlcnQsXG5cdHdhbGtBdHRyczogd2Fsa0F0dHJzLFxuXHR3YWxrTm9kZXM6IHdhbGtOb2Rlc1xufSk7XG5cbnZhciBzdHlsZU5vZGU7XG4vLyBDcmVhdGUgY2FjaGUgYW5kIHNob3J0Y3V0IHRvIHRoZSBjb3JyZWN0IHByb3BlcnR5XG52YXIgY3NzVGV4dFByb3A7XG52YXIgYnlOYW1lID0ge307XG52YXIgcmVtYWluZGVyID0gW107XG52YXIgbmVlZHNJbmplY3QgPSBmYWxzZTtcblxuLy8gc2tpcCB0aGUgZm9sbG93aW5nIGNvZGUgb24gdGhlIHNlcnZlclxuaWYgKFdJTikge1xuICBzdHlsZU5vZGUgPSAoKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBjcmVhdGUgYSBuZXcgc3R5bGUgZWxlbWVudCB3aXRoIHRoZSBjb3JyZWN0IHR5cGVcbiAgICB2YXIgbmV3Tm9kZSA9IG1rRWwoJ3N0eWxlJyk7XG4gICAgLy8gcmVwbGFjZSBhbnkgdXNlciBub2RlIG9yIGluc2VydCB0aGUgbmV3IG9uZSBpbnRvIHRoZSBoZWFkXG4gICAgdmFyIHVzZXJOb2RlID0gJCgnc3R5bGVbdHlwZT1yaW90XScpO1xuXG4gICAgc2V0QXR0cihuZXdOb2RlLCAndHlwZScsICd0ZXh0L2NzcycpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKHVzZXJOb2RlKSB7XG4gICAgICBpZiAodXNlck5vZGUuaWQpIHsgbmV3Tm9kZS5pZCA9IHVzZXJOb2RlLmlkOyB9XG4gICAgICB1c2VyTm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdOb2RlLCB1c2VyTm9kZSk7XG4gICAgfSBlbHNlIHsgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChuZXdOb2RlKTsgfVxuXG4gICAgcmV0dXJuIG5ld05vZGVcbiAgfSkpKCk7XG4gIGNzc1RleHRQcm9wID0gc3R5bGVOb2RlLnN0eWxlU2hlZXQ7XG59XG5cbi8qKlxuICogT2JqZWN0IHRoYXQgd2lsbCBiZSB1c2VkIHRvIGluamVjdCBhbmQgbWFuYWdlIHRoZSBjc3Mgb2YgZXZlcnkgdGFnIGluc3RhbmNlXG4gKi9cbnZhciBzdHlsZU1hbmFnZXIgPSB7XG4gIHN0eWxlTm9kZTogc3R5bGVOb2RlLFxuICAvKipcbiAgICogU2F2ZSBhIHRhZyBzdHlsZSB0byBiZSBsYXRlciBpbmplY3RlZCBpbnRvIERPTVxuICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjc3MgLSBjc3Mgc3RyaW5nXG4gICAqIEBwYXJhbSB7IFN0cmluZyB9IG5hbWUgLSBpZiBpdCdzIHBhc3NlZCB3ZSB3aWxsIG1hcCB0aGUgY3NzIHRvIGEgdGFnbmFtZVxuICAgKi9cbiAgYWRkOiBmdW5jdGlvbiBhZGQoY3NzLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUpIHsgYnlOYW1lW25hbWVdID0gY3NzOyB9XG4gICAgZWxzZSB7IHJlbWFpbmRlci5wdXNoKGNzcyk7IH1cbiAgICBuZWVkc0luamVjdCA9IHRydWU7XG4gIH0sXG4gIC8qKlxuICAgKiBJbmplY3QgYWxsIHByZXZpb3VzbHkgc2F2ZWQgdGFnIHN0eWxlcyBpbnRvIERPTVxuICAgKiBpbm5lckhUTUwgc2VlbXMgc2xvdzogaHR0cDovL2pzcGVyZi5jb20vcmlvdC1pbnNlcnQtc3R5bGVcbiAgICovXG4gIGluamVjdDogZnVuY3Rpb24gaW5qZWN0KCkge1xuICAgIGlmICghV0lOIHx8ICFuZWVkc0luamVjdCkgeyByZXR1cm4gfVxuICAgIG5lZWRzSW5qZWN0ID0gZmFsc2U7XG4gICAgdmFyIHN0eWxlID0gT2JqZWN0LmtleXMoYnlOYW1lKVxuICAgICAgLm1hcChmdW5jdGlvbiAoaykgeyByZXR1cm4gYnlOYW1lW2tdOyB9KVxuICAgICAgLmNvbmNhdChyZW1haW5kZXIpLmpvaW4oJ1xcbicpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKGNzc1RleHRQcm9wKSB7IGNzc1RleHRQcm9wLmNzc1RleHQgPSBzdHlsZTsgfVxuICAgIGVsc2UgeyBzdHlsZU5vZGUuaW5uZXJIVE1MID0gc3R5bGU7IH1cbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgcmlvdCB0ZW1wbGF0ZSBlbmdpbmVcbiAqIEB2ZXJzaW9uIHYzLjAuOFxuICovXG5cbnZhciBza2lwUmVnZXggPSAoZnVuY3Rpb24gKCkgeyAvL2VzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICB2YXIgYmVmb3JlUmVDaGFycyA9ICdbeygsOzo/PXwmIV5+PiUqLyc7XG5cbiAgdmFyIGJlZm9yZVJlV29yZHMgPSBbXG4gICAgJ2Nhc2UnLFxuICAgICdkZWZhdWx0JyxcbiAgICAnZG8nLFxuICAgICdlbHNlJyxcbiAgICAnaW4nLFxuICAgICdpbnN0YW5jZW9mJyxcbiAgICAncHJlZml4JyxcbiAgICAncmV0dXJuJyxcbiAgICAndHlwZW9mJyxcbiAgICAndm9pZCcsXG4gICAgJ3lpZWxkJ1xuICBdO1xuXG4gIHZhciB3b3Jkc0xhc3RDaGFyID0gYmVmb3JlUmVXb3Jkcy5yZWR1Y2UoZnVuY3Rpb24gKHMsIHcpIHtcbiAgICByZXR1cm4gcyArIHcuc2xpY2UoLTEpXG4gIH0sICcnKTtcblxuICB2YXIgUkVfUkVHRVggPSAvXlxcLyg/PVteKj4vXSlbXlsvXFxcXF0qKD86KD86XFxcXC58XFxbKD86XFxcXC58W15cXF1cXFxcXSopKlxcXSlbXltcXFxcL10qKSo/XFwvW2dpbXV5XSovO1xuICB2YXIgUkVfVk5fQ0hBUiA9IC9bJFxcd10vO1xuXG4gIGZ1bmN0aW9uIHByZXYgKGNvZGUsIHBvcykge1xuICAgIHdoaWxlICgtLXBvcyA+PSAwICYmIC9cXHMvLnRlc3QoY29kZVtwb3NdKSl7ICB9XG4gICAgcmV0dXJuIHBvc1xuICB9XG5cbiAgZnVuY3Rpb24gX3NraXBSZWdleCAoY29kZSwgc3RhcnQpIHtcblxuICAgIHZhciByZSA9IC8uKi9nO1xuICAgIHZhciBwb3MgPSByZS5sYXN0SW5kZXggPSBzdGFydCsrO1xuICAgIHZhciBtYXRjaCA9IHJlLmV4ZWMoY29kZSlbMF0ubWF0Y2goUkVfUkVHRVgpO1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB2YXIgbmV4dCA9IHBvcyArIG1hdGNoWzBdLmxlbmd0aDtcblxuICAgICAgcG9zID0gcHJldihjb2RlLCBwb3MpO1xuICAgICAgdmFyIGMgPSBjb2RlW3Bvc107XG5cbiAgICAgIGlmIChwb3MgPCAwIHx8IH5iZWZvcmVSZUNoYXJzLmluZGV4T2YoYykpIHtcbiAgICAgICAgcmV0dXJuIG5leHRcbiAgICAgIH1cblxuICAgICAgaWYgKGMgPT09ICcuJykge1xuXG4gICAgICAgIGlmIChjb2RlW3BvcyAtIDFdID09PSAnLicpIHtcbiAgICAgICAgICBzdGFydCA9IG5leHQ7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIGlmIChjID09PSAnKycgfHwgYyA9PT0gJy0nKSB7XG5cbiAgICAgICAgaWYgKGNvZGVbLS1wb3NdICE9PSBjIHx8XG4gICAgICAgICAgICAocG9zID0gcHJldihjb2RlLCBwb3MpKSA8IDAgfHxcbiAgICAgICAgICAgICFSRV9WTl9DSEFSLnRlc3QoY29kZVtwb3NdKSkge1xuICAgICAgICAgIHN0YXJ0ID0gbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKH53b3Jkc0xhc3RDaGFyLmluZGV4T2YoYykpIHtcblxuICAgICAgICB2YXIgZW5kID0gcG9zICsgMTtcblxuICAgICAgICB3aGlsZSAoLS1wb3MgPj0gMCAmJiBSRV9WTl9DSEFSLnRlc3QoY29kZVtwb3NdKSl7ICB9XG4gICAgICAgIGlmICh+YmVmb3JlUmVXb3Jkcy5pbmRleE9mKGNvZGUuc2xpY2UocG9zICsgMSwgZW5kKSkpIHtcbiAgICAgICAgICBzdGFydCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RhcnRcbiAgfVxuXG4gIHJldHVybiBfc2tpcFJlZ2V4XG5cbn0pKCk7XG5cbi8qKlxuICogcmlvdC51dGlsLmJyYWNrZXRzXG4gKlxuICogLSBgYnJhY2tldHMgICAgYCAtIFJldHVybnMgYSBzdHJpbmcgb3IgcmVnZXggYmFzZWQgb24gaXRzIHBhcmFtZXRlclxuICogLSBgYnJhY2tldHMuc2V0YCAtIENoYW5nZSB0aGUgY3VycmVudCByaW90IGJyYWNrZXRzXG4gKlxuICogQG1vZHVsZVxuICovXG5cbi8qIGdsb2JhbCByaW90ICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG52YXIgYnJhY2tldHMgPSAoZnVuY3Rpb24gKFVOREVGKSB7XG5cbiAgdmFyXG4gICAgUkVHTE9CID0gJ2cnLFxuXG4gICAgUl9NTENPTU1TID0gL1xcL1xcKlteKl0qXFwqKyg/OlteKlxcL11bXipdKlxcKispKlxcLy9nLFxuXG4gICAgUl9TVFJJTkdTID0gL1wiW15cIlxcXFxdKig/OlxcXFxbXFxTXFxzXVteXCJcXFxcXSopKlwifCdbXidcXFxcXSooPzpcXFxcW1xcU1xcc11bXidcXFxcXSopKid8YFteYFxcXFxdKig/OlxcXFxbXFxTXFxzXVteYFxcXFxdKikqYC9nLFxuXG4gICAgU19RQkxPQ0tTID0gUl9TVFJJTkdTLnNvdXJjZSArICd8JyArXG4gICAgICAvKD86XFxicmV0dXJuXFxzK3woPzpbJFxcd1xcKVxcXV18XFwrXFwrfC0tKVxccyooXFwvKSg/IVsqXFwvXSkpLy5zb3VyY2UgKyAnfCcgK1xuICAgICAgL1xcLyg/PVteKlxcL10pW15bXFwvXFxcXF0qKD86KD86XFxbKD86XFxcXC58W15cXF1cXFxcXSopKlxcXXxcXFxcLilbXltcXC9cXFxcXSopKj8oW148XVxcLylbZ2ltXSovLnNvdXJjZSxcblxuICAgIFVOU1VQUE9SVEVEID0gUmVnRXhwKCdbXFxcXCcgKyAneDAwLVxcXFx4MUY8PmEtekEtWjAtOVxcJ1wiLDtcXFxcXFxcXF0nKSxcblxuICAgIE5FRURfRVNDQVBFID0gLyg/PVtbXFxdKCkqKz8uXiR8XSkvZyxcblxuICAgIFNfUUJMT0NLMiA9IFJfU1RSSU5HUy5zb3VyY2UgKyAnfCcgKyAvKFxcLykoPyFbKlxcL10pLy5zb3VyY2UsXG5cbiAgICBGSU5EQlJBQ0VTID0ge1xuICAgICAgJygnOiBSZWdFeHAoJyhbKCldKXwnICAgKyBTX1FCTE9DSzIsIFJFR0xPQiksXG4gICAgICAnWyc6IFJlZ0V4cCgnKFtbXFxcXF1dKXwnICsgU19RQkxPQ0syLCBSRUdMT0IpLFxuICAgICAgJ3snOiBSZWdFeHAoJyhbe31dKXwnICAgKyBTX1FCTE9DSzIsIFJFR0xPQilcbiAgICB9LFxuXG4gICAgREVGQVVMVCA9ICd7IH0nO1xuXG4gIHZhciBfcGFpcnMgPSBbXG4gICAgJ3snLCAnfScsXG4gICAgJ3snLCAnfScsXG4gICAgL3tbXn1dKn0vLFxuICAgIC9cXFxcKFt7fV0pL2csXG4gICAgL1xcXFwoeyl8ey9nLFxuICAgIFJlZ0V4cCgnXFxcXFxcXFwofSl8KFtbKHtdKXwofSl8JyArIFNfUUJMT0NLMiwgUkVHTE9CKSxcbiAgICBERUZBVUxULFxuICAgIC9eXFxzKntcXF4/XFxzKihbJFxcd10rKSg/OlxccyosXFxzKihcXFMrKSk/XFxzK2luXFxzKyhcXFMuKilcXHMqfS8sXG4gICAgLyhefFteXFxcXF0pez1bXFxTXFxzXSo/fS9cbiAgXTtcblxuICB2YXJcbiAgICBjYWNoZWRCcmFja2V0cyA9IFVOREVGLFxuICAgIF9yZWdleCxcbiAgICBfY2FjaGUgPSBbXSxcbiAgICBfc2V0dGluZ3M7XG5cbiAgZnVuY3Rpb24gX2xvb3BiYWNrIChyZSkgeyByZXR1cm4gcmUgfVxuXG4gIGZ1bmN0aW9uIF9yZXdyaXRlIChyZSwgYnApIHtcbiAgICBpZiAoIWJwKSB7IGJwID0gX2NhY2hlOyB9XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXG4gICAgICByZS5zb3VyY2UucmVwbGFjZSgvey9nLCBicFsyXSkucmVwbGFjZSgvfS9nLCBicFszXSksIHJlLmdsb2JhbCA/IFJFR0xPQiA6ICcnXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZSAocGFpcikge1xuICAgIGlmIChwYWlyID09PSBERUZBVUxUKSB7IHJldHVybiBfcGFpcnMgfVxuXG4gICAgdmFyIGFyciA9IHBhaXIuc3BsaXQoJyAnKTtcblxuICAgIGlmIChhcnIubGVuZ3RoICE9PSAyIHx8IFVOU1VQUE9SVEVELnRlc3QocGFpcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgYnJhY2tldHMgXCInICsgcGFpciArICdcIicpXG4gICAgfVxuICAgIGFyciA9IGFyci5jb25jYXQocGFpci5yZXBsYWNlKE5FRURfRVNDQVBFLCAnXFxcXCcpLnNwbGl0KCcgJykpO1xuXG4gICAgYXJyWzRdID0gX3Jld3JpdGUoYXJyWzFdLmxlbmd0aCA+IDEgPyAve1tcXFNcXHNdKj99LyA6IF9wYWlyc1s0XSwgYXJyKTtcbiAgICBhcnJbNV0gPSBfcmV3cml0ZShwYWlyLmxlbmd0aCA+IDMgPyAvXFxcXCh7fH0pL2cgOiBfcGFpcnNbNV0sIGFycik7XG4gICAgYXJyWzZdID0gX3Jld3JpdGUoX3BhaXJzWzZdLCBhcnIpO1xuICAgIGFycls3XSA9IFJlZ0V4cCgnXFxcXFxcXFwoJyArIGFyclszXSArICcpfChbWyh7XSl8KCcgKyBhcnJbM10gKyAnKXwnICsgU19RQkxPQ0syLCBSRUdMT0IpO1xuICAgIGFycls4XSA9IHBhaXI7XG4gICAgcmV0dXJuIGFyclxuICB9XG5cbiAgZnVuY3Rpb24gX2JyYWNrZXRzIChyZU9ySWR4KSB7XG4gICAgcmV0dXJuIHJlT3JJZHggaW5zdGFuY2VvZiBSZWdFeHAgPyBfcmVnZXgocmVPcklkeCkgOiBfY2FjaGVbcmVPcklkeF1cbiAgfVxuXG4gIF9icmFja2V0cy5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChzdHIsIHRtcGwsIF9icCkge1xuICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBfYnAgaXMgZm9yIHRoZSBjb21waWxlclxuICAgIGlmICghX2JwKSB7IF9icCA9IF9jYWNoZTsgfVxuXG4gICAgdmFyXG4gICAgICBwYXJ0cyA9IFtdLFxuICAgICAgbWF0Y2gsXG4gICAgICBpc2V4cHIsXG4gICAgICBzdGFydCxcbiAgICAgIHBvcyxcbiAgICAgIHJlID0gX2JwWzZdO1xuXG4gICAgdmFyIHFibG9ja3MgPSBbXTtcbiAgICB2YXIgcHJldlN0ciA9ICcnO1xuICAgIHZhciBtYXJrLCBsYXN0SW5kZXg7XG5cbiAgICBpc2V4cHIgPSBzdGFydCA9IHJlLmxhc3RJbmRleCA9IDA7XG5cbiAgICB3aGlsZSAoKG1hdGNoID0gcmUuZXhlYyhzdHIpKSkge1xuXG4gICAgICBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICBwb3MgPSBtYXRjaC5pbmRleDtcblxuICAgICAgaWYgKGlzZXhwcikge1xuXG4gICAgICAgIGlmIChtYXRjaFsyXSkge1xuXG4gICAgICAgICAgdmFyIGNoID0gbWF0Y2hbMl07XG4gICAgICAgICAgdmFyIHJlY2ggPSBGSU5EQlJBQ0VTW2NoXTtcbiAgICAgICAgICB2YXIgaXggPSAxO1xuXG4gICAgICAgICAgcmVjaC5sYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHJlY2guZXhlYyhzdHIpKSkge1xuICAgICAgICAgICAgaWYgKG1hdGNoWzFdKSB7XG4gICAgICAgICAgICAgIGlmIChtYXRjaFsxXSA9PT0gY2gpIHsgKytpeDsgfVxuICAgICAgICAgICAgICBlbHNlIGlmICghLS1peCkgeyBicmVhayB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWNoLmxhc3RJbmRleCA9IHB1c2hRQmxvY2sobWF0Y2guaW5kZXgsIHJlY2gubGFzdEluZGV4LCBtYXRjaFsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlLmxhc3RJbmRleCA9IGl4ID8gc3RyLmxlbmd0aCA6IHJlY2gubGFzdEluZGV4O1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW1hdGNoWzNdKSB7XG4gICAgICAgICAgcmUubGFzdEluZGV4ID0gcHVzaFFCbG9jayhwb3MsIGxhc3RJbmRleCwgbWF0Y2hbNF0pO1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFtYXRjaFsxXSkge1xuICAgICAgICB1bmVzY2FwZVN0cihzdHIuc2xpY2Uoc3RhcnQsIHBvcykpO1xuICAgICAgICBzdGFydCA9IHJlLmxhc3RJbmRleDtcbiAgICAgICAgcmUgPSBfYnBbNiArIChpc2V4cHIgXj0gMSldO1xuICAgICAgICByZS5sYXN0SW5kZXggPSBzdGFydDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RyICYmIHN0YXJ0IDwgc3RyLmxlbmd0aCkge1xuICAgICAgdW5lc2NhcGVTdHIoc3RyLnNsaWNlKHN0YXJ0KSk7XG4gICAgfVxuXG4gICAgcGFydHMucWJsb2NrcyA9IHFibG9ja3M7XG5cbiAgICByZXR1cm4gcGFydHNcblxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlU3RyIChzKSB7XG4gICAgICBpZiAocHJldlN0cikge1xuICAgICAgICBzID0gcHJldlN0ciArIHM7XG4gICAgICAgIHByZXZTdHIgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmICh0bXBsIHx8IGlzZXhwcikge1xuICAgICAgICBwYXJ0cy5wdXNoKHMgJiYgcy5yZXBsYWNlKF9icFs1XSwgJyQxJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFydHMucHVzaChzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwdXNoUUJsb2NrKF9wb3MsIF9sYXN0SW5kZXgsIHNsYXNoKSB7IC8vZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgaWYgKHNsYXNoKSB7XG4gICAgICAgIF9sYXN0SW5kZXggPSBza2lwUmVnZXgoc3RyLCBfcG9zKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRtcGwgJiYgX2xhc3RJbmRleCA+IF9wb3MgKyAyKSB7XG4gICAgICAgIG1hcmsgPSAnXFx1MjA1NycgKyBxYmxvY2tzLmxlbmd0aCArICd+JztcbiAgICAgICAgcWJsb2Nrcy5wdXNoKHN0ci5zbGljZShfcG9zLCBfbGFzdEluZGV4KSk7XG4gICAgICAgIHByZXZTdHIgKz0gc3RyLnNsaWNlKHN0YXJ0LCBfcG9zKSArIG1hcms7XG4gICAgICAgIHN0YXJ0ID0gX2xhc3RJbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfbGFzdEluZGV4XG4gICAgfVxuICB9O1xuXG4gIF9icmFja2V0cy5oYXNFeHByID0gZnVuY3Rpb24gaGFzRXhwciAoc3RyKSB7XG4gICAgcmV0dXJuIF9jYWNoZVs0XS50ZXN0KHN0cilcbiAgfTtcblxuICBfYnJhY2tldHMubG9vcEtleXMgPSBmdW5jdGlvbiBsb29wS2V5cyAoZXhwcikge1xuICAgIHZhciBtID0gZXhwci5tYXRjaChfY2FjaGVbOV0pO1xuXG4gICAgcmV0dXJuIG1cbiAgICAgID8geyBrZXk6IG1bMV0sIHBvczogbVsyXSwgdmFsOiBfY2FjaGVbMF0gKyBtWzNdLnRyaW0oKSArIF9jYWNoZVsxXSB9XG4gICAgICA6IHsgdmFsOiBleHByLnRyaW0oKSB9XG4gIH07XG5cbiAgX2JyYWNrZXRzLmFycmF5ID0gZnVuY3Rpb24gYXJyYXkgKHBhaXIpIHtcbiAgICByZXR1cm4gcGFpciA/IF9jcmVhdGUocGFpcikgOiBfY2FjaGVcbiAgfTtcblxuICBmdW5jdGlvbiBfcmVzZXQgKHBhaXIpIHtcbiAgICBpZiAoKHBhaXIgfHwgKHBhaXIgPSBERUZBVUxUKSkgIT09IF9jYWNoZVs4XSkge1xuICAgICAgX2NhY2hlID0gX2NyZWF0ZShwYWlyKTtcbiAgICAgIF9yZWdleCA9IHBhaXIgPT09IERFRkFVTFQgPyBfbG9vcGJhY2sgOiBfcmV3cml0ZTtcbiAgICAgIF9jYWNoZVs5XSA9IF9yZWdleChfcGFpcnNbOV0pO1xuICAgIH1cbiAgICBjYWNoZWRCcmFja2V0cyA9IHBhaXI7XG4gIH1cblxuICBmdW5jdGlvbiBfc2V0U2V0dGluZ3MgKG8pIHtcbiAgICB2YXIgYjtcblxuICAgIG8gPSBvIHx8IHt9O1xuICAgIGIgPSBvLmJyYWNrZXRzO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCAnYnJhY2tldHMnLCB7XG4gICAgICBzZXQ6IF9yZXNldCxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FjaGVkQnJhY2tldHMgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBfc2V0dGluZ3MgPSBvO1xuICAgIF9yZXNldChiKTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYnJhY2tldHMsICdzZXR0aW5ncycsIHtcbiAgICBzZXQ6IF9zZXRTZXR0aW5ncyxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9zZXR0aW5ncyB9XG4gIH0pO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBpbiB0aGUgYnJvd3NlciByaW90IGlzIGFsd2F5cyBpbiB0aGUgc2NvcGUgKi9cbiAgX2JyYWNrZXRzLnNldHRpbmdzID0gdHlwZW9mIHJpb3QgIT09ICd1bmRlZmluZWQnICYmIHJpb3Quc2V0dGluZ3MgfHwge307XG4gIF9icmFja2V0cy5zZXQgPSBfcmVzZXQ7XG4gIF9icmFja2V0cy5za2lwUmVnZXggPSBza2lwUmVnZXg7XG5cbiAgX2JyYWNrZXRzLlJfU1RSSU5HUyA9IFJfU1RSSU5HUztcbiAgX2JyYWNrZXRzLlJfTUxDT01NUyA9IFJfTUxDT01NUztcbiAgX2JyYWNrZXRzLlNfUUJMT0NLUyA9IFNfUUJMT0NLUztcbiAgX2JyYWNrZXRzLlNfUUJMT0NLMiA9IFNfUUJMT0NLMjtcblxuICByZXR1cm4gX2JyYWNrZXRzXG5cbn0pKCk7XG5cbi8qKlxuICogQG1vZHVsZSB0bXBsXG4gKlxuICogdG1wbCAgICAgICAgICAtIFJvb3QgZnVuY3Rpb24sIHJldHVybnMgdGhlIHRlbXBsYXRlIHZhbHVlLCByZW5kZXIgd2l0aCBkYXRhXG4gKiB0bXBsLmhhc0V4cHIgIC0gVGVzdCB0aGUgZXhpc3RlbmNlIG9mIGEgZXhwcmVzc2lvbiBpbnNpZGUgYSBzdHJpbmdcbiAqIHRtcGwubG9vcEtleXMgLSBHZXQgdGhlIGtleXMgZm9yIGFuICdlYWNoJyBsb29wICh1c2VkIGJ5IGBfZWFjaGApXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnZhciB0bXBsID0gKGZ1bmN0aW9uICgpIHtcblxuICB2YXIgX2NhY2hlID0ge307XG5cbiAgZnVuY3Rpb24gX3RtcGwgKHN0ciwgZGF0YSkge1xuICAgIGlmICghc3RyKSB7IHJldHVybiBzdHIgfVxuXG4gICAgcmV0dXJuIChfY2FjaGVbc3RyXSB8fCAoX2NhY2hlW3N0cl0gPSBfY3JlYXRlKHN0cikpKS5jYWxsKFxuICAgICAgZGF0YSwgX2xvZ0Vyci5iaW5kKHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgdG1wbDogc3RyXG4gICAgICB9KVxuICAgIClcbiAgfVxuXG4gIF90bXBsLmhhc0V4cHIgPSBicmFja2V0cy5oYXNFeHByO1xuXG4gIF90bXBsLmxvb3BLZXlzID0gYnJhY2tldHMubG9vcEtleXM7XG5cbiAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgX3RtcGwuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uICgpIHsgX2NhY2hlID0ge307IH07XG5cbiAgX3RtcGwuZXJyb3JIYW5kbGVyID0gbnVsbDtcblxuICBmdW5jdGlvbiBfbG9nRXJyIChlcnIsIGN0eCkge1xuXG4gICAgZXJyLnJpb3REYXRhID0ge1xuICAgICAgdGFnTmFtZTogY3R4ICYmIGN0eC5fXyAmJiBjdHguX18udGFnTmFtZSxcbiAgICAgIF9yaW90X2lkOiBjdHggJiYgY3R4Ll9yaW90X2lkICAvL2VzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gICAgfTtcblxuICAgIGlmIChfdG1wbC5lcnJvckhhbmRsZXIpIHsgX3RtcGwuZXJyb3JIYW5kbGVyKGVycik7IH1cbiAgICBlbHNlIGlmIChcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbidcbiAgICApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLm1lc3NhZ2UpO1xuICAgICAgY29uc29sZS5sb2coJzwlcz4gJXMnLCBlcnIucmlvdERhdGEudGFnTmFtZSB8fCAnVW5rbm93biB0YWcnLCB0aGlzLnRtcGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICBjb25zb2xlLmxvZyh0aGlzLmRhdGEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZSAoc3RyKSB7XG4gICAgdmFyIGV4cHIgPSBfZ2V0VG1wbChzdHIpO1xuXG4gICAgaWYgKGV4cHIuc2xpY2UoMCwgMTEpICE9PSAndHJ5e3JldHVybiAnKSB7IGV4cHIgPSAncmV0dXJuICcgKyBleHByOyB9XG5cbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdFJywgZXhwciArICc7JykgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctZnVuY1xuICB9XG5cbiAgdmFyIFJFX0RRVU9URSA9IC9cXHUyMDU3L2c7XG4gIHZhciBSRV9RQk1BUksgPSAvXFx1MjA1NyhcXGQrKX4vZztcblxuICBmdW5jdGlvbiBfZ2V0VG1wbCAoc3RyKSB7XG4gICAgdmFyIHBhcnRzID0gYnJhY2tldHMuc3BsaXQoc3RyLnJlcGxhY2UoUkVfRFFVT1RFLCAnXCInKSwgMSk7XG4gICAgdmFyIHFzdHIgPSBwYXJ0cy5xYmxvY2tzO1xuICAgIHZhciBleHByO1xuXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA+IDIgfHwgcGFydHNbMF0pIHtcbiAgICAgIHZhciBpLCBqLCBsaXN0ID0gW107XG5cbiAgICAgIGZvciAoaSA9IGogPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcblxuICAgICAgICBleHByID0gcGFydHNbaV07XG5cbiAgICAgICAgaWYgKGV4cHIgJiYgKGV4cHIgPSBpICYgMVxuXG4gICAgICAgICAgICA/IF9wYXJzZUV4cHIoZXhwciwgMSwgcXN0cilcblxuICAgICAgICAgICAgOiAnXCInICsgZXhwclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcclxcbj98XFxuL2csICdcXFxcbicpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKSArXG4gICAgICAgICAgICAgICdcIidcblxuICAgICAgICAgICkpIHsgbGlzdFtqKytdID0gZXhwcjsgfVxuXG4gICAgICB9XG5cbiAgICAgIGV4cHIgPSBqIDwgMiA/IGxpc3RbMF1cbiAgICAgICAgICAgOiAnWycgKyBsaXN0LmpvaW4oJywnKSArICddLmpvaW4oXCJcIiknO1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgZXhwciA9IF9wYXJzZUV4cHIocGFydHNbMV0sIDAsIHFzdHIpO1xuICAgIH1cblxuICAgIGlmIChxc3RyLmxlbmd0aCkge1xuICAgICAgZXhwciA9IGV4cHIucmVwbGFjZShSRV9RQk1BUkssIGZ1bmN0aW9uIChfLCBwb3MpIHtcbiAgICAgICAgcmV0dXJuIHFzdHJbcG9zXVxuICAgICAgICAgIC5yZXBsYWNlKC9cXHIvZywgJ1xcXFxyJylcbiAgICAgICAgICAucmVwbGFjZSgvXFxuL2csICdcXFxcbicpXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGV4cHJcbiAgfVxuXG4gIHZhciBSRV9DU05BTUUgPSAvXig/OigtP1tfQS1aYS16XFx4QTAtXFx4RkZdWy1cXHdcXHhBMC1cXHhGRl0qKXxcXHUyMDU3KFxcZCspfik6LztcbiAgdmFyXG4gICAgUkVfQlJFTkQgPSB7XG4gICAgICAnKCc6IC9bKCldL2csXG4gICAgICAnWyc6IC9bW1xcXV0vZyxcbiAgICAgICd7JzogL1t7fV0vZ1xuICAgIH07XG5cbiAgZnVuY3Rpb24gX3BhcnNlRXhwciAoZXhwciwgYXNUZXh0LCBxc3RyKSB7XG5cbiAgICBleHByID0gZXhwclxuICAgICAgLnJlcGxhY2UoL1xccysvZywgJyAnKS50cmltKClcbiAgICAgIC5yZXBsYWNlKC9cXCA/KFtbXFwoe30sP1xcLjpdKVxcID8vZywgJyQxJyk7XG5cbiAgICBpZiAoZXhwcikge1xuICAgICAgdmFyXG4gICAgICAgIGxpc3QgPSBbXSxcbiAgICAgICAgY250ID0gMCxcbiAgICAgICAgbWF0Y2g7XG5cbiAgICAgIHdoaWxlIChleHByICYmXG4gICAgICAgICAgICAobWF0Y2ggPSBleHByLm1hdGNoKFJFX0NTTkFNRSkpICYmXG4gICAgICAgICAgICAhbWF0Y2guaW5kZXhcbiAgICAgICAgKSB7XG4gICAgICAgIHZhclxuICAgICAgICAgIGtleSxcbiAgICAgICAgICBqc2IsXG4gICAgICAgICAgcmUgPSAvLHwoW1t7KF0pfCQvZztcblxuICAgICAgICBleHByID0gUmVnRXhwLnJpZ2h0Q29udGV4dDtcbiAgICAgICAga2V5ICA9IG1hdGNoWzJdID8gcXN0clttYXRjaFsyXV0uc2xpY2UoMSwgLTEpLnRyaW0oKS5yZXBsYWNlKC9cXHMrL2csICcgJykgOiBtYXRjaFsxXTtcblxuICAgICAgICB3aGlsZSAoanNiID0gKG1hdGNoID0gcmUuZXhlYyhleHByKSlbMV0pIHsgc2tpcEJyYWNlcyhqc2IsIHJlKTsgfVxuXG4gICAgICAgIGpzYiAgPSBleHByLnNsaWNlKDAsIG1hdGNoLmluZGV4KTtcbiAgICAgICAgZXhwciA9IFJlZ0V4cC5yaWdodENvbnRleHQ7XG5cbiAgICAgICAgbGlzdFtjbnQrK10gPSBfd3JhcEV4cHIoanNiLCAxLCBrZXkpO1xuICAgICAgfVxuXG4gICAgICBleHByID0gIWNudCA/IF93cmFwRXhwcihleHByLCBhc1RleHQpXG4gICAgICAgICAgIDogY250ID4gMSA/ICdbJyArIGxpc3Quam9pbignLCcpICsgJ10uam9pbihcIiBcIikudHJpbSgpJyA6IGxpc3RbMF07XG4gICAgfVxuICAgIHJldHVybiBleHByXG5cbiAgICBmdW5jdGlvbiBza2lwQnJhY2VzIChjaCwgcmUpIHtcbiAgICAgIHZhclxuICAgICAgICBtbSxcbiAgICAgICAgbHYgPSAxLFxuICAgICAgICBpciA9IFJFX0JSRU5EW2NoXTtcblxuICAgICAgaXIubGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgd2hpbGUgKG1tID0gaXIuZXhlYyhleHByKSkge1xuICAgICAgICBpZiAobW1bMF0gPT09IGNoKSB7ICsrbHY7IH1cbiAgICAgICAgZWxzZSBpZiAoIS0tbHYpIHsgYnJlYWsgfVxuICAgICAgfVxuICAgICAgcmUubGFzdEluZGV4ID0gbHYgPyBleHByLmxlbmd0aCA6IGlyLmxhc3RJbmRleDtcbiAgICB9XG4gIH1cblxuICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogbm90IGJvdGhcbiAgdmFyIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gICAgSlNfQ09OVEVYVCA9ICdcImluIHRoaXM/dGhpczonICsgKHR5cGVvZiB3aW5kb3cgIT09ICdvYmplY3QnID8gJ2dsb2JhbCcgOiAnd2luZG93JykgKyAnKS4nLFxuICAgIEpTX1ZBUk5BTUUgPSAvWyx7XVtcXCRcXHddKyg/PTopfCheICp8W14kXFx3XFwue10pKD8hKD86dHlwZW9mfHRydWV8ZmFsc2V8bnVsbHx1bmRlZmluZWR8aW58aW5zdGFuY2VvZnxpcyg/OkZpbml0ZXxOYU4pfHZvaWR8TmFOfG5ld3xEYXRlfFJlZ0V4cHxNYXRoKSg/IVskXFx3XSkpKFskX0EtWmEtel1bJFxcd10qKS9nLFxuICAgIEpTX05PUFJPUFMgPSAvXig/PShcXC5bJFxcd10rKSlcXDEoPzpbXi5bKF18JCkvO1xuXG4gIGZ1bmN0aW9uIF93cmFwRXhwciAoZXhwciwgYXNUZXh0LCBrZXkpIHtcbiAgICB2YXIgdGI7XG5cbiAgICBleHByID0gZXhwci5yZXBsYWNlKEpTX1ZBUk5BTUUsIGZ1bmN0aW9uIChtYXRjaCwgcCwgbXZhciwgcG9zLCBzKSB7XG4gICAgICBpZiAobXZhcikge1xuICAgICAgICBwb3MgPSB0YiA/IDAgOiBwb3MgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKG12YXIgIT09ICd0aGlzJyAmJiBtdmFyICE9PSAnZ2xvYmFsJyAmJiBtdmFyICE9PSAnd2luZG93Jykge1xuICAgICAgICAgIG1hdGNoID0gcCArICcoXCInICsgbXZhciArIEpTX0NPTlRFWFQgKyBtdmFyO1xuICAgICAgICAgIGlmIChwb3MpIHsgdGIgPSAocyA9IHNbcG9zXSkgPT09ICcuJyB8fCBzID09PSAnKCcgfHwgcyA9PT0gJ1snOyB9XG4gICAgICAgIH0gZWxzZSBpZiAocG9zKSB7XG4gICAgICAgICAgdGIgPSAhSlNfTk9QUk9QUy50ZXN0KHMuc2xpY2UocG9zKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaFxuICAgIH0pO1xuXG4gICAgaWYgKHRiKSB7XG4gICAgICBleHByID0gJ3RyeXtyZXR1cm4gJyArIGV4cHIgKyAnfWNhdGNoKGUpe0UoZSx0aGlzKX0nO1xuICAgIH1cblxuICAgIGlmIChrZXkpIHtcblxuICAgICAgZXhwciA9ICh0YlxuICAgICAgICAgID8gJ2Z1bmN0aW9uKCl7JyArIGV4cHIgKyAnfS5jYWxsKHRoaXMpJyA6ICcoJyArIGV4cHIgKyAnKSdcbiAgICAgICAgKSArICc/XCInICsga2V5ICsgJ1wiOlwiXCInO1xuXG4gICAgfSBlbHNlIGlmIChhc1RleHQpIHtcblxuICAgICAgZXhwciA9ICdmdW5jdGlvbih2KXsnICsgKHRiXG4gICAgICAgICAgPyBleHByLnJlcGxhY2UoJ3JldHVybiAnLCAndj0nKSA6ICd2PSgnICsgZXhwciArICcpJ1xuICAgICAgICApICsgJztyZXR1cm4gdnx8dj09PTA/djpcIlwifS5jYWxsKHRoaXMpJztcbiAgICB9XG5cbiAgICByZXR1cm4gZXhwclxuICB9XG5cbiAgX3RtcGwudmVyc2lvbiA9IGJyYWNrZXRzLnZlcnNpb24gPSAndjMuMC44JztcblxuICByZXR1cm4gX3RtcGxcblxufSkoKTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnZhciBvYnNlcnZhYmxlJDEgPSBmdW5jdGlvbihlbCkge1xuXG4gIC8qKlxuICAgKiBFeHRlbmQgdGhlIG9yaWdpbmFsIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgZW1wdHkgb25lXG4gICAqIEB0eXBlIHsgT2JqZWN0IH1cbiAgICovXG5cbiAgZWwgPSBlbCB8fCB7fTtcblxuICAvKipcbiAgICogUHJpdmF0ZSB2YXJpYWJsZXNcbiAgICovXG4gIHZhciBjYWxsYmFja3MgPSB7fSxcbiAgICBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICAvKipcbiAgICogUHVibGljIEFwaVxuICAgKi9cblxuICAvLyBleHRlbmQgdGhlIGVsIG9iamVjdCBhZGRpbmcgdGhlIG9ic2VydmFibGUgbWV0aG9kc1xuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlbCwge1xuICAgIC8qKlxuICAgICAqIExpc3RlbiB0byB0aGUgZ2l2ZW4gYGV2ZW50YCBhbmRzXG4gICAgICogZXhlY3V0ZSB0aGUgYGNhbGxiYWNrYCBlYWNoIHRpbWUgYW4gZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgICAqIEBwYXJhbSAgeyBTdHJpbmcgfSBldmVudCAtIGV2ZW50IGlkXG4gICAgICogQHBhcmFtICB7IEZ1bmN0aW9uIH0gZm4gLSBjYWxsYmFjayBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIHsgT2JqZWN0IH0gZWxcbiAgICAgKi9cbiAgICBvbjoge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGV2ZW50LCBmbikge1xuICAgICAgICBpZiAodHlwZW9mIGZuID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgeyAoY2FsbGJhY2tzW2V2ZW50XSA9IGNhbGxiYWNrc1tldmVudF0gfHwgW10pLnB1c2goZm4pOyB9XG4gICAgICAgIHJldHVybiBlbFxuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBgZXZlbnRgIGxpc3RlbmVyc1xuICAgICAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gZXZlbnQgLSBldmVudCBpZFxuICAgICAqIEBwYXJhbSAgIHsgRnVuY3Rpb24gfSBmbiAtIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMgeyBPYmplY3QgfSBlbFxuICAgICAqL1xuICAgIG9mZjoge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGV2ZW50LCBmbikge1xuICAgICAgICBpZiAoZXZlbnQgPT0gJyonICYmICFmbikgeyBjYWxsYmFja3MgPSB7fTsgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICAgIHZhciBhcnIgPSBjYWxsYmFja3NbZXZlbnRdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNiOyBjYiA9IGFyciAmJiBhcnJbaV07ICsraSkge1xuICAgICAgICAgICAgICBpZiAoY2IgPT0gZm4pIHsgYXJyLnNwbGljZShpLS0sIDEpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHsgZGVsZXRlIGNhbGxiYWNrc1tldmVudF07IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxcbiAgICAgIH0sXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTGlzdGVuIHRvIHRoZSBnaXZlbiBgZXZlbnRgIGFuZFxuICAgICAqIGV4ZWN1dGUgdGhlIGBjYWxsYmFja2AgYXQgbW9zdCBvbmNlXG4gICAgICogQHBhcmFtICAgeyBTdHJpbmcgfSBldmVudCAtIGV2ZW50IGlkXG4gICAgICogQHBhcmFtICAgeyBGdW5jdGlvbiB9IGZuIC0gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7IE9iamVjdCB9IGVsXG4gICAgICovXG4gICAgb25lOiB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oZXZlbnQsIGZuKSB7XG4gICAgICAgIGZ1bmN0aW9uIG9uKCkge1xuICAgICAgICAgIGVsLm9mZihldmVudCwgb24pO1xuICAgICAgICAgIGZuLmFwcGx5KGVsLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbC5vbihldmVudCwgb24pXG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgYWxsIGNhbGxiYWNrIGZ1bmN0aW9ucyB0aGF0IGxpc3RlbiB0b1xuICAgICAqIHRoZSBnaXZlbiBgZXZlbnRgXG4gICAgICogQHBhcmFtICAgeyBTdHJpbmcgfSBldmVudCAtIGV2ZW50IGlkXG4gICAgICogQHJldHVybnMgeyBPYmplY3QgfSBlbFxuICAgICAqL1xuICAgIHRyaWdnZXI6IHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cblxuICAgICAgICAvLyBnZXR0aW5nIHRoZSBhcmd1bWVudHNcbiAgICAgICAgdmFyIGFyZ2xlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxLFxuICAgICAgICAgIGFyZ3MgPSBuZXcgQXJyYXkoYXJnbGVuKSxcbiAgICAgICAgICBmbnMsXG4gICAgICAgICAgZm4sXG4gICAgICAgICAgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJnbGVuOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzJDFbaSArIDFdOyAvLyBza2lwIGZpcnN0IGFyZ3VtZW50XG4gICAgICAgIH1cblxuICAgICAgICBmbnMgPSBzbGljZS5jYWxsKGNhbGxiYWNrc1tldmVudF0gfHwgW10sIDApO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGZuID0gZm5zW2ldOyArK2kpIHtcbiAgICAgICAgICBmbi5hcHBseShlbCwgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FsbGJhY2tzWycqJ10gJiYgZXZlbnQgIT0gJyonKVxuICAgICAgICAgIHsgZWwudHJpZ2dlci5hcHBseShlbCwgWycqJywgZXZlbnRdLmNvbmNhdChhcmdzKSk7IH1cblxuICAgICAgICByZXR1cm4gZWxcbiAgICAgIH0sXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlbFxuXG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBwYXNzZWQgYXJndW1lbnQgaXMgYSBib29sZWFuIGF0dHJpYnV0ZVxuICogQHBhcmFtICAgeyBTdHJpbmcgfSB2YWx1ZSAtXG4gKiBAcmV0dXJucyB7IEJvb2xlYW4gfSAtXG4gKi9cbmZ1bmN0aW9uIGlzQm9vbEF0dHIodmFsdWUpIHtcbiAgcmV0dXJuIFJFX0JPT0xfQVRUUlMudGVzdCh2YWx1ZSlcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBwYXNzZWQgYXJndW1lbnQgaXMgYSBmdW5jdGlvblxuICogQHBhcmFtICAgeyAqIH0gdmFsdWUgLVxuICogQHJldHVybnMgeyBCb29sZWFuIH0gLVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFRfRlVOQ1RJT05cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBwYXNzZWQgYXJndW1lbnQgaXMgYW4gb2JqZWN0LCBleGNsdWRlIG51bGxcbiAqIE5PVEU6IHVzZSBpc09iamVjdCh4KSAmJiAhaXNBcnJheSh4KSB0byBleGNsdWRlcyBhcnJheXMuXG4gKiBAcGFyYW0gICB7ICogfSB2YWx1ZSAtXG4gKiBAcmV0dXJucyB7IEJvb2xlYW4gfSAtXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFRfT0JKRUNUIC8vIHR5cGVvZiBudWxsIGlzICdvYmplY3QnXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgcGFzc2VkIGFyZ3VtZW50IGlzIHVuZGVmaW5lZFxuICogQHBhcmFtICAgeyAqIH0gdmFsdWUgLVxuICogQHJldHVybnMgeyBCb29sZWFuIH0gLVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBUX1VOREVGXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgcGFzc2VkIGFyZ3VtZW50IGlzIGEgc3RyaW5nXG4gKiBAcGFyYW0gICB7ICogfSB2YWx1ZSAtXG4gKiBAcmV0dXJucyB7IEJvb2xlYW4gfSAtXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFRfU1RSSU5HXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgcGFzc2VkIGFyZ3VtZW50IGlzIGVtcHR5LiBEaWZmZXJlbnQgZnJvbSBmYWxzeSwgYmVjYXVzZSB3ZSBkb250IGNvbnNpZGVyIDAgb3IgZmFsc2UgdG8gYmUgYmxhbmtcbiAqIEBwYXJhbSB7ICogfSB2YWx1ZSAtXG4gKiBAcmV0dXJucyB7IEJvb2xlYW4gfSAtXG4gKi9cbmZ1bmN0aW9uIGlzQmxhbmsodmFsdWUpIHtcbiAgcmV0dXJuIGlzTmlsKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJydcbn1cblxuLyoqXG4gKiBDaGVjayBhZ2FpbnN0IHRoZSBudWxsIGFuZCB1bmRlZmluZWQgdmFsdWVzXG4gKiBAcGFyYW0gICB7ICogfSAgdmFsdWUgLVxuICogQHJldHVybnMge0Jvb2xlYW59IC1cbiAqL1xuZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgcmV0dXJuIGlzVW5kZWZpbmVkKHZhbHVlKSB8fCB2YWx1ZSA9PT0gbnVsbFxufVxuXG4vKipcbiAqIENoZWNrIGlmIHBhc3NlZCBhcmd1bWVudCBpcyBhIGtpbmQgb2YgYXJyYXlcbiAqIEBwYXJhbSAgIHsgKiB9IHZhbHVlIC1cbiAqIEByZXR1cm5zIHsgQm9vbGVhbiB9IC1cbiAqL1xuZnVuY3Rpb24gaXNBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBBcnJheVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgb2JqZWN0J3MgcHJvcGVydHkgY291bGQgYmUgb3ZlcnJpZGRlblxuICogQHBhcmFtICAgeyBPYmplY3QgfSAgb2JqIC0gc291cmNlIG9iamVjdFxuICogQHBhcmFtICAgeyBTdHJpbmcgfSAga2V5IC0gb2JqZWN0IHByb3BlcnR5XG4gKiBAcmV0dXJucyB7IEJvb2xlYW4gfSB0cnVlIGlmIHdyaXRhYmxlXG4gKi9cbmZ1bmN0aW9uIGlzV3JpdGFibGUob2JqLCBrZXkpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRQcm9wRGVzY3JpcHRvcihvYmosIGtleSk7XG4gIHJldHVybiBpc1VuZGVmaW5lZChvYmpba2V5XSkgfHwgZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLndyaXRhYmxlXG59XG5cblxudmFyIGNoZWNrID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGlzQm9vbEF0dHI6IGlzQm9vbEF0dHIsXG5cdGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG5cdGlzT2JqZWN0OiBpc09iamVjdCxcblx0aXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuXHRpc1N0cmluZzogaXNTdHJpbmcsXG5cdGlzQmxhbms6IGlzQmxhbmssXG5cdGlzTmlsOiBpc05pbCxcblx0aXNBcnJheTogaXNBcnJheSxcblx0aXNXcml0YWJsZTogaXNXcml0YWJsZVxufSk7XG5cbi8qKlxuICogU3BlY2lhbGl6ZWQgZnVuY3Rpb24gZm9yIGxvb3BpbmcgYW4gYXJyYXktbGlrZSBjb2xsZWN0aW9uIHdpdGggYGVhY2g9e31gXG4gKiBAcGFyYW0gICB7IEFycmF5IH0gbGlzdCAtIGNvbGxlY3Rpb24gb2YgaXRlbXNcbiAqIEBwYXJhbSAgIHtGdW5jdGlvbn0gZm4gLSBjYWxsYmFjayBmdW5jdGlvblxuICogQHJldHVybnMgeyBBcnJheSB9IHRoZSBhcnJheSBsb29wZWRcbiAqL1xuZnVuY3Rpb24gZWFjaChsaXN0LCBmbikge1xuICB2YXIgbGVuID0gbGlzdCA/IGxpc3QubGVuZ3RoIDogMDtcbiAgdmFyIGkgPSAwO1xuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7IGZuKGxpc3RbaV0sIGkpOyB9XG4gIHJldHVybiBsaXN0XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBhcnJheSBjb250YWlucyBhbiBpdGVtXG4gKiBAcGFyYW0gICB7IEFycmF5IH0gYXJyYXkgLSB0YXJnZXQgYXJyYXlcbiAqIEBwYXJhbSAgIHsgKiB9IGl0ZW0gLSBpdGVtIHRvIHRlc3RcbiAqIEByZXR1cm5zIHsgQm9vbGVhbiB9IC1cbiAqL1xuZnVuY3Rpb24gY29udGFpbnMoYXJyYXksIGl0ZW0pIHtcbiAgcmV0dXJuIGFycmF5LmluZGV4T2YoaXRlbSkgIT09IC0xXG59XG5cbi8qKlxuICogQ29udmVydCBhIHN0cmluZyBjb250YWluaW5nIGRhc2hlcyB0byBjYW1lbCBjYXNlXG4gKiBAcGFyYW0gICB7IFN0cmluZyB9IHN0ciAtIGlucHV0IHN0cmluZ1xuICogQHJldHVybnMgeyBTdHJpbmcgfSBteS1zdHJpbmcgLT4gbXlTdHJpbmdcbiAqL1xuZnVuY3Rpb24gdG9DYW1lbChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8tKFxcdykvZywgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMudG9VcHBlckNhc2UoKTsgfSlcbn1cblxuLyoqXG4gKiBGYXN0ZXIgU3RyaW5nIHN0YXJ0c1dpdGggYWx0ZXJuYXRpdmVcbiAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gc3RyIC0gc291cmNlIHN0cmluZ1xuICogQHBhcmFtICAgeyBTdHJpbmcgfSB2YWx1ZSAtIHRlc3Qgc3RyaW5nXG4gKiBAcmV0dXJucyB7IEJvb2xlYW4gfSAtXG4gKi9cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyLCB2YWx1ZSkge1xuICByZXR1cm4gc3RyLnNsaWNlKDAsIHZhbHVlLmxlbmd0aCkgPT09IHZhbHVlXG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIHNldCBhbiBpbW11dGFibGUgcHJvcGVydHlcbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gZWwgLSBvYmplY3Qgd2hlcmUgdGhlIG5ldyBwcm9wZXJ0eSB3aWxsIGJlIHNldFxuICogQHBhcmFtICAgeyBTdHJpbmcgfSBrZXkgLSBvYmplY3Qga2V5IHdoZXJlIHRoZSBuZXcgcHJvcGVydHkgd2lsbCBiZSBzdG9yZWRcbiAqIEBwYXJhbSAgIHsgKiB9IHZhbHVlIC0gdmFsdWUgb2YgdGhlIG5ldyBwcm9wZXJ0eVxuICogQHBhcmFtICAgeyBPYmplY3QgfSBvcHRpb25zIC0gc2V0IHRoZSBwcm9wZXJ5IG92ZXJyaWRpbmcgdGhlIGRlZmF1bHQgb3B0aW9uc1xuICogQHJldHVybnMgeyBPYmplY3QgfSAtIHRoZSBpbml0aWFsIG9iamVjdFxuICovXG5mdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShlbCwga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWwsIGtleSwgZXh0ZW5kKHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9LCBvcHRpb25zKSk7XG4gIHJldHVybiBlbFxufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHJldHVybmluZyBhbHdheXMgYSB1bmlxdWUgaWRlbnRpZmllclxuICogQHJldHVybnMgeyBOdW1iZXIgfSAtIG51bWJlciBmcm9tIDAuLi5uXG4gKi9cbnZhciB1aWQgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciBpID0gLTE7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiArK2k7IH1cbn0pKCk7XG5cblxuLyoqXG4gKiBXYXJuIGEgbWVzc2FnZSB2aWEgY29uc29sZVxuICogQHBhcmFtICAge1N0cmluZ30gbWVzc2FnZSAtIHdhcm5pbmcgbWVzc2FnZVxuICovXG5mdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHtcbiAgaWYgKGNvbnNvbGUgJiYgY29uc29sZS53YXJuKSB7IGNvbnNvbGUud2FybihtZXNzYWdlKTsgfVxufVxuXG4vKipcbiAqIFNob3J0IGFsaWFzIGZvciBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG4gKi9cbnZhciBnZXRQcm9wRGVzY3JpcHRvciA9IGZ1bmN0aW9uIChvLCBrKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG8sIGspOyB9O1xuXG4vKipcbiAqIEV4dGVuZCBhbnkgb2JqZWN0IHdpdGggb3RoZXIgcHJvcGVydGllc1xuICogQHBhcmFtICAgeyBPYmplY3QgfSBzcmMgLSBzb3VyY2Ugb2JqZWN0XG4gKiBAcmV0dXJucyB7IE9iamVjdCB9IHRoZSByZXN1bHRpbmcgZXh0ZW5kZWQgb2JqZWN0XG4gKlxuICogdmFyIG9iaiA9IHsgZm9vOiAnYmF6JyB9XG4gKiBleHRlbmQob2JqLCB7YmFyOiAnYmFyJywgZm9vOiAnYmFyJ30pXG4gKiBjb25zb2xlLmxvZyhvYmopID0+IHtiYXI6ICdiYXInLCBmb286ICdiYXInfVxuICpcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKHNyYykge1xuICB2YXIgb2JqO1xuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbCA9IGFyZ3MubGVuZ3RoO1xuXG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKG9iaiA9IGFyZ3NbaV0pIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBwcm9wZXJ0eSBvZiB0aGUgc291cmNlIG9iamVjdCBjb3VsZCBiZSBvdmVycmlkZGVuXG4gICAgICAgIGlmIChpc1dyaXRhYmxlKHNyYywga2V5KSlcbiAgICAgICAgICB7IHNyY1trZXldID0gb2JqW2tleV07IH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNyY1xufVxuXG52YXIgbWlzYyA9IE9iamVjdC5mcmVlemUoe1xuXHRlYWNoOiBlYWNoLFxuXHRjb250YWluczogY29udGFpbnMsXG5cdHRvQ2FtZWw6IHRvQ2FtZWwsXG5cdHN0YXJ0c1dpdGg6IHN0YXJ0c1dpdGgsXG5cdGRlZmluZVByb3BlcnR5OiBkZWZpbmVQcm9wZXJ0eSxcblx0dWlkOiB1aWQsXG5cdHdhcm46IHdhcm4sXG5cdGdldFByb3BEZXNjcmlwdG9yOiBnZXRQcm9wRGVzY3JpcHRvcixcblx0ZXh0ZW5kOiBleHRlbmRcbn0pO1xuXG52YXIgc2V0dGluZ3MkMSA9IGV4dGVuZChPYmplY3QuY3JlYXRlKGJyYWNrZXRzLnNldHRpbmdzKSwge1xuICBza2lwQW5vbnltb3VzVGFnczogdHJ1ZSxcbiAgLy8gaGFuZGxlIHRoZSBhdXRvIHVwZGF0ZXMgb24gYW55IERPTSBldmVudFxuICBhdXRvVXBkYXRlOiB0cnVlXG59KTtcblxuLyoqXG4gKiBUcmlnZ2VyIERPTSBldmVudHNcbiAqIEBwYXJhbSAgIHsgSFRNTEVsZW1lbnQgfSBkb20gLSBkb20gZWxlbWVudCB0YXJnZXQgb2YgdGhlIGV2ZW50XG4gKiBAcGFyYW0gICB7IEZ1bmN0aW9uIH0gaGFuZGxlciAtIHVzZXIgZnVuY3Rpb25cbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gZSAtIGV2ZW50IG9iamVjdFxuICovXG5mdW5jdGlvbiBoYW5kbGVFdmVudChkb20sIGhhbmRsZXIsIGUpIHtcbiAgdmFyIHB0YWcgPSB0aGlzLl9fLnBhcmVudDtcbiAgdmFyIGl0ZW0gPSB0aGlzLl9fLml0ZW07XG5cbiAgaWYgKCFpdGVtKVxuICAgIHsgd2hpbGUgKHB0YWcgJiYgIWl0ZW0pIHtcbiAgICAgIGl0ZW0gPSBwdGFnLl9fLml0ZW07XG4gICAgICBwdGFnID0gcHRhZy5fXy5wYXJlbnQ7XG4gICAgfSB9XG5cbiAgLy8gb3ZlcnJpZGUgdGhlIGV2ZW50IHByb3BlcnRpZXNcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKGlzV3JpdGFibGUoZSwgJ2N1cnJlbnRUYXJnZXQnKSkgeyBlLmN1cnJlbnRUYXJnZXQgPSBkb207IH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKGlzV3JpdGFibGUoZSwgJ3RhcmdldCcpKSB7IGUudGFyZ2V0ID0gZS5zcmNFbGVtZW50OyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmIChpc1dyaXRhYmxlKGUsICd3aGljaCcpKSB7IGUud2hpY2ggPSBlLmNoYXJDb2RlIHx8IGUua2V5Q29kZTsgfVxuXG4gIGUuaXRlbSA9IGl0ZW07XG5cbiAgaGFuZGxlci5jYWxsKHRoaXMsIGUpO1xuXG4gIC8vIGF2b2lkIGF1dG8gdXBkYXRlc1xuICBpZiAoIXNldHRpbmdzJDEuYXV0b1VwZGF0ZSkgeyByZXR1cm4gfVxuXG4gIGlmICghZS5wcmV2ZW50VXBkYXRlKSB7XG4gICAgdmFyIHAgPSBnZXRJbW1lZGlhdGVDdXN0b21QYXJlbnRUYWcodGhpcyk7XG4gICAgLy8gZml4ZXMgIzIwODNcbiAgICBpZiAocC5pc01vdW50ZWQpIHsgcC51cGRhdGUoKTsgfVxuICB9XG59XG5cbi8qKlxuICogQXR0YWNoIGFuIGV2ZW50IHRvIGEgRE9NIG5vZGVcbiAqIEBwYXJhbSB7IFN0cmluZyB9IG5hbWUgLSBldmVudCBuYW1lXG4gKiBAcGFyYW0geyBGdW5jdGlvbiB9IGhhbmRsZXIgLSBldmVudCBjYWxsYmFja1xuICogQHBhcmFtIHsgT2JqZWN0IH0gZG9tIC0gZG9tIG5vZGVcbiAqIEBwYXJhbSB7IFRhZyB9IHRhZyAtIHRhZyBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBzZXRFdmVudEhhbmRsZXIobmFtZSwgaGFuZGxlciwgZG9tLCB0YWcpIHtcbiAgdmFyIGV2ZW50TmFtZTtcbiAgdmFyIGNiID0gaGFuZGxlRXZlbnQuYmluZCh0YWcsIGRvbSwgaGFuZGxlcik7XG5cbiAgLy8gYXZvaWQgdG8gYmluZCB0d2ljZSB0aGUgc2FtZSBldmVudFxuICAvLyBwb3NzaWJsZSBmaXggZm9yICMyMzMyXG4gIGRvbVtuYW1lXSA9IG51bGw7XG5cbiAgLy8gbm9ybWFsaXplIGV2ZW50IG5hbWVcbiAgZXZlbnROYW1lID0gbmFtZS5yZXBsYWNlKFJFX0VWRU5UU19QUkVGSVgsICcnKTtcblxuICAvLyBjYWNoZSB0aGUgbGlzdGVuZXIgaW50byB0aGUgbGlzdGVuZXJzIGFycmF5XG4gIGlmICghY29udGFpbnModGFnLl9fLmxpc3RlbmVycywgZG9tKSkgeyB0YWcuX18ubGlzdGVuZXJzLnB1c2goZG9tKTsgfVxuICBpZiAoIWRvbVtSSU9UX0VWRU5UU19LRVldKSB7IGRvbVtSSU9UX0VWRU5UU19LRVldID0ge307IH1cbiAgaWYgKGRvbVtSSU9UX0VWRU5UU19LRVldW25hbWVdKSB7IGRvbS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZG9tW1JJT1RfRVZFTlRTX0tFWV1bbmFtZV0pOyB9XG5cbiAgZG9tW1JJT1RfRVZFTlRTX0tFWV1bbmFtZV0gPSBjYjtcbiAgZG9tLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYiwgZmFsc2UpO1xufVxuXG4vKipcbiAqIFVwZGF0ZSBkeW5hbWljYWxseSBjcmVhdGVkIGRhdGEtaXMgdGFncyB3aXRoIGNoYW5naW5nIGV4cHJlc3Npb25zXG4gKiBAcGFyYW0geyBPYmplY3QgfSBleHByIC0gZXhwcmVzc2lvbiB0YWcgYW5kIGV4cHJlc3Npb24gaW5mb1xuICogQHBhcmFtIHsgVGFnIH0gICAgcGFyZW50IC0gcGFyZW50IGZvciB0YWcgY3JlYXRpb25cbiAqIEBwYXJhbSB7IFN0cmluZyB9IHRhZ05hbWUgLSB0YWcgaW1wbGVtZW50YXRpb24gd2Ugd2FudCB0byB1c2VcbiAqL1xuZnVuY3Rpb24gdXBkYXRlRGF0YUlzKGV4cHIsIHBhcmVudCwgdGFnTmFtZSkge1xuICB2YXIgdGFnID0gZXhwci50YWcgfHwgZXhwci5kb20uX3RhZztcbiAgdmFyIHJlZjtcblxuICB2YXIgcmVmJDEgPSB0YWcgPyB0YWcuX18gOiB7fTtcbiAgdmFyIGhlYWQgPSByZWYkMS5oZWFkO1xuICB2YXIgaXNWaXJ0dWFsID0gZXhwci5kb20udGFnTmFtZSA9PT0gJ1ZJUlRVQUwnO1xuXG4gIGlmICh0YWcgJiYgZXhwci50YWdOYW1lID09PSB0YWdOYW1lKSB7XG4gICAgdGFnLnVwZGF0ZSgpO1xuICAgIHJldHVyblxuICB9XG5cbiAgLy8gc3luYyBfcGFyZW50IHRvIGFjY29tbW9kYXRlIGNoYW5naW5nIHRhZ25hbWVzXG4gIGlmICh0YWcpIHtcbiAgICAvLyBuZWVkIHBsYWNlaG9sZGVyIGJlZm9yZSB1bm1vdW50XG4gICAgaWYoaXNWaXJ0dWFsKSB7XG4gICAgICByZWYgPSBjcmVhdGVET01QbGFjZWhvbGRlcigpO1xuICAgICAgaGVhZC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShyZWYsIGhlYWQpO1xuICAgIH1cblxuICAgIHRhZy51bm1vdW50KHRydWUpO1xuICB9XG5cbiAgLy8gdW5hYmxlIHRvIGdldCB0aGUgdGFnIG5hbWVcbiAgaWYgKCFpc1N0cmluZyh0YWdOYW1lKSkgeyByZXR1cm4gfVxuXG4gIGV4cHIuaW1wbCA9IF9fVEFHX0lNUExbdGFnTmFtZV07XG5cbiAgLy8gdW5rbm93biBpbXBsZW1lbnRhdGlvblxuICBpZiAoIWV4cHIuaW1wbCkgeyByZXR1cm4gfVxuXG4gIGV4cHIudGFnID0gdGFnID0gaW5pdENoaWxkVGFnKFxuICAgIGV4cHIuaW1wbCwge1xuICAgICAgcm9vdDogZXhwci5kb20sXG4gICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgIHRhZ05hbWU6IHRhZ05hbWVcbiAgICB9LFxuICAgIGV4cHIuZG9tLmlubmVySFRNTCxcbiAgICBwYXJlbnRcbiAgKTtcblxuICBlYWNoKGV4cHIuYXR0cnMsIGZ1bmN0aW9uIChhKSB7IHJldHVybiBzZXRBdHRyKHRhZy5yb290LCBhLm5hbWUsIGEudmFsdWUpOyB9KTtcbiAgZXhwci50YWdOYW1lID0gdGFnTmFtZTtcbiAgdGFnLm1vdW50KCk7XG5cbiAgLy8gcm9vdCBleGlzdCBmaXJzdCB0aW1lLCBhZnRlciB1c2UgcGxhY2Vob2xkZXJcbiAgaWYgKGlzVmlydHVhbCkgeyBtYWtlUmVwbGFjZVZpcnR1YWwodGFnLCByZWYgfHwgdGFnLnJvb3QpOyB9XG5cbiAgLy8gcGFyZW50IGlzIHRoZSBwbGFjZWhvbGRlciB0YWcsIG5vdCB0aGUgZHluYW1pYyB0YWcgc28gY2xlYW4gdXBcbiAgcGFyZW50Ll9fLm9uVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGVsTmFtZSA9IHRhZy5vcHRzLmRhdGFJcztcbiAgICBhcnJheWlzaFJlbW92ZSh0YWcucGFyZW50LnRhZ3MsIGRlbE5hbWUsIHRhZyk7XG4gICAgYXJyYXlpc2hSZW1vdmUodGFnLl9fLnBhcmVudC50YWdzLCBkZWxOYW1lLCB0YWcpO1xuICAgIHRhZy51bm1vdW50KCk7XG4gIH07XG59XG5cbi8qKlxuICogTm9tYWxpemUgYW55IGF0dHJpYnV0ZSByZW1vdmluZyB0aGUgXCJyaW90LVwiIHByZWZpeFxuICogQHBhcmFtICAgeyBTdHJpbmcgfSBhdHRyTmFtZSAtIG9yaWdpbmFsIGF0dHJpYnV0ZSBuYW1lXG4gKiBAcmV0dXJucyB7IFN0cmluZyB9IHZhbGlkIGh0bWwgYXR0cmlidXRlIG5hbWVcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplQXR0ck5hbWUoYXR0ck5hbWUpIHtcbiAgaWYgKCFhdHRyTmFtZSkgeyByZXR1cm4gbnVsbCB9XG4gIGF0dHJOYW1lID0gYXR0ck5hbWUucmVwbGFjZShBVFRSU19QUkVGSVgsICcnKTtcbiAgaWYgKENBU0VfU0VOU0lUSVZFX0FUVFJJQlVURVNbYXR0ck5hbWVdKSB7IGF0dHJOYW1lID0gQ0FTRV9TRU5TSVRJVkVfQVRUUklCVVRFU1thdHRyTmFtZV07IH1cbiAgcmV0dXJuIGF0dHJOYW1lXG59XG5cbi8qKlxuICogVXBkYXRlIG9uIHNpbmdsZSB0YWcgZXhwcmVzc2lvblxuICogQHRoaXMgVGFnXG4gKiBAcGFyYW0geyBPYmplY3QgfSBleHByIC0gZXhwcmVzc2lvbiBsb2dpY1xuICogQHJldHVybnMgeyB1bmRlZmluZWQgfVxuICovXG5mdW5jdGlvbiB1cGRhdGVFeHByZXNzaW9uKGV4cHIpIHtcbiAgaWYgKHRoaXMucm9vdCAmJiBnZXRBdHRyKHRoaXMucm9vdCwndmlydHVhbGl6ZWQnKSkgeyByZXR1cm4gfVxuXG4gIHZhciBkb20gPSBleHByLmRvbTtcbiAgLy8gcmVtb3ZlIHRoZSByaW90LSBwcmVmaXhcbiAgdmFyIGF0dHJOYW1lID0gbm9ybWFsaXplQXR0ck5hbWUoZXhwci5hdHRyKTtcbiAgdmFyIGlzVG9nZ2xlID0gY29udGFpbnMoW1NIT1dfRElSRUNUSVZFLCBISURFX0RJUkVDVElWRV0sIGF0dHJOYW1lKTtcbiAgdmFyIGlzVmlydHVhbCA9IGV4cHIucm9vdCAmJiBleHByLnJvb3QudGFnTmFtZSA9PT0gJ1ZJUlRVQUwnO1xuICB2YXIgcmVmID0gdGhpcy5fXztcbiAgdmFyIGlzQW5vbnltb3VzID0gcmVmLmlzQW5vbnltb3VzO1xuICB2YXIgcGFyZW50ID0gZG9tICYmIChleHByLnBhcmVudCB8fCBkb20ucGFyZW50Tm9kZSk7XG4gIC8vIGRldGVjdCB0aGUgc3R5bGUgYXR0cmlidXRlc1xuICB2YXIgaXNTdHlsZUF0dHIgPSBhdHRyTmFtZSA9PT0gJ3N0eWxlJztcbiAgdmFyIGlzQ2xhc3NBdHRyID0gYXR0ck5hbWUgPT09ICdjbGFzcyc7XG5cbiAgdmFyIHZhbHVlO1xuXG4gIC8vIGlmIGl0J3MgYSB0YWcgd2UgY291bGQgdG90YWxseSBza2lwIHRoZSByZXN0XG4gIGlmIChleHByLl9yaW90X2lkKSB7XG4gICAgaWYgKGV4cHIuX18ud2FzQ3JlYXRlZCkge1xuICAgICAgZXhwci51cGRhdGUoKTtcbiAgICAvLyBpZiBpdCBoYXNuJ3QgYmVlbiBtb3VudGVkIHlldCwgZG8gdGhhdCBub3cuXG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cHIubW91bnQoKTtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgbWFrZVJlcGxhY2VWaXJ0dWFsKGV4cHIsIGV4cHIucm9vdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgLy8gaWYgdGhpcyBleHByZXNzaW9uIGhhcyB0aGUgdXBkYXRlIG1ldGhvZCBpdCBtZWFucyBpdCBjYW4gaGFuZGxlIHRoZSBET00gY2hhbmdlcyBieSBpdHNlbGZcbiAgaWYgKGV4cHIudXBkYXRlKSB7IHJldHVybiBleHByLnVwZGF0ZSgpIH1cblxuICB2YXIgY29udGV4dCA9IGlzVG9nZ2xlICYmICFpc0Fub255bW91cyA/IGluaGVyaXRQYXJlbnRQcm9wcy5jYWxsKHRoaXMpIDogdGhpcztcblxuICAvLyAuLi5pdCBzZWVtcyB0byBiZSBhIHNpbXBsZSBleHByZXNzaW9uIHNvIHdlIHRyeSB0byBjYWxjdWxhdGUgaXRzIHZhbHVlXG4gIHZhbHVlID0gdG1wbChleHByLmV4cHIsIGNvbnRleHQpO1xuXG4gIHZhciBoYXNWYWx1ZSA9ICFpc0JsYW5rKHZhbHVlKTtcbiAgdmFyIGlzT2JqID0gaXNPYmplY3QodmFsdWUpO1xuXG4gIC8vIGNvbnZlcnQgdGhlIHN0eWxlL2NsYXNzIG9iamVjdHMgdG8gc3RyaW5nc1xuICBpZiAoaXNPYmopIHtcbiAgICBpZiAoaXNDbGFzc0F0dHIpIHtcbiAgICAgIHZhbHVlID0gdG1wbChKU09OLnN0cmluZ2lmeSh2YWx1ZSksIHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoaXNTdHlsZUF0dHIpIHtcbiAgICAgIHZhbHVlID0gc3R5bGVPYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcmVtb3ZlIG9yaWdpbmFsIGF0dHJpYnV0ZVxuICBpZiAoZXhwci5hdHRyICYmICghZXhwci53YXNQYXJzZWRPbmNlIHx8ICFoYXNWYWx1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UpKSB7XG4gICAgLy8gcmVtb3ZlIGVpdGhlciByaW90LSogYXR0cmlidXRlcyBvciBqdXN0IHRoZSBhdHRyaWJ1dGUgbmFtZVxuICAgIHJlbUF0dHIoZG9tLCBnZXRBdHRyKGRvbSwgZXhwci5hdHRyKSA/IGV4cHIuYXR0ciA6IGF0dHJOYW1lKTtcbiAgfVxuXG4gIC8vIGZvciB0aGUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdlIGRvbid0IG5lZWQgdGhlIHZhbHVlXG4gIC8vIHdlIGNhbiBjb252ZXJ0IGl0IHRvIGNoZWNrZWQ9dHJ1ZSB0byBjaGVja2VkPWNoZWNrZWRcbiAgaWYgKGV4cHIuYm9vbCkgeyB2YWx1ZSA9IHZhbHVlID8gYXR0ck5hbWUgOiBmYWxzZTsgfVxuICBpZiAoZXhwci5pc1J0YWcpIHsgcmV0dXJuIHVwZGF0ZURhdGFJcyhleHByLCB0aGlzLCB2YWx1ZSkgfVxuICBpZiAoZXhwci53YXNQYXJzZWRPbmNlICYmIGV4cHIudmFsdWUgPT09IHZhbHVlKSB7IHJldHVybiB9XG5cbiAgLy8gdXBkYXRlIHRoZSBleHByZXNzaW9uIHZhbHVlXG4gIGV4cHIudmFsdWUgPSB2YWx1ZTtcbiAgZXhwci53YXNQYXJzZWRPbmNlID0gdHJ1ZTtcblxuICAvLyBpZiB0aGUgdmFsdWUgaXMgYW4gb2JqZWN0IChhbmQgaXQncyBub3QgYSBzdHlsZSBvciBjbGFzcyBhdHRyaWJ1dGUpIHdlIGNhbiBub3QgZG8gbXVjaCBtb3JlIHdpdGggaXRcbiAgaWYgKGlzT2JqICYmICFpc0NsYXNzQXR0ciAmJiAhaXNTdHlsZUF0dHIgJiYgIWlzVG9nZ2xlKSB7IHJldHVybiB9XG4gIC8vIGF2b2lkIHRvIHJlbmRlciB1bmRlZmluZWQvbnVsbCB2YWx1ZXNcbiAgaWYgKCFoYXNWYWx1ZSkgeyB2YWx1ZSA9ICcnOyB9XG5cbiAgLy8gdGV4dGFyZWEgYW5kIHRleHQgbm9kZXMgaGF2ZSBubyBhdHRyaWJ1dGUgbmFtZVxuICBpZiAoIWF0dHJOYW1lKSB7XG4gICAgLy8gYWJvdXQgIzgxNSB3L28gcmVwbGFjZTogdGhlIGJyb3dzZXIgY29udmVydHMgdGhlIHZhbHVlIHRvIGEgc3RyaW5nLFxuICAgIC8vIHRoZSBjb21wYXJpc29uIGJ5IFwiPT1cIiBkb2VzIHRvbywgYnV0IG5vdCBpbiB0aGUgc2VydmVyXG4gICAgdmFsdWUgKz0gJyc7XG4gICAgLy8gdGVzdCBmb3IgcGFyZW50IGF2b2lkcyBlcnJvciB3aXRoIGludmFsaWQgYXNzaWdubWVudCB0byBub2RlVmFsdWVcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAvLyBjYWNoZSB0aGUgcGFyZW50IG5vZGUgYmVjYXVzZSBzb21laG93IGl0IHdpbGwgYmVjb21lIG51bGwgb24gSUVcbiAgICAgIC8vIG9uIHRoZSBuZXh0IGl0ZXJhdGlvblxuICAgICAgZXhwci5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICBpZiAocGFyZW50LnRhZ05hbWUgPT09ICdURVhUQVJFQScpIHtcbiAgICAgICAgcGFyZW50LnZhbHVlID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAvLyAjMTExM1xuICAgICAgICBpZiAoIUlFX1ZFUlNJT04pIHsgZG9tLm5vZGVWYWx1ZSA9IHZhbHVlOyB9ICAvLyAjMTYyNSBJRSB0aHJvd3MgaGVyZSwgbm9kZVZhbHVlXG4gICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aWxsIGJlIGF2YWlsYWJsZSBvbiAndXBkYXRlZCdcbiAgICAgIGVsc2UgeyBkb20ubm9kZVZhbHVlID0gdmFsdWU7IH1cbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuXG4gIC8vIGV2ZW50IGhhbmRsZXJcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgc2V0RXZlbnRIYW5kbGVyKGF0dHJOYW1lLCB2YWx1ZSwgZG9tLCB0aGlzKTtcbiAgLy8gc2hvdyAvIGhpZGVcbiAgfSBlbHNlIGlmIChpc1RvZ2dsZSkge1xuICAgIHRvZ2dsZVZpc2liaWxpdHkoZG9tLCBhdHRyTmFtZSA9PT0gSElERV9ESVJFQ1RJVkUgPyAhdmFsdWUgOiB2YWx1ZSk7XG4gIC8vIGhhbmRsZSBhdHRyaWJ1dGVzXG4gIH0gZWxzZSB7XG4gICAgaWYgKGV4cHIuYm9vbCkge1xuICAgICAgZG9tW2F0dHJOYW1lXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGlmIChhdHRyTmFtZSA9PT0gJ3ZhbHVlJyAmJiBkb20udmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICBkb20udmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKGhhc1ZhbHVlICYmIHZhbHVlICE9PSBmYWxzZSkge1xuICAgICAgc2V0QXR0cihkb20sIGF0dHJOYW1lLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBzdXJlIHRoYXQgaW4gY2FzZSBvZiBzdHlsZSBjaGFuZ2VzXG4gICAgLy8gdGhlIGVsZW1lbnQgc3RheXMgaGlkZGVuXG4gICAgaWYgKGlzU3R5bGVBdHRyICYmIGRvbS5oaWRkZW4pIHsgdG9nZ2xlVmlzaWJpbGl0eShkb20sIGZhbHNlKTsgfVxuICB9XG59XG5cbi8qKlxuICogVXBkYXRlIGFsbCB0aGUgZXhwcmVzc2lvbnMgaW4gYSBUYWcgaW5zdGFuY2VcbiAqIEB0aGlzIFRhZ1xuICogQHBhcmFtIHsgQXJyYXkgfSBleHByZXNzaW9ucyAtIGV4cHJlc3Npb24gdGhhdCBtdXN0IGJlIHJlIGV2YWx1YXRlZFxuICovXG5mdW5jdGlvbiB1cGRhdGVBbGxFeHByZXNzaW9ucyhleHByZXNzaW9ucykge1xuICBlYWNoKGV4cHJlc3Npb25zLCB1cGRhdGVFeHByZXNzaW9uLmJpbmQodGhpcykpO1xufVxuXG52YXIgSWZFeHByID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0KGRvbSwgdGFnLCBleHByKSB7XG4gICAgcmVtQXR0cihkb20sIENPTkRJVElPTkFMX0RJUkVDVElWRSk7XG4gICAgdGhpcy50YWcgPSB0YWc7XG4gICAgdGhpcy5leHByID0gZXhwcjtcbiAgICB0aGlzLnN0dWIgPSBjcmVhdGVET01QbGFjZWhvbGRlcigpO1xuICAgIHRoaXMucHJpc3RpbmUgPSBkb207XG5cbiAgICB2YXIgcCA9IGRvbS5wYXJlbnROb2RlO1xuICAgIHAuaW5zZXJ0QmVmb3JlKHRoaXMuc3R1YiwgZG9tKTtcbiAgICBwLnJlbW92ZUNoaWxkKGRvbSk7XG5cbiAgICByZXR1cm4gdGhpc1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB0aGlzLnZhbHVlID0gdG1wbCh0aGlzLmV4cHIsIHRoaXMudGFnKTtcblxuICAgIGlmICh0aGlzLnZhbHVlICYmICF0aGlzLmN1cnJlbnQpIHsgLy8gaW5zZXJ0XG4gICAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLnByaXN0aW5lLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIHRoaXMuc3R1Yi5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmN1cnJlbnQsIHRoaXMuc3R1Yik7XG4gICAgICB0aGlzLmV4cHJlc3Npb25zID0gcGFyc2VFeHByZXNzaW9ucy5hcHBseSh0aGlzLnRhZywgW3RoaXMuY3VycmVudCwgdHJ1ZV0pO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMudmFsdWUgJiYgdGhpcy5jdXJyZW50KSB7IC8vIHJlbW92ZVxuICAgICAgdW5tb3VudEFsbCh0aGlzLmV4cHJlc3Npb25zKTtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnQuX3RhZykge1xuICAgICAgICB0aGlzLmN1cnJlbnQuX3RhZy51bm1vdW50KCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgIHRoaXMuY3VycmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuY3VycmVudCk7XG4gICAgICB9XG4gICAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuICAgICAgdGhpcy5leHByZXNzaW9ucyA9IFtdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZhbHVlKSB7IHVwZGF0ZUFsbEV4cHJlc3Npb25zLmNhbGwodGhpcy50YWcsIHRoaXMuZXhwcmVzc2lvbnMpOyB9XG4gIH0sXG4gIHVubW91bnQ6IGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgdW5tb3VudEFsbCh0aGlzLmV4cHJlc3Npb25zIHx8IFtdKTtcbiAgfVxufTtcblxudmFyIFJlZkV4cHIgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQoZG9tLCBwYXJlbnQsIGF0dHJOYW1lLCBhdHRyVmFsdWUpIHtcbiAgICB0aGlzLmRvbSA9IGRvbTtcbiAgICB0aGlzLmF0dHIgPSBhdHRyTmFtZTtcbiAgICB0aGlzLnJhd1ZhbHVlID0gYXR0clZhbHVlO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuaGFzRXhwID0gdG1wbC5oYXNFeHByKGF0dHJWYWx1ZSk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIG9sZCA9IHRoaXMudmFsdWU7XG4gICAgdmFyIGN1c3RvbVBhcmVudCA9IHRoaXMucGFyZW50ICYmIGdldEltbWVkaWF0ZUN1c3RvbVBhcmVudFRhZyh0aGlzLnBhcmVudCk7XG4gICAgLy8gaWYgdGhlIHJlZmVyZW5jZWQgZWxlbWVudCBpcyBhIGN1c3RvbSB0YWcsIHRoZW4gd2Ugc2V0IHRoZSB0YWcgaXRzZWxmLCByYXRoZXIgdGhhbiBET01cbiAgICB2YXIgdGFnT3JEb20gPSB0aGlzLmRvbS5fX3JlZiB8fCB0aGlzLnRhZyB8fCB0aGlzLmRvbTtcblxuICAgIHRoaXMudmFsdWUgPSB0aGlzLmhhc0V4cCA/IHRtcGwodGhpcy5yYXdWYWx1ZSwgdGhpcy5wYXJlbnQpIDogdGhpcy5yYXdWYWx1ZTtcblxuICAgIC8vIHRoZSBuYW1lIGNoYW5nZWQsIHNvIHdlIG5lZWQgdG8gcmVtb3ZlIGl0IGZyb20gdGhlIG9sZCBrZXkgKGlmIHByZXNlbnQpXG4gICAgaWYgKCFpc0JsYW5rKG9sZCkgJiYgY3VzdG9tUGFyZW50KSB7IGFycmF5aXNoUmVtb3ZlKGN1c3RvbVBhcmVudC5yZWZzLCBvbGQsIHRhZ09yRG9tKTsgfVxuICAgIGlmICghaXNCbGFuayh0aGlzLnZhbHVlKSAmJiBpc1N0cmluZyh0aGlzLnZhbHVlKSkge1xuICAgICAgLy8gYWRkIGl0IHRvIHRoZSByZWZzIG9mIHBhcmVudCB0YWcgKHRoaXMgYmVoYXZpb3Igd2FzIGNoYW5nZWQgPj0zLjApXG4gICAgICBpZiAoY3VzdG9tUGFyZW50KSB7IGFycmF5aXNoQWRkKFxuICAgICAgICBjdXN0b21QYXJlbnQucmVmcyxcbiAgICAgICAgdGhpcy52YWx1ZSxcbiAgICAgICAgdGFnT3JEb20sXG4gICAgICAgIC8vIHVzZSBhbiBhcnJheSBpZiBpdCdzIGEgbG9vcGVkIG5vZGUgYW5kIHRoZSByZWYgaXMgbm90IGFuIGV4cHJlc3Npb25cbiAgICAgICAgbnVsbCxcbiAgICAgICAgdGhpcy5wYXJlbnQuX18uaW5kZXhcbiAgICAgICk7IH1cblxuICAgICAgaWYgKHRoaXMudmFsdWUgIT09IG9sZCkge1xuICAgICAgICBzZXRBdHRyKHRoaXMuZG9tLCB0aGlzLmF0dHIsIHRoaXMudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1BdHRyKHRoaXMuZG9tLCB0aGlzLmF0dHIpO1xuICAgIH1cblxuICAgIC8vIGNhY2hlIHRoZSByZWYgYm91bmQgdG8gdGhpcyBkb20gbm9kZVxuICAgIC8vIHRvIHJldXNlIGl0IGluIGZ1dHVyZSAoc2VlIGFsc28gIzIzMjkpXG4gICAgaWYgKCF0aGlzLmRvbS5fX3JlZikgeyB0aGlzLmRvbS5fX3JlZiA9IHRhZ09yRG9tOyB9XG4gIH0sXG4gIHVubW91bnQ6IGZ1bmN0aW9uIHVubW91bnQoKSB7XG4gICAgdmFyIHRhZ09yRG9tID0gdGhpcy50YWcgfHwgdGhpcy5kb207XG4gICAgdmFyIGN1c3RvbVBhcmVudCA9IHRoaXMucGFyZW50ICYmIGdldEltbWVkaWF0ZUN1c3RvbVBhcmVudFRhZyh0aGlzLnBhcmVudCk7XG4gICAgaWYgKCFpc0JsYW5rKHRoaXMudmFsdWUpICYmIGN1c3RvbVBhcmVudClcbiAgICAgIHsgYXJyYXlpc2hSZW1vdmUoY3VzdG9tUGFyZW50LnJlZnMsIHRoaXMudmFsdWUsIHRhZ09yRG9tKTsgfVxuICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnQgdGhlIGl0ZW0gbG9vcGVkIGludG8gYW4gb2JqZWN0IHVzZWQgdG8gZXh0ZW5kIHRoZSBjaGlsZCB0YWcgcHJvcGVydGllc1xuICogQHBhcmFtICAgeyBPYmplY3QgfSBleHByIC0gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGtleXMgdXNlZCB0byBleHRlbmQgdGhlIGNoaWxkcmVuIHRhZ3NcbiAqIEBwYXJhbSAgIHsgKiB9IGtleSAtIHZhbHVlIHRvIGFzc2lnbiB0byB0aGUgbmV3IG9iamVjdCByZXR1cm5lZFxuICogQHBhcmFtICAgeyAqIH0gdmFsIC0gdmFsdWUgY29udGFpbmluZyB0aGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gaW4gdGhlIGFycmF5XG4gKiBAcGFyYW0gICB7IE9iamVjdCB9IGJhc2UgLSBwcm90b3R5cGUgb2JqZWN0IGZvciB0aGUgbmV3IGl0ZW1cbiAqIEByZXR1cm5zIHsgT2JqZWN0IH0gLSBuZXcgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHZhbHVlcyBvZiB0aGUgb3JpZ2luYWwgaXRlbVxuICpcbiAqIFRoZSB2YXJpYWJsZXMgJ2tleScgYW5kICd2YWwnIGFyZSBhcmJpdHJhcnkuXG4gKiBUaGV5IGRlcGVuZCBvbiB0aGUgY29sbGVjdGlvbiB0eXBlIGxvb3BlZCAoQXJyYXksIE9iamVjdClcbiAqIGFuZCBvbiB0aGUgZXhwcmVzc2lvbiB1c2VkIG9uIHRoZSBlYWNoIHRhZ1xuICpcbiAqL1xuZnVuY3Rpb24gbWtpdGVtKGV4cHIsIGtleSwgdmFsLCBiYXNlKSB7XG4gIHZhciBpdGVtID0gYmFzZSA/IE9iamVjdC5jcmVhdGUoYmFzZSkgOiB7fTtcbiAgaXRlbVtleHByLmtleV0gPSBrZXk7XG4gIGlmIChleHByLnBvcykgeyBpdGVtW2V4cHIucG9zXSA9IHZhbDsgfVxuICByZXR1cm4gaXRlbVxufVxuXG4vKipcbiAqIFVubW91bnQgdGhlIHJlZHVuZGFudCB0YWdzXG4gKiBAcGFyYW0gICB7IEFycmF5IH0gaXRlbXMgLSBhcnJheSBjb250YWluaW5nIHRoZSBjdXJyZW50IGl0ZW1zIHRvIGxvb3BcbiAqIEBwYXJhbSAgIHsgQXJyYXkgfSB0YWdzIC0gYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIGNoaWxkcmVuIHRhZ3NcbiAqL1xuZnVuY3Rpb24gdW5tb3VudFJlZHVuZGFudChpdGVtcywgdGFncykge1xuICB2YXIgaSA9IHRhZ3MubGVuZ3RoO1xuICB2YXIgaiA9IGl0ZW1zLmxlbmd0aDtcblxuICB3aGlsZSAoaSA+IGopIHtcbiAgICBpLS07XG4gICAgcmVtb3ZlLmFwcGx5KHRhZ3NbaV0sIFt0YWdzLCBpXSk7XG4gIH1cbn1cblxuXG4vKipcbiAqIFJlbW92ZSBhIGNoaWxkIHRhZ1xuICogQHRoaXMgVGFnXG4gKiBAcGFyYW0gICB7IEFycmF5IH0gdGFncyAtIHRhZ3MgY29sbGVjdGlvblxuICogQHBhcmFtICAgeyBOdW1iZXIgfSBpIC0gaW5kZXggb2YgdGhlIHRhZyB0byByZW1vdmVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlKHRhZ3MsIGkpIHtcbiAgdGFncy5zcGxpY2UoaSwgMSk7XG4gIHRoaXMudW5tb3VudCgpO1xuICBhcnJheWlzaFJlbW92ZSh0aGlzLnBhcmVudCwgdGhpcywgdGhpcy5fXy50YWdOYW1lLCB0cnVlKTtcbn1cblxuLyoqXG4gKiBNb3ZlIHRoZSBuZXN0ZWQgY3VzdG9tIHRhZ3MgaW4gbm9uIGN1c3RvbSBsb29wIHRhZ3NcbiAqIEB0aGlzIFRhZ1xuICogQHBhcmFtICAgeyBOdW1iZXIgfSBpIC0gY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgbG9vcCB0YWdcbiAqL1xuZnVuY3Rpb24gbW92ZU5lc3RlZFRhZ3MoaSkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBlYWNoKE9iamVjdC5rZXlzKHRoaXMudGFncyksIGZ1bmN0aW9uICh0YWdOYW1lKSB7XG4gICAgbW92ZUNoaWxkVGFnLmFwcGx5KHRoaXMkMS50YWdzW3RhZ05hbWVdLCBbdGFnTmFtZSwgaV0pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBNb3ZlIGEgY2hpbGQgdGFnXG4gKiBAdGhpcyBUYWdcbiAqIEBwYXJhbSAgIHsgSFRNTEVsZW1lbnQgfSByb290IC0gZG9tIG5vZGUgY29udGFpbmluZyBhbGwgdGhlIGxvb3AgY2hpbGRyZW5cbiAqIEBwYXJhbSAgIHsgVGFnIH0gbmV4dFRhZyAtIGluc3RhbmNlIG9mIHRoZSBuZXh0IHRhZyBwcmVjZWRpbmcgdGhlIG9uZSB3ZSB3YW50IHRvIG1vdmVcbiAqIEBwYXJhbSAgIHsgQm9vbGVhbiB9IGlzVmlydHVhbCAtIGlzIGl0IGEgdmlydHVhbCB0YWc/XG4gKi9cbmZ1bmN0aW9uIG1vdmUocm9vdCwgbmV4dFRhZywgaXNWaXJ0dWFsKSB7XG4gIGlmIChpc1ZpcnR1YWwpXG4gICAgeyBtb3ZlVmlydHVhbC5hcHBseSh0aGlzLCBbcm9vdCwgbmV4dFRhZ10pOyB9XG4gIGVsc2VcbiAgICB7IHNhZmVJbnNlcnQocm9vdCwgdGhpcy5yb290LCBuZXh0VGFnLnJvb3QpOyB9XG59XG5cbi8qKlxuICogSW5zZXJ0IGFuZCBtb3VudCBhIGNoaWxkIHRhZ1xuICogQHRoaXMgVGFnXG4gKiBAcGFyYW0gICB7IEhUTUxFbGVtZW50IH0gcm9vdCAtIGRvbSBub2RlIGNvbnRhaW5pbmcgYWxsIHRoZSBsb29wIGNoaWxkcmVuXG4gKiBAcGFyYW0gICB7IFRhZyB9IG5leHRUYWcgLSBpbnN0YW5jZSBvZiB0aGUgbmV4dCB0YWcgcHJlY2VkaW5nIHRoZSBvbmUgd2Ugd2FudCB0byBpbnNlcnRcbiAqIEBwYXJhbSAgIHsgQm9vbGVhbiB9IGlzVmlydHVhbCAtIGlzIGl0IGEgdmlydHVhbCB0YWc/XG4gKi9cbmZ1bmN0aW9uIGluc2VydChyb290LCBuZXh0VGFnLCBpc1ZpcnR1YWwpIHtcbiAgaWYgKGlzVmlydHVhbClcbiAgICB7IG1ha2VWaXJ0dWFsLmFwcGx5KHRoaXMsIFtyb290LCBuZXh0VGFnXSk7IH1cbiAgZWxzZVxuICAgIHsgc2FmZUluc2VydChyb290LCB0aGlzLnJvb3QsIG5leHRUYWcucm9vdCk7IH1cbn1cblxuLyoqXG4gKiBBcHBlbmQgYSBuZXcgdGFnIGludG8gdGhlIERPTVxuICogQHRoaXMgVGFnXG4gKiBAcGFyYW0gICB7IEhUTUxFbGVtZW50IH0gcm9vdCAtIGRvbSBub2RlIGNvbnRhaW5pbmcgYWxsIHRoZSBsb29wIGNoaWxkcmVuXG4gKiBAcGFyYW0gICB7IEJvb2xlYW4gfSBpc1ZpcnR1YWwgLSBpcyBpdCBhIHZpcnR1YWwgdGFnP1xuICovXG5mdW5jdGlvbiBhcHBlbmQocm9vdCwgaXNWaXJ0dWFsKSB7XG4gIGlmIChpc1ZpcnR1YWwpXG4gICAgeyBtYWtlVmlydHVhbC5jYWxsKHRoaXMsIHJvb3QpOyB9XG4gIGVsc2VcbiAgICB7IHJvb3QuYXBwZW5kQ2hpbGQodGhpcy5yb290KTsgfVxufVxuXG4vKipcbiAqIFJldHVybiB0aGUgdmFsdWUgd2Ugd2FudCB0byB1c2UgdG8gbG9va3VwIHRoZSBwb3N0aW9uIG9mIG91ciBpdGVtcyBpbiB0aGUgY29sbGVjdGlvblxuICogQHBhcmFtICAgeyBTdHJpbmcgfSAga2V5QXR0ciAgICAgICAgIC0gbG9va3VwIHN0cmluZyBvciBleHByZXNzaW9uXG4gKiBAcGFyYW0gICB7ICogfSAgICAgICBvcmlnaW5hbEl0ZW0gICAgLSBvcmlnaW5hbCBpdGVtIGZyb20gdGhlIGNvbGxlY3Rpb25cbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gIGtleWVkSXRlbSAgICAgICAtIG9iamVjdCBjcmVhdGVkIGJ5IHJpb3QgdmlhIHsgaXRlbSwgaSBpbiBjb2xsZWN0aW9uIH1cbiAqIEBwYXJhbSAgIHsgQm9vbGVhbiB9IGhhc0tleUF0dHJFeHByICAtIGZsYWcgdG8gY2hlY2sgd2hldGhlciB0aGUga2V5IGlzIGFuIGV4cHJlc3Npb25cbiAqIEByZXR1cm5zIHsgKiB9IHZhbHVlIHRoYXQgd2Ugd2lsbCB1c2UgdG8gZmlndXJlIG91dCB0aGUgaXRlbSBwb3NpdGlvbiB2aWEgY29sbGVjdGlvbi5pbmRleE9mXG4gKi9cbmZ1bmN0aW9uIGdldEl0ZW1JZChrZXlBdHRyLCBvcmlnaW5hbEl0ZW0sIGtleWVkSXRlbSwgaGFzS2V5QXR0ckV4cHIpIHtcbiAgaWYgKGtleUF0dHIpIHtcbiAgICByZXR1cm4gaGFzS2V5QXR0ckV4cHIgPyAgdG1wbChrZXlBdHRyLCBrZXllZEl0ZW0pIDogIG9yaWdpbmFsSXRlbVtrZXlBdHRyXVxuICB9XG5cbiAgcmV0dXJuIG9yaWdpbmFsSXRlbVxufVxuXG4vKipcbiAqIE1hbmFnZSB0YWdzIGhhdmluZyB0aGUgJ2VhY2gnXG4gKiBAcGFyYW0gICB7IEhUTUxFbGVtZW50IH0gZG9tIC0gRE9NIG5vZGUgd2UgbmVlZCB0byBsb29wXG4gKiBAcGFyYW0gICB7IFRhZyB9IHBhcmVudCAtIHBhcmVudCB0YWcgaW5zdGFuY2Ugd2hlcmUgdGhlIGRvbSBub2RlIGlzIGNvbnRhaW5lZFxuICogQHBhcmFtICAgeyBTdHJpbmcgfSBleHByIC0gc3RyaW5nIGNvbnRhaW5lZCBpbiB0aGUgJ2VhY2gnIGF0dHJpYnV0ZVxuICogQHJldHVybnMgeyBPYmplY3QgfSBleHByZXNzaW9uIG9iamVjdCBmb3IgdGhpcyBlYWNoIGxvb3BcbiAqL1xuZnVuY3Rpb24gX2VhY2goZG9tLCBwYXJlbnQsIGV4cHIpIHtcbiAgdmFyIG11c3RSZW9yZGVyID0gdHlwZW9mIGdldEF0dHIoZG9tLCBMT09QX05PX1JFT1JERVJfRElSRUNUSVZFKSAhPT0gVF9TVFJJTkcgfHwgcmVtQXR0cihkb20sIExPT1BfTk9fUkVPUkRFUl9ESVJFQ1RJVkUpO1xuICB2YXIga2V5QXR0ciA9IGdldEF0dHIoZG9tLCBLRVlfRElSRUNUSVZFKTtcbiAgdmFyIGhhc0tleUF0dHJFeHByID0ga2V5QXR0ciA/IHRtcGwuaGFzRXhwcihrZXlBdHRyKSA6IGZhbHNlO1xuICB2YXIgdGFnTmFtZSA9IGdldFRhZ05hbWUoZG9tKTtcbiAgdmFyIGltcGwgPSBfX1RBR19JTVBMW3RhZ05hbWVdO1xuICB2YXIgcGFyZW50Tm9kZSA9IGRvbS5wYXJlbnROb2RlO1xuICB2YXIgcGxhY2Vob2xkZXIgPSBjcmVhdGVET01QbGFjZWhvbGRlcigpO1xuICB2YXIgY2hpbGQgPSBnZXRUYWcoZG9tKTtcbiAgdmFyIGlmRXhwciA9IGdldEF0dHIoZG9tLCBDT05ESVRJT05BTF9ESVJFQ1RJVkUpO1xuICB2YXIgdGFncyA9IFtdO1xuICB2YXIgaXNMb29wID0gdHJ1ZTtcbiAgdmFyIGlubmVySFRNTCA9IGRvbS5pbm5lckhUTUw7XG4gIHZhciBpc0Fub255bW91cyA9ICFfX1RBR19JTVBMW3RhZ05hbWVdO1xuICB2YXIgaXNWaXJ0dWFsID0gZG9tLnRhZ05hbWUgPT09ICdWSVJUVUFMJztcbiAgdmFyIG9sZEl0ZW1zID0gW107XG4gIHZhciBoYXNLZXlzO1xuXG4gIC8vIHJlbW92ZSB0aGUgZWFjaCBwcm9wZXJ0eSBmcm9tIHRoZSBvcmlnaW5hbCB0YWdcbiAgcmVtQXR0cihkb20sIExPT1BfRElSRUNUSVZFKTtcbiAgcmVtQXR0cihkb20sIEtFWV9ESVJFQ1RJVkUpO1xuXG4gIC8vIHBhcnNlIHRoZSBlYWNoIGV4cHJlc3Npb25cbiAgZXhwciA9IHRtcGwubG9vcEtleXMoZXhwcik7XG4gIGV4cHIuaXNMb29wID0gdHJ1ZTtcblxuICBpZiAoaWZFeHByKSB7IHJlbUF0dHIoZG9tLCBDT05ESVRJT05BTF9ESVJFQ1RJVkUpOyB9XG5cbiAgLy8gaW5zZXJ0IGEgbWFya2VkIHdoZXJlIHRoZSBsb29wIHRhZ3Mgd2lsbCBiZSBpbmplY3RlZFxuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShwbGFjZWhvbGRlciwgZG9tKTtcbiAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkb20pO1xuXG4gIGV4cHIudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlRWFjaCgpIHtcbiAgICAvLyBnZXQgdGhlIG5ldyBpdGVtcyBjb2xsZWN0aW9uXG4gICAgZXhwci52YWx1ZSA9IHRtcGwoZXhwci52YWwsIHBhcmVudCk7XG5cbiAgICB2YXIgaXRlbXMgPSBleHByLnZhbHVlO1xuICAgIHZhciBmcmFnID0gY3JlYXRlRnJhZygpO1xuICAgIHZhciBpc09iamVjdCQkMSA9ICFpc0FycmF5KGl0ZW1zKSAmJiAhaXNTdHJpbmcoaXRlbXMpO1xuICAgIHZhciByb290ID0gcGxhY2Vob2xkZXIucGFyZW50Tm9kZTtcbiAgICB2YXIgdG1wSXRlbXMgPSBbXTtcblxuICAgIC8vIGlmIHRoaXMgRE9NIHdhcyByZW1vdmVkIHRoZSB1cGRhdGUgaGVyZSBpcyB1c2VsZXNzXG4gICAgLy8gdGhpcyBjb25kaXRpb24gZml4ZXMgYWxzbyBhIHdlaXJkIGFzeW5jIGlzc3VlIG9uIElFIGluIG91ciB1bml0IHRlc3RcbiAgICBpZiAoIXJvb3QpIHsgcmV0dXJuIH1cblxuICAgIC8vIG9iamVjdCBsb29wLiBhbnkgY2hhbmdlcyBjYXVzZSBmdWxsIHJlZHJhd1xuICAgIGlmIChpc09iamVjdCQkMSkge1xuICAgICAgaGFzS2V5cyA9IGl0ZW1zIHx8IGZhbHNlO1xuICAgICAgaXRlbXMgPSBoYXNLZXlzID9cbiAgICAgICAgT2JqZWN0LmtleXMoaXRlbXMpLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBta2l0ZW0oZXhwciwgaXRlbXNba2V5XSwga2V5KTsgfSkgOiBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFzS2V5cyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpZkV4cHIpIHtcbiAgICAgIGl0ZW1zID0gaXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgIGlmIChleHByLmtleSAmJiAhaXNPYmplY3QkJDEpXG4gICAgICAgICAgeyByZXR1cm4gISF0bXBsKGlmRXhwciwgbWtpdGVtKGV4cHIsIGl0ZW0sIGksIHBhcmVudCkpIH1cblxuICAgICAgICByZXR1cm4gISF0bXBsKGlmRXhwciwgZXh0ZW5kKE9iamVjdC5jcmVhdGUocGFyZW50KSwgaXRlbSkpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBsb29wIGFsbCB0aGUgbmV3IGl0ZW1zXG4gICAgZWFjaChpdGVtcywgZnVuY3Rpb24gKF9pdGVtLCBpKSB7XG4gICAgICB2YXIgaXRlbSA9ICFoYXNLZXlzICYmIGV4cHIua2V5ID8gbWtpdGVtKGV4cHIsIF9pdGVtLCBpKSA6IF9pdGVtO1xuICAgICAgdmFyIGl0ZW1JZCA9IGdldEl0ZW1JZChrZXlBdHRyLCBfaXRlbSwgaXRlbSwgaGFzS2V5QXR0ckV4cHIpO1xuICAgICAgLy8gcmVvcmRlciBvbmx5IGlmIHRoZSBpdGVtcyBhcmUgb2JqZWN0c1xuICAgICAgdmFyIGRvUmVvcmRlciA9IG11c3RSZW9yZGVyICYmIHR5cGVvZiBfaXRlbSA9PT0gVF9PQkpFQ1QgJiYgIWhhc0tleXM7XG4gICAgICB2YXIgb2xkUG9zID0gb2xkSXRlbXMuaW5kZXhPZihpdGVtSWQpO1xuICAgICAgdmFyIGlzTmV3ID0gb2xkUG9zID09PSAtMTtcbiAgICAgIHZhciBwb3MgPSAhaXNOZXcgJiYgZG9SZW9yZGVyID8gb2xkUG9zIDogaTtcbiAgICAgIC8vIGRvZXMgYSB0YWcgZXhpc3QgaW4gdGhpcyBwb3NpdGlvbj9cbiAgICAgIHZhciB0YWcgPSB0YWdzW3Bvc107XG4gICAgICB2YXIgbXVzdEFwcGVuZCA9IGkgPj0gb2xkSXRlbXMubGVuZ3RoO1xuICAgICAgdmFyIG11c3RDcmVhdGUgPSAgZG9SZW9yZGVyICYmIGlzTmV3IHx8ICFkb1Jlb3JkZXIgJiYgIXRhZztcblxuICAgICAgLy8gbmV3IHRhZ1xuICAgICAgaWYgKG11c3RDcmVhdGUpIHtcbiAgICAgICAgdGFnID0gY3JlYXRlVGFnKGltcGwsIHtcbiAgICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgICBpc0xvb3A6IGlzTG9vcCxcbiAgICAgICAgICBpc0Fub255bW91czogaXNBbm9ueW1vdXMsXG4gICAgICAgICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICAgICAgICByb290OiBkb20uY2xvbmVOb2RlKGlzQW5vbnltb3VzKSxcbiAgICAgICAgICBpdGVtOiBpdGVtLFxuICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICB9LCBpbm5lckhUTUwpO1xuXG4gICAgICAgIC8vIG1vdW50IHRoZSB0YWdcbiAgICAgICAgdGFnLm1vdW50KCk7XG5cbiAgICAgICAgaWYgKG11c3RBcHBlbmQpXG4gICAgICAgICAgeyBhcHBlbmQuYXBwbHkodGFnLCBbZnJhZyB8fCByb290LCBpc1ZpcnR1YWxdKTsgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgeyBpbnNlcnQuYXBwbHkodGFnLCBbcm9vdCwgdGFnc1tpXSwgaXNWaXJ0dWFsXSk7IH1cblxuICAgICAgICBpZiAoIW11c3RBcHBlbmQpIHsgb2xkSXRlbXMuc3BsaWNlKGksIDAsIGl0ZW0pOyB9XG4gICAgICAgIHRhZ3Muc3BsaWNlKGksIDAsIHRhZyk7XG4gICAgICAgIGlmIChjaGlsZCkgeyBhcnJheWlzaEFkZChwYXJlbnQudGFncywgdGFnTmFtZSwgdGFnLCB0cnVlKTsgfVxuICAgICAgfSBlbHNlIGlmIChwb3MgIT09IGkgJiYgZG9SZW9yZGVyKSB7XG4gICAgICAgIC8vIG1vdmVcbiAgICAgICAgaWYgKGtleUF0dHIgfHwgY29udGFpbnMoaXRlbXMsIG9sZEl0ZW1zW3Bvc10pKSB7XG4gICAgICAgICAgbW92ZS5hcHBseSh0YWcsIFtyb290LCB0YWdzW2ldLCBpc1ZpcnR1YWxdKTtcbiAgICAgICAgICAvLyBtb3ZlIHRoZSBvbGQgdGFnIGluc3RhbmNlXG4gICAgICAgICAgdGFncy5zcGxpY2UoaSwgMCwgdGFncy5zcGxpY2UocG9zLCAxKVswXSk7XG4gICAgICAgICAgLy8gbW92ZSB0aGUgb2xkIGl0ZW1cbiAgICAgICAgICBvbGRJdGVtcy5zcGxpY2UoaSwgMCwgb2xkSXRlbXMuc3BsaWNlKHBvcywgMSlbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHRoZSBwb3NpdGlvbiBhdHRyaWJ1dGUgaWYgaXQgZXhpc3RzXG4gICAgICAgIGlmIChleHByLnBvcykgeyB0YWdbZXhwci5wb3NdID0gaTsgfVxuXG4gICAgICAgIC8vIGlmIHRoZSBsb29wIHRhZ3MgYXJlIG5vdCBjdXN0b21cbiAgICAgICAgLy8gd2UgbmVlZCB0byBtb3ZlIGFsbCB0aGVpciBjdXN0b20gdGFncyBpbnRvIHRoZSByaWdodCBwb3NpdGlvblxuICAgICAgICBpZiAoIWNoaWxkICYmIHRhZy50YWdzKSB7IG1vdmVOZXN0ZWRUYWdzLmNhbGwodGFnLCBpKTsgfVxuICAgICAgfVxuXG4gICAgICAvLyBjYWNoZSB0aGUgb3JpZ2luYWwgaXRlbSB0byB1c2UgaXQgaW4gdGhlIGV2ZW50cyBib3VuZCB0byB0aGlzIG5vZGVcbiAgICAgIC8vIGFuZCBpdHMgY2hpbGRyZW5cbiAgICAgIHRhZy5fXy5pdGVtID0gaXRlbTtcbiAgICAgIHRhZy5fXy5pbmRleCA9IGk7XG4gICAgICB0YWcuX18ucGFyZW50ID0gcGFyZW50O1xuXG4gICAgICB0bXBJdGVtc1tpXSA9IGl0ZW1JZDtcblxuICAgICAgaWYgKCFtdXN0Q3JlYXRlKSB7IHRhZy51cGRhdGUoaXRlbSk7IH1cbiAgICB9KTtcblxuICAgIC8vIHJlbW92ZSB0aGUgcmVkdW5kYW50IHRhZ3NcbiAgICB1bm1vdW50UmVkdW5kYW50KGl0ZW1zLCB0YWdzKTtcblxuICAgIC8vIGNsb25lIHRoZSBpdGVtcyBhcnJheVxuICAgIG9sZEl0ZW1zID0gdG1wSXRlbXMuc2xpY2UoKTtcblxuICAgIHJvb3QuaW5zZXJ0QmVmb3JlKGZyYWcsIHBsYWNlaG9sZGVyKTtcbiAgfTtcblxuICBleHByLnVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWFjaCh0YWdzLCBmdW5jdGlvbiAodCkgeyB0LnVubW91bnQoKTsgfSk7XG4gIH07XG5cbiAgcmV0dXJuIGV4cHJcbn1cblxuLyoqXG4gKiBXYWxrIHRoZSB0YWcgRE9NIHRvIGRldGVjdCB0aGUgZXhwcmVzc2lvbnMgdG8gZXZhbHVhdGVcbiAqIEB0aGlzIFRhZ1xuICogQHBhcmFtICAgeyBIVE1MRWxlbWVudCB9IHJvb3QgLSByb290IHRhZyB3aGVyZSB3ZSB3aWxsIHN0YXJ0IGRpZ2dpbmcgdGhlIGV4cHJlc3Npb25zXG4gKiBAcGFyYW0gICB7IEJvb2xlYW4gfSBtdXN0SW5jbHVkZVJvb3QgLSBmbGFnIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSByb290IG11c3QgYmUgcGFyc2VkIGFzIHdlbGxcbiAqIEByZXR1cm5zIHsgQXJyYXkgfSBhbGwgdGhlIGV4cHJlc3Npb25zIGZvdW5kXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRXhwcmVzc2lvbnMocm9vdCwgbXVzdEluY2x1ZGVSb290KSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBleHByZXNzaW9ucyA9IFtdO1xuXG4gIHdhbGtOb2Rlcyhyb290LCBmdW5jdGlvbiAoZG9tKSB7XG4gICAgdmFyIHR5cGUgPSBkb20ubm9kZVR5cGU7XG4gICAgdmFyIGF0dHI7XG4gICAgdmFyIHRhZ0ltcGw7XG5cbiAgICBpZiAoIW11c3RJbmNsdWRlUm9vdCAmJiBkb20gPT09IHJvb3QpIHsgcmV0dXJuIH1cblxuICAgIC8vIHRleHQgbm9kZVxuICAgIGlmICh0eXBlID09PSAzICYmIGRvbS5wYXJlbnROb2RlLnRhZ05hbWUgIT09ICdTVFlMRScgJiYgdG1wbC5oYXNFeHByKGRvbS5ub2RlVmFsdWUpKVxuICAgICAgeyBleHByZXNzaW9ucy5wdXNoKHtkb206IGRvbSwgZXhwcjogZG9tLm5vZGVWYWx1ZX0pOyB9XG5cbiAgICBpZiAodHlwZSAhPT0gMSkgeyByZXR1cm4gfVxuXG4gICAgdmFyIGlzVmlydHVhbCA9IGRvbS50YWdOYW1lID09PSAnVklSVFVBTCc7XG5cbiAgICAvLyBsb29wLiBlYWNoIGRvZXMgaXQncyBvd24gdGhpbmcgKGZvciBub3cpXG4gICAgaWYgKGF0dHIgPSBnZXRBdHRyKGRvbSwgTE9PUF9ESVJFQ1RJVkUpKSB7XG4gICAgICBpZihpc1ZpcnR1YWwpIHsgc2V0QXR0cihkb20sICdsb29wVmlydHVhbCcsIHRydWUpOyB9IC8vIGlnbm9yZSBoZXJlLCBoYW5kbGVkIGluIF9lYWNoXG4gICAgICBleHByZXNzaW9ucy5wdXNoKF9lYWNoKGRvbSwgdGhpcyQxLCBhdHRyKSk7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvLyBpZi1hdHRycyBiZWNvbWUgdGhlIG5ldyBwYXJlbnQuIEFueSBmb2xsb3dpbmcgZXhwcmVzc2lvbnMgKGVpdGhlciBvbiB0aGUgY3VycmVudFxuICAgIC8vIGVsZW1lbnQsIG9yIGJlbG93IGl0KSBiZWNvbWUgY2hpbGRyZW4gb2YgdGhpcyBleHByZXNzaW9uLlxuICAgIGlmIChhdHRyID0gZ2V0QXR0cihkb20sIENPTkRJVElPTkFMX0RJUkVDVElWRSkpIHtcbiAgICAgIGV4cHJlc3Npb25zLnB1c2goT2JqZWN0LmNyZWF0ZShJZkV4cHIpLmluaXQoZG9tLCB0aGlzJDEsIGF0dHIpKTtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGlmIChhdHRyID0gZ2V0QXR0cihkb20sIElTX0RJUkVDVElWRSkpIHtcbiAgICAgIGlmICh0bXBsLmhhc0V4cHIoYXR0cikpIHtcbiAgICAgICAgZXhwcmVzc2lvbnMucHVzaCh7XG4gICAgICAgICAgaXNSdGFnOiB0cnVlLFxuICAgICAgICAgIGV4cHI6IGF0dHIsXG4gICAgICAgICAgZG9tOiBkb20sXG4gICAgICAgICAgYXR0cnM6IFtdLnNsaWNlLmNhbGwoZG9tLmF0dHJpYnV0ZXMpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIHRoaXMgaXMgYSB0YWcsIHN0b3AgdHJhdmVyc2luZyBoZXJlLlxuICAgIC8vIHdlIGlnbm9yZSB0aGUgcm9vdCwgc2luY2UgcGFyc2VFeHByZXNzaW9ucyBpcyBjYWxsZWQgd2hpbGUgd2UncmUgbW91bnRpbmcgdGhhdCByb290XG4gICAgdGFnSW1wbCA9IGdldFRhZyhkb20pO1xuXG4gICAgaWYoaXNWaXJ0dWFsKSB7XG4gICAgICBpZihnZXRBdHRyKGRvbSwgJ3ZpcnR1YWxpemVkJykpIHtkb20ucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChkb20pOyB9IC8vIHRhZyBjcmVhdGVkLCByZW1vdmUgZnJvbSBkb21cbiAgICAgIGlmKCF0YWdJbXBsICYmICFnZXRBdHRyKGRvbSwgJ3ZpcnR1YWxpemVkJykgJiYgIWdldEF0dHIoZG9tLCAnbG9vcFZpcnR1YWwnKSkgIC8vIG9rIHRvIGNyZWF0ZSB2aXJ0dWFsIHRhZ1xuICAgICAgICB7IHRhZ0ltcGwgPSB7IHRtcGw6IGRvbS5vdXRlckhUTUwgfTsgfVxuICAgIH1cblxuICAgIGlmICh0YWdJbXBsICYmIChkb20gIT09IHJvb3QgfHwgbXVzdEluY2x1ZGVSb290KSkge1xuICAgICAgaWYoaXNWaXJ0dWFsKSB7IC8vIGhhbmRsZWQgaW4gdXBkYXRlXG4gICAgICAgIGlmIChnZXRBdHRyKGRvbSwgSVNfRElSRUNUSVZFKSlcbiAgICAgICAgICB7IHdhcm4oKFwiVmlydHVhbCB0YWdzIHNob3VsZG4ndCBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggdGhlIFxcXCJcIiArIElTX0RJUkVDVElWRSArIFwiXFxcIiBhdHRyaWJ1dGUgLSBodHRwczovL2dpdGh1Yi5jb20vcmlvdC9yaW90L2lzc3Vlcy8yNTExXCIpKTsgfVxuICAgICAgICAvLyBjYW4gbm90IHJlbW92ZSBhdHRyaWJ1dGUgbGlrZSBkaXJlY3RpdmVzXG4gICAgICAgIC8vIHNvIGZsYWcgZm9yIHJlbW92YWwgYWZ0ZXIgY3JlYXRpb24gdG8gcHJldmVudCBtYXhpbXVtIHN0YWNrIGVycm9yXG4gICAgICAgIHNldEF0dHIoZG9tLCAndmlydHVhbGl6ZWQnLCB0cnVlKTtcbiAgICAgICAgdmFyIHRhZyA9IGNyZWF0ZVRhZyhcbiAgICAgICAgICB7dG1wbDogZG9tLm91dGVySFRNTH0sXG4gICAgICAgICAge3Jvb3Q6IGRvbSwgcGFyZW50OiB0aGlzJDF9LFxuICAgICAgICAgIGRvbS5pbm5lckhUTUxcbiAgICAgICAgKTtcblxuICAgICAgICBleHByZXNzaW9ucy5wdXNoKHRhZyk7IC8vIG5vIHJldHVybiwgYW5vbnltb3VzIHRhZywga2VlcCBwYXJzaW5nXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHByZXNzaW9ucy5wdXNoKFxuICAgICAgICAgIGluaXRDaGlsZFRhZyhcbiAgICAgICAgICAgIHRhZ0ltcGwsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJvb3Q6IGRvbSxcbiAgICAgICAgICAgICAgcGFyZW50OiB0aGlzJDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkb20uaW5uZXJIVE1MLFxuICAgICAgICAgICAgdGhpcyQxXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhdHRyaWJ1dGUgZXhwcmVzc2lvbnNcbiAgICBwYXJzZUF0dHJpYnV0ZXMuYXBwbHkodGhpcyQxLCBbZG9tLCBkb20uYXR0cmlidXRlcywgZnVuY3Rpb24gKGF0dHIsIGV4cHIpIHtcbiAgICAgIGlmICghZXhwcikgeyByZXR1cm4gfVxuICAgICAgZXhwcmVzc2lvbnMucHVzaChleHByKTtcbiAgICB9XSk7XG4gIH0pO1xuXG4gIHJldHVybiBleHByZXNzaW9uc1xufVxuXG4vKipcbiAqIENhbGxzIGBmbmAgZm9yIGV2ZXJ5IGF0dHJpYnV0ZSBvbiBhbiBlbGVtZW50LiBJZiB0aGF0IGF0dHIgaGFzIGFuIGV4cHJlc3Npb24sXG4gKiBpdCBpcyBhbHNvIHBhc3NlZCB0byBmbi5cbiAqIEB0aGlzIFRhZ1xuICogQHBhcmFtICAgeyBIVE1MRWxlbWVudCB9IGRvbSAtIGRvbSBub2RlIHRvIHBhcnNlXG4gKiBAcGFyYW0gICB7IEFycmF5IH0gYXR0cnMgLSBhcnJheSBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0gICB7IEZ1bmN0aW9uIH0gZm4gLSBjYWxsYmFjayB0byBleGVjIG9uIGFueSBpdGVyYXRpb25cbiAqL1xuZnVuY3Rpb24gcGFyc2VBdHRyaWJ1dGVzKGRvbSwgYXR0cnMsIGZuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGVhY2goYXR0cnMsIGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgaWYgKCFhdHRyKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgICB2YXIgbmFtZSA9IGF0dHIubmFtZTtcbiAgICB2YXIgYm9vbCA9IGlzQm9vbEF0dHIobmFtZSk7XG4gICAgdmFyIGV4cHI7XG5cbiAgICBpZiAoY29udGFpbnMoUkVGX0RJUkVDVElWRVMsIG5hbWUpICYmIGRvbS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFlJRUxEX1RBRykge1xuICAgICAgZXhwciA9ICBPYmplY3QuY3JlYXRlKFJlZkV4cHIpLmluaXQoZG9tLCB0aGlzJDEsIG5hbWUsIGF0dHIudmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodG1wbC5oYXNFeHByKGF0dHIudmFsdWUpKSB7XG4gICAgICBleHByID0ge2RvbTogZG9tLCBleHByOiBhdHRyLnZhbHVlLCBhdHRyOiBuYW1lLCBib29sOiBib29sfTtcbiAgICB9XG5cbiAgICBmbihhdHRyLCBleHByKTtcbiAgfSk7XG59XG5cbi8qXG4gIEluY2x1ZGVzIGhhY2tzIG5lZWRlZCBmb3IgdGhlIEludGVybmV0IEV4cGxvcmVyIHZlcnNpb24gOSBhbmQgYmVsb3dcbiAgU2VlOiBodHRwOi8va2FuZ2F4LmdpdGh1Yi5pby9jb21wYXQtdGFibGUvZXM1LyNpZThcbiAgICAgICBodHRwOi8vY29kZXBsYW5ldC5pby9kcm9wcGluZy1pZTgvXG4qL1xuXG52YXIgcmVIYXNZaWVsZCAgPSAvPHlpZWxkXFxiL2k7XG52YXIgcmVZaWVsZEFsbCAgPSAvPHlpZWxkXFxzKig/OlxcLz58PihbXFxTXFxzXSo/KTxcXC95aWVsZFxccyo+fD4pL2lnO1xudmFyIHJlWWllbGRTcmMgID0gLzx5aWVsZFxccyt0bz1bJ1wiXShbXidcIj5dKilbJ1wiXVxccyo+KFtcXFNcXHNdKj8pPFxcL3lpZWxkXFxzKj4vaWc7XG52YXIgcmVZaWVsZERlc3QgPSAvPHlpZWxkXFxzK2Zyb209WydcIl0/KFstXFx3XSspWydcIl0/XFxzKig/OlxcLz58PihbXFxTXFxzXSo/KTxcXC95aWVsZFxccyo+KS9pZztcbnZhciByb290RWxzID0geyB0cjogJ3Rib2R5JywgdGg6ICd0cicsIHRkOiAndHInLCBjb2w6ICdjb2xncm91cCcgfTtcbnZhciB0YmxUYWdzID0gSUVfVkVSU0lPTiAmJiBJRV9WRVJTSU9OIDwgMTAgPyBSRV9TUEVDSUFMX1RBR1MgOiBSRV9TUEVDSUFMX1RBR1NfTk9fT1BUSU9OO1xudmFyIEdFTkVSSUMgPSAnZGl2JztcbnZhciBTVkcgPSAnc3ZnJztcblxuXG4vKlxuICBDcmVhdGVzIHRoZSByb290IGVsZW1lbnQgZm9yIHRhYmxlIG9yIHNlbGVjdCBjaGlsZCBlbGVtZW50czpcbiAgdHIvdGgvdGQvdGhlYWQvdGZvb3QvdGJvZHkvY2FwdGlvbi9jb2wvY29sZ3JvdXAvb3B0aW9uL29wdGdyb3VwXG4qL1xuZnVuY3Rpb24gc3BlY2lhbFRhZ3MoZWwsIHRtcGwsIHRhZ05hbWUpIHtcblxuICB2YXJcbiAgICBzZWxlY3QgPSB0YWdOYW1lWzBdID09PSAnbycsXG4gICAgcGFyZW50ID0gc2VsZWN0ID8gJ3NlbGVjdD4nIDogJ3RhYmxlPic7XG5cbiAgLy8gdHJpbSgpIGlzIGltcG9ydGFudCBoZXJlLCB0aGlzIGVuc3VyZXMgd2UgZG9uJ3QgaGF2ZSBhcnRpZmFjdHMsXG4gIC8vIHNvIHdlIGNhbiBjaGVjayBpZiB3ZSBoYXZlIG9ubHkgb25lIGVsZW1lbnQgaW5zaWRlIHRoZSBwYXJlbnRcbiAgZWwuaW5uZXJIVE1MID0gJzwnICsgcGFyZW50ICsgdG1wbC50cmltKCkgKyAnPC8nICsgcGFyZW50O1xuICBwYXJlbnQgPSBlbC5maXJzdENoaWxkO1xuXG4gIC8vIHJldHVybnMgdGhlIGltbWVkaWF0ZSBwYXJlbnQgaWYgdHIvdGgvdGQvY29sIGlzIHRoZSBvbmx5IGVsZW1lbnQsIGlmIG5vdFxuICAvLyByZXR1cm5zIHRoZSB3aG9sZSB0cmVlLCBhcyB0aGlzIGNhbiBpbmNsdWRlIGFkZGl0aW9uYWwgZWxlbWVudHNcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKHNlbGVjdCkge1xuICAgIHBhcmVudC5zZWxlY3RlZEluZGV4ID0gLTE7ICAvLyBmb3IgSUU5LCBjb21wYXRpYmxlIHcvY3VycmVudCByaW90IGJlaGF2aW9yXG4gIH0gZWxzZSB7XG4gICAgLy8gYXZvaWRzIGluc2VydGlvbiBvZiBjb2ludGFpbmVyIGluc2lkZSBjb250YWluZXIgKGV4OiB0Ym9keSBpbnNpZGUgdGJvZHkpXG4gICAgdmFyIHRuYW1lID0gcm9vdEVsc1t0YWdOYW1lXTtcbiAgICBpZiAodG5hbWUgJiYgcGFyZW50LmNoaWxkRWxlbWVudENvdW50ID09PSAxKSB7IHBhcmVudCA9ICQodG5hbWUsIHBhcmVudCk7IH1cbiAgfVxuICByZXR1cm4gcGFyZW50XG59XG5cbi8qXG4gIFJlcGxhY2UgdGhlIHlpZWxkIHRhZyBmcm9tIGFueSB0YWcgdGVtcGxhdGUgd2l0aCB0aGUgaW5uZXJIVE1MIG9mIHRoZVxuICBvcmlnaW5hbCB0YWcgaW4gdGhlIHBhZ2VcbiovXG5mdW5jdGlvbiByZXBsYWNlWWllbGQodG1wbCwgaHRtbCkge1xuICAvLyBkbyBub3RoaW5nIGlmIG5vIHlpZWxkXG4gIGlmICghcmVIYXNZaWVsZC50ZXN0KHRtcGwpKSB7IHJldHVybiB0bXBsIH1cblxuICAvLyBiZSBjYXJlZnVsIHdpdGggIzEzNDMgLSBzdHJpbmcgb24gdGhlIHNvdXJjZSBoYXZpbmcgYCQxYFxuICB2YXIgc3JjID0ge307XG5cbiAgaHRtbCA9IGh0bWwgJiYgaHRtbC5yZXBsYWNlKHJlWWllbGRTcmMsIGZ1bmN0aW9uIChfLCByZWYsIHRleHQpIHtcbiAgICBzcmNbcmVmXSA9IHNyY1tyZWZdIHx8IHRleHQ7ICAgLy8gcHJlc2VydmUgZmlyc3QgZGVmaW5pdGlvblxuICAgIHJldHVybiAnJ1xuICB9KS50cmltKCk7XG5cbiAgcmV0dXJuIHRtcGxcbiAgICAucmVwbGFjZShyZVlpZWxkRGVzdCwgZnVuY3Rpb24gKF8sIHJlZiwgZGVmKSB7ICAvLyB5aWVsZCB3aXRoIGZyb20gLSB0byBhdHRyc1xuICAgICAgcmV0dXJuIHNyY1tyZWZdIHx8IGRlZiB8fCAnJ1xuICAgIH0pXG4gICAgLnJlcGxhY2UocmVZaWVsZEFsbCwgZnVuY3Rpb24gKF8sIGRlZikgeyAgICAgICAgLy8geWllbGQgd2l0aG91dCBhbnkgXCJmcm9tXCJcbiAgICAgIHJldHVybiBodG1sIHx8IGRlZiB8fCAnJ1xuICAgIH0pXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIERPTSBlbGVtZW50IHRvIHdyYXAgdGhlIGdpdmVuIGNvbnRlbnQuIE5vcm1hbGx5IGFuIGBESVZgLCBidXQgY2FuIGJlXG4gKiBhbHNvIGEgYFRBQkxFYCwgYFNFTEVDVGAsIGBUQk9EWWAsIGBUUmAsIG9yIGBDT0xHUk9VUGAgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gICB7IFN0cmluZyB9IHRtcGwgIC0gVGhlIHRlbXBsYXRlIGNvbWluZyBmcm9tIHRoZSBjdXN0b20gdGFnIGRlZmluaXRpb25cbiAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gaHRtbCAtIEhUTUwgY29udGVudCB0aGF0IGNvbWVzIGZyb20gdGhlIERPTSBlbGVtZW50IHdoZXJlIHlvdVxuICogICAgICAgICAgIHdpbGwgbW91bnQgdGhlIHRhZywgbW9zdGx5IHRoZSBvcmlnaW5hbCB0YWcgaW4gdGhlIHBhZ2VcbiAqIEBwYXJhbSAgIHsgQm9vbGVhbiB9IGlzU3ZnIC0gdHJ1ZSBpZiB0aGUgcm9vdCBub2RlIGlzIGFuIHN2Z1xuICogQHJldHVybnMgeyBIVE1MRWxlbWVudCB9IERPTSBlbGVtZW50IHdpdGggX3RtcGxfIG1lcmdlZCB0aHJvdWdoIGBZSUVMRGAgd2l0aCB0aGUgX2h0bWxfLlxuICovXG5mdW5jdGlvbiBta2RvbSh0bXBsLCBodG1sLCBpc1N2ZyQkMSkge1xuICB2YXIgbWF0Y2ggICA9IHRtcGwgJiYgdG1wbC5tYXRjaCgvXlxccyo8KFstXFx3XSspLyk7XG4gIHZhciAgdGFnTmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG4gIHZhciBlbCA9IG1rRWwoaXNTdmckJDEgPyBTVkcgOiBHRU5FUklDKTtcblxuICAvLyByZXBsYWNlIGFsbCB0aGUgeWllbGQgdGFncyB3aXRoIHRoZSB0YWcgaW5uZXIgaHRtbFxuICB0bXBsID0gcmVwbGFjZVlpZWxkKHRtcGwsIGh0bWwpO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGlmICh0YmxUYWdzLnRlc3QodGFnTmFtZSkpXG4gICAgeyBlbCA9IHNwZWNpYWxUYWdzKGVsLCB0bXBsLCB0YWdOYW1lKTsgfVxuICBlbHNlXG4gICAgeyBzZXRJbm5lckhUTUwoZWwsIHRtcGwsIGlzU3ZnJCQxKTsgfVxuXG4gIHJldHVybiBlbFxufVxuXG4vKipcbiAqIEFub3RoZXIgd2F5IHRvIGNyZWF0ZSBhIHJpb3QgdGFnIGEgYml0IG1vcmUgZXM2IGZyaWVuZGx5XG4gKiBAcGFyYW0geyBIVE1MRWxlbWVudCB9IGVsIC0gdGFnIERPTSBzZWxlY3RvciBvciBET00gbm9kZS9zXG4gKiBAcGFyYW0geyBPYmplY3QgfSBvcHRzIC0gdGFnIGxvZ2ljXG4gKiBAcmV0dXJucyB7IFRhZyB9IG5ldyByaW90IHRhZyBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBUYWckMShlbCwgb3B0cykge1xuICAvLyBnZXQgdGhlIHRhZyBwcm9wZXJ0aWVzIGZyb20gdGhlIGNsYXNzIGNvbnN0cnVjdG9yXG4gIHZhciByZWYgPSB0aGlzO1xuICB2YXIgbmFtZSA9IHJlZi5uYW1lO1xuICB2YXIgdG1wbCA9IHJlZi50bXBsO1xuICB2YXIgY3NzID0gcmVmLmNzcztcbiAgdmFyIGF0dHJzID0gcmVmLmF0dHJzO1xuICB2YXIgb25DcmVhdGUgPSByZWYub25DcmVhdGU7XG4gIC8vIHJlZ2lzdGVyIGEgbmV3IHRhZyBhbmQgY2FjaGUgdGhlIGNsYXNzIHByb3RvdHlwZVxuICBpZiAoIV9fVEFHX0lNUExbbmFtZV0pIHtcbiAgICB0YWckMShuYW1lLCB0bXBsLCBjc3MsIGF0dHJzLCBvbkNyZWF0ZSk7XG4gICAgLy8gY2FjaGUgdGhlIGNsYXNzIGNvbnN0cnVjdG9yXG4gICAgX19UQUdfSU1QTFtuYW1lXS5jbGFzcyA9IHRoaXMuY29uc3RydWN0b3I7XG4gIH1cblxuICAvLyBtb3VudCB0aGUgdGFnIHVzaW5nIHRoZSBjbGFzcyBpbnN0YW5jZVxuICBtb3VudFRvKGVsLCBuYW1lLCBvcHRzLCB0aGlzKTtcbiAgLy8gaW5qZWN0IHRoZSBjb21wb25lbnQgY3NzXG4gIGlmIChjc3MpIHsgc3R5bGVNYW5hZ2VyLmluamVjdCgpOyB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgcmlvdCB0YWcgaW1wbGVtZW50YXRpb25cbiAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gICBuYW1lIC0gbmFtZS9pZCBvZiB0aGUgbmV3IHJpb3QgdGFnXG4gKiBAcGFyYW0gICB7IFN0cmluZyB9ICAgdG1wbCAtIHRhZyB0ZW1wbGF0ZVxuICogQHBhcmFtICAgeyBTdHJpbmcgfSAgIGNzcyAtIGN1c3RvbSB0YWcgY3NzXG4gKiBAcGFyYW0gICB7IFN0cmluZyB9ICAgYXR0cnMgLSByb290IHRhZyBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0gICB7IEZ1bmN0aW9uIH0gZm4gLSB1c2VyIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7IFN0cmluZyB9IG5hbWUvaWQgb2YgdGhlIHRhZyBqdXN0IGNyZWF0ZWRcbiAqL1xuZnVuY3Rpb24gdGFnJDEobmFtZSwgdG1wbCwgY3NzLCBhdHRycywgZm4pIHtcbiAgaWYgKGlzRnVuY3Rpb24oYXR0cnMpKSB7XG4gICAgZm4gPSBhdHRycztcblxuICAgIGlmICgvXltcXHctXStcXHM/PS8udGVzdChjc3MpKSB7XG4gICAgICBhdHRycyA9IGNzcztcbiAgICAgIGNzcyA9ICcnO1xuICAgIH0gZWxzZVxuICAgICAgeyBhdHRycyA9ICcnOyB9XG4gIH1cblxuICBpZiAoY3NzKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oY3NzKSlcbiAgICAgIHsgZm4gPSBjc3M7IH1cbiAgICBlbHNlXG4gICAgICB7IHN0eWxlTWFuYWdlci5hZGQoY3NzKTsgfVxuICB9XG5cbiAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgX19UQUdfSU1QTFtuYW1lXSA9IHsgbmFtZTogbmFtZSwgdG1wbDogdG1wbCwgYXR0cnM6IGF0dHJzLCBmbjogZm4gfTtcblxuICByZXR1cm4gbmFtZVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyByaW90IHRhZyBpbXBsZW1lbnRhdGlvbiAoZm9yIHVzZSBieSB0aGUgY29tcGlsZXIpXG4gKiBAcGFyYW0gICB7IFN0cmluZyB9ICAgbmFtZSAtIG5hbWUvaWQgb2YgdGhlIG5ldyByaW90IHRhZ1xuICogQHBhcmFtICAgeyBTdHJpbmcgfSAgIHRtcGwgLSB0YWcgdGVtcGxhdGVcbiAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gICBjc3MgLSBjdXN0b20gdGFnIGNzc1xuICogQHBhcmFtICAgeyBTdHJpbmcgfSAgIGF0dHJzIC0gcm9vdCB0YWcgYXR0cmlidXRlc1xuICogQHBhcmFtICAgeyBGdW5jdGlvbiB9IGZuIC0gdXNlciBmdW5jdGlvblxuICogQHJldHVybnMgeyBTdHJpbmcgfSBuYW1lL2lkIG9mIHRoZSB0YWcganVzdCBjcmVhdGVkXG4gKi9cbmZ1bmN0aW9uIHRhZzIkMShuYW1lLCB0bXBsLCBjc3MsIGF0dHJzLCBmbikge1xuICBpZiAoY3NzKSB7IHN0eWxlTWFuYWdlci5hZGQoY3NzLCBuYW1lKTsgfVxuXG4gIF9fVEFHX0lNUExbbmFtZV0gPSB7IG5hbWU6IG5hbWUsIHRtcGw6IHRtcGwsIGF0dHJzOiBhdHRycywgZm46IGZuIH07XG5cbiAgcmV0dXJuIG5hbWVcbn1cblxuLyoqXG4gKiBNb3VudCBhIHRhZyB1c2luZyBhIHNwZWNpZmljIHRhZyBpbXBsZW1lbnRhdGlvblxuICogQHBhcmFtICAgeyAqIH0gc2VsZWN0b3IgLSB0YWcgRE9NIHNlbGVjdG9yIG9yIERPTSBub2RlL3NcbiAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gdGFnTmFtZSAtIHRhZyBpbXBsZW1lbnRhdGlvbiBuYW1lXG4gKiBAcGFyYW0gICB7IE9iamVjdCB9IG9wdHMgLSB0YWcgbG9naWNcbiAqIEByZXR1cm5zIHsgQXJyYXkgfSBuZXcgdGFncyBpbnN0YW5jZXNcbiAqL1xuZnVuY3Rpb24gbW91bnQkMShzZWxlY3RvciwgdGFnTmFtZSwgb3B0cykge1xuICB2YXIgdGFncyA9IFtdO1xuICB2YXIgZWxlbSwgYWxsVGFncztcblxuICBmdW5jdGlvbiBwdXNoVGFnc1RvKHJvb3QpIHtcbiAgICBpZiAocm9vdC50YWdOYW1lKSB7XG4gICAgICB2YXIgcmlvdFRhZyA9IGdldEF0dHIocm9vdCwgSVNfRElSRUNUSVZFKSwgdGFnO1xuXG4gICAgICAvLyBoYXZlIHRhZ05hbWU/IGZvcmNlIHJpb3QtdGFnIHRvIGJlIHRoZSBzYW1lXG4gICAgICBpZiAodGFnTmFtZSAmJiByaW90VGFnICE9PSB0YWdOYW1lKSB7XG4gICAgICAgIHJpb3RUYWcgPSB0YWdOYW1lO1xuICAgICAgICBzZXRBdHRyKHJvb3QsIElTX0RJUkVDVElWRSwgdGFnTmFtZSk7XG4gICAgICB9XG5cbiAgICAgIHRhZyA9IG1vdW50VG8ocm9vdCwgcmlvdFRhZyB8fCByb290LnRhZ05hbWUudG9Mb3dlckNhc2UoKSwgb3B0cyk7XG5cbiAgICAgIGlmICh0YWcpXG4gICAgICAgIHsgdGFncy5wdXNoKHRhZyk7IH1cbiAgICB9IGVsc2UgaWYgKHJvb3QubGVuZ3RoKVxuICAgICAgeyBlYWNoKHJvb3QsIHB1c2hUYWdzVG8pOyB9IC8vIGFzc3VtZSBub2RlTGlzdFxuICB9XG5cbiAgLy8gaW5qZWN0IHN0eWxlcyBpbnRvIERPTVxuICBzdHlsZU1hbmFnZXIuaW5qZWN0KCk7XG5cbiAgaWYgKGlzT2JqZWN0KHRhZ05hbWUpKSB7XG4gICAgb3B0cyA9IHRhZ05hbWU7XG4gICAgdGFnTmFtZSA9IDA7XG4gIH1cblxuICAvLyBjcmF3bCB0aGUgRE9NIHRvIGZpbmQgdGhlIHRhZ1xuICBpZiAoaXNTdHJpbmcoc2VsZWN0b3IpKSB7XG4gICAgc2VsZWN0b3IgPSBzZWxlY3RvciA9PT0gJyonID9cbiAgICAgIC8vIHNlbGVjdCBhbGwgcmVnaXN0ZXJlZCB0YWdzXG4gICAgICAvLyAmIHRhZ3MgZm91bmQgd2l0aCB0aGUgcmlvdC10YWcgYXR0cmlidXRlIHNldFxuICAgICAgYWxsVGFncyA9IHNlbGVjdFRhZ3MoKSA6XG4gICAgICAvLyBvciBqdXN0IHRoZSBvbmVzIG5hbWVkIGxpa2UgdGhlIHNlbGVjdG9yXG4gICAgICBzZWxlY3RvciArIHNlbGVjdFRhZ3Moc2VsZWN0b3Iuc3BsaXQoLywgKi8pKTtcblxuICAgIC8vIG1ha2Ugc3VyZSB0byBwYXNzIGFsd2F5cyBhIHNlbGVjdG9yXG4gICAgLy8gdG8gdGhlIHF1ZXJ5U2VsZWN0b3JBbGwgZnVuY3Rpb25cbiAgICBlbGVtID0gc2VsZWN0b3IgPyAkJChzZWxlY3RvcikgOiBbXTtcbiAgfVxuICBlbHNlXG4gICAgLy8gcHJvYmFibHkgeW91IGhhdmUgcGFzc2VkIGFscmVhZHkgYSB0YWcgb3IgYSBOb2RlTGlzdFxuICAgIHsgZWxlbSA9IHNlbGVjdG9yOyB9XG5cbiAgLy8gc2VsZWN0IGFsbCB0aGUgcmVnaXN0ZXJlZCBhbmQgbW91bnQgdGhlbSBpbnNpZGUgdGhlaXIgcm9vdCBlbGVtZW50c1xuICBpZiAodGFnTmFtZSA9PT0gJyonKSB7XG4gICAgLy8gZ2V0IGFsbCBjdXN0b20gdGFnc1xuICAgIHRhZ05hbWUgPSBhbGxUYWdzIHx8IHNlbGVjdFRhZ3MoKTtcbiAgICAvLyBpZiB0aGUgcm9vdCBlbHMgaXQncyBqdXN0IGEgc2luZ2xlIHRhZ1xuICAgIGlmIChlbGVtLnRhZ05hbWUpXG4gICAgICB7IGVsZW0gPSAkJCh0YWdOYW1lLCBlbGVtKTsgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gc2VsZWN0IGFsbCB0aGUgY2hpbGRyZW4gZm9yIGFsbCB0aGUgZGlmZmVyZW50IHJvb3QgZWxlbWVudHNcbiAgICAgIHZhciBub2RlTGlzdCA9IFtdO1xuXG4gICAgICBlYWNoKGVsZW0sIGZ1bmN0aW9uIChfZWwpIHsgcmV0dXJuIG5vZGVMaXN0LnB1c2goJCQodGFnTmFtZSwgX2VsKSk7IH0pO1xuXG4gICAgICBlbGVtID0gbm9kZUxpc3Q7XG4gICAgfVxuICAgIC8vIGdldCByaWQgb2YgdGhlIHRhZ05hbWVcbiAgICB0YWdOYW1lID0gMDtcbiAgfVxuXG4gIHB1c2hUYWdzVG8oZWxlbSk7XG5cbiAgcmV0dXJuIHRhZ3Ncbn1cblxuLy8gQ3JlYXRlIGEgbWl4aW4gdGhhdCBjb3VsZCBiZSBnbG9iYWxseSBzaGFyZWQgYWNyb3NzIGFsbCB0aGUgdGFnc1xudmFyIG1peGlucyA9IHt9O1xudmFyIGdsb2JhbHMgPSBtaXhpbnNbR0xPQkFMX01JWElOXSA9IHt9O1xudmFyIG1peGluc19pZCA9IDA7XG5cbi8qKlxuICogQ3JlYXRlL1JldHVybiBhIG1peGluIGJ5IGl0cyBuYW1lXG4gKiBAcGFyYW0gICB7IFN0cmluZyB9ICBuYW1lIC0gbWl4aW4gbmFtZSAoZ2xvYmFsIG1peGluIGlmIG9iamVjdClcbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gIG1peCAtIG1peGluIGxvZ2ljXG4gKiBAcGFyYW0gICB7IEJvb2xlYW4gfSBnIC0gaXMgZ2xvYmFsP1xuICogQHJldHVybnMgeyBPYmplY3QgfSAgdGhlIG1peGluIGxvZ2ljXG4gKi9cbmZ1bmN0aW9uIG1peGluJDEobmFtZSwgbWl4LCBnKSB7XG4gIC8vIFVubmFtZWQgZ2xvYmFsXG4gIGlmIChpc09iamVjdChuYW1lKSkge1xuICAgIG1peGluJDEoKFwiX19cIiArIChtaXhpbnNfaWQrKykgKyBcIl9fXCIpLCBuYW1lLCB0cnVlKTtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdG9yZSA9IGcgPyBnbG9iYWxzIDogbWl4aW5zO1xuXG4gIC8vIEdldHRlclxuICBpZiAoIW1peCkge1xuICAgIGlmIChpc1VuZGVmaW5lZChzdG9yZVtuYW1lXSkpXG4gICAgICB7IHRocm93IG5ldyBFcnJvcigoXCJVbnJlZ2lzdGVyZWQgbWl4aW46IFwiICsgbmFtZSkpIH1cblxuICAgIHJldHVybiBzdG9yZVtuYW1lXVxuICB9XG5cbiAgLy8gU2V0dGVyXG4gIHN0b3JlW25hbWVdID0gaXNGdW5jdGlvbihtaXgpID9cbiAgICBleHRlbmQobWl4LnByb3RvdHlwZSwgc3RvcmVbbmFtZV0gfHwge30pICYmIG1peCA6XG4gICAgZXh0ZW5kKHN0b3JlW25hbWVdIHx8IHt9LCBtaXgpO1xufVxuXG4vKipcbiAqIFVwZGF0ZSBhbGwgdGhlIHRhZ3MgaW5zdGFuY2VzIGNyZWF0ZWRcbiAqIEByZXR1cm5zIHsgQXJyYXkgfSBhbGwgdGhlIHRhZ3MgaW5zdGFuY2VzXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZSQxKCkge1xuICByZXR1cm4gZWFjaChfX1RBR1NfQ0FDSEUsIGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHRhZy51cGRhdGUoKTsgfSlcbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlciQxKG5hbWUpIHtcbiAgX19UQUdfSU1QTFtuYW1lXSA9IG51bGw7XG59XG5cbnZhciB2ZXJzaW9uJDEgPSAndjMuOC4xJztcblxuXG52YXIgY29yZSA9IE9iamVjdC5mcmVlemUoe1xuXHRUYWc6IFRhZyQxLFxuXHR0YWc6IHRhZyQxLFxuXHR0YWcyOiB0YWcyJDEsXG5cdG1vdW50OiBtb3VudCQxLFxuXHRtaXhpbjogbWl4aW4kMSxcblx0dXBkYXRlOiB1cGRhdGUkMSxcblx0dW5yZWdpc3RlcjogdW5yZWdpc3RlciQxLFxuXHR2ZXJzaW9uOiB2ZXJzaW9uJDFcbn0pO1xuXG4vKipcbiAqIFdlIG5lZWQgdG8gdXBkYXRlIG9wdHMgZm9yIHRoaXMgdGFnLiBUaGF0IHJlcXVpcmVzIHVwZGF0aW5nIHRoZSBleHByZXNzaW9uc1xuICogaW4gYW55IGF0dHJpYnV0ZXMgb24gdGhlIHRhZywgYW5kIHRoZW4gY29weWluZyB0aGUgcmVzdWx0IG9udG8gb3B0cy5cbiAqIEB0aGlzIFRhZ1xuICogQHBhcmFtICAge0Jvb2xlYW59IGlzTG9vcCAtIGlzIGl0IGEgbG9vcCB0YWc/XG4gKiBAcGFyYW0gICB7IFRhZyB9ICBwYXJlbnQgLSBwYXJlbnQgdGFnIG5vZGVcbiAqIEBwYXJhbSAgIHsgQm9vbGVhbiB9ICBpc0Fub255bW91cyAtIGlzIGl0IGEgdGFnIHdpdGhvdXQgYW55IGltcGw/IChhIHRhZyBub3QgcmVnaXN0ZXJlZClcbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gIG9wdHMgLSB0YWcgb3B0aW9uc1xuICogQHBhcmFtICAgeyBBcnJheSB9ICBpbnN0QXR0cnMgLSB0YWcgYXR0cmlidXRlcyBhcnJheVxuICovXG5mdW5jdGlvbiB1cGRhdGVPcHRzKGlzTG9vcCwgcGFyZW50LCBpc0Fub255bW91cywgb3B0cywgaW5zdEF0dHJzKSB7XG4gIC8vIGlzQW5vbnltb3VzIGBlYWNoYCB0YWdzIHRyZWF0IGBkb21gIGFuZCBgcm9vdGAgZGlmZmVyZW50bHkuIEluIHRoaXMgY2FzZVxuICAvLyAoYW5kIG9ubHkgdGhpcyBjYXNlKSB3ZSBkb24ndCBuZWVkIHRvIGRvIHVwZGF0ZU9wdHMsIGJlY2F1c2UgdGhlIHJlZ3VsYXIgcGFyc2VcbiAgLy8gd2lsbCB1cGRhdGUgdGhvc2UgYXR0cnMuIFBsdXMsIGlzQW5vbnltb3VzIHRhZ3MgZG9uJ3QgbmVlZCBvcHRzIGFueXdheVxuICBpZiAoaXNMb29wICYmIGlzQW5vbnltb3VzKSB7IHJldHVybiB9XG4gIHZhciBjdHggPSBpc0xvb3AgPyBpbmhlcml0UGFyZW50UHJvcHMuY2FsbCh0aGlzKSA6IHBhcmVudCB8fCB0aGlzO1xuXG4gIGVhY2goaW5zdEF0dHJzLCBmdW5jdGlvbiAoYXR0cikge1xuICAgIGlmIChhdHRyLmV4cHIpIHsgdXBkYXRlRXhwcmVzc2lvbi5jYWxsKGN0eCwgYXR0ci5leHByKTsgfVxuICAgIC8vIG5vcm1hbGl6ZSB0aGUgYXR0cmlidXRlIG5hbWVzXG4gICAgb3B0c1t0b0NhbWVsKGF0dHIubmFtZSkucmVwbGFjZShBVFRSU19QUkVGSVgsICcnKV0gPSBhdHRyLmV4cHIgPyBhdHRyLmV4cHIudmFsdWUgOiBhdHRyLnZhbHVlO1xuICB9KTtcbn1cblxuLyoqXG4gKiBNYW5hZ2UgdGhlIG1vdW50IHN0YXRlIG9mIGEgdGFnIHRyaWdnZXJpbmcgYWxzbyB0aGUgb2JzZXJ2YWJsZSBldmVudHNcbiAqIEB0aGlzIFRhZ1xuICogQHBhcmFtIHsgQm9vbGVhbiB9IHZhbHVlIC0gLi5vZiB0aGUgaXNNb3VudGVkIGZsYWdcbiAqL1xuZnVuY3Rpb24gc2V0TW91bnRTdGF0ZSh2YWx1ZSkge1xuICB2YXIgcmVmID0gdGhpcy5fXztcbiAgdmFyIGlzQW5vbnltb3VzID0gcmVmLmlzQW5vbnltb3VzO1xuXG4gIGRlZmluZVByb3BlcnR5KHRoaXMsICdpc01vdW50ZWQnLCB2YWx1ZSk7XG5cbiAgaWYgKCFpc0Fub255bW91cykge1xuICAgIGlmICh2YWx1ZSkgeyB0aGlzLnRyaWdnZXIoJ21vdW50Jyk7IH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMudHJpZ2dlcigndW5tb3VudCcpO1xuICAgICAgdGhpcy5vZmYoJyonKTtcbiAgICAgIHRoaXMuX18ud2FzQ3JlYXRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuXG5cbi8qKlxuICogVGFnIGNyZWF0aW9uIGZhY3RvcnkgZnVuY3Rpb25cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHsgT2JqZWN0IH0gaW1wbCAtIGl0IGNvbnRhaW5zIHRoZSB0YWcgdGVtcGxhdGUsIGFuZCBsb2dpY1xuICogQHBhcmFtIHsgT2JqZWN0IH0gY29uZiAtIHRhZyBvcHRpb25zXG4gKiBAcGFyYW0geyBTdHJpbmcgfSBpbm5lckhUTUwgLSBodG1sIHRoYXQgZXZlbnR1YWxseSB3ZSBuZWVkIHRvIGluamVjdCBpbiB0aGUgdGFnXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRhZyhpbXBsLCBjb25mLCBpbm5lckhUTUwpIHtcbiAgaWYgKCBpbXBsID09PSB2b2lkIDAgKSBpbXBsID0ge307XG4gIGlmICggY29uZiA9PT0gdm9pZCAwICkgY29uZiA9IHt9O1xuXG4gIHZhciB0YWcgPSBjb25mLmNvbnRleHQgfHwge307XG4gIHZhciBvcHRzID0gZXh0ZW5kKHt9LCBjb25mLm9wdHMpO1xuICB2YXIgcGFyZW50ID0gY29uZi5wYXJlbnQ7XG4gIHZhciBpc0xvb3AgPSBjb25mLmlzTG9vcDtcbiAgdmFyIGlzQW5vbnltb3VzID0gISFjb25mLmlzQW5vbnltb3VzO1xuICB2YXIgc2tpcEFub255bW91cyA9IHNldHRpbmdzJDEuc2tpcEFub255bW91c1RhZ3MgJiYgaXNBbm9ueW1vdXM7XG4gIHZhciBpdGVtID0gY29uZi5pdGVtO1xuICAvLyBhdmFpbGFibGUgb25seSBmb3IgdGhlIGxvb3BlZCBub2Rlc1xuICB2YXIgaW5kZXggPSBjb25mLmluZGV4O1xuICAvLyBBbGwgYXR0cmlidXRlcyBvbiB0aGUgVGFnIHdoZW4gaXQncyBmaXJzdCBwYXJzZWRcbiAgdmFyIGluc3RBdHRycyA9IFtdO1xuICAvLyBleHByZXNzaW9ucyBvbiB0aGlzIHR5cGUgb2YgVGFnXG4gIHZhciBpbXBsQXR0cnMgPSBbXTtcbiAgdmFyIGV4cHJlc3Npb25zID0gW107XG4gIHZhciByb290ID0gY29uZi5yb290O1xuICB2YXIgdGFnTmFtZSA9IGNvbmYudGFnTmFtZSB8fCBnZXRUYWdOYW1lKHJvb3QpO1xuICB2YXIgaXNWaXJ0dWFsID0gdGFnTmFtZSA9PT0gJ3ZpcnR1YWwnO1xuICB2YXIgaXNJbmxpbmUgPSAhaXNWaXJ0dWFsICYmICFpbXBsLnRtcGw7XG4gIHZhciBkb207XG5cbiAgLy8gbWFrZSB0aGlzIHRhZyBvYnNlcnZhYmxlXG4gIGlmICghc2tpcEFub255bW91cykgeyBvYnNlcnZhYmxlJDEodGFnKTsgfVxuICAvLyBvbmx5IGNhbGwgdW5tb3VudCBpZiB3ZSBoYXZlIGEgdmFsaWQgX19UQUdfSU1QTCAoaGFzIG5hbWUgcHJvcGVydHkpXG4gIGlmIChpbXBsLm5hbWUgJiYgcm9vdC5fdGFnKSB7IHJvb3QuX3RhZy51bm1vdW50KHRydWUpOyB9XG5cbiAgLy8gbm90IHlldCBtb3VudGVkXG4gIGRlZmluZVByb3BlcnR5KHRhZywgJ2lzTW91bnRlZCcsIGZhbHNlKTtcblxuICBkZWZpbmVQcm9wZXJ0eSh0YWcsICdfXycsIHtcbiAgICBpc0Fub255bW91czogaXNBbm9ueW1vdXMsXG4gICAgaW5zdEF0dHJzOiBpbnN0QXR0cnMsXG4gICAgaW5uZXJIVE1MOiBpbm5lckhUTUwsXG4gICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgaXNMb29wOiBpc0xvb3AsXG4gICAgaXNJbmxpbmU6IGlzSW5saW5lLFxuICAgIC8vIHRhZ3MgaGF2aW5nIGV2ZW50IGxpc3RlbmVyc1xuICAgIC8vIGl0IHdvdWxkIGJlIGJldHRlciB0byB1c2Ugd2VhayBtYXBzIGhlcmUgYnV0IHdlIGNhbiBub3QgaW50cm9kdWNlIGJyZWFraW5nIGNoYW5nZXMgbm93XG4gICAgbGlzdGVuZXJzOiBbXSxcbiAgICAvLyB0aGVzZSB2YXJzIHdpbGwgYmUgbmVlZGVkIG9ubHkgZm9yIHRoZSB2aXJ0dWFsIHRhZ3NcbiAgICB2aXJ0czogW10sXG4gICAgd2FzQ3JlYXRlZDogZmFsc2UsXG4gICAgdGFpbDogbnVsbCxcbiAgICBoZWFkOiBudWxsLFxuICAgIHBhcmVudDogbnVsbCxcbiAgICBpdGVtOiBudWxsXG4gIH0pO1xuXG4gIC8vIGNyZWF0ZSBhIHVuaXF1ZSBpZCB0byB0aGlzIHRhZ1xuICAvLyBpdCBjb3VsZCBiZSBoYW5keSB0byB1c2UgaXQgYWxzbyB0byBpbXByb3ZlIHRoZSB2aXJ0dWFsIGRvbSByZW5kZXJpbmcgc3BlZWRcbiAgZGVmaW5lUHJvcGVydHkodGFnLCAnX3Jpb3RfaWQnLCB1aWQoKSk7IC8vIGJhc2UgMSBhbGxvd3MgdGVzdCAhdC5fcmlvdF9pZFxuICBkZWZpbmVQcm9wZXJ0eSh0YWcsICdyb290Jywgcm9vdCk7XG4gIGV4dGVuZCh0YWcsIHsgb3B0czogb3B0cyB9LCBpdGVtKTtcbiAgLy8gcHJvdGVjdCB0aGUgXCJ0YWdzXCIgYW5kIFwicmVmc1wiIHByb3BlcnR5IGZyb20gYmVpbmcgb3ZlcnJpZGRlblxuICBkZWZpbmVQcm9wZXJ0eSh0YWcsICdwYXJlbnQnLCBwYXJlbnQgfHwgbnVsbCk7XG4gIGRlZmluZVByb3BlcnR5KHRhZywgJ3RhZ3MnLCB7fSk7XG4gIGRlZmluZVByb3BlcnR5KHRhZywgJ3JlZnMnLCB7fSk7XG5cbiAgaWYgKGlzSW5saW5lIHx8IGlzTG9vcCAmJiBpc0Fub255bW91cykge1xuICAgIGRvbSA9IHJvb3Q7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpc1ZpcnR1YWwpIHsgcm9vdC5pbm5lckhUTUwgPSAnJzsgfVxuICAgIGRvbSA9IG1rZG9tKGltcGwudG1wbCwgaW5uZXJIVE1MLCBpc1N2Zyhyb290KSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSB0YWcgZXhwcmVzc2lvbnMgYW5kIG9wdGlvbnNcbiAgICogQHBhcmFtICAgeyAqIH0gIGRhdGEgLSBkYXRhIHdlIHdhbnQgdG8gdXNlIHRvIGV4dGVuZCB0aGUgdGFnIHByb3BlcnRpZXNcbiAgICogQHJldHVybnMgeyBUYWcgfSB0aGUgY3VycmVudCB0YWcgaW5zdGFuY2VcbiAgICovXG4gIGRlZmluZVByb3BlcnR5KHRhZywgJ3VwZGF0ZScsIGZ1bmN0aW9uIHRhZ1VwZGF0ZShkYXRhKSB7XG4gICAgdmFyIG5leHRPcHRzID0ge307XG4gICAgdmFyIGNhblRyaWdnZXIgPSB0YWcuaXNNb3VudGVkICYmICFza2lwQW5vbnltb3VzO1xuXG4gICAgLy8gaW5oZXJpdCBwcm9wZXJ0aWVzIGZyb20gdGhlIHBhcmVudCB0YWdcbiAgICBpZiAoaXNBbm9ueW1vdXMgJiYgcGFyZW50KSB7IGV4dGVuZCh0YWcsIHBhcmVudCk7IH1cbiAgICBleHRlbmQodGFnLCBkYXRhKTtcblxuICAgIHVwZGF0ZU9wdHMuYXBwbHkodGFnLCBbaXNMb29wLCBwYXJlbnQsIGlzQW5vbnltb3VzLCBuZXh0T3B0cywgaW5zdEF0dHJzXSk7XG5cbiAgICBpZiAoXG4gICAgICBjYW5UcmlnZ2VyICYmXG4gICAgICB0YWcuaXNNb3VudGVkICYmXG4gICAgICBpc0Z1bmN0aW9uKHRhZy5zaG91bGRVcGRhdGUpICYmICF0YWcuc2hvdWxkVXBkYXRlKGRhdGEsIG5leHRPcHRzKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRhZ1xuICAgIH1cblxuICAgIGV4dGVuZChvcHRzLCBuZXh0T3B0cyk7XG5cbiAgICBpZiAoY2FuVHJpZ2dlcikgeyB0YWcudHJpZ2dlcigndXBkYXRlJywgZGF0YSk7IH1cbiAgICB1cGRhdGVBbGxFeHByZXNzaW9ucy5jYWxsKHRhZywgZXhwcmVzc2lvbnMpO1xuICAgIGlmIChjYW5UcmlnZ2VyKSB7IHRhZy50cmlnZ2VyKCd1cGRhdGVkJyk7IH1cblxuICAgIHJldHVybiB0YWdcbiAgfSk7XG5cbiAgLyoqXG4gICAqIEFkZCBhIG1peGluIHRvIHRoaXMgdGFnXG4gICAqIEByZXR1cm5zIHsgVGFnIH0gdGhlIGN1cnJlbnQgdGFnIGluc3RhbmNlXG4gICAqL1xuICBkZWZpbmVQcm9wZXJ0eSh0YWcsICdtaXhpbicsIGZ1bmN0aW9uIHRhZ01peGluKCkge1xuICAgIGVhY2goYXJndW1lbnRzLCBmdW5jdGlvbiAobWl4KSB7XG4gICAgICB2YXIgaW5zdGFuY2U7XG4gICAgICB2YXIgb2JqO1xuICAgICAgdmFyIHByb3BzID0gW107XG5cbiAgICAgIC8vIHByb3BlcnRpZXMgYmxhY2tsaXN0ZWQgYW5kIHdpbGwgbm90IGJlIGJvdW5kIHRvIHRoZSB0YWcgaW5zdGFuY2VcbiAgICAgIHZhciBwcm9wc0JsYWNrbGlzdCA9IFsnaW5pdCcsICdfX3Byb3RvX18nXTtcblxuICAgICAgbWl4ID0gaXNTdHJpbmcobWl4KSA/IG1peGluJDEobWl4KSA6IG1peDtcblxuICAgICAgLy8gY2hlY2sgaWYgdGhlIG1peGluIGlzIGEgZnVuY3Rpb25cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG1peCkpIHtcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBuZXcgbWl4aW4gaW5zdGFuY2VcbiAgICAgICAgaW5zdGFuY2UgPSBuZXcgbWl4KCk7XG4gICAgICB9IGVsc2UgeyBpbnN0YW5jZSA9IG1peDsgfVxuXG4gICAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaW5zdGFuY2UpO1xuXG4gICAgICAvLyBidWlsZCBtdWx0aWxldmVsIHByb3RvdHlwZSBpbmhlcml0YW5jZSBjaGFpbiBwcm9wZXJ0eSBsaXN0XG4gICAgICBkbyB7IHByb3BzID0gcHJvcHMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaiB8fCBpbnN0YW5jZSkpOyB9XG4gICAgICB3aGlsZSAob2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaiB8fCBpbnN0YW5jZSkpXG5cbiAgICAgIC8vIGxvb3AgdGhlIGtleXMgaW4gdGhlIGZ1bmN0aW9uIHByb3RvdHlwZSBvciB0aGUgYWxsIG9iamVjdCBrZXlzXG4gICAgICBlYWNoKHByb3BzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8vIGJpbmQgbWV0aG9kcyB0byB0YWdcbiAgICAgICAgLy8gYWxsb3cgbWl4aW5zIHRvIG92ZXJyaWRlIG90aGVyIHByb3BlcnRpZXMvcGFyZW50IG1peGluc1xuICAgICAgICBpZiAoIWNvbnRhaW5zKHByb3BzQmxhY2tsaXN0LCBrZXkpKSB7XG4gICAgICAgICAgLy8gY2hlY2sgZm9yIGdldHRlcnMvc2V0dGVyc1xuICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0UHJvcERlc2NyaXB0b3IoaW5zdGFuY2UsIGtleSkgfHwgZ2V0UHJvcERlc2NyaXB0b3IocHJvdG8sIGtleSk7XG4gICAgICAgICAgdmFyIGhhc0dldHRlclNldHRlciA9IGRlc2NyaXB0b3IgJiYgKGRlc2NyaXB0b3IuZ2V0IHx8IGRlc2NyaXB0b3Iuc2V0KTtcblxuICAgICAgICAgIC8vIGFwcGx5IG1ldGhvZCBvbmx5IGlmIGl0IGRvZXMgbm90IGFscmVhZHkgZXhpc3Qgb24gdGhlIGluc3RhbmNlXG4gICAgICAgICAgaWYgKCF0YWcuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBoYXNHZXR0ZXJTZXR0ZXIpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YWcsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhZ1trZXldID0gaXNGdW5jdGlvbihpbnN0YW5jZVtrZXldKSA/XG4gICAgICAgICAgICAgIGluc3RhbmNlW2tleV0uYmluZCh0YWcpIDpcbiAgICAgICAgICAgICAgaW5zdGFuY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBpbml0IG1ldGhvZCB3aWxsIGJlIGNhbGxlZCBhdXRvbWF0aWNhbGx5XG4gICAgICBpZiAoaW5zdGFuY2UuaW5pdClcbiAgICAgICAgeyBpbnN0YW5jZS5pbml0LmJpbmQodGFnKShvcHRzKTsgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRhZ1xuICB9KTtcblxuICAvKipcbiAgICogTW91bnQgdGhlIGN1cnJlbnQgdGFnIGluc3RhbmNlXG4gICAqIEByZXR1cm5zIHsgVGFnIH0gdGhlIGN1cnJlbnQgdGFnIGluc3RhbmNlXG4gICAqL1xuICBkZWZpbmVQcm9wZXJ0eSh0YWcsICdtb3VudCcsIGZ1bmN0aW9uIHRhZ01vdW50KCkge1xuICAgIHJvb3QuX3RhZyA9IHRhZzsgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgdGFnIGp1c3QgY3JlYXRlZFxuXG4gICAgLy8gUmVhZCBhbGwgdGhlIGF0dHJzIG9uIHRoaXMgaW5zdGFuY2UuIFRoaXMgZ2l2ZSB1cyB0aGUgaW5mbyB3ZSBuZWVkIGZvciB1cGRhdGVPcHRzXG4gICAgcGFyc2VBdHRyaWJ1dGVzLmFwcGx5KHBhcmVudCwgW3Jvb3QsIHJvb3QuYXR0cmlidXRlcywgZnVuY3Rpb24gKGF0dHIsIGV4cHIpIHtcbiAgICAgIGlmICghaXNBbm9ueW1vdXMgJiYgUmVmRXhwci5pc1Byb3RvdHlwZU9mKGV4cHIpKSB7IGV4cHIudGFnID0gdGFnOyB9XG4gICAgICBhdHRyLmV4cHIgPSBleHByO1xuICAgICAgaW5zdEF0dHJzLnB1c2goYXR0cik7XG4gICAgfV0pO1xuXG4gICAgLy8gdXBkYXRlIHRoZSByb290IGFkZGluZyBjdXN0b20gYXR0cmlidXRlcyBjb21pbmcgZnJvbSB0aGUgY29tcGlsZXJcbiAgICB3YWxrQXR0cnMoaW1wbC5hdHRycywgZnVuY3Rpb24gKGssIHYpIHsgaW1wbEF0dHJzLnB1c2goe25hbWU6IGssIHZhbHVlOiB2fSk7IH0pO1xuICAgIHBhcnNlQXR0cmlidXRlcy5hcHBseSh0YWcsIFtyb290LCBpbXBsQXR0cnMsIGZ1bmN0aW9uIChhdHRyLCBleHByKSB7XG4gICAgICBpZiAoZXhwcikgeyBleHByZXNzaW9ucy5wdXNoKGV4cHIpOyB9XG4gICAgICBlbHNlIHsgc2V0QXR0cihyb290LCBhdHRyLm5hbWUsIGF0dHIudmFsdWUpOyB9XG4gICAgfV0pO1xuXG4gICAgLy8gaW5pdGlhbGlhdGlvblxuICAgIHVwZGF0ZU9wdHMuYXBwbHkodGFnLCBbaXNMb29wLCBwYXJlbnQsIGlzQW5vbnltb3VzLCBvcHRzLCBpbnN0QXR0cnNdKTtcblxuICAgIC8vIGFkZCBnbG9iYWwgbWl4aW5zXG4gICAgdmFyIGdsb2JhbE1peGluID0gbWl4aW4kMShHTE9CQUxfTUlYSU4pO1xuXG4gICAgaWYgKGdsb2JhbE1peGluICYmICFza2lwQW5vbnltb3VzKSB7XG4gICAgICBmb3IgKHZhciBpIGluIGdsb2JhbE1peGluKSB7XG4gICAgICAgIGlmIChnbG9iYWxNaXhpbi5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIHRhZy5taXhpbihnbG9iYWxNaXhpbltpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW1wbC5mbikgeyBpbXBsLmZuLmNhbGwodGFnLCBvcHRzKTsgfVxuXG4gICAgaWYgKCFza2lwQW5vbnltb3VzKSB7IHRhZy50cmlnZ2VyKCdiZWZvcmUtbW91bnQnKTsgfVxuXG4gICAgLy8gcGFyc2UgbGF5b3V0IGFmdGVyIGluaXQuIGZuIG1heSBjYWxjdWxhdGUgYXJncyBmb3IgbmVzdGVkIGN1c3RvbSB0YWdzXG4gICAgZWFjaChwYXJzZUV4cHJlc3Npb25zLmFwcGx5KHRhZywgW2RvbSwgaXNBbm9ueW1vdXNdKSwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGV4cHJlc3Npb25zLnB1c2goZSk7IH0pO1xuXG4gICAgdGFnLnVwZGF0ZShpdGVtKTtcblxuICAgIGlmICghaXNBbm9ueW1vdXMgJiYgIWlzSW5saW5lKSB7XG4gICAgICB3aGlsZSAoZG9tLmZpcnN0Q2hpbGQpIHsgcm9vdC5hcHBlbmRDaGlsZChkb20uZmlyc3RDaGlsZCk7IH1cbiAgICB9XG5cbiAgICBkZWZpbmVQcm9wZXJ0eSh0YWcsICdyb290Jywgcm9vdCk7XG5cbiAgICAvLyBpZiB3ZSBuZWVkIHRvIHdhaXQgdGhhdCB0aGUgcGFyZW50IFwibW91bnRcIiBvciBcInVwZGF0ZWRcIiBldmVudCBnZXRzIHRyaWdnZXJlZFxuICAgIGlmICghc2tpcEFub255bW91cyAmJiB0YWcucGFyZW50KSB7XG4gICAgICB2YXIgcCA9IGdldEltbWVkaWF0ZUN1c3RvbVBhcmVudFRhZyh0YWcucGFyZW50KTtcbiAgICAgIHAub25lKCFwLmlzTW91bnRlZCA/ICdtb3VudCcgOiAndXBkYXRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0TW91bnRTdGF0ZS5jYWxsKHRhZywgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gb3RoZXJ3aXNlIGl0J3Mgbm90IGEgY2hpbGQgdGFnIHdlIGNhbiB0cmlnZ2VyIGl0cyBtb3VudCBldmVudFxuICAgICAgc2V0TW91bnRTdGF0ZS5jYWxsKHRhZywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdGFnLl9fLndhc0NyZWF0ZWQgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRhZ1xuXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBVbm1vdW50IHRoZSB0YWcgaW5zdGFuY2VcbiAgICogQHBhcmFtIHsgQm9vbGVhbiB9IG11c3RLZWVwUm9vdCAtIGlmIGl0J3MgdHJ1ZSB0aGUgcm9vdCBub2RlIHdpbGwgbm90IGJlIHJlbW92ZWRcbiAgICogQHJldHVybnMgeyBUYWcgfSB0aGUgY3VycmVudCB0YWcgaW5zdGFuY2VcbiAgICovXG4gIGRlZmluZVByb3BlcnR5KHRhZywgJ3VubW91bnQnLCBmdW5jdGlvbiB0YWdVbm1vdW50KG11c3RLZWVwUm9vdCkge1xuICAgIHZhciBlbCA9IHRhZy5yb290O1xuICAgIHZhciBwID0gZWwucGFyZW50Tm9kZTtcbiAgICB2YXIgdGFnSW5kZXggPSBfX1RBR1NfQ0FDSEUuaW5kZXhPZih0YWcpO1xuXG4gICAgaWYgKCFza2lwQW5vbnltb3VzKSB7IHRhZy50cmlnZ2VyKCdiZWZvcmUtdW5tb3VudCcpOyB9XG5cbiAgICAvLyBjbGVhciBhbGwgYXR0cmlidXRlcyBjb21pbmcgZnJvbSB0aGUgbW91bnRlZCB0YWdcbiAgICB3YWxrQXR0cnMoaW1wbC5hdHRycywgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIGlmIChzdGFydHNXaXRoKG5hbWUsIEFUVFJTX1BSRUZJWCkpXG4gICAgICAgIHsgbmFtZSA9IG5hbWUuc2xpY2UoQVRUUlNfUFJFRklYLmxlbmd0aCk7IH1cblxuICAgICAgcmVtQXR0cihyb290LCBuYW1lKTtcbiAgICB9KTtcblxuICAgIC8vIHJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgIHRhZy5fXy5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZG9tKSB7XG4gICAgICBPYmplY3Qua2V5cyhkb21bUklPVF9FVkVOVFNfS0VZXSkuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgIGRvbS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZG9tW1JJT1RfRVZFTlRTX0tFWV1bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIHJlbW92ZSB0YWcgaW5zdGFuY2UgZnJvbSB0aGUgZ2xvYmFsIHRhZ3MgY2FjaGUgY29sbGVjdGlvblxuICAgIGlmICh0YWdJbmRleCAhPT0gLTEpIHsgX19UQUdTX0NBQ0hFLnNwbGljZSh0YWdJbmRleCwgMSk7IH1cblxuICAgIC8vIGNsZWFuIHVwIHRoZSBwYXJlbnQgdGFncyBvYmplY3RcbiAgICBpZiAocGFyZW50ICYmICFpc0Fub255bW91cykge1xuICAgICAgdmFyIHB0YWcgPSBnZXRJbW1lZGlhdGVDdXN0b21QYXJlbnRUYWcocGFyZW50KTtcblxuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICBPYmplY3RcbiAgICAgICAgICAua2V5cyh0YWcudGFncylcbiAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAodGFnTmFtZSkgeyByZXR1cm4gYXJyYXlpc2hSZW1vdmUocHRhZy50YWdzLCB0YWdOYW1lLCB0YWcudGFnc1t0YWdOYW1lXSk7IH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlpc2hSZW1vdmUocHRhZy50YWdzLCB0YWdOYW1lLCB0YWcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHVubW91bnQgYWxsIHRoZSB2aXJ0dWFsIGRpcmVjdGl2ZXNcbiAgICBpZiAodGFnLl9fLnZpcnRzKSB7XG4gICAgICBlYWNoKHRhZy5fXy52aXJ0cywgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgaWYgKHYucGFyZW50Tm9kZSkgeyB2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodik7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGV4cHJlc3Npb25zIHRvIHVubW91bnQgdGhlbXNlbHZlc1xuICAgIHVubW91bnRBbGwoZXhwcmVzc2lvbnMpO1xuICAgIGVhY2goaW5zdEF0dHJzLCBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5leHByICYmIGEuZXhwci51bm1vdW50ICYmIGEuZXhwci51bm1vdW50KCk7IH0pO1xuXG4gICAgLy8gY2xlYXIgdGhlIHRhZyBodG1sIGlmIGl0J3MgbmVjZXNzYXJ5XG4gICAgaWYgKG11c3RLZWVwUm9vdCkgeyBzZXRJbm5lckhUTUwoZWwsICcnKTsgfVxuICAgIC8vIG90aGVyd2lzZSBkZXRhY2ggdGhlIHJvb3QgdGFnIGZyb20gdGhlIERPTVxuICAgIGVsc2UgaWYgKHApIHsgcC5yZW1vdmVDaGlsZChlbCk7IH1cblxuICAgIC8vIGN1c3RvbSBpbnRlcm5hbCB1bm1vdW50IGZ1bmN0aW9uIHRvIGF2b2lkIHJlbHlpbmcgb24gdGhlIG9ic2VydmFibGVcbiAgICBpZiAodGFnLl9fLm9uVW5tb3VudCkgeyB0YWcuX18ub25Vbm1vdW50KCk7IH1cblxuICAgIC8vIHdlaXJkIGZpeCBmb3IgYSB3ZWlyZCBlZGdlIGNhc2UgIzI0MDkgYW5kICMyNDM2XG4gICAgLy8gc29tZSB1c2VycyBtaWdodCB1c2UgeW91ciBzb2Z0d2FyZSBub3QgYXMgeW91J3ZlIGV4cGVjdGVkXG4gICAgLy8gc28gSSBuZWVkIHRvIGFkZCB0aGVzZSBkaXJ0eSBoYWNrcyB0byBtaXRpZ2F0ZSB1bmV4cGVjdGVkIGlzc3Vlc1xuICAgIGlmICghdGFnLmlzTW91bnRlZCkgeyBzZXRNb3VudFN0YXRlLmNhbGwodGFnLCB0cnVlKTsgfVxuXG4gICAgc2V0TW91bnRTdGF0ZS5jYWxsKHRhZywgZmFsc2UpO1xuXG4gICAgZGVsZXRlIHRhZy5yb290Ll90YWc7XG5cbiAgICByZXR1cm4gdGFnXG4gIH0pO1xuXG4gIHJldHVybiB0YWdcbn1cblxuLyoqXG4gKiBEZXRlY3QgdGhlIHRhZyBpbXBsZW1lbnRhdGlvbiBieSBhIERPTSBub2RlXG4gKiBAcGFyYW0gICB7IE9iamVjdCB9IGRvbSAtIERPTSBub2RlIHdlIG5lZWQgdG8gcGFyc2UgdG8gZ2V0IGl0cyB0YWcgaW1wbGVtZW50YXRpb25cbiAqIEByZXR1cm5zIHsgT2JqZWN0IH0gaXQgcmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgaW1wbGVtZW50YXRpb24gb2YgYSBjdXN0b20gdGFnICh0ZW1wbGF0ZSBhbmQgYm9vdCBmdW5jdGlvbilcbiAqL1xuZnVuY3Rpb24gZ2V0VGFnKGRvbSkge1xuICByZXR1cm4gZG9tLnRhZ05hbWUgJiYgX19UQUdfSU1QTFtnZXRBdHRyKGRvbSwgSVNfRElSRUNUSVZFKSB8fFxuICAgIGdldEF0dHIoZG9tLCBJU19ESVJFQ1RJVkUpIHx8IGRvbS50YWdOYW1lLnRvTG93ZXJDYXNlKCldXG59XG5cbi8qKlxuICogTW92ZSB0aGUgcG9zaXRpb24gb2YgYSBjdXN0b20gdGFnIGluIGl0cyBwYXJlbnQgdGFnXG4gKiBAdGhpcyBUYWdcbiAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gdGFnTmFtZSAtIGtleSB3aGVyZSB0aGUgdGFnIHdhcyBzdG9yZWRcbiAqIEBwYXJhbSAgIHsgTnVtYmVyIH0gbmV3UG9zIC0gaW5kZXggd2hlcmUgdGhlIG5ldyB0YWcgd2lsbCBiZSBzdG9yZWRcbiAqL1xuZnVuY3Rpb24gbW92ZUNoaWxkVGFnKHRhZ05hbWUsIG5ld1Bvcykge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gIHZhciB0YWdzO1xuICAvLyBubyBwYXJlbnQgbm8gbW92ZVxuICBpZiAoIXBhcmVudCkgeyByZXR1cm4gfVxuXG4gIHRhZ3MgPSBwYXJlbnQudGFnc1t0YWdOYW1lXTtcblxuICBpZiAoaXNBcnJheSh0YWdzKSlcbiAgICB7IHRhZ3Muc3BsaWNlKG5ld1BvcywgMCwgdGFncy5zcGxpY2UodGFncy5pbmRleE9mKHRoaXMpLCAxKVswXSk7IH1cbiAgZWxzZSB7IGFycmF5aXNoQWRkKHBhcmVudC50YWdzLCB0YWdOYW1lLCB0aGlzKTsgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBjaGlsZCB0YWcgaW5jbHVkaW5nIGl0IGNvcnJlY3RseSBpbnRvIGl0cyBwYXJlbnRcbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gY2hpbGQgLSBjaGlsZCB0YWcgaW1wbGVtZW50YXRpb25cbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gb3B0cyAtIHRhZyBvcHRpb25zIGNvbnRhaW5pbmcgdGhlIERPTSBub2RlIHdoZXJlIHRoZSB0YWcgd2lsbCBiZSBtb3VudGVkXG4gKiBAcGFyYW0gICB7IFN0cmluZyB9IGlubmVySFRNTCAtIGlubmVyIGh0bWwgb2YgdGhlIGNoaWxkIG5vZGVcbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gcGFyZW50IC0gaW5zdGFuY2Ugb2YgdGhlIHBhcmVudCB0YWcgaW5jbHVkaW5nIHRoZSBjaGlsZCBjdXN0b20gdGFnXG4gKiBAcmV0dXJucyB7IE9iamVjdCB9IGluc3RhbmNlIG9mIHRoZSBuZXcgY2hpbGQgdGFnIGp1c3QgY3JlYXRlZFxuICovXG5mdW5jdGlvbiBpbml0Q2hpbGRUYWcoY2hpbGQsIG9wdHMsIGlubmVySFRNTCwgcGFyZW50KSB7XG4gIHZhciB0YWcgPSBjcmVhdGVUYWcoY2hpbGQsIG9wdHMsIGlubmVySFRNTCk7XG4gIHZhciB0YWdOYW1lID0gb3B0cy50YWdOYW1lIHx8IGdldFRhZ05hbWUob3B0cy5yb290LCB0cnVlKTtcbiAgdmFyIHB0YWcgPSBnZXRJbW1lZGlhdGVDdXN0b21QYXJlbnRUYWcocGFyZW50KTtcbiAgLy8gZml4IGZvciB0aGUgcGFyZW50IGF0dHJpYnV0ZSBpbiB0aGUgbG9vcGVkIGVsZW1lbnRzXG4gIGRlZmluZVByb3BlcnR5KHRhZywgJ3BhcmVudCcsIHB0YWcpO1xuICAvLyBzdG9yZSB0aGUgcmVhbCBwYXJlbnQgdGFnXG4gIC8vIGluIHNvbWUgY2FzZXMgdGhpcyBjb3VsZCBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgY3VzdG9tIHBhcmVudCB0YWdcbiAgLy8gZm9yIGV4YW1wbGUgaW4gbmVzdGVkIGxvb3BzXG4gIHRhZy5fXy5wYXJlbnQgPSBwYXJlbnQ7XG5cbiAgLy8gYWRkIHRoaXMgdGFnIHRvIHRoZSBjdXN0b20gcGFyZW50IHRhZ1xuICBhcnJheWlzaEFkZChwdGFnLnRhZ3MsIHRhZ05hbWUsIHRhZyk7XG5cbiAgLy8gYW5kIGFsc28gdG8gdGhlIHJlYWwgcGFyZW50IHRhZ1xuICBpZiAocHRhZyAhPT0gcGFyZW50KVxuICAgIHsgYXJyYXlpc2hBZGQocGFyZW50LnRhZ3MsIHRhZ05hbWUsIHRhZyk7IH1cblxuICByZXR1cm4gdGFnXG59XG5cbi8qKlxuICogTG9vcCBiYWNrd2FyZCBhbGwgdGhlIHBhcmVudHMgdHJlZSB0byBkZXRlY3QgdGhlIGZpcnN0IGN1c3RvbSBwYXJlbnQgdGFnXG4gKiBAcGFyYW0gICB7IE9iamVjdCB9IHRhZyAtIGEgVGFnIGluc3RhbmNlXG4gKiBAcmV0dXJucyB7IE9iamVjdCB9IHRoZSBpbnN0YW5jZSBvZiB0aGUgZmlyc3QgY3VzdG9tIHBhcmVudCB0YWcgZm91bmRcbiAqL1xuZnVuY3Rpb24gZ2V0SW1tZWRpYXRlQ3VzdG9tUGFyZW50VGFnKHRhZykge1xuICB2YXIgcHRhZyA9IHRhZztcbiAgd2hpbGUgKHB0YWcuX18uaXNBbm9ueW1vdXMpIHtcbiAgICBpZiAoIXB0YWcucGFyZW50KSB7IGJyZWFrIH1cbiAgICBwdGFnID0gcHRhZy5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIHB0YWdcbn1cblxuLyoqXG4gKiBUcmlnZ2VyIHRoZSB1bm1vdW50IG1ldGhvZCBvbiBhbGwgdGhlIGV4cHJlc3Npb25zXG4gKiBAcGFyYW0gICB7IEFycmF5IH0gZXhwcmVzc2lvbnMgLSBET00gZXhwcmVzc2lvbnNcbiAqL1xuZnVuY3Rpb24gdW5tb3VudEFsbChleHByZXNzaW9ucykge1xuICBlYWNoKGV4cHJlc3Npb25zLCBmdW5jdGlvbiAoZXhwcikge1xuICAgIGlmIChleHByLnVubW91bnQpIHsgZXhwci51bm1vdW50KHRydWUpOyB9XG4gICAgZWxzZSBpZiAoZXhwci50YWdOYW1lKSB7IGV4cHIudGFnLnVubW91bnQodHJ1ZSk7IH1cbiAgICBlbHNlIGlmIChleHByLnVubW91bnQpIHsgZXhwci51bm1vdW50KCk7IH1cbiAgfSk7XG59XG5cbi8qKlxuICogR2V0IHRoZSB0YWcgbmFtZSBvZiBhbnkgRE9NIG5vZGVcbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gZG9tIC0gRE9NIG5vZGUgd2Ugd2FudCB0byBwYXJzZVxuICogQHBhcmFtICAgeyBCb29sZWFuIH0gc2tpcERhdGFJcyAtIGhhY2sgdG8gaWdub3JlIHRoZSBkYXRhLWlzIGF0dHJpYnV0ZSB3aGVuIGF0dGFjaGluZyB0byBwYXJlbnRcbiAqIEByZXR1cm5zIHsgU3RyaW5nIH0gbmFtZSB0byBpZGVudGlmeSB0aGlzIGRvbSBub2RlIGluIHJpb3RcbiAqL1xuZnVuY3Rpb24gZ2V0VGFnTmFtZShkb20sIHNraXBEYXRhSXMpIHtcbiAgdmFyIGNoaWxkID0gZ2V0VGFnKGRvbSk7XG4gIHZhciBuYW1lZFRhZyA9ICFza2lwRGF0YUlzICYmIGdldEF0dHIoZG9tLCBJU19ESVJFQ1RJVkUpO1xuICByZXR1cm4gbmFtZWRUYWcgJiYgIXRtcGwuaGFzRXhwcihuYW1lZFRhZykgP1xuICAgIG5hbWVkVGFnIDogY2hpbGQgPyBjaGlsZC5uYW1lIDogZG9tLnRhZ05hbWUudG9Mb3dlckNhc2UoKVxufVxuXG4vKipcbiAqIFNldCB0aGUgcHJvcGVydHkgb2YgYW4gb2JqZWN0IGZvciBhIGdpdmVuIGtleS4gSWYgc29tZXRoaW5nIGFscmVhZHlcbiAqIGV4aXN0cyB0aGVyZSwgdGhlbiBpdCBiZWNvbWVzIGFuIGFycmF5IGNvbnRhaW5pbmcgYm90aCB0aGUgb2xkIGFuZCBuZXcgdmFsdWUuXG4gKiBAcGFyYW0geyBPYmplY3QgfSBvYmogLSBvYmplY3Qgb24gd2hpY2ggdG8gc2V0IHRoZSBwcm9wZXJ0eVxuICogQHBhcmFtIHsgU3RyaW5nIH0ga2V5IC0gcHJvcGVydHkgbmFtZVxuICogQHBhcmFtIHsgT2JqZWN0IH0gdmFsdWUgLSB0aGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5IHRvIGJlIHNldFxuICogQHBhcmFtIHsgQm9vbGVhbiB9IGVuc3VyZUFycmF5IC0gZW5zdXJlIHRoYXQgdGhlIHByb3BlcnR5IHJlbWFpbnMgYW4gYXJyYXlcbiAqIEBwYXJhbSB7IE51bWJlciB9IGluZGV4IC0gYWRkIHRoZSBuZXcgaXRlbSBpbiBhIGNlcnRhaW4gYXJyYXkgcG9zaXRpb25cbiAqL1xuZnVuY3Rpb24gYXJyYXlpc2hBZGQob2JqLCBrZXksIHZhbHVlLCBlbnN1cmVBcnJheSwgaW5kZXgpIHtcbiAgdmFyIGRlc3QgPSBvYmpba2V5XTtcbiAgdmFyIGlzQXJyID0gaXNBcnJheShkZXN0KTtcbiAgdmFyIGhhc0luZGV4ID0gIWlzVW5kZWZpbmVkKGluZGV4KTtcblxuICBpZiAoZGVzdCAmJiBkZXN0ID09PSB2YWx1ZSkgeyByZXR1cm4gfVxuXG4gIC8vIGlmIHRoZSBrZXkgd2FzIG5ldmVyIHNldCwgc2V0IGl0IG9uY2VcbiAgaWYgKCFkZXN0ICYmIGVuc3VyZUFycmF5KSB7IG9ialtrZXldID0gW3ZhbHVlXTsgfVxuICBlbHNlIGlmICghZGVzdCkgeyBvYmpba2V5XSA9IHZhbHVlOyB9XG4gIC8vIGlmIGl0IHdhcyBhbiBhcnJheSBhbmQgbm90IHlldCBzZXRcbiAgZWxzZSB7XG4gICAgaWYgKGlzQXJyKSB7XG4gICAgICB2YXIgb2xkSW5kZXggPSBkZXN0LmluZGV4T2YodmFsdWUpO1xuICAgICAgLy8gdGhpcyBpdGVtIG5ldmVyIGNoYW5nZWQgaXRzIHBvc2l0aW9uXG4gICAgICBpZiAob2xkSW5kZXggPT09IGluZGV4KSB7IHJldHVybiB9XG4gICAgICAvLyByZW1vdmUgdGhlIGl0ZW0gZnJvbSBpdHMgb2xkIHBvc2l0aW9uXG4gICAgICBpZiAob2xkSW5kZXggIT09IC0xKSB7IGRlc3Quc3BsaWNlKG9sZEluZGV4LCAxKTsgfVxuICAgICAgLy8gbW92ZSBvciBhZGQgdGhlIGl0ZW1cbiAgICAgIGlmIChoYXNJbmRleCkge1xuICAgICAgICBkZXN0LnNwbGljZShpbmRleCwgMCwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgeyBvYmpba2V5XSA9IFtkZXN0LCB2YWx1ZV07IH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYW4gaXRlbSBmcm9tIGFuIG9iamVjdCBhdCBhIGdpdmVuIGtleS4gSWYgdGhlIGtleSBwb2ludHMgdG8gYW4gYXJyYXksXG4gKiB0aGVuIHRoZSBpdGVtIGlzIGp1c3QgcmVtb3ZlZCBmcm9tIHRoZSBhcnJheS5cbiAqIEBwYXJhbSB7IE9iamVjdCB9IG9iaiAtIG9iamVjdCBvbiB3aGljaCB0byByZW1vdmUgdGhlIHByb3BlcnR5XG4gKiBAcGFyYW0geyBTdHJpbmcgfSBrZXkgLSBwcm9wZXJ0eSBuYW1lXG4gKiBAcGFyYW0geyBPYmplY3QgfSB2YWx1ZSAtIHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgdG8gYmUgcmVtb3ZlZFxuICogQHBhcmFtIHsgQm9vbGVhbiB9IGVuc3VyZUFycmF5IC0gZW5zdXJlIHRoYXQgdGhlIHByb3BlcnR5IHJlbWFpbnMgYW4gYXJyYXlcbiovXG5mdW5jdGlvbiBhcnJheWlzaFJlbW92ZShvYmosIGtleSwgdmFsdWUsIGVuc3VyZUFycmF5KSB7XG4gIGlmIChpc0FycmF5KG9ialtrZXldKSkge1xuICAgIHZhciBpbmRleCA9IG9ialtrZXldLmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHsgb2JqW2tleV0uc3BsaWNlKGluZGV4LCAxKTsgfVxuICAgIGlmICghb2JqW2tleV0ubGVuZ3RoKSB7IGRlbGV0ZSBvYmpba2V5XTsgfVxuICAgIGVsc2UgaWYgKG9ialtrZXldLmxlbmd0aCA9PT0gMSAmJiAhZW5zdXJlQXJyYXkpIHsgb2JqW2tleV0gPSBvYmpba2V5XVswXTsgfVxuICB9IGVsc2UgaWYgKG9ialtrZXldID09PSB2YWx1ZSlcbiAgICB7IGRlbGV0ZSBvYmpba2V5XTsgfSAvLyBvdGhlcndpc2UganVzdCBkZWxldGUgdGhlIGtleVxufVxuXG4vKipcbiAqIE1vdW50IGEgdGFnIGNyZWF0aW5nIG5ldyBUYWcgaW5zdGFuY2VcbiAqIEBwYXJhbSAgIHsgT2JqZWN0IH0gcm9vdCAtIGRvbSBub2RlIHdoZXJlIHRoZSB0YWcgd2lsbCBiZSBtb3VudGVkXG4gKiBAcGFyYW0gICB7IFN0cmluZyB9IHRhZ05hbWUgLSBuYW1lIG9mIHRoZSByaW90IHRhZyB3ZSB3YW50IHRvIG1vdW50XG4gKiBAcGFyYW0gICB7IE9iamVjdCB9IG9wdHMgLSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIFRhZyBpbnN0YW5jZVxuICogQHBhcmFtICAgeyBPYmplY3QgfSBjdHggLSBvcHRpb25hbCBjb250ZXh0IHRoYXQgd2lsbCBiZSB1c2VkIHRvIGV4dGVuZCBhbiBleGlzdGluZyBjbGFzcyAoIHVzZWQgaW4gcmlvdC5UYWcgKVxuICogQHJldHVybnMgeyBUYWcgfSBhIG5ldyBUYWcgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gbW91bnRUbyhyb290LCB0YWdOYW1lLCBvcHRzLCBjdHgpIHtcbiAgdmFyIGltcGwgPSBfX1RBR19JTVBMW3RhZ05hbWVdO1xuICB2YXIgaW1wbENsYXNzID0gX19UQUdfSU1QTFt0YWdOYW1lXS5jbGFzcztcbiAgdmFyIGNvbnRleHQgPSBjdHggfHwgKGltcGxDbGFzcyA/IE9iamVjdC5jcmVhdGUoaW1wbENsYXNzLnByb3RvdHlwZSkgOiB7fSk7XG4gIC8vIGNhY2hlIHRoZSBpbm5lciBIVE1MIHRvIGZpeCAjODU1XG4gIHZhciBpbm5lckhUTUwgPSByb290Ll9pbm5lckhUTUwgPSByb290Ll9pbm5lckhUTUwgfHwgcm9vdC5pbm5lckhUTUw7XG4gIHZhciBjb25mID0gZXh0ZW5kKHsgcm9vdDogcm9vdCwgb3B0czogb3B0cywgY29udGV4dDogY29udGV4dCB9LCB7IHBhcmVudDogb3B0cyA/IG9wdHMucGFyZW50IDogbnVsbCB9KTtcbiAgdmFyIHRhZztcblxuICBpZiAoaW1wbCAmJiByb290KSB7IHRhZyA9IGNyZWF0ZVRhZyhpbXBsLCBjb25mLCBpbm5lckhUTUwpOyB9XG5cbiAgaWYgKHRhZyAmJiB0YWcubW91bnQpIHtcbiAgICB0YWcubW91bnQodHJ1ZSk7XG4gICAgLy8gYWRkIHRoaXMgdGFnIHRvIHRoZSB2aXJ0dWFsRG9tIHZhcmlhYmxlXG4gICAgaWYgKCFjb250YWlucyhfX1RBR1NfQ0FDSEUsIHRhZykpIHsgX19UQUdTX0NBQ0hFLnB1c2godGFnKTsgfVxuICB9XG5cbiAgcmV0dXJuIHRhZ1xufVxuXG4vKipcbiAqIG1ha2VzIGEgdGFnIHZpcnR1YWwgYW5kIHJlcGxhY2VzIGEgcmVmZXJlbmNlIGluIHRoZSBkb21cbiAqIEB0aGlzIFRhZ1xuICogQHBhcmFtIHsgdGFnIH0gdGhlIHRhZyB0byBtYWtlIHZpcnR1YWxcbiAqIEBwYXJhbSB7IHJlZiB9IHRoZSBkb20gcmVmZXJlbmNlIGxvY2F0aW9uXG4gKi9cbmZ1bmN0aW9uIG1ha2VSZXBsYWNlVmlydHVhbCh0YWcsIHJlZikge1xuICB2YXIgZnJhZyA9IGNyZWF0ZUZyYWcoKTtcbiAgbWFrZVZpcnR1YWwuY2FsbCh0YWcsIGZyYWcpO1xuICByZWYucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoZnJhZywgcmVmKTtcbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBlbGVtZW50cyBmb3IgYSB2aXJ0dWFsIHRhZ1xuICogQHRoaXMgVGFnXG4gKiBAcGFyYW0geyBOb2RlIH0gc3JjIC0gdGhlIG5vZGUgdGhhdCB3aWxsIGRvIHRoZSBpbnNlcnRpbmcgb3IgYXBwZW5kaW5nXG4gKiBAcGFyYW0geyBUYWcgfSB0YXJnZXQgLSBvbmx5IGlmIGluc2VydGluZywgaW5zZXJ0IGJlZm9yZSB0aGlzIHRhZydzIGZpcnN0IGNoaWxkXG4gKi9cbmZ1bmN0aW9uIG1ha2VWaXJ0dWFsKHNyYywgdGFyZ2V0KSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBoZWFkID0gY3JlYXRlRE9NUGxhY2Vob2xkZXIoKTtcbiAgdmFyIHRhaWwgPSBjcmVhdGVET01QbGFjZWhvbGRlcigpO1xuICB2YXIgZnJhZyA9IGNyZWF0ZUZyYWcoKTtcbiAgdmFyIHNpYjtcbiAgdmFyIGVsO1xuXG4gIHRoaXMucm9vdC5pbnNlcnRCZWZvcmUoaGVhZCwgdGhpcy5yb290LmZpcnN0Q2hpbGQpO1xuICB0aGlzLnJvb3QuYXBwZW5kQ2hpbGQodGFpbCk7XG5cbiAgdGhpcy5fXy5oZWFkID0gZWwgPSBoZWFkO1xuICB0aGlzLl9fLnRhaWwgPSB0YWlsO1xuXG4gIHdoaWxlIChlbCkge1xuICAgIHNpYiA9IGVsLm5leHRTaWJsaW5nO1xuICAgIGZyYWcuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIHRoaXMkMS5fXy52aXJ0cy5wdXNoKGVsKTsgLy8gaG9sZCBmb3IgdW5tb3VudGluZ1xuICAgIGVsID0gc2liO1xuICB9XG5cbiAgaWYgKHRhcmdldClcbiAgICB7IHNyYy5pbnNlcnRCZWZvcmUoZnJhZywgdGFyZ2V0Ll9fLmhlYWQpOyB9XG4gIGVsc2VcbiAgICB7IHNyYy5hcHBlbmRDaGlsZChmcmFnKTsgfVxufVxuXG4vKipcbiAqIFJldHVybiBhIHRlbXBvcmFyeSBjb250ZXh0IGNvbnRhaW5pbmcgYWxzbyB0aGUgcGFyZW50IHByb3BlcnRpZXNcbiAqIEB0aGlzIFRhZ1xuICogQHBhcmFtIHsgVGFnIH0gLSB0ZW1wb3JhcnkgdGFnIGNvbnRleHQgY29udGFpbmluZyBhbGwgdGhlIHBhcmVudCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGluaGVyaXRQYXJlbnRQcm9wcygpIHtcbiAgaWYgKHRoaXMucGFyZW50KSB7IHJldHVybiBleHRlbmQoT2JqZWN0LmNyZWF0ZSh0aGlzKSwgdGhpcy5wYXJlbnQpIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBNb3ZlIHZpcnR1YWwgdGFnIGFuZCBhbGwgY2hpbGQgbm9kZXNcbiAqIEB0aGlzIFRhZ1xuICogQHBhcmFtIHsgTm9kZSB9IHNyYyAgLSB0aGUgbm9kZSB0aGF0IHdpbGwgZG8gdGhlIGluc2VydGluZ1xuICogQHBhcmFtIHsgVGFnIH0gdGFyZ2V0IC0gaW5zZXJ0IGJlZm9yZSB0aGlzIHRhZydzIGZpcnN0IGNoaWxkXG4gKi9cbmZ1bmN0aW9uIG1vdmVWaXJ0dWFsKHNyYywgdGFyZ2V0KSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBlbCA9IHRoaXMuX18uaGVhZDtcbiAgdmFyIHNpYjtcbiAgdmFyIGZyYWcgPSBjcmVhdGVGcmFnKCk7XG5cbiAgd2hpbGUgKGVsKSB7XG4gICAgc2liID0gZWwubmV4dFNpYmxpbmc7XG4gICAgZnJhZy5hcHBlbmRDaGlsZChlbCk7XG4gICAgZWwgPSBzaWI7XG4gICAgaWYgKGVsID09PSB0aGlzJDEuX18udGFpbCkge1xuICAgICAgZnJhZy5hcHBlbmRDaGlsZChlbCk7XG4gICAgICBzcmMuaW5zZXJ0QmVmb3JlKGZyYWcsIHRhcmdldC5fXy5oZWFkKTtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogR2V0IHNlbGVjdG9ycyBmb3IgdGFnc1xuICogQHBhcmFtICAgeyBBcnJheSB9IHRhZ3MgLSB0YWcgbmFtZXMgdG8gc2VsZWN0XG4gKiBAcmV0dXJucyB7IFN0cmluZyB9IHNlbGVjdG9yXG4gKi9cbmZ1bmN0aW9uIHNlbGVjdFRhZ3ModGFncykge1xuICAvLyBzZWxlY3QgYWxsIHRhZ3NcbiAgaWYgKCF0YWdzKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhfX1RBR19JTVBMKTtcbiAgICByZXR1cm4ga2V5cyArIHNlbGVjdFRhZ3Moa2V5cylcbiAgfVxuXG4gIHJldHVybiB0YWdzXG4gICAgLmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gIS9bXi1cXHddLy50ZXN0KHQpOyB9KVxuICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGxpc3QsIHQpIHtcbiAgICAgIHZhciBuYW1lID0gdC50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiBsaXN0ICsgXCIsW1wiICsgSVNfRElSRUNUSVZFICsgXCI9XFxcIlwiICsgbmFtZSArIFwiXFxcIl1cIlxuICAgIH0sICcnKVxufVxuXG5cbnZhciB0YWdzID0gT2JqZWN0LmZyZWV6ZSh7XG5cdGdldFRhZzogZ2V0VGFnLFxuXHRtb3ZlQ2hpbGRUYWc6IG1vdmVDaGlsZFRhZyxcblx0aW5pdENoaWxkVGFnOiBpbml0Q2hpbGRUYWcsXG5cdGdldEltbWVkaWF0ZUN1c3RvbVBhcmVudFRhZzogZ2V0SW1tZWRpYXRlQ3VzdG9tUGFyZW50VGFnLFxuXHR1bm1vdW50QWxsOiB1bm1vdW50QWxsLFxuXHRnZXRUYWdOYW1lOiBnZXRUYWdOYW1lLFxuXHRhcnJheWlzaEFkZDogYXJyYXlpc2hBZGQsXG5cdGFycmF5aXNoUmVtb3ZlOiBhcnJheWlzaFJlbW92ZSxcblx0bW91bnRUbzogbW91bnRUbyxcblx0bWFrZVJlcGxhY2VWaXJ0dWFsOiBtYWtlUmVwbGFjZVZpcnR1YWwsXG5cdG1ha2VWaXJ0dWFsOiBtYWtlVmlydHVhbCxcblx0aW5oZXJpdFBhcmVudFByb3BzOiBpbmhlcml0UGFyZW50UHJvcHMsXG5cdG1vdmVWaXJ0dWFsOiBtb3ZlVmlydHVhbCxcblx0c2VsZWN0VGFnczogc2VsZWN0VGFnc1xufSk7XG5cbi8qKlxuICogUmlvdCBwdWJsaWMgYXBpXG4gKi9cbnZhciBzZXR0aW5ncyA9IHNldHRpbmdzJDE7XG52YXIgdXRpbCA9IHtcbiAgdG1wbDogdG1wbCxcbiAgYnJhY2tldHM6IGJyYWNrZXRzLFxuICBzdHlsZU1hbmFnZXI6IHN0eWxlTWFuYWdlcixcbiAgdmRvbTogX19UQUdTX0NBQ0hFLFxuICBzdHlsZU5vZGU6IHN0eWxlTWFuYWdlci5zdHlsZU5vZGUsXG4gIC8vIGV4cG9ydCB0aGUgcmlvdCBpbnRlcm5hbCB1dGlscyBhcyB3ZWxsXG4gIGRvbTogZG9tLFxuICBjaGVjazogY2hlY2ssXG4gIG1pc2M6IG1pc2MsXG4gIHRhZ3M6IHRhZ3Ncbn07XG5cbi8vIGV4cG9ydCB0aGUgY29yZSBwcm9wcy9tZXRob2RzXG52YXIgVGFnID0gVGFnJDE7XG52YXIgdGFnID0gdGFnJDE7XG52YXIgdGFnMiA9IHRhZzIkMTtcbnZhciBtb3VudCA9IG1vdW50JDE7XG52YXIgbWl4aW4gPSBtaXhpbiQxO1xudmFyIHVwZGF0ZSA9IHVwZGF0ZSQxO1xudmFyIHVucmVnaXN0ZXIgPSB1bnJlZ2lzdGVyJDE7XG52YXIgdmVyc2lvbiA9IHZlcnNpb24kMTtcbnZhciBvYnNlcnZhYmxlID0gb2JzZXJ2YWJsZSQxO1xuXG52YXIgcmlvdCQxID0gZXh0ZW5kKHt9LCBjb3JlLCB7XG4gIG9ic2VydmFibGU6IG9ic2VydmFibGUkMSxcbiAgc2V0dGluZ3M6IHNldHRpbmdzLFxuICB1dGlsOiB1dGlsLFxufSk7XG5cbmV4cG9ydHMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbmV4cG9ydHMudXRpbCA9IHV0aWw7XG5leHBvcnRzLlRhZyA9IFRhZztcbmV4cG9ydHMudGFnID0gdGFnO1xuZXhwb3J0cy50YWcyID0gdGFnMjtcbmV4cG9ydHMubW91bnQgPSBtb3VudDtcbmV4cG9ydHMubWl4aW4gPSBtaXhpbjtcbmV4cG9ydHMudXBkYXRlID0gdXBkYXRlO1xuZXhwb3J0cy51bnJlZ2lzdGVyID0gdW5yZWdpc3RlcjtcbmV4cG9ydHMudmVyc2lvbiA9IHZlcnNpb247XG5leHBvcnRzLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlO1xuZXhwb3J0c1snZGVmYXVsdCddID0gcmlvdCQxO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsIHtcblx0c3RhdGljIGluaXQoKSB7XG5cdFx0d2luZG93LnNjcm9sbHMgPSBbXVxuXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsICgpID0+IHtcblx0XHRcdGNvbnN0IHBvc1kgPSB3aW5kb3cucGFnZVlPZmZzZXRcblx0XHRcdGNvbnN0IHBhdGggPSB3aW5kb3cubG9jYXRpb24uaGFzaFxuXHRcdFx0d2luZG93LnNjcm9sbHNbYCR7cGF0aH1gXSA9IHBvc1lcblx0XHR9KVxuXHR9XG5cdHN0YXRpYyBtb3ZlKCkge1xuXHRcdGNvbnN0IHBhdGggPSB3aW5kb3cubG9jYXRpb24uaGFzaFxuXG5cdFx0aWYgKHdpbmRvdy5zY3JvbGxzW2Ake3BhdGh9YF0pIHdpbmRvdy5zY3JvbGwoMCwgMClcblx0XHRlbHNlIHdpbmRvdy5zY3JvbGwoMCwgd2luZG93LnNjcm9sbHNbYCR7cGF0aH1gXSlcblx0fVxufVxuIiwid2VicFxuXHRwaWN0dXJlXG5cdFx0c291cmNlKHNyY3NldD0ncmVzb3VyY2VzL3tvcHRzLnNyY3x8b3B0cy5yaW90U3JjfS53ZWJwJyB0eXBlPVwiaW1hZ2Uvd2VicFwiKVxuXHRcdHNvdXJjZShzcmNzZXQ9J3Jlc291cmNlcy97b3B0cy5zcmN8fG9wdHMucmlvdFNyY30ucG5nJyB0eXBlPVwiaW1hZ2UvcG5nXCIpXG5cdFx0aW1nKHNyYz0ncmVzb3VyY2VzL3tvcHRzLnNyY3x8b3B0cy5yaW90U3JjfS53ZWJwJylcblxuXHRzdHlsZSh0eXBlPSdzY3NzJykuXG5cdFx0OnNjb3BlIHtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0PiBwaWN0dXJlIHtcblx0XHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdFx0PiBpbWcge1xuXHRcdFx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdHNjcmlwdC5cblx0XHR0aGlzLm9uKCdtb3VudGVkJywgKCkgPT4ge1xuXHRcdFx0Y29uc29sZS5sb2codGhpcy5vcHRzKVxuXHRcdH0pIiwiOyhmdW5jdGlvbih3aW5kb3csIHVuZGVmaW5lZCkge3ZhciBvYnNlcnZhYmxlID0gZnVuY3Rpb24oZWwpIHtcblxuICAvKipcbiAgICogRXh0ZW5kIHRoZSBvcmlnaW5hbCBvYmplY3Qgb3IgY3JlYXRlIGEgbmV3IGVtcHR5IG9uZVxuICAgKiBAdHlwZSB7IE9iamVjdCB9XG4gICAqL1xuXG4gIGVsID0gZWwgfHwge31cblxuICAvKipcbiAgICogUHJpdmF0ZSB2YXJpYWJsZXNcbiAgICovXG4gIHZhciBjYWxsYmFja3MgPSB7fSxcbiAgICBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgQXBpXG4gICAqL1xuXG4gIC8vIGV4dGVuZCB0aGUgZWwgb2JqZWN0IGFkZGluZyB0aGUgb2JzZXJ2YWJsZSBtZXRob2RzXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGVsLCB7XG4gICAgLyoqXG4gICAgICogTGlzdGVuIHRvIHRoZSBnaXZlbiBgZXZlbnRgIGFuZHNcbiAgICAgKiBleGVjdXRlIHRoZSBgY2FsbGJhY2tgIGVhY2ggdGltZSBhbiBldmVudCBpcyB0cmlnZ2VyZWQuXG4gICAgICogQHBhcmFtICB7IFN0cmluZyB9IGV2ZW50IC0gZXZlbnQgaWRcbiAgICAgKiBAcGFyYW0gIHsgRnVuY3Rpb24gfSBmbiAtIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMgeyBPYmplY3QgfSBlbFxuICAgICAqL1xuICAgIG9uOiB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oZXZlbnQsIGZuKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAoY2FsbGJhY2tzW2V2ZW50XSA9IGNhbGxiYWNrc1tldmVudF0gfHwgW10pLnB1c2goZm4pXG4gICAgICAgIHJldHVybiBlbFxuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBgZXZlbnRgIGxpc3RlbmVyc1xuICAgICAqIEBwYXJhbSAgIHsgU3RyaW5nIH0gZXZlbnQgLSBldmVudCBpZFxuICAgICAqIEBwYXJhbSAgIHsgRnVuY3Rpb24gfSBmbiAtIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMgeyBPYmplY3QgfSBlbFxuICAgICAqL1xuICAgIG9mZjoge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKGV2ZW50LCBmbikge1xuICAgICAgICBpZiAoZXZlbnQgPT0gJyonICYmICFmbikgY2FsbGJhY2tzID0ge31cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICB2YXIgYXJyID0gY2FsbGJhY2tzW2V2ZW50XVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNiOyBjYiA9IGFyciAmJiBhcnJbaV07ICsraSkge1xuICAgICAgICAgICAgICBpZiAoY2IgPT0gZm4pIGFyci5zcGxpY2UoaS0tLCAxKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBkZWxldGUgY2FsbGJhY2tzW2V2ZW50XVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbFxuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMaXN0ZW4gdG8gdGhlIGdpdmVuIGBldmVudGAgYW5kXG4gICAgICogZXhlY3V0ZSB0aGUgYGNhbGxiYWNrYCBhdCBtb3N0IG9uY2VcbiAgICAgKiBAcGFyYW0gICB7IFN0cmluZyB9IGV2ZW50IC0gZXZlbnQgaWRcbiAgICAgKiBAcGFyYW0gICB7IEZ1bmN0aW9uIH0gZm4gLSBjYWxsYmFjayBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIHsgT2JqZWN0IH0gZWxcbiAgICAgKi9cbiAgICBvbmU6IHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihldmVudCwgZm4pIHtcbiAgICAgICAgZnVuY3Rpb24gb24oKSB7XG4gICAgICAgICAgZWwub2ZmKGV2ZW50LCBvbilcbiAgICAgICAgICBmbi5hcHBseShlbCwgYXJndW1lbnRzKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbC5vbihldmVudCwgb24pXG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgYWxsIGNhbGxiYWNrIGZ1bmN0aW9ucyB0aGF0IGxpc3RlbiB0b1xuICAgICAqIHRoZSBnaXZlbiBgZXZlbnRgXG4gICAgICogQHBhcmFtICAgeyBTdHJpbmcgfSBldmVudCAtIGV2ZW50IGlkXG4gICAgICogQHJldHVybnMgeyBPYmplY3QgfSBlbFxuICAgICAqL1xuICAgIHRyaWdnZXI6IHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIC8vIGdldHRpbmcgdGhlIGFyZ3VtZW50c1xuICAgICAgICB2YXIgYXJnbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgYXJncyA9IG5ldyBBcnJheShhcmdsZW4pLFxuICAgICAgICAgIGZucyxcbiAgICAgICAgICBmbixcbiAgICAgICAgICBpXG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ2xlbjsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV0gLy8gc2tpcCBmaXJzdCBhcmd1bWVudFxuICAgICAgICB9XG5cbiAgICAgICAgZm5zID0gc2xpY2UuY2FsbChjYWxsYmFja3NbZXZlbnRdIHx8IFtdLCAwKVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGZuID0gZm5zW2ldOyArK2kpIHtcbiAgICAgICAgICBmbi5hcHBseShlbCwgYXJncylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWxsYmFja3NbJyonXSAmJiBldmVudCAhPSAnKicpXG4gICAgICAgICAgZWwudHJpZ2dlci5hcHBseShlbCwgWycqJywgZXZlbnRdLmNvbmNhdChhcmdzKSlcblxuICAgICAgICByZXR1cm4gZWxcbiAgICAgIH0sXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIGVsXG5cbn1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgLy8gc3VwcG9ydCBDb21tb25KUywgQU1EICYgYnJvd3NlclxuICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuICAgIG1vZHVsZS5leHBvcnRzID0gb2JzZXJ2YWJsZVxuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gb2JzZXJ2YWJsZSB9KVxuICBlbHNlXG4gICAgd2luZG93Lm9ic2VydmFibGUgPSBvYnNlcnZhYmxlXG5cbn0pKHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB1bmRlZmluZWQpOyIsImltcG9ydCBvYnNlcnZhYmxlIGZyb20gJ3Jpb3Qtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogU2ltcGxlIGNsaWVudC1zaWRlIHJvdXRlclxuICogQG1vZHVsZSByaW90LXJvdXRlXG4gKi9cblxudmFyIFJFX09SSUdJTiA9IC9eLis/XFwvXFwvK1teL10rLztcbnZhciBFVkVOVF9MSVNURU5FUiA9ICdFdmVudExpc3RlbmVyJztcbnZhciBSRU1PVkVfRVZFTlRfTElTVEVORVIgPSAncmVtb3ZlJyArIEVWRU5UX0xJU1RFTkVSO1xudmFyIEFERF9FVkVOVF9MSVNURU5FUiA9ICdhZGQnICsgRVZFTlRfTElTVEVORVI7XG52YXIgSEFTX0FUVFJJQlVURSA9ICdoYXNBdHRyaWJ1dGUnO1xudmFyIFBPUFNUQVRFID0gJ3BvcHN0YXRlJztcbnZhciBIQVNIQ0hBTkdFID0gJ2hhc2hjaGFuZ2UnO1xudmFyIFRSSUdHRVIgPSAndHJpZ2dlcic7XG52YXIgTUFYX0VNSVRfU1RBQ0tfTEVWRUwgPSAzO1xudmFyIHdpbiA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93O1xudmFyIGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudDtcbnZhciBoaXN0ID0gd2luICYmIGhpc3Rvcnk7XG52YXIgbG9jID0gd2luICYmIChoaXN0LmxvY2F0aW9uIHx8IHdpbi5sb2NhdGlvbik7XG52YXIgcHJvdCA9IFJvdXRlci5wcm90b3R5cGU7XG52YXIgY2xpY2tFdmVudCA9IGRvYyAmJiBkb2Mub250b3VjaHN0YXJ0ID8gJ3RvdWNoc3RhcnQnIDogJ2NsaWNrJztcbnZhciBjZW50cmFsID0gb2JzZXJ2YWJsZSgpO1xuXG52YXIgc3RhcnRlZCA9IGZhbHNlO1xudmFyIHJvdXRlRm91bmQgPSBmYWxzZTtcbnZhciBkZWJvdW5jZWRFbWl0O1xudmFyIGJhc2U7XG52YXIgY3VycmVudDtcbnZhciBwYXJzZXI7XG52YXIgc2Vjb25kUGFyc2VyO1xudmFyIGVtaXRTdGFjayA9IFtdO1xudmFyIGVtaXRTdGFja0xldmVsID0gMDtcblxuLyoqXG4gKiBEZWZhdWx0IHBhcnNlci4gWW91IGNhbiByZXBsYWNlIGl0IHZpYSByb3V0ZXIucGFyc2VyIG1ldGhvZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gY3VycmVudCBwYXRoIChub3JtYWxpemVkKVxuICogQHJldHVybnMge2FycmF5fSBhcnJheVxuICovXG5mdW5jdGlvbiBERUZBVUxUX1BBUlNFUihwYXRoKSB7XG4gIHJldHVybiBwYXRoLnNwbGl0KC9bLz8jXS8pXG59XG5cbi8qKlxuICogRGVmYXVsdCBwYXJzZXIgKHNlY29uZCkuIFlvdSBjYW4gcmVwbGFjZSBpdCB2aWEgcm91dGVyLnBhcnNlciBtZXRob2QuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIGN1cnJlbnQgcGF0aCAobm9ybWFsaXplZClcbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWx0ZXIgLSBmaWx0ZXIgc3RyaW5nIChub3JtYWxpemVkKVxuICogQHJldHVybnMge2FycmF5fSBhcnJheVxuICovXG5mdW5jdGlvbiBERUZBVUxUX1NFQ09ORF9QQVJTRVIocGF0aCwgZmlsdGVyKSB7XG4gIHZhciBmID0gZmlsdGVyXG4gICAgLnJlcGxhY2UoL1xcPy9nLCAnXFxcXD8nKVxuICAgIC5yZXBsYWNlKC9cXCovZywgJyhbXi8/I10rPyknKVxuICAgIC5yZXBsYWNlKC9cXC5cXC4vLCAnLionKTtcbiAgdmFyIHJlID0gbmV3IFJlZ0V4cCgoXCJeXCIgKyBmICsgXCIkXCIpKTtcbiAgdmFyIGFyZ3MgPSBwYXRoLm1hdGNoKHJlKTtcblxuICBpZiAoYXJncykgeyByZXR1cm4gYXJncy5zbGljZSgxKSB9XG59XG5cbi8qKlxuICogU2ltcGxlL2NoZWFwIGRlYm91bmNlIGltcGxlbWVudGF0aW9uXG4gKiBAcGFyYW0gICB7ZnVuY3Rpb259IGZuIC0gY2FsbGJhY2tcbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGRlbGF5IC0gZGVsYXkgaW4gc2Vjb25kc1xuICogQHJldHVybnMge2Z1bmN0aW9ufSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZm4sIGRlbGF5KSB7XG4gIHZhciB0O1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGNsZWFyVGltZW91dCh0KTtcbiAgICB0ID0gc2V0VGltZW91dChmbiwgZGVsYXkpO1xuICB9XG59XG5cbi8qKlxuICogU2V0IHRoZSB3aW5kb3cgbGlzdGVuZXJzIHRvIHRyaWdnZXIgdGhlIHJvdXRlc1xuICogQHBhcmFtIHtib29sZWFufSBhdXRvRXhlYyAtIHNlZSByb3V0ZS5zdGFydFxuICovXG5mdW5jdGlvbiBzdGFydChhdXRvRXhlYykge1xuICBkZWJvdW5jZWRFbWl0ID0gZGVib3VuY2UoZW1pdCwgMSk7XG4gIHdpbltBRERfRVZFTlRfTElTVEVORVJdKFBPUFNUQVRFLCBkZWJvdW5jZWRFbWl0KTtcbiAgd2luW0FERF9FVkVOVF9MSVNURU5FUl0oSEFTSENIQU5HRSwgZGVib3VuY2VkRW1pdCk7XG4gIGRvY1tBRERfRVZFTlRfTElTVEVORVJdKGNsaWNrRXZlbnQsIGNsaWNrKTtcbiAgaWYgKGF1dG9FeGVjKSB7IGVtaXQodHJ1ZSk7IH1cbn1cblxuLyoqXG4gKiBSb3V0ZXIgY2xhc3NcbiAqL1xuZnVuY3Rpb24gUm91dGVyKCkge1xuICB0aGlzLiQgPSBbXTtcbiAgb2JzZXJ2YWJsZSh0aGlzKTsgLy8gbWFrZSBpdCBvYnNlcnZhYmxlXG4gIGNlbnRyYWwub24oJ3N0b3AnLCB0aGlzLnMuYmluZCh0aGlzKSk7XG4gIGNlbnRyYWwub24oJ2VtaXQnLCB0aGlzLmUuYmluZCh0aGlzKSk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlcGxhY2UoL15cXC98XFwvJC8sICcnKVxufVxuXG5mdW5jdGlvbiBpc1N0cmluZyhzdHIpIHtcbiAgcmV0dXJuIHR5cGVvZiBzdHIgPT0gJ3N0cmluZydcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHBhcnQgYWZ0ZXIgZG9tYWluIG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBocmVmIC0gZnVsbHBhdGhcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHBhdGggZnJvbSByb290XG4gKi9cbmZ1bmN0aW9uIGdldFBhdGhGcm9tUm9vdChocmVmKSB7XG4gIHJldHVybiAoaHJlZiB8fCBsb2MuaHJlZikucmVwbGFjZShSRV9PUklHSU4sICcnKVxufVxuXG4vKipcbiAqIEdldCB0aGUgcGFydCBhZnRlciBiYXNlXG4gKiBAcGFyYW0ge3N0cmluZ30gaHJlZiAtIGZ1bGxwYXRoXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBwYXRoIGZyb20gYmFzZVxuICovXG5mdW5jdGlvbiBnZXRQYXRoRnJvbUJhc2UoaHJlZikge1xuICByZXR1cm4gYmFzZVswXSA9PT0gJyMnXG4gICAgPyAoaHJlZiB8fCBsb2MuaHJlZiB8fCAnJykuc3BsaXQoYmFzZSlbMV0gfHwgJydcbiAgICA6IChsb2MgPyBnZXRQYXRoRnJvbVJvb3QoaHJlZikgOiBocmVmIHx8ICcnKS5yZXBsYWNlKGJhc2UsICcnKVxufVxuXG5mdW5jdGlvbiBlbWl0KGZvcmNlKSB7XG4gIC8vIHRoZSBzdGFjayBpcyBuZWVkZWQgZm9yIHJlZGlyZWN0aW9uc1xuICB2YXIgaXNSb290ID0gZW1pdFN0YWNrTGV2ZWwgPT09IDA7XG4gIGlmIChNQVhfRU1JVF9TVEFDS19MRVZFTCA8PSBlbWl0U3RhY2tMZXZlbCkgeyByZXR1cm4gfVxuXG4gIGVtaXRTdGFja0xldmVsKys7XG4gIGVtaXRTdGFjay5wdXNoKGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZ2V0UGF0aEZyb21CYXNlKCk7XG4gICAgaWYgKGZvcmNlIHx8IHBhdGggIT09IGN1cnJlbnQpIHtcbiAgICAgIGNlbnRyYWxbVFJJR0dFUl0oJ2VtaXQnLCBwYXRoKTtcbiAgICAgIGN1cnJlbnQgPSBwYXRoO1xuICAgIH1cbiAgfSk7XG4gIGlmIChpc1Jvb3QpIHtcbiAgICB2YXIgZmlyc3Q7XG4gICAgd2hpbGUgKGZpcnN0ID0gZW1pdFN0YWNrLnNoaWZ0KCkpIHsgZmlyc3QoKTsgfSAvLyBzdGFjayBpbmNyZXNlcyB3aXRoaW4gdGhpcyBjYWxsXG4gICAgZW1pdFN0YWNrTGV2ZWwgPSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsaWNrKGUpIHtcbiAgaWYgKFxuICAgIGUud2hpY2ggIT09IDEgLy8gbm90IGxlZnQgY2xpY2tcbiAgICB8fCBlLm1ldGFLZXkgfHwgZS5jdHJsS2V5IHx8IGUuc2hpZnRLZXkgLy8gb3IgbWV0YSBrZXlzXG4gICAgfHwgZS5kZWZhdWx0UHJldmVudGVkIC8vIG9yIGRlZmF1bHQgcHJldmVudGVkXG4gICkgeyByZXR1cm4gfVxuXG4gIHZhciBlbCA9IGUudGFyZ2V0O1xuICB3aGlsZSAoZWwgJiYgZWwubm9kZU5hbWUgIT09ICdBJykgeyBlbCA9IGVsLnBhcmVudE5vZGU7IH1cblxuICBpZiAoXG4gICAgIWVsIHx8IGVsLm5vZGVOYW1lICE9PSAnQScgLy8gbm90IEEgdGFnXG4gICAgfHwgZWxbSEFTX0FUVFJJQlVURV0oJ2Rvd25sb2FkJykgLy8gaGFzIGRvd25sb2FkIGF0dHJcbiAgICB8fCAhZWxbSEFTX0FUVFJJQlVURV0oJ2hyZWYnKSAvLyBoYXMgbm8gaHJlZiBhdHRyXG4gICAgfHwgZWwudGFyZ2V0ICYmIGVsLnRhcmdldCAhPT0gJ19zZWxmJyAvLyBhbm90aGVyIHdpbmRvdyBvciBmcmFtZVxuICAgIHx8IGVsLmhyZWYuaW5kZXhPZihsb2MuaHJlZi5tYXRjaChSRV9PUklHSU4pWzBdKSA9PT0gLTEgLy8gY3Jvc3Mgb3JpZ2luXG4gICkgeyByZXR1cm4gfVxuXG4gIGlmIChlbC5ocmVmICE9PSBsb2MuaHJlZlxuICAgICYmIChcbiAgICAgIGVsLmhyZWYuc3BsaXQoJyMnKVswXSA9PT0gbG9jLmhyZWYuc3BsaXQoJyMnKVswXSAvLyBpbnRlcm5hbCBqdW1wXG4gICAgICB8fCBiYXNlWzBdICE9PSAnIycgJiYgZ2V0UGF0aEZyb21Sb290KGVsLmhyZWYpLmluZGV4T2YoYmFzZSkgIT09IDAgLy8gb3V0c2lkZSBvZiBiYXNlXG4gICAgICB8fCBiYXNlWzBdID09PSAnIycgJiYgZWwuaHJlZi5zcGxpdChiYXNlKVswXSAhPT0gbG9jLmhyZWYuc3BsaXQoYmFzZSlbMF0gLy8gb3V0c2lkZSBvZiAjYmFzZVxuICAgICAgfHwgIWdvKGdldFBhdGhGcm9tQmFzZShlbC5ocmVmKSwgZWwudGl0bGUgfHwgZG9jLnRpdGxlKSAvLyByb3V0ZSBub3QgZm91bmRcbiAgICApKSB7IHJldHVybiB9XG5cbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufVxuXG4vKipcbiAqIEdvIHRvIHRoZSBwYXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIGRlc3RpbmF0aW9uIHBhdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aXRsZSAtIHBhZ2UgdGl0bGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2hvdWxkUmVwbGFjZSAtIHVzZSByZXBsYWNlU3RhdGUgb3IgcHVzaFN0YXRlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSByb3V0ZSBub3QgZm91bmQgZmxhZ1xuICovXG5mdW5jdGlvbiBnbyhwYXRoLCB0aXRsZSwgc2hvdWxkUmVwbGFjZSkge1xuICAvLyBTZXJ2ZXItc2lkZSB1c2FnZTogZGlyZWN0bHkgZXhlY3V0ZSBoYW5kbGVycyBmb3IgdGhlIHBhdGhcbiAgaWYgKCFoaXN0KSB7IHJldHVybiBjZW50cmFsW1RSSUdHRVJdKCdlbWl0JywgZ2V0UGF0aEZyb21CYXNlKHBhdGgpKSB9XG5cbiAgcGF0aCA9IGJhc2UgKyBub3JtYWxpemUocGF0aCk7XG4gIHRpdGxlID0gdGl0bGUgfHwgZG9jLnRpdGxlO1xuICAvLyBicm93c2VycyBpZ25vcmVzIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGB0aXRsZWBcbiAgc2hvdWxkUmVwbGFjZVxuICAgID8gaGlzdC5yZXBsYWNlU3RhdGUobnVsbCwgdGl0bGUsIHBhdGgpXG4gICAgOiBoaXN0LnB1c2hTdGF0ZShudWxsLCB0aXRsZSwgcGF0aCk7XG4gIC8vIHNvIHdlIG5lZWQgdG8gc2V0IGl0IG1hbnVhbGx5XG4gIGRvYy50aXRsZSA9IHRpdGxlO1xuICByb3V0ZUZvdW5kID0gZmFsc2U7XG4gIGVtaXQoKTtcbiAgcmV0dXJuIHJvdXRlRm91bmRcbn1cblxuLyoqXG4gKiBHbyB0byBwYXRoIG9yIHNldCBhY3Rpb25cbiAqIGEgc2luZ2xlIHN0cmluZzogICAgICAgICAgICAgICAgZ28gdGhlcmVcbiAqIHR3byBzdHJpbmdzOiAgICAgICAgICAgICAgICAgICAgZ28gdGhlcmUgd2l0aCBzZXR0aW5nIGEgdGl0bGVcbiAqIHR3byBzdHJpbmdzIGFuZCBib29sZWFuOiAgICAgICAgcmVwbGFjZSBoaXN0b3J5IHdpdGggc2V0dGluZyBhIHRpdGxlXG4gKiBhIHNpbmdsZSBmdW5jdGlvbjogICAgICAgICAgICAgIHNldCBhbiBhY3Rpb24gb24gdGhlIGRlZmF1bHQgcm91dGVcbiAqIGEgc3RyaW5nL1JlZ0V4cCBhbmQgYSBmdW5jdGlvbjogc2V0IGFuIGFjdGlvbiBvbiB0aGUgcm91dGVcbiAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbil9IGZpcnN0IC0gcGF0aCAvIGFjdGlvbiAvIGZpbHRlclxuICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cHxmdW5jdGlvbil9IHNlY29uZCAtIHRpdGxlIC8gYWN0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHRoaXJkIC0gcmVwbGFjZSBmbGFnXG4gKi9cbnByb3QubSA9IGZ1bmN0aW9uKGZpcnN0LCBzZWNvbmQsIHRoaXJkKSB7XG4gIGlmIChpc1N0cmluZyhmaXJzdCkgJiYgKCFzZWNvbmQgfHwgaXNTdHJpbmcoc2Vjb25kKSkpIHsgZ28oZmlyc3QsIHNlY29uZCwgdGhpcmQgfHwgZmFsc2UpOyB9XG4gIGVsc2UgaWYgKHNlY29uZCkgeyB0aGlzLnIoZmlyc3QsIHNlY29uZCk7IH1cbiAgZWxzZSB7IHRoaXMucignQCcsIGZpcnN0KTsgfVxufTtcblxuLyoqXG4gKiBTdG9wIHJvdXRpbmdcbiAqL1xucHJvdC5zID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMub2ZmKCcqJyk7XG4gIHRoaXMuJCA9IFtdO1xufTtcblxuLyoqXG4gKiBFbWl0XG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIHBhdGhcbiAqL1xucHJvdC5lID0gZnVuY3Rpb24ocGF0aCkge1xuICB0aGlzLiQuY29uY2F0KCdAJykuc29tZShmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICB2YXIgYXJncyA9IChmaWx0ZXIgPT09ICdAJyA/IHBhcnNlciA6IHNlY29uZFBhcnNlcikobm9ybWFsaXplKHBhdGgpLCBub3JtYWxpemUoZmlsdGVyKSk7XG4gICAgaWYgKHR5cGVvZiBhcmdzICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzW1RSSUdHRVJdLmFwcGx5KG51bGwsIFtmaWx0ZXJdLmNvbmNhdChhcmdzKSk7XG4gICAgICByZXR1cm4gcm91dGVGb3VuZCA9IHRydWUgLy8gZXhpdCBmcm9tIGxvb3BcbiAgICB9XG4gIH0sIHRoaXMpO1xufTtcblxuLyoqXG4gKiBSZWdpc3RlciByb3V0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGZpbHRlciAtIGZpbHRlciBmb3IgbWF0Y2hpbmcgdG8gdXJsXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBhY3Rpb24gLSBhY3Rpb24gdG8gcmVnaXN0ZXJcbiAqL1xucHJvdC5yID0gZnVuY3Rpb24oZmlsdGVyLCBhY3Rpb24pIHtcbiAgaWYgKGZpbHRlciAhPT0gJ0AnKSB7XG4gICAgZmlsdGVyID0gJy8nICsgbm9ybWFsaXplKGZpbHRlcik7XG4gICAgdGhpcy4kLnB1c2goZmlsdGVyKTtcbiAgfVxuICB0aGlzLm9uKGZpbHRlciwgYWN0aW9uKTtcbn07XG5cbnZhciBtYWluUm91dGVyID0gbmV3IFJvdXRlcigpO1xudmFyIHJvdXRlID0gbWFpblJvdXRlci5tLmJpbmQobWFpblJvdXRlcik7XG5cbi8qKlxuICogQ3JlYXRlIGEgc3ViIHJvdXRlclxuICogQHJldHVybnMge2Z1bmN0aW9ufSB0aGUgbWV0aG9kIG9mIGEgbmV3IFJvdXRlciBvYmplY3RcbiAqL1xucm91dGUuY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBuZXdTdWJSb3V0ZXIgPSBuZXcgUm91dGVyKCk7XG4gIC8vIGFzc2lnbiBzdWItcm91dGVyJ3MgbWFpbiBtZXRob2RcbiAgdmFyIHJvdXRlciA9IG5ld1N1YlJvdXRlci5tLmJpbmQobmV3U3ViUm91dGVyKTtcbiAgLy8gc3RvcCBvbmx5IHRoaXMgc3ViLXJvdXRlclxuICByb3V0ZXIuc3RvcCA9IG5ld1N1YlJvdXRlci5zLmJpbmQobmV3U3ViUm91dGVyKTtcbiAgcmV0dXJuIHJvdXRlclxufTtcblxuLyoqXG4gKiBTZXQgdGhlIGJhc2Ugb2YgdXJsXG4gKiBAcGFyYW0geyhzdHJ8UmVnRXhwKX0gYXJnIC0gYSBuZXcgYmFzZSBvciAnIycgb3IgJyMhJ1xuICovXG5yb3V0ZS5iYXNlID0gZnVuY3Rpb24oYXJnKSB7XG4gIGJhc2UgPSBhcmcgfHwgJyMnO1xuICBjdXJyZW50ID0gZ2V0UGF0aEZyb21CYXNlKCk7IC8vIHJlY2FsY3VsYXRlIGN1cnJlbnQgcGF0aFxufTtcblxuLyoqIEV4ZWMgcm91dGluZyByaWdodCBub3cgKiovXG5yb3V0ZS5leGVjID0gZnVuY3Rpb24oKSB7XG4gIGVtaXQodHJ1ZSk7XG59O1xuXG4vKipcbiAqIFJlcGxhY2UgdGhlIGRlZmF1bHQgcm91dGVyIHRvIHlvdXJzXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbiAtIHlvdXIgcGFyc2VyIGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmbjIgLSB5b3VyIHNlY29uZFBhcnNlciBmdW5jdGlvblxuICovXG5yb3V0ZS5wYXJzZXIgPSBmdW5jdGlvbihmbiwgZm4yKSB7XG4gIGlmICghZm4gJiYgIWZuMikge1xuICAgIC8vIHJlc2V0IHBhcnNlciBmb3IgdGVzdGluZy4uLlxuICAgIHBhcnNlciA9IERFRkFVTFRfUEFSU0VSO1xuICAgIHNlY29uZFBhcnNlciA9IERFRkFVTFRfU0VDT05EX1BBUlNFUjtcbiAgfVxuICBpZiAoZm4pIHsgcGFyc2VyID0gZm47IH1cbiAgaWYgKGZuMikgeyBzZWNvbmRQYXJzZXIgPSBmbjI7IH1cbn07XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGdldCB1cmwgcXVlcnkgYXMgYW4gb2JqZWN0XG4gKiBAcmV0dXJucyB7b2JqZWN0fSBwYXJzZWQgcXVlcnlcbiAqL1xucm91dGUucXVlcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHEgPSB7fTtcbiAgdmFyIGhyZWYgPSBsb2MuaHJlZiB8fCBjdXJyZW50O1xuICBocmVmLnJlcGxhY2UoL1s/Jl0oLis/KT0oW14mXSopL2csIGZ1bmN0aW9uKF8sIGssIHYpIHsgcVtrXSA9IHY7IH0pO1xuICByZXR1cm4gcVxufTtcblxuLyoqIFN0b3Agcm91dGluZyAqKi9cbnJvdXRlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChzdGFydGVkKSB7XG4gICAgaWYgKHdpbikge1xuICAgICAgd2luW1JFTU9WRV9FVkVOVF9MSVNURU5FUl0oUE9QU1RBVEUsIGRlYm91bmNlZEVtaXQpO1xuICAgICAgd2luW1JFTU9WRV9FVkVOVF9MSVNURU5FUl0oSEFTSENIQU5HRSwgZGVib3VuY2VkRW1pdCk7XG4gICAgICBkb2NbUkVNT1ZFX0VWRU5UX0xJU1RFTkVSXShjbGlja0V2ZW50LCBjbGljayk7XG4gICAgfVxuICAgIGNlbnRyYWxbVFJJR0dFUl0oJ3N0b3AnKTtcbiAgICBzdGFydGVkID0gZmFsc2U7XG4gIH1cbn07XG5cbi8qKlxuICogU3RhcnQgcm91dGluZ1xuICogQHBhcmFtIHtib29sZWFufSBhdXRvRXhlYyAtIGF1dG9tYXRpY2FsbHkgZXhlYyBhZnRlciBzdGFydGluZyBpZiB0cnVlXG4gKi9cbnJvdXRlLnN0YXJ0ID0gZnVuY3Rpb24gKGF1dG9FeGVjKSB7XG4gIGlmICghc3RhcnRlZCkge1xuICAgIGlmICh3aW4pIHtcbiAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnaW50ZXJhY3RpdmUnIHx8IGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgc3RhcnQoYXV0b0V4ZWMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGRvY3VtZW50Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2ludGVyYWN0aXZlJykge1xuICAgICAgICAgICAgLy8gdGhlIHRpbWVvdXQgaXMgbmVlZGVkIHRvIHNvbHZlXG4gICAgICAgICAgICAvLyBhIHdlaXJkIHNhZmFyaSBidWcgaHR0cHM6Ly9naXRodWIuY29tL3Jpb3Qvcm91dGUvaXNzdWVzLzMzXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzdGFydChhdXRvRXhlYyk7IH0sIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhcnRlZCA9IHRydWU7XG4gIH1cbn07XG5cbi8qKiBQcmVwYXJlIHRoZSByb3V0ZXIgKiovXG5yb3V0ZS5iYXNlKCk7XG5yb3V0ZS5wYXJzZXIoKTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGU7XG4iLCJpbXBvcnQgcm91dGUgZnJvbSAncmlvdC1yb3V0ZSc7XG5pbXBvcnQgcmlvdCBmcm9tICdyaW90JztcblxucmlvdC50YWcyKCdyb3V0ZXInLCAnPHlpZWxkPjwveWllbGQ+JywgJycsICcnLCBmdW5jdGlvbihvcHRzKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cblxuICAgIHRoaXMucm91dGUgPSByb3V0ZS5jcmVhdGUoKTtcbiAgICB0aGlzLnNlbGVjdCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIFtdLmNvbmNhdCh0aGlzJDEudGFncy5yb3V0ZSlcbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuc2hvdyA9IChyID09PSB0YXJnZXQpOyB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5vbignbW91bnQnLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJvdXRlLnN0YXJ0KHRydWUpOyB9LCAwKTtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ3VubW91bnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzJDEucm91dGUuc3RvcCgpO1xuICAgIH0pO1xufSk7XG5cbnJpb3QudGFnMigncm91dGUnLCAnPHZpcnR1YWwgaWY9XCJ7c2hvd31cIj48eWllbGQ+PC95aWVsZD48L3ZpcnR1YWw+JywgJycsICcnLCBmdW5jdGlvbihvcHRzKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLnNob3cgPSBmYWxzZTtcbiAgICB0aGlzLnBhcmVudC5yb3V0ZShvcHRzLnBhdGgsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG5cbiAgICAgIHRoaXMkMS5vbmUoJ3VwZGF0ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZsYXR0ZW4odGhpcyQxLnRhZ3MpLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAgIHRhZy50cmlnZ2VyLmFwcGx5KHRhZywgWyAncm91dGUnIF0uY29uY2F0KCBhcmdzICkpO1xuICAgICAgICAgIHRhZy51cGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMkMS5wYXJlbnQuc2VsZWN0KHRoaXMkMSk7XG4gICAgICB0aGlzJDEucGFyZW50LnVwZGF0ZSgpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZmxhdHRlbih0YWdzKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGFncylcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB0YWdzW2tleV07IH0pXG4gICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgdGFnKSB7IHJldHVybiBhY2MuY29uY2F0KHRhZyk7IH0sIFtdKVxuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByb3V0ZTtcbiIsImNvbnN0IHByb2plY3RzQXJyYXkgPSBbXG5cdHtcblx0XHRuYW1lOiAnU2Vuc29yUGlwZScsXG5cdFx0c3ViOiAnUEPjgajjgrnjg57jg5vjgpLpgKPmkLrjgZXjgZvjgovjg5fjg63jgrDjg6njg5/jg7PjgrDjgpLmlK/mj7TjgZnjgovjgrnjg57jg5vjgqLjg5fjg6onLFxuXHRcdGltZzogJ3Byb2plY3QtU2Vuc29yUGlwZS0xNi05Jyxcblx0XHRjYXRlZ29yeTogJ0FuZHJvaWQnLFxuXHRcdHZpZGVvOiAnZ3dLeVBxdDJrZDgnLFxuXHRcdHRleHQ6XG5cdFx0XHQn44K544Oe44O844OI44OV44Kp44Oz44Gu44K744Oz44K15oOF5aCx44GoUEPjgpLpgKPmkLrjgZXjgZvjgZ/jg5fjg63jgrDjg6njg5/jg7PjgrDjgpLlrp/nj77jgZnjgovjgavjga/lj4zmlrnjgafjga7jgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PplovnmbrjgYzlv4XopoHjgajjgarjgorjgIHoo73kvZzmmYLplpPjgYzjgYvjgYvjgovkuIrjgavjg4/jg7zjg4njg6vjgYzpq5jjgYTjgoLjga7jgafjgYLjgaPjgZ/jgILjgZPjgozjgpLop6PmsbrjgZnjgovjgZ/jgoHjgIHjgrnjg57jg7zjg4jjg5Xjgqnjg7Pjga7lkITnqK7jgrvjg7PjgrXmg4XloLHjgpJQQ+OBq+mAgeS/oeOBl+e2muOBkeOAgVBD5YG044GL44KJ44KC44K544Oe44O844OI44OV44Kp44Oz44Gr44OQ44Kk44OW44Os44O844K344On44Oz44KE44Km44Kn44OW44K144Kk44OI6KGo56S644Gq44Gp44Gu5omA5a6a44Gu5YuV5L2c44KS44GV44Gb44KL5LqL44GM44Gn44GN44KL44Ki44OX44Oq44Kx44O844K344On44Oz44KS6ZaL55m644GX44Gf44CC44GT44KM44Gr44KI44KK44CB44OX44Ot44Kw44Op44Oe44Gv44K544Oe44O844OI44OV44Kp44Oz5YG044Gu44OX44Ot44Kw44Op44Of44Oz44Kw44KS5LiA5YiH6KGM44KP44Ga44Gr44CBUEPjgafjga7jgrvjg7PjgrXmg4XloLHjgpLnlKjjgYTjgZ/jg5fjg63jgrDjg6njg5/jg7PjgrDjgpLooYzjgYbjgZPjgajjgYzjgafjgY3jgovjgIJXSVNTMjAxNeOBp+eZuuihqOOAgicsXG5cdFx0aW1wbGVtZW50OlxuXHRcdFx0J0FuZHJvaWTjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PjgajjgZfjgablrp/oo4XjgIJQQ+OBqOOCueODnuODvOODiOODleOCqeODs+OCkuWQjOOBmFdpLUZp44Gr5o6l57aa5b6M44CBVURQ6YCa5L+h44KS56K656uL44GZ44KL44GT44Go44Gr44KI44Gj44Gm44OH44O844K/44Gu6YCB5Y+X5L+h44KS6KGM44GG44CC44Ki44OX44Oq44Kx44O844K344On44Oz44Gv44OQ44OD44Kv44Kw44Op44Km44Oz44OJ44Gn5YuV5L2c44GZ44KL44CCUEPlgbTjgafliKnnlKjjgZnjgovjgajjgY3jga/lr77lv5zjgZnjgotQcm9jZXNzaW5n55So44Gu44Op44Kk44OW44Op44Oq44KS5Yip55So5Y+v6IO944CCJyxcblx0XHRrZXl3b3JkczogW1xuXHRcdFx0J0FuZHJvaWQnLFxuXHRcdFx0J1Byb2dyYW1taW5nIEV4cGVyaWVuY2UoUFgpJyxcblx0XHRcdCdVRFAnLFxuXHRcdFx0J2Nvb3BlcmF0aW9uIHByb2dyYW1taW5nJyxcblx0XHRcdCdzZW5zb3InXG5cdFx0XSxcblx0XHRsaW5rczoge1xuXHRcdFx044OX44Ot44K444Kn44Kv44OI44Oa44O844K4OiAnaHR0cHM6Ly9yZXNlYXJjaC5taXlhc2hpdGEuY29tLzIwMTUvRDE2MC8nXG5cdFx0fVxuXHR9LFxuXHR7XG5cdFx0bmFtZTogJ01pZGRsZURyaXZlJyxcblx0XHRzdWI6ICdCbHVldG9vdGjpgJrkv6HjgavjgojjgovjgqLjg4njg5vjg4Pjgq/lnovjg4njgq3jg6Xjg6Hjg7Pjg4jlhbHlkIznt6jpm4bjgqLjg5fjg6onLFxuXHRcdGltZzogJ3Byb2plY3QtTWlkZGxlRHJpdmUtMTYtOScsXG5cdFx0Y2F0ZWdvcnk6ICdXZWInLFxuXHRcdHZpZGVvOiAndlBBWHJsS0dlQzgnLFxuXHRcdHRleHQ6XG5cdFx0XHQn5Lya6K2w44KS6KGM44GG6Zqb44Gr44Gd44Gu5YaF5a6544KS6KSH5pWw5Lq644Gn44Km44Kn44OW5LiK44Gu44OJ44Kt44Ol44Oh44Oz44OI44Gr5pu444GN5Ye644GZ44GT44Go44Gn6KiY6Yyy44KS44Go44Gj44Gf44KK44CB6K2w6aGM44Gu5pW055CG44KS44GX44Gf44KK44GZ44KL44GT44Go44GM5aSa44GP44GC44KL44CC44GX44GL44GX44CBV2ktRmnjga7pm7vms6LjgYzjgarjgYTloLTmiYDjgafjga/jgZPjgozjgonjga7jgojjgYbjgarjgqbjgqfjg5bjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7Pjga/liKnnlKjjgZnjgovjgZPjgajjgYzjgafjgY3jgarjgYTjgILjgZ3jgZPjgafjgIFXaS1GaeOBquOBqeOBruODjeODg+ODiOODr+ODvOOCr+eSsOWig+OBjOWIqeeUqOOBp+OBjeOBquOBhOeKtuazgeOBp+OCguOAgeODquOCouODq+OCv+OCpOODoOOBq+WFseWQjOe3qOmbhuOCkuihjOOBhuOBk+OBqOOBjOOBp+OBjeOCi+OCouODl+ODquOCseODvOOCt+ODp+ODs+OCkumWi+eZuuOBl+OBn+OAguODr+OCpOODpOODrOOCueOCouODieODm+ODg+OCr+ODjeODg+ODiOODr+ODvOOCr+OCkuani+evieOBl+OAgeODjeODg+ODiOODr+ODvOOCr+WGheOBrlBD44Go44OJ44Kt44Ol44Oh44Oz44OI44Gu5YWx5ZCM57eo6ZuG44KS6KGM44GG44GT44Go44GM5Ye65p2l44KL44CCJyxcblx0XHRpbXBsZW1lbnQ6XG5cdFx0XHQn44OB44O844Og44Gn5Yi25L2c44CC44OV44Ot44Oz44OI44Ko44Oz44OJ44GoV2Vi44K144O844OQ44KS5ouF5b2T44GX44Gf44CC5YuV5L2c44OX44Op44OD44OI44OV44Kp44O844Og44GvV2luZG93c1BD44CCQmx1ZXRvb3Ro44Gr44KI44Gj44GmUEPlkIzlo6vjgpLjg5rjgqLjg6rjg7PjgrDjgZfjgIHlj4zmlrnlkJHjga7jg4fjg7zjgr/pgJrkv6HjgpLooYzjgYbjgILlkIRQQ+WGheOBp1dlYuOCteODvOODkOOBjOi1t+WLleOBl+OBpuOBhOOCi+OBn+OCgeOAgemAmuW4uOOBruOCpuOCp+ODluOCouODl+ODquOCseODvOOCt+ODp+ODs+OBqOWQjOOBmOOCiOOBhuOBq+ODluODqeOCpuOCtuOBp+OCouOCr+OCu+OCueOBmeOCi+OBk+OBqOOBjOWHuuadpeOCi+OAgkJsdWV0b290aOmAmuS/oeOBr0Mj44Gnd2luIEFQSeOCkuWIqeeUqOOBmeOCi+OBk+OBqOOBp+Wun+ePvuOBl+OAgVdlYuOCteODvOODkOOBr05vZGUuanPjgpLnlKjjgYTjgablrp/oo4XjgZfjgabjgYTjgovjgIInLFxuXHRcdGtleXdvcmRzOiBbXG5cdFx0XHQnd2luZG93cycsXG5cdFx0XHQnQmx1ZXRvb3RoJyxcblx0XHRcdCdjby1hdXRob3JpbmcnLFxuXHRcdFx0J0NTQ1cnLFxuXHRcdFx0J3dpbiBBUEknLFxuXHRcdFx0J0FkLWhvYyBuZXR3b3JrJ1xuXHRcdF0sXG5cdFx0bGlua3M6IHtcblx0XHRcdOWPl+iznuODmuODvOOCuDpcblx0XHRcdFx0J2h0dHBzOi8vd3d3LnByZWYubmFnYW5vLmxnLmpwL2pvaG8vYXBwLWNvbnRlc3QvYXBwLWNvbnRlc3QwJ1xuXHRcdH1cblx0fSxcblx0e1xuXHRcdG5hbWU6ICdJbnZpc2libGVGbGljaycsXG5cdFx0c3ViOlxuXHRcdFx0J+Wwj+Wei+OCv+ODg+ODgeOCueOCr+ODquODvOODs+err+acq+OBq+OBiuOBkeOCi+OCreODvOODiOODg+ODl+OBjOmAj+aYjuOBquaXpeacrOiqnuWFpeWKm+OCreODvOODnOODvOODiScsXG5cdFx0aW1nOiAncHJvamVjdC1JbnZpc2libGVGbGljay0xNi05Jyxcblx0XHRjYXRlZ29yeTogJ0FuZHJvaWQnLFxuXHRcdHRleHQ6XG5cdFx0XHQn44K544Oe44O844OI44Km44Kp44OD44OB44Gu44KI44GG44Gq5bCP5Z6L44K/44OD44OB44K544Kv44Oq44O844Oz56uv5pyr5ZCR44GR44Gu5pel5pys6Kqe5YWl5Yqb44Kt44O844Oc44O844OJ44Gv44CB44Kt44O844KE44OG44Kt44K544OI44Ko44Oq44Ki44GM54ut44GE44Gf44KB44CB44Of44K544K/44OD44OX44Gu6aC755m644Gr44KI44KL5paH5a2X5YWl5Yqb6YCf5bqm44Gu5L2O5LiL44KS5oub44GE44Gm44GE44KL44CC44Gd44GT44Gn44CB44OG44Oz44Kt44O86YOo5YiG44Gu44Kt44O844OI44OD44OX44KS6YCP5piO44Gr44GX44CB6IOM5pmv44Gr44OG44Kt44K544OI44Ko44Oq44Ki44KS6KGo56S644GZ44KL5omL5rOV44KS5o+Q5qGI44CC44OV44Oq44OD44Kv44Kt44O844Oc44O844OJ44Go44OG44Kt44K544OI44Ko44Oq44Ki44GuMuWxpOOBruODrOOCpOODpOODvOani+mAoOOBruWwjuWFpeOBq+OCiOOCiuOAgeOCreODvOOBqOODhuOCreOCueODiOOCqOODquOCouOCkuWQjOaZguOBq+aLoeWkp+OBmeOCi+OBk+OBqOOBjOOBp+OBjeOCi+OAguaXouWtmOaJi+azleOBqOOBruavlOi8g+OBl+OBpuOAgeaWh+Wtl+WFpeWKm+mAn+W6puODu+OCqOODqeODvOeOh+OBqOOCguOBq+WEquOCjOOBpuOBhOOCi+OBk+OBqOOBjOekuuOBleOCjOOBn+OAguesrDE4MuWbnkhDSeeglOeptuS8muOBp+eZuuihqOOBl+OAgeWtpueUn+WlqOWKseiznuOCkuWPl+iznuOAguS/ruWjq+irluaWh+OAgicsXG5cdFx0aW1wbGVtZW50OlxuXHRcdFx0J+Wun+mok+eUqOOCt+OCueODhuODoOOBqOOBl+OBpuOAgUFuZHJvaWTjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PjgpLlrp/oo4XjgIJHb29nbGXml6XmnKzoqp7lhaXliptBUEnjgpLkvb/nlKjjgZfjgabjgIHmvKLlrZfjgarjganjga7mloflrZflpInmj5vjgpLooYzjgaPjgabjgYTjgovjgIInLFxuXHRcdGtleXdvcmRzOiBbXG5cdFx0XHQnQW5kcm9pZCcsXG5cdFx0XHQnSHVtYW4gQ29tcHV0ZXIgSW50ZXJhY3Rpb24nLFxuXHRcdFx0J3NtYXJ0d2F0Y2gnLFxuXHRcdFx0J3RleHQgaW5wdXQnLFxuXHRcdFx0J2ZsaWNrLWtleWJvYXJkJ1xuXHRcdF0sXG5cdFx0bGlua3M6IHtcblx0XHRcdOODl+ODreOCuOOCp+OCr+ODiOODmuODvOOCuDogJ2h0dHBzOi8vcmVzZWFyY2gubWl5YXNoaXRhLmNvbS9wYXBlcnMvRDIxOCcsXG5cdFx0XHTlj5fos57jg5rjg7zjgrg6ICdodHRwOi8vd3d3LnNpZ2hjaS5qcC9jb250ZW50cy9wYWdlL25ld3MnLFxuXHRcdFx0R29vZ2xl5pel5pys6Kqe5YWl5YqbQVBJOiAnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvLmpwL2ltZS9jZ2lhcGkuaHRtbCdcblx0XHR9XG5cdH0sXG5cdHtcblx0XHRuYW1lOiAnSWNoaW1vbml0dG8nLFxuXHRcdHN1Yjpcblx0XHRcdCfjg5Pjg4fjgqrjg4Hjg6Pjg4Pjg4jjgpLjgZfjgarjgYzjgonjgq/jgqTjgrrnlarntYTlvaLlvI/jgaflm57nrZTjgZnjgovkuIDllY/kuIDnrZTlrabnv5LmlK/mj7TjgrXjg7zjg5PjgrknLFxuXHRcdGltZzogJ3Byb2plY3QtSWNoaW1vbml0dG8tMTYtOScsXG5cdFx0Y2F0ZWdvcnk6ICdXZWInLFxuXHRcdHRleHQ6XG5cdFx0XHQn6Iux5Y2Y6Kqe44KS55+l44Gj44Gm44GE44Gm44KC44CB5q2j56K644Gq55m66Z+z44GM44Gn44GN44Gq44GR44KM44Gw55u45omL44Gr44Gv5Lyd44KP44KJ44Gq44GE44CC44Gd44GT44Gn44CBV2ViUlRD44KS5Yip55So44GX44Gf5LiA5ZWP5LiA562U5b2i5byP44Gu5a2m57+S5pSv5o+044K144O844OT44K544KS5Yi25L2c44GX44Gf44CC44Kr44Oh44Op5pig5YOP44Go44Oc44Kk44K544OB44Oj44OD44OI44Gr44KI44Gj44Gm6Zui44KM44Gf5aC05omA44Gn44KC5LiA57eS44Gr5a2m44G244GT44Go44GM5Ye65p2l44KL44CC55S76Z2i44Gr6KGo56S644GV44KM44Gf5Y2Y6Kqe44Gu6Iux6Kqe44KS44GE44Gh5pep44GP44CB44GL44Gk5q2j56K644Gr55m66Z+z44Gn44GN44Gf44KC44Gu44GM44Od44Kk44Oz44OI44KS542y5b6X44GZ44KL44CCQ2xvdWQgbiDjgqLjg5fjg6rjgrHjg7zjgrfjg6fjg7PjgrPjg7Pjg4bjgrnjg4jjgadXZWJSVEPos57jgpLlj5fos57jgIInLFxuXHRcdGltcGxlbWVudDpcblx0XHRcdCfjg4Hjg7zjg6DjgafliLbkvZzjgILjg5Xjg63jg7Pjg4jjgqjjg7Pjg4njgpLmi4XlvZPjgIJHb29nbGUgU3BlZWNoIEFQSeOCkuS9v+OBhuOBk+OBqOOBp+OAgeOBl+OBo+OBi+OCiuOBqOiqjeitmOOBleOCjOOCi+OCiOOBhuOBquato+eiuuOBqueZuumfs+OBp+OBruWbnuetlOOBruOBv+ato+ino+OBqOOBmeOCi+eCueOBjOODneOCpOODs+ODiOOAguePvuWcqOaOpee2muOBl+OBpuOBhOOCi+ODpuODvOOCtuOBquOBqeOBrueuoeeQhuOBq1NreXdheeOBrkFQSeOCkuWIqeeUqOOAgicsXG5cdFx0a2V5d29yZHM6IFsnV2ViIFJUQycsICdxdWl6JywgJ3ZpZGVvIGNoYXQnLCAnR29vZ2xlIFNwZWVjaCBBUEknXSxcblx0XHRsaW5rczoge1xuXHRcdFx05Y+X6LOe44Oa44O844K4OiAnaHR0cDovL3d3dy5jbG91ZG4tc2VydmljZS5jb20vY2FtMDQtZGV2ZW4vZGVjb24vdG9oeW8vJ1xuXHRcdH1cblx0fSxcblx0e1xuXHRcdG5hbWU6ICdHZW9NZWxvZHknLFxuXHRcdHN1YjogJ+eSsOWig+mfs+OCkumMsumfs+OBl+OBpuODjeODg+ODiOS4iuOBq+mbhue0hOOBmeOCi+OCteOCpuODs+ODieOCueOCseODvOODl1NOUycsXG5cdFx0aW1nOiAncHJvamVjdC1HZW9NZWxvZHktMTYtOScsXG5cdFx0Y2F0ZWdvcnk6ICdBbmRyb2lkJyxcblx0XHR0ZXh0OlxuXHRcdFx0J+S9jee9ruaDheWgseOBqOeSsOWig+mfs+OCkue1hOOBv+WQiOOCj+OBm+OBpueZu+mMsuOBmeOCi+OCteODvOODk+OCueOAgumiqOaZr+OBq+OBr+mfs+OBjOasoOOBi+OBm+OBquOBhOOBqOOBhOOBhuiAg+OBiOaWueOAgeOCteOCpuODs+ODieOCueOCseODvOODl+OCkuOCteODvOODk+OCueOBqOOBl+OBpue1hOOBv+i+vOOCk+OBoOS9nOWTgeOAguODpuODvOOCtuOBjOOCueODnuODvOODiOODleOCqeODs+OBp+eSsOWig+mfs+OCkumMsumfs+OBmeOCi+OBqOOAgemfs+WjsOOCkkdQU+OChOaXpeS7mOOBruaDheWgseOBqOWFseOBq+OCteODvOODkOOBq+OCouODg+ODl+ODreODvOODieOBl+OAgeODnuODg+ODl+S4iuOBp+mWsuimp+OBmeOCi+OBk+OBqOOBjOWHuuadpeOCi+OAgk9wZW4gSGFjayBVIDIwMTTnmbrooajkvZzlk4HjgIInLFxuXHRcdGltcGxlbWVudDpcblx0XHRcdCfjg4Hjg7zjg6DjgafliLbkvZzjgILjgqLjg5fjg6rjga7lpKfpg6jliIbjgpLmi4XlvZPjgZfjgZ/jgIJBbmRyb2lk44Ki44OX44Oq44Kx44O844K344On44Oz44Go44GX44Gm5a6f6KOF44CCWWFob28gTWFwIEFQSeOCkuS9v+eUqOOBl+OBpuOAgemMsumfs+OBleOCjOOBn+mfs+WjsOOBruODnuODg+ODlOODs+OCsOOCkuihjOOBo+OBpuOBhOOCi+OAgicsXG5cdFx0a2V5d29yZHM6IFtcblx0XHRcdCdBbmRyb2lkJyxcblx0XHRcdCdzb3VuZHNjYXBlJyxcblx0XHRcdCdtYXAnLFxuXHRcdFx0J3JlY29yZCcsXG5cdFx0XHQnbWljcm9waG9uZScsXG5cdFx0XHQnR1BTJ1xuXHRcdF1cblx0XHQvLyBodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9QWVhzZXRHSTdHOD9yZWw9MCZhbXA7c3RhcnQ9MzIxN1xuXHRcdC8vIGh0dHBzOi8vaGFja3UueWFob28uY28uanAvb3BlbjIwMTQvXG5cdH0sXG5cdHtcblx0XHRuYW1lOiAnV3Jpc3RTbGlkZScsXG5cdFx0c3ViOiAn44Kk44Oh44O844K444K744Oz44K144KS55So44GE44Gf5omL6aaW44KS5ruR44KJ44Gb44KL44K544Oe44O844OI44Km44Kp44OD44OB44Gu54mH5omL5pON5L2cJyxcblx0XHRpbWc6ICdwcm9qZWN0LVdyaXN0U2xpZGUtMTYtOScsXG5cdFx0Y2F0ZWdvcnk6ICdBbmRyb2lkJyxcblx0XHR2aWRlbzogJ3c5ZUhES2J5OHJvJyxcblx0XHR0ZXh0OlxuXHRcdFx0J+OCueODnuODvOODiOOCpuOCqeODg+ODgeOBq+OBiuOBhOOBpuOAgeOCueODr+OCpOODl+OBruOCiOOBhuOBqumAo+e2mueahOOBquWFpeWKm+OCkuihjOOBhuOBq+OBr+OAgeijheedgOOBl+OBpuOBhOOCi+aJi+OBqOWPjeWvvuOBruaJi+OBp+aTjeS9nOOBmeOCi+W/heimgeOBjOOBguOCi+OAguOBneOBk+OBp+OAgeaJi+mmluOCkuacuuOChOWjgeOAgeiHqui6q+OBrui6q+S9k+OBquOBqeOBruS4iuOBp+a7keOCieOBm+OCi+OBk+OBqOOBq+OCiOOBo+OBpuOAgeOCueODnuODvOODiOOCpuOCqeODg+ODgeOCkueJh+aJi+OBp+aTjeS9nOOBmeOCi+aJi+azleOCkuaPkOahiOOAguODkOODs+ODieS4i+mDqOOBq+Wfi+OCgei+vOOBvuOCjOOBn+OCpOODoeODvOOCuOOCu+ODs+OCteOBq+OCiOOBo+OBpuOAgeeJqeS9k+OBq+aOpeWcsOOBl+OBn+eKtuaFi+OBp+OBruaJi+mmluOBruenu+WLlemHj+OCkuWPluW+l+OBl+OAgeeJh+aJi+OBp+OBrjLmrKHlhYPmlrnlkJHjga7lhaXlipvjgpLlj6/og73jgavjgZfjgZ/jgIInLFxuXHRcdGltcGxlbWVudDpcblx0XHRcdCdBbmRyb2lk44CBV2VhciBPU+OCouODl+ODquOCseODvOOCt+ODp+ODs+OBqOOBl+OBpuWun+ijheOAguOCueODnuODvOODiOODleOCqeODs+OBqOi2heWwj+Wei+ODr+OCpOODpOODrOOCueODnuOCpuOCueOCkuODmuOCouODquODs+OCsOOBl+OAgeiHquerr+acq+OBq0FEQuOCs+ODnuODs+ODieOCkueZuuihjOOBmeOCi+OBk+OBqOOBq+OCiOOBo+OBpuODnuOCpuOCueOCpOODmeODs+ODiOOCkuebo+imluOAguOCueODnuODvOODiOODleOCqeODs+OBqOODmuOCouODquODs+OCsOOBleOCjOOBn+OCueODnuODvOODiOOCpuOCqeODg+ODgeOBq+enu+WLlemHj+OCkumAgeS/oeOBl+OBpuOCouODl+ODquOCseODvOOCt+ODp+ODs+OCkuaTjeS9nOOBmeOCi+OAgicsXG5cdFx0a2V5d29yZHM6IFtcblx0XHRcdCdBbmRyb2lkJyxcblx0XHRcdCdXZWFyIE9TJyxcblx0XHRcdCdBbmRyb2lkIERlYnVnIEJyaWRnZScsXG5cdFx0XHQnSHVtYW4gQ29tcHV0ZXIgSW50ZXJhY3Rpb24nLFxuXHRcdFx0J3NtYXJ0d2F0Y2gnLFxuXHRcdFx0J2ltYWdlIHNlbnNvcicsXG5cdFx0XHQnbW91c2UnXG5cdFx0XVxuXHR9LFxuXHR7XG5cdFx0bmFtZTogJ1NvdW11U1NNTCcsXG5cdFx0c3ViOlxuXHRcdFx0J+imluimmumanOWus+iAheOBruOBn+OCgeOBruaWsOOBl+OBhOmbu+WtkOabuOexjeW9ouW8j+OBq+WvvuW/nOOBl+OBn+OCr+ODqeOCpuODiee3qOmbhuOCt+OCueODhuODoCcsXG5cdFx0aW1nOiAncHJvamVjdC1Tb3VtdVNTTUwtMTYtOScsXG5cdFx0Y2F0ZWdvcnk6ICdXZWInLFxuXHRcdHRleHQ6XG5cdFx0XHQn6Zu75a2Q5pu457GN44KS6Kqt44KA6Zqb44Gq44Gp44Gr55So44GE44KJ44KM44KL44CBT1PntYTjgb/ovrzjgb/jga7oqq3jgb/kuIrjgZLmqZ/og73jgavjga/jgqTjg7Pjg4jjg43jg7zjgrfjg6fjg7Pjga7plpPpgZXjgYTjgYzmnKrjgaDjgavlpJrjgY/mrovjgaPjgabjgYTjgovjgILjgZ3jga7jgZ/jgoHnj77lnKjjga/jgIHpn7Plo7DlkIjmiJDjg57jg7zjgq/jgqLjg4Pjg5foqIDoqp5TU01M44KS55So44GE44Gm44Kk44Oz44OI44ON44O844K344On44Oz44KS5Ye654mI56S+44Gu5Lq66ZaT44GM57eo6ZuG44GX44CB5ZCI5oiQ44GV44KM44Gf6Z+z5aOw44KS6Zu75a2Q5pu457GN44Gr5ZCM5bCB44GZ44KL44Go44GE44GG44KE44KK5pa544GM5LiA6Iis55qE44Gn44GC44KL44CC44Gd44GT44Gn44CB6Zu75a2Q5pu457GN44Gr6Z+z5aOw44OV44Kh44Kk44Or44Gn44Gv44Gq44GP44Kk44Oz44OI44ON44O844K344On44Oz44KS6KiY44GX44Gf44OH44O844K/44KS5ZCM5bCB44GZ44KL5paw44GX44GE6Zu75a2Q5pu457GN44OV44Kp44O844Oe44OD44OI44Gu5o+Q5qGI44KS6KGM44Gj44Gf44CC5ZCM5pmC44Gr44CB5Ye654mI56S+44Gu5Lq66ZaT44GM44Kk44Oz44OI44ON44O844K344On44Oz44KS57eo6ZuG44GX44CB6Z+z5aOw44KS44Gd44Gu6YO95bqm56K66KqN44GX44Gq44GM44KJ44Kv44Op44Km44OJ5LiK44Gn57eo6ZuG44GZ44KL44K344K544OG44Og44KS5qeL56+J44GX44Gf44CC5a6f6Ki85a6f6aiT44Gr44KI44KK5Yq55p6c55qE44Gq44OE44O844Or44Go6KqN44KB44KJ44KM44CBVzND44Gr44KI44Gj44Gm6Zu75a2Q5pu457GN44Gu5b2i5byPRVBVQuOBruasoeacn+S7leanmOOBq+ebm+OCiui+vOOBvuOCjOOBn+OAgue3j+WLmeecgeOBqOOCouODq+ODkOOCpOODiOWFiOOBruaDs+mahuekvuOBqOOBruWFseWQjOODl+ODreOCuOOCp+OCr+ODiOOAgicsXG5cdFx0aW1wbGVtZW50OlxuXHRcdFx0J+ODgeODvOODoOOBp+WItuS9nOOAguODleODreODs+ODiOOCqOODs+ODieOCkuaLheW9k+OBl+OBn+OAguOCteODvOODkOOBr1BIUOOBp+Wun+ijheOAguS4u+OBquapn+iDveOBr+S7peS4i+OBrumAmuOCiuOAgumbu+WtkOabuOexjeOBruOCouODg+ODl+ODreODvOODieOBqOWIneacn+OBrueZuumfs+iomOWPt+OBruiHquWLleeUn+aIkOOAgee3qOmbhuOBl+OBn+eZuumfs+iomOWPt++8iOOCpOODs+ODiOODjeODvOOCt+ODp+ODs+OCkuihqOOBme+8ieOBruODkOODvOOCuOODp+ODs+euoeeQhuOBqERpZmbooajnpLrjgIHnt6jpm4bjgZfjgZ/pn7Plo7DjgpLjgZ3jga7loLTjgaflho3nlJ/jgIHmm7jnsY3lhoXjga7mloflrZfmpJzntKLjgIHnt6jpm4bogIXjga7nt6jpm4bmqKnpmZDlpInmm7TjgIHjgrLjg6nvvIjmoKHmraPnlKjjga7ljbDliLfvvInjga7ljbDliLfmqZ/og73jgajjgrPjg6Hjg7Pjg4jjga5QREbjgqLjg4Pjg5fjg63jg7zjg4njgIHmm7jnsY3lhoXjga7nlLvlg4/ooajnpLrjgIInLFxuXHRcdGtleXdvcmRzOiBbXG5cdFx0XHQnRS1ib29rJyxcblx0XHRcdCdFUFVCJyxcblx0XHRcdCdTU01MJyxcblx0XHRcdCdXM0MnLFxuXHRcdFx0J2NvLWF1dGhvcmluZycsXG5cdFx0XHQndmVyc2lvbiBjb250cm9sJ1xuXHRcdF0sXG5cdFx0bGlua3M6IHtcblx0XHRcdOWun+iovOWun+mok+WgseWRiuabuDogJ2h0dHA6Ly93d3cuc291bXUuZ28uanAvbWFpbl9jb250ZW50LzAwMDQ5OTcxMS5wZGYnXG5cdFx0fVxuXHR9LFxuXHR7XG5cdFx0bmFtZTogJ0J1ZGRhQmVhdXRpZnknLFxuXHRcdHN1YjogJ+W3seOBrueyvuelnuOCkuejqOOBj+OBk+OBqOOBp+imi+OBn+ebruOCgue+juOBl+OBj+OBquOCjOOCi+ODoeODh+OCo+OCouOCouODvOODiOS9nOWTgScsXG5cdFx0aW1nOiAncHJvamVjdC1CdWRkYUJlYXV0aWZ5LTE2LTknLFxuXHRcdGNhdGVnb3J5OiAnRGVza3RvcCcsXG5cdFx0dmlkZW86ICdYMFNyYWpZaDc4MCcsXG5cdFx0dGV4dDpcblx0XHRcdCdOYW0gSnVuZSBQYWlr44Gr44KI44KLVFYtQnVkZGhh44Gr44Kk44Oz44K544OR44Kk44Ki44KS5Y+X44GR44CB5bex44Gu57K+56We44KS56Oo44GP44GT44Go44Go55S75YOP5Yem55CG44Gr44KI44KL576O6aGU5YyW44KS57WE44G/5ZCI44KP44Gb44Gf5L2c5ZOB44CC44Kr44Oh44Op44Go44OX44Ot44K444Kn44Kv44K/44Gr44KI44Gj44Gm5L2c44KJ44KM44Gf5pOs5Ly855qE44Gq6Y+h44Gu5YmN44Gn44CB44Om44O844K244Gv5bqn56aF44KS6KGM44GG44CC6Lqr5L2T44Gu44OW44Os44GM5bCR44Gq44GE5pmC44Gv5b+D44Gu5Lmx44KM44KC5bCR44Gq44GE44Go5Yik5pat44GX44CB6Y+h44Gu6Ieq5YiG44Gu6aGU44Gr5b6Q44CF44Gr576O6aGU5YyW5Yem55CG44KS6KGM44Gj44Gm44GE44GP44CC5L2T6aiT5pmC6ZaT44GvMeWIhueoi+W6puOAgicsXG5cdFx0aW1wbGVtZW50OlxuXHRcdFx0J+ODgeODvOODoOOBp+WItuS9nOOAglByb2Nlc3Npbmfjgaflrp/oo4XjgILouqvkvZPjgavjg5bjg6zjga7luqblkIjjgYTjga/li5XkvZPpqJPnn6XjgavjgojjgaPjgabmlbDlgKTljJbjgZnjgovjgILli5XkvZPmpJznn6Xjga7lrp/oo4XjgpLmi4XlvZPjgILpoZTjga7nvo7poZTljJblh6bnkIbjgavjga/jgIHplqLlt53jgolbMV3jga7jgqLjg6vjgrTjg6rjgrrjg6DjgpLliKnnlKjjgIInLFxuXHRcdGtleXdvcmRzOiBbJ21lZGlhIGFydCcsICdtb3Rpb24gZGV0ZWN0aW9uJywgJ2ltYWdlIHByb2Nlc3NpbmcnXSxcblx0XHRsaW5rczoge1xuXHRcdFx0J861LeODleOCo+ODq+OCv+OCkueUqOOBhOOBn+ODquOCouODq+OCv+OCpOODoOmhlOeUu+WDj+e+juims+WMluOCt+OCueODhuODoCc6XG5cdFx0XHRcdCdodHRwczovL3d3dy5pZWljZS5vcmcvaXNzL2pwbi9QdWJsaWNhdGlvbnMvaXNzcG9zdGVyXzIwMTUvZGF0YS9wZGYvSVNTLVAtNzgucGRmJ1xuXHRcdH1cblx0fSxcblx0e1xuXHRcdG5hbWU6ICdNYWtlIGlmJyxcblx0XHRzdWI6ICfjgqvjg7zjg4njgpLkuKbjgbnjgaZpZuaWh+OCkuOBpOOBj+OCi+ODl+ODreOCsOODqeODn+ODs+OCsOaVmeiCsuOCq+ODvOODieOCsuODvOODoCcsXG5cdFx0aW1nOiAncHJvamVjdC1NYWtlaWYtMTYtOScsXG5cdFx0Y2F0ZWdvcnk6ICdEZXNpZ24nLFxuXHRcdHRleHQ6XG5cdFx0XHQn44OX44Ot44Kw44Op44Of44Oz44Kw44KS44GZ44KL5pmC44Gr5b+F44Ga5L2/44GG44CMaWbmlofjgI3jgpLjgqvjg7zjg4njgafpgYrjgbPjgarjgYzjgonlrabjgbnjgovjgrLjg7zjg6DjgILjg4bjgq3jgrnjg4jjgqjjg4fjgqPjgr/jgpLmqKHjgZfjgZ/jg5fjg6zjgqTjg57jg4Pjg4jjga7kuIrjgavpoIbnlarjgavjgqvjg7zjg4njgpLnva7jgYTjgabjgYTjgY3jgIFpZuaWh+OBjOWujOaIkOOBmeOCi+OBqOadoeS7tuWIhuWykOOBq+OCiOOBo+OBpuOCq+ODvOODieOCkuW8leOBi+OBquOBj+OBpuOBr+OBquOCieOBquOBhOOAguaXqeOBj+aJi+acreOCkuS9v+OBhOWIh+OBo+OBn+S6uuOBjOWLneWIqeOAguODl+ODreOCsOODqeODn+ODs+OCsOacque1jOmok+iAheOBp+OCgumBiuOBtuOBk+OBqOOBjOWPr+iDveOAgjIwMTflubTjgavjgrLjg7zjg6Djg57jg7zjgrHjg4Pjg4jjgIHlj4rjgbPjgrPjg5/jg4Pjgq/jg57jg7zjgrHjg4Pjg4jjgavjgabpoJLluIPjgIInLFxuXHRcdGltcGxlbWVudDpcblx0XHRcdCfjgqLjg4rjg63jgrDjgrLjg7zjg6DjgrXjg7zjgq/jg6tmdW1ibGV3YWFsc++8iOODleOCoeODs+ODluODq+ODr+ODvOODq+OCue+8ieOBp+WItuS9nOOAguS4u+OBq+ODh+OCtuOCpOODs+OCkuaLheW9k+OAgkFkb2JlIElsbHVzdHJhdG9y44KS5L2/55So44CCJyxcblx0XHRrZXl3b3JkczogWydwcm9ncmFtbWluZycsICdjYXJkIGdhbWUnLCAnYW5hbG9nIGdhbWUnXSxcblx0XHRsaW5rczoge1xuXHRcdFx05ZWG5ZOB6Kmz57Sw44Oa44O844K4OiAnaHR0cDovL2Z1bWJsZXdhYWxzLmNvbS9wb3J0Zm9saW8vbWFrZS1pZi8nLFxuXHRcdFx0ZnVtYmxld2FhbHM6ICdodHRwOi8vZnVtYmxld2FhbHMuY29tJ1xuXHRcdH1cblx0fVxuXVxuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0c0FycmF5XG4iLCJwcm9qZWN0c1xuXHQucHVyZS11LXNtLTEtMi5wdXJlLXUtbWQtMS0zLnB1cmUtdS0xLTEoZWFjaD0ne3csIGkgaW4gcHJvamVjdHN9Jylcblx0XHQuY2FyZFxuXHRcdFx0YShocmVmPScjcHJvamVjdHMve3cubmFtZS5yZXBsYWNlKC8gL2csIGBfYCl9Jylcblx0XHRcdFx0LndyYXBwZXJcblx0XHRcdFx0XHR3ZWJwLnRodW1ibmFpbChzcmM9J3t3LmltZ30nKVxuXHRcdFx0XHQuY29udGVudFxuXHRcdFx0XHRcdGg0IHt3Lm5hbWV9XG5cdFx0XHRcdFx0cCB7dy5zdWJ9XG5cblx0c3R5bGUodHlwZT0nc2NzcycpLlxuXHRcdDpzY29wZSB7XG5cdFx0XHRwYWRkaW5nOiAwLjc1cmVtO1xuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGZsZXgtd3JhcDogd3JhcDtcblx0XHRcdD4gZGl2IHtcblx0XHRcdFx0cGFkZGluZzogMC43NXJlbTtcblx0XHRcdFx0PiAuY2FyZCB7XG5cdFx0XHRcdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdFx0XHRcdGJhY2tncm91bmQ6IHdoaXRlO1xuXHRcdFx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdFx0XHRib3gtc2hhZG93OiAwIDJweCAzcHggcmdiYSgxMCwxMCwxMCwuMSksIDAgMCAwIDFweCByZ2JhKDEwLDEwLDEwLC4xKTtcblx0XHRcdFx0XHRib3JkZXItcmFkaXVzOiAwLjNyZW07XG5cdFx0XHRcdFx0Jjpob3ZlciB7XG5cdFx0XHRcdFx0XHRib3gtc2hhZG93OiAwIDhweCAxMHB4IHJnYmEoMTAsIDEwLCAxMCwgMC4xKSwgMCAwIDZweCA0cHggcmdiYSgxMCwxMCwxMCwuMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdD4gYSB7XG5cdFx0XHRcdFx0XHQ+IC53cmFwcGVyIHtcblx0XHRcdFx0XHRcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdFx0XHRcdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdFx0XHRcdFx0JjpiZWZvcmUge1xuXHRcdFx0XHRcdFx0XHRcdGNvbnRlbnQ6ICcnO1xuXHRcdFx0XHRcdFx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0XHRcdFx0XHRcdHBhZGRpbmctdG9wOiA1Ni4yNSU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aW1nIHtcblx0XHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0XHRcdFx0XHRcdFx0dG9wOiAwO1xuXHRcdFx0XHRcdFx0XHRcdGxlZnQ6IDA7XG5cdFx0XHRcdFx0XHRcdFx0Ym9yZGVyLXJhZGl1czogMC4zcmVtIDAuM3JlbSAwIDA7XG5cdFx0XHRcdFx0XHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHRcdFx0XHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZDogI2RkZDtcblx0XHRcdFx0XHRcdFx0XHRib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0PiAuY29udGVudCB7XG5cdFx0XHRcdFx0XHRcdHBhZGRpbmc6IDAuOHJlbSAxcmVtO1xuXHRcdFx0XHRcdFx0XHQmIGg0IHtcblx0XHRcdFx0XHRcdFx0XHRmb250LXNpemU6IDEuMnJlbTtcblx0XHRcdFx0XHRcdFx0XHRtYXJnaW4tYm90dG9tOiAwLjNyZW07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0JiBwIHtcblx0XHRcdFx0XHRcdFx0XHRmb250LXNpemU6IDAuOXJlbTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRzY3JpcHQuXG5cdFx0aW1wb3J0IHByb2plY3RzQXJyYXkgZnJvbSAnLi4vZGF0YSdcblx0XHRpbXBvcnQgd2VicCBmcm9tIFwiLi93ZWJwXCJcblxuXHRcdHRoaXMuY2F0ZWdvcnkgPSAnQWxsJ1xuXHRcdHRoaXMucHJvamVjdHMgPSAodGhpcy5vcHRzLmxpbWl0ID09PSB1bmRlZmluZWQpXG5cdFx0XHQ/IHByb2plY3RzQXJyYXlcblx0XHRcdDogcHJvamVjdHNBcnJheS5zbGljZSgwLCB0aGlzLm9wdHMubGltaXQpXG5cblx0XHR0aGlzLm9uKCd1cGRhdGVkJywgKCkgPT4ge1xuXHRcdFx0Ly8tIGNvbnNvbGUubG9nKHRoaXMucHJvamVjdHMsIHRoaXMub3B0cy5jYXRlZ29yeSlcblxuXHRcdFx0aWYgKHRoaXMub3B0cy5jYXRlZ29yeSAmJiB0aGlzLm9wdHMuY2F0ZWdvcnkgIT09IHRoaXMuY2F0ZWdvcnkpIHtcblx0XHRcdFx0dGhpcy51cGRhdGUoe1xuXHRcdFx0XHRcdGNhdGVnb3J5OiB0aGlzLm9wdHMuY2F0ZWdvcnksXG5cdFx0XHRcdFx0cHJvamVjdHM6ICh0aGlzLm9wdHMuY2F0ZWdvcnkgPT09ICdBbGwnKVxuXHRcdFx0XHRcdFx0PyBwcm9qZWN0c0FycmF5XG5cdFx0XHRcdFx0XHQ6IHByb2plY3RzQXJyYXlcblx0XHRcdFx0XHRcdFx0LmZpbHRlcihwID0+IHAuY2F0ZWdvcnkgPT09IHRoaXMub3B0cy5jYXRlZ29yeSksXG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fSkiLCJhYm91dC5wdXJlLWdcblx0LmFib3V0LWltZy5wdXJlLXUtc20tMS00LnB1cmUtdS0xLTJcblx0XHQuZmFjZS13cmFwcGVyLnB1cmUtdS0xLTJcblx0XHRcdGltZyhzcmM9J3Jlc291cmNlcy9pY29uLXB2Y3Jlc2luLnN2ZycpXG5cdC5wdXJlLXUtc20tMS0yNC5wdXJlLXUtMS0xXG5cdC5hYm91dC10ZXh0LnB1cmUtdS1zbS0xNy0yNC5wdXJlLXUtMS0xXG5cdFx0fFdlYiBGcm9udGVuZOOAgOOBjOWlveOBjeOBquOCqOODs+OCuOODi+OCouOAglxuXHRcdGJyXG5cdFx0fOWtpueUn+aZguS7o+OBr+OCpOODs+OCv+ODqeOCr+OCt+ODp+ODs++8iEhDSe+8ieOCkuWwguaUu+OBl+OAgeS4u+OBq+ODouODkOOCpOODqyAvIOOCpuOCp+OCouODqeODluODq+ODh+ODkOOCpOOCueOBq+mWouOBmeOCi+eglOeptuOCkuihjOOBhuOAglxuXHRcdGJyXG5cdFx0fOS6uuOBqOaEj+imi+OCkuS6pOaPm+OBl+OAgeitsOirluOBl+OBquOBjOOCieODouODjuS9nOOCiuOBjOOBl+OBn+OBhOOAglxuXHRcdGJyXG5cdFx0fOaWsOOBl+OBhOOCguOBruOBjOWlveOBjeOBquOBruOBp+OAgeiyquassuOBq+WtpuOCk+OBp+OBhOOBj+OAglxuXHRcdHVsXG5cdFx0XHRsaS5wdXJlLWdcblx0XHRcdFx0Lmljb24ucHVyZS11LTEtMTIucHVyZS11LWxnLTEtMjRcblx0XHRcdFx0XHRpLmZhLmZhLWJpcnRoZGF5LWNha2UoYXJpYS1oaWRkZW49J3RydWUnKVxuXHRcdFx0XHQucmlnaHQucHVyZS11LTExLTEyIHtiaXJ0aGRheX0gKEFnZToge2FnZX0pXG5cdFx0XHRsaS5wdXJlLWdcblx0XHRcdFx0Lmljb24ucHVyZS11LTEtMTIucHVyZS11LWxnLTEtMjRcblx0XHRcdFx0XHRpLmZhLmZhLWVudmVsb3BlKGFyaWEtaGlkZGVuPSd0cnVlJylcblx0XHRcdFx0LnJpZ2h0LnB1cmUtdS0xMS0xMiBwdmNyZXNpbjA3MzBAZ21haWwuY29tXG5cdFx0XHRsaS5wdXJlLWdcblx0XHRcdFx0Lmljb24ucHVyZS11LTEtMTIucHVyZS11LWxnLTEtMjRcblx0XHRcdFx0XHRpLmZhLmZhLW1hcC1tYXJrZXItYWx0KGFyaWEtaGlkZGVuPSd0cnVlJylcblx0XHRcdFx0LnJpZ2h0LnB1cmUtdS0xMS0xMiBPbW90ZXNhbmRvLCBUb2t5b1xuXHRcdFx0bGkucHVyZS1nXG5cdFx0XHRcdC5pY29uLnB1cmUtdS0xLTEyLnB1cmUtdS1sZy0xLTI0XG5cdFx0XHRcdFx0aS5mYS5mYS1zdWl0Y2FzZShhcmlhLWhpZGRlbj0ndHJ1ZScpXG5cdFx0XHRcdC5yaWdodC5wdXJlLXUtMTEtMTJcblx0XHRcdFx0XHRzcGFuIEZyb250ZW5kIEVuZ2luZWVyeycgJ31cblx0XHRcdFx0XHRhLmNvbXBhbnkoaHJlZj0naHR0cHM6Ly9qcC5jb3JwLXNhbnNhbi5jb20vJyB0YXJnZXQ9J19ibGFuaycpIEAgU2Fuc2FuXG5cdHN0eWxlKHR5cGU9J3Njc3MnKS5cblx0XHQ6c2NvcGUge1xuXHRcdFx0cGFkZGluZzogMC43NXJlbTtcblx0XHRcdD4gLmFib3V0LWltZyB7XG5cdFx0XHRcdHRleHQtYWxpZ246IGNlbnRlcjtcblx0XHRcdFx0cGFkZGluZzogMC43NXJlbTtcblx0XHRcdFx0bWFyZ2luOiAwIGF1dG87XG5cdFx0XHRcdC5mYWNlLXdyYXBwZXIge1xuXHRcdFx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRcdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdFx0XHQmOmJlZm9yZSB7XG5cdFx0XHRcdFx0XHRjb250ZW50OiBcIlwiO1xuXHRcdFx0XHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHRcdFx0XHRwYWRkaW5nLXRvcDogMTAwJTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aW1nIHtcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdFx0XHRcdHRvcDogMDtcblx0XHRcdFx0XHRcdGxlZnQ6IDA7XG5cdFx0XHRcdFx0XHRib3R0b206IDA7XG5cdFx0XHRcdFx0XHRyaWdodDogMDtcblx0XHRcdFx0XHRcdGJvcmRlci1yYWRpdXM6IDUwJTtcblx0XHRcdFx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0XHRcdFx0YmFja2dyb3VuZDogZ3JheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdD4gLmFib3V0LXRleHQge1xuXHRcdFx0XHR0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuXHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRcdFx0cGFkZGluZzogMC43NXJlbTtcblx0XHRcdFx0Zm9udC1zaXplOiAxLjFyZW07XG5cdFx0XHRcdHVsIHtcblx0XHRcdFx0XHRsaSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRcdFx0bWFyZ2luLXRvcDogMC41cmVtO1xuXHRcdFx0XHRcdFx0Lmljb24ge1xuXHRcdFx0XHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRcdFx0XHRcdFx0YWxpZ24taXRlbXM6IGJhc2VsaW5lO1xuXHRcdFx0XHRcdFx0XHRmb250LXNpemU6IDEuNXJlbTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC5yaWdodCB7XG5cdFx0XHRcdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdFx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0XHRcdFx0XHRcdHBhZGRpbmctbGVmdDogMC41cmVtO1xuXHRcdFx0XHRcdFx0XHRhIHtcblx0XHRcdFx0XHRcdFx0XHRjb2xvcjogIzRlOWFkYjtcblx0XHRcdFx0XHRcdFx0XHQmOmhvdmVyIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdCYuY29tcGFueSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRtYXJnaW4tbGVmdDogMC4zcmVtO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRzY3JpcHQuXG5cdFx0aW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXG5cdFx0aW1wb3J0IHdlYnAgZnJvbSAnLi93ZWJwJ1xuXG5cdFx0dGhpcy5iaXJ0aGRheSA9ICcxOTk0LTA3LTMwJ1xuXHRcdHRoaXMuYWdlID0gbW9tZW50KCkuZGlmZih0aGlzLmJpcnRoZGF5LCAneWVhcnMnKVxuIiwicHJvamVjdERldGFpbFxuXHQuY29udGFpbmVyXG5cdFx0c2VjdGlvblxuXHRcdFx0LnZpZGVvLWZyYW1lKGlmPSd7cHJvamVjdC52aWRlbyAhPT0gdW5kZWZpbmVkfScpXG5cdFx0XHRcdGlmcmFtZShzcmM9XCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC97cHJvamVjdC52aWRlb30/cmVsPTBcIlxuXHRcdFx0XHRcdFx0ZnJhbWVib3JkZXI9XCIwXCJcblx0XHRcdFx0XHRcdGFsbG93PVwiZW5jcnlwdGVkLW1lZGlhXCJcblx0XHRcdFx0XHRcdGFsbG93ZnVsbHNjcmVlbilcblx0XHRcdC5pbWctZnJhbWUoaWY9J3twcm9qZWN0LnZpZGVvID09PSB1bmRlZmluZWR9Jylcblx0XHRcdFx0d2VicChzcmM9J3twcm9qZWN0LmltZ30nKVxuXHRcdFx0aDFcblx0XHRcdFx0cCB7cHJvamVjdC5uYW1lICsgJzogJ31cblx0XHRcdFx0c3BhbiB7cHJvamVjdC5zdWJ9XG5cdFx0XHR0YWdzKHRhZ3M9J3twcm9qZWN0LmtleXdvcmRzfScpXG5cdFx0XHQuY2hhcHRlclxuXHRcdFx0XHQuY2hhcHRlci10aXRsZVxuXHRcdFx0XHRcdGgyIEFic3RyYWN0XG5cdFx0XHRcdFx0aHJcblx0XHRcdFx0cCB7cHJvamVjdC50ZXh0fVxuXHRcdFx0LmNoYXB0ZXJcblx0XHRcdFx0LmNoYXB0ZXItdGl0bGVcblx0XHRcdFx0XHRoMiBJbXBsZW1lbnRhdGlvblxuXHRcdFx0XHRcdGhyXG5cdFx0XHRcdHAge3Byb2plY3QuaW1wbGVtZW50fVxuXHRcdFx0LmNoYXB0ZXIoaWY9J3twcm9qZWN0LmxpbmtzICE9PSB1bmRlZmluZWR9Jylcblx0XHRcdFx0LmNoYXB0ZXItdGl0bGVcblx0XHRcdFx0XHRoMiBMaW5rc1xuXHRcdFx0XHRcdGhyXG5cdFx0XHRcdG9sXG5cdFx0XHRcdFx0bGkoZWFjaD0ne3ZhbHVlLCBrZXkgaW4gcHJvamVjdC5saW5rc30nKVxuXHRcdFx0XHRcdFx0c3BhbiB7a2V5ICsgJzogJ31cblx0XHRcdFx0XHRcdHNwYW5cblx0XHRcdFx0XHRcdFx0YShocmVmPSd7dmFsdWV9Jykge3ZhbHVlfVxuXHRmb290ZXJcblxuXHRzdHlsZSh0eXBlPSdzY3NzJykuXG5cdFx0OnNjb3BlIHtcblx0XHRcdG1pbi1oZWlnaHQ6IDEwMHZoO1xuXHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHRiYWNrZ3JvdW5kOiAjMmIyYjJiO1xuXHRcdFx0Y29sb3I6ICNlZmVmZWY7XG5cdFx0XHQ+IGRpdiA+IHNlY3Rpb24ge1xuXHRcdFx0XHRwYWRkaW5nOiAxLjVyZW07XG5cdFx0XHRcdC52aWRlby1mcmFtZSB7XG5cdFx0XHRcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdFx0XHRcdHdpZHRoOiAxMDAlO1xuXHRcdFx0XHRcdHBhZGRpbmctdG9wOiA1Ni4yNSU7XG5cdFx0XHRcdFx0PiBpZnJhbWUge1xuXHRcdFx0XHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0XHRcdFx0dG9wOiAwO1xuXHRcdFx0XHRcdFx0cmlnaHQ6IDA7XG5cdFx0XHRcdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdFx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdFx0XHRcdGJhY2tncm91bmQ6IGJsYWNrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHQuaW1nLWZyYW1lIHtcblx0XHRcdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdFx0XHQ+IGltZyB7XG5cdFx0XHRcdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdFx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdFx0XHRcdGJhY2tncm91bmQ6IGJsYWNrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRoMSB7XG5cdFx0XHRcdFx0Y29sb3I6IHdoaXRlO1xuXHRcdFx0XHRcdG1hcmdpbjogMXJlbSAwO1xuXHRcdFx0XHRcdHRleHQtYWxpZ246IGp1c3RpZnk7XG5cdFx0XHRcdH1cblx0XHRcdFx0LmNoYXB0ZXIge1xuXHRcdFx0XHRcdC5jaGFwdGVyLXRpdGxlIHtcblx0XHRcdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cdFx0XHRcdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdFx0XHRcdFx0bWFyZ2luOiAxLjVyZW0gMCAxcmVtIDA7XG5cdFx0XHRcdFx0XHQ+IGgyIHtcblx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOiAxLjVyZW07XG5cdFx0XHRcdFx0XHRcdG1hcmdpbi1yaWdodDogMC41cmVtO1xuXHRcdFx0XHRcdFx0XHRjb2xvcjogd2hpdGU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQ+IGhyIHtcblx0XHRcdFx0XHRcdFx0ZmxleC1ncm93OiAxO1xuXHRcdFx0XHRcdFx0XHRib3JkZXI6IDEuNXB4IHNvbGlkIGdyYXk7XG5cdFx0XHRcdFx0XHRcdGJvcmRlci1yYWRpdXM6IDFyZW07XG5cdFx0XHRcdFx0XHRcdG1pbi13aWR0aDogMXJlbTtcblx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZDogZ3JheTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cCB7XG5cdFx0XHRcdFx0XHRtYXJnaW46IDAuNnJlbSAwO1xuXHRcdFx0XHRcdFx0dGV4dC1hbGlnbjoganVzdGlmeTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0b2wge1xuXHRcdFx0XHRcdFx0cGFkZGluZy1sZWZ0OiAycmVtO1xuXHRcdFx0XHRcdFx0bGkge1xuXHRcdFx0XHRcdFx0XHRsaXN0LXN0eWxlLXR5cGU6IGRlY2ltYWw7XG5cdFx0XHRcdFx0XHRcdGxpbmUtaGVpZ2h0OiAxLjhyZW07XG5cdFx0XHRcdFx0XHRcdGEge1xuXHRcdFx0XHRcdFx0XHRcdGNvbG9yOiAjNGU5YWRiO1xuXHRcdFx0XHRcdFx0XHRcdCY6aG92ZXIge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdEBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuXHRcdFx0aDEge1xuXHRcdFx0XHRmb250LXNpemU6IDEuNXJlbTtcblx0XHRcdH1cblx0XHRcdGgyIHtcblx0XHRcdFx0Zm9udC1zaXplOiAxLjNyZW07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdHNjcmlwdC5cblx0XHRpbXBvcnQgdGFncyBmcm9tICcuLi9jb21wb25lbnRzL3RhZ3MnXG5cdFx0aW1wb3J0IHByb2plY3RzQXJyYXkgZnJvbSAnLi4vZGF0YSdcblx0XHRpbXBvcnQgd2VicCBmcm9tICcuLi9jb21wb25lbnRzL3dlYnAnXG5cdFx0aW1wb3J0IHNjcm9sbCBmcm9tICcuLi9qcy9zY3JvbGwnXG5cblx0XHR0aGlzLnByb2plY3QgPSB7XG5cdFx0XHRuYW1lOiAnJyxcblx0XHRcdHN1YjogJycsXG5cdFx0XHRpbWc6ICcnLFxuXHRcdFx0dmlkZW86ICcnLFxuXHRcdFx0dGV4dDogJycsXG5cdFx0XHRpbXBsZW1lbnQ6ICcnLFxuXHRcdFx0a2V5d29yZHM6IFtdXG5cdFx0fVxuXG5cdFx0dGhpcy5vbigncm91dGUnLCBwcm9qZWN0TmFtZSA9PiB7XG5cdFx0XHR0aGlzLnVwZGF0ZSh7XG5cdFx0XHRcdHByb2plY3Q6IHByb2plY3RzQXJyYXkuZmlsdGVyKGQgPT4gZC5uYW1lID09PSBwcm9qZWN0TmFtZS5yZXBsYWNlKC9fL2csICcgJykpWzBdXG5cdFx0XHR9KVxuXG5cdFx0XHRzY3JvbGwubW92ZSgpXG5cdFx0fSkiLCJwcm9qZWN0QWxsXG5cdHNlY3Rpb25cblx0XHQuY29udGFpbmVyXG5cdFx0XHRoMi5zZWN0aW9uLXRpdGxlIFByb2plY3RzXG5cdFx0XHR1bFxuXHRcdFx0XHRhKGVhY2g9J3twIGluIGNhdGVnb3JpZXN9JyBvbmNsaWNrPSd7Y2xpY2suYmluZCh0aGlzLCBwKX0nKVxuXHRcdFx0XHRcdGxpKGlmPSd7c2VsZWN0ZWRDYXRlZ29yeSAhPT0gcH0nKSB7cH1cblx0XHRcdFx0XHRsaS5zZWxlY3RlZChpZj0ne3NlbGVjdGVkQ2F0ZWdvcnkgPT09IHB9Jykge3B9XG5cdFx0XHRwcm9qZWN0cyhjYXRlZ29yeT0ne3NlbGVjdGVkQ2F0ZWdvcnl9Jylcblx0Zm9vdGVyXG5cblx0c3R5bGUodHlwZT0nc2NzcycpLlxuXHRcdDpzY29wZSB7XG5cdFx0XHQ+IHNlY3Rpb24ge1xuXHRcdFx0XHRiYWNrZ3JvdW5kOiAjZWVlZWVlO1xuXHRcdFx0XHRjb2xvcjogIzIyMjIyMjtcblx0XHRcdFx0bWluLWhlaWdodDogMTAwdmg7XG5cdFx0XHRcdC5jb250YWluZXIge1xuXHRcdFx0XHRcdHVsIHtcblx0XHRcdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cdFx0XHRcdFx0XHRtYXgtd2lkdGg6IDQwMHB4O1xuXHRcdFx0XHRcdFx0cGFkZGluZzogMCAxLjVyZW07XG5cdFx0XHRcdFx0XHRtYXJnaW46IDFyZW0gYXV0byAwIGF1dG87XG5cdFx0XHRcdFx0XHRsaSB7XG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMC44cmVtO1xuXHRcdFx0XHRcdFx0XHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdFx0XHRcdFx0XHRcdGNvbG9yOiBncmF5O1xuXHRcdFx0XHRcdFx0XHRwYWRkaW5nOiAwLjVyZW0gMC41cmVtO1xuXHRcdFx0XHRcdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0XHRcdFx0XHRcdGJvcmRlcjogMXB4IHNvbGlkO1xuXHRcdFx0XHRcdFx0XHRib3JkZXItcmFkaXVzOiAycmVtO1xuXHRcdFx0XHRcdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0XHRcdFx0XHRcdCYuc2VsZWN0ZWQge1xuXHRcdFx0XHRcdFx0XHRcdGNvbG9yOiB3aGl0ZTtcblx0XHRcdFx0XHRcdFx0XHRiYWNrZ3JvdW5kOiBncmF5O1xuXHRcdFx0XHRcdFx0XHRcdGJvcmRlci1jb2xvcjogZ3JheTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRzY3JpcHQuXG5cdFx0aW1wb3J0IHByb2plY3RzIGZyb20gJy4uL2NvbXBvbmVudHMvcHJvamVjdHMnXG5cdFx0aW1wb3J0IHJvdXRlIGZyb20gJ3Jpb3Qtcm91dGUvbGliL3RhZydcblx0XHRpbXBvcnQgc2Nyb2xsIGZyb20gJy4uL2pzL3Njcm9sbCdcblxuXHRcdHRoaXMuY2F0ZWdvcmllcyA9IFsnQWxsJywgJ0FuZHJvaWQnLCAnV2ViJywgJ0Rlc2t0b3AnLCAnRGVzaWduJ11cblx0XHR0aGlzLnNlbGVjdGVkQ2F0ZWdvcnlcblxuXHRcdHRoaXMub24oJ3JvdXRlJywgKCkgPT4ge1xuXHRcdFx0aWYgKHJvdXRlLnF1ZXJ5KCkuY2F0ZWdvcnkgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aGlzLnVwZGF0ZSh7IHNlbGVjdGVkQ2F0ZWdvcnk6IHJvdXRlLnF1ZXJ5KCkuY2F0ZWdvcnkgfSlcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMudXBkYXRlKHsgc2VsZWN0ZWRDYXRlZ29yeTogdGhpcy5jYXRlZ29yaWVzWzBdIH0pXG5cdFx0XHR9XG5cblx0XHRcdHNjcm9sbC5tb3ZlKClcblx0XHR9KVxuXG5cdFx0Y2xpY2socCkge1xuXHRcdFx0dGhpcy51cGRhdGUoeyBzZWxlY3RlZENhdGVnb3J5OiBwIH0pXG5cdFx0fSIsImxpa2Vcblx0aDIuc2VjdGlvbi10aXRsZSBMaWtlXG5cblx0LnB1cmUtZ1xuXHRcdC5saWtlLWJveC5wdXJlLXUtMS0xLnB1cmUtdS1zbS0xLTIucHVyZS11LW1kLTEtM1xuXHRcdFx0Lmxpa2Vcblx0XHRcdFx0aDMgRG9cblx0XHRcdFx0aHJcblx0XHRcdFx0dWxcblx0XHRcdFx0XHRsaShlYWNoPSd7dCwgaSBpbiBkb30nKSB7bH1cblx0XHRcdFx0XHRcdHNwYW4uaWNvbiB7aX1cblx0XHRcdFx0XHRcdHNwYW4udGV4dCB7dH1cblx0XHQubGlrZS1ib3gucHVyZS11LTEtMS5wdXJlLXUtc20tMS0yLnB1cmUtdS1tZC0xLTNcblx0XHRcdC5saWtlXG5cdFx0XHRcdGgzIFdhdGNoXG5cdFx0XHRcdGhyXG5cdFx0XHRcdHVsXG5cdFx0XHRcdFx0bGkoZWFjaD0ne3QsIGkgaW4gd2F0Y2h9Jylcblx0XHRcdFx0XHRcdHNwYW4uaWNvbiB7aX1cblx0XHRcdFx0XHRcdHNwYW4udGV4dCB7dH1cblx0XHQubGlrZS1ib3gucHVyZS11LTEtMS5wdXJlLXUtc20tMS0yLnB1cmUtdS1tZC0xLTNcblx0XHRcdC5saWtlXG5cdFx0XHRcdGgzIEVhdFxuXHRcdFx0XHRoclxuXHRcdFx0XHR1bFxuXHRcdFx0XHRcdGxpKGVhY2g9J3t0LCBpIGluIGVhdH0nKVxuXHRcdFx0XHRcdFx0c3Bhbi5pY29uIHtpfVxuXHRcdFx0XHRcdFx0c3Bhbi50ZXh0IHt0fVxuXG5cdHN0eWxlKHR5cGU9J3Njc3MnKS5cblx0XHQ6c2NvcGUge1xuXHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHQ+IGRpdiB7XG5cdFx0XHRcdHBhZGRpbmc6IDAuNzVyZW07XG5cdFx0XHRcdC5saWtlLWJveCB7XG5cdFx0XHRcdFx0cGFkZGluZzogMC43NXJlbTtcblx0XHRcdFx0XHQubGlrZSB7XG5cdFx0XHRcdFx0XHRiYWNrZ3JvdW5kOiAjNDE0MTQxO1xuXHRcdFx0XHRcdFx0cGFkZGluZzogMC42cmVtIDFyZW07XG5cdFx0XHRcdFx0XHRib3JkZXItcmFkaXVzOiAwLjNyZW07XG5cdFx0XHRcdFx0XHRoMyB7XG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMS40cmVtO1xuXHRcdFx0XHRcdFx0XHRtYXJnaW4tYm90dG9tOiAwLjVyZW07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRociB7XG5cdFx0XHRcdFx0XHRcdGJvcmRlci1yYWRpdXM6IDFyZW07XG5cdFx0XHRcdFx0XHRcdG1hcmdpbjogMC41cmVtIDA7XG5cdFx0XHRcdFx0XHRcdGJvcmRlcjogMS41cHggc29saWQ7XG5cdFx0XHRcdFx0XHRcdGJvcmRlci1jb2xvcjogZ3JleTtcblx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZDogZ3JheTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHVsIGxpIHtcblx0XHRcdFx0XHRcdFx0bGluZS1oZWlnaHQ6IDJyZW07XG5cdFx0XHRcdFx0XHRcdC5pY29uIHtcblx0XHRcdFx0XHRcdFx0XHRmb250LXNpemU6IDEuNHJlbTtcblx0XHRcdFx0XHRcdFx0XHR3aWR0aDogMnJlbTtcblx0XHRcdFx0XHRcdFx0XHRkaXNwbGF5OiBpbmxpbmUtZmxleDtcblx0XHRcdFx0XHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHQudGV4dCB7XG5cdFx0XHRcdFx0XHRcdFx0Zm9udC1zaXplOiAxLjJyZW07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0c2NyaXB0LlxuXHRcdHRoaXMuZG8gPSB7XG5cdFx0XHQn8J+Suyc6ICfjg5fjg63jgrDjg6njg5/jg7PjgrAnLFxuXHRcdFx0J/CfkZ8nOiAn5pWj5q2pJyxcblx0XHRcdCfwn46kJzogJ+S4gOS6uuOCq+ODqeOCquOCsScsXG5cdFx0XHQn8J+alyc6ICfjg5/jg4vjg4Hjg6XjgqLpm4bjgoEnLFxuXHRcdH1cblxuXHRcdHRoaXMud2F0Y2ggPSB7XG5cdFx0XHQn8J+OrCc6ICfmmKDnlLsnLFxuXHRcdFx0J/CfmIYnOiAn44GK56yR44GE44ON44K/Jyxcblx0XHRcdCfwn5GWJzogJ+acjScsXG5cdFx0XHQn8J+Tuic6ICfjg6Hjg4fjgqPjgqLjgqLjg7zjg4gnXG5cdFx0fVxuXG5cdFx0dGhpcy5lYXQgPSB7XG5cdFx0XHQn8J+Noyc6ICflr7/lj7gnLFxuXHRcdFx0J/CfjZUnOiAn44OU44K2Jyxcblx0XHRcdCfwn42cJzogJ+ODqeODvOODoeODsycsXG5cdFx0XHQn8J+NsCc6ICfjgrHjg7zjgq0nXG5cdFx0fSIsInNraWxsc1xuXHRoMi5zZWN0aW9uLXRpdGxlIFNraWxsc1xuXHQucHVyZS1nXG5cdFx0dWwuc2tpbGwtYm94LnB1cmUtdS1zbS0xLTIucHVyZS11LW1kLTEtMy5wdXJlLXUtMS0xXG5cdFx0XHRsaShlYWNoPSd7IHMgaW4gc2tpbGxzIH0nKVxuXHRcdFx0XHQuc2tpbGwtaW5mb1xuXHRcdFx0XHRcdHNwYW4ubmFtZSB7cy5uYW1lfVxuXHRcdFx0XHRcdHNwYW4uc3ViIHtzLnN1Yn1cblx0XHRcdFx0LmJhclxuXHRcdFx0XHRcdC5sZXZlbChzdHlsZT0nd2lkdGg6e3MubGV2ZWx9OycpXG5cdFx0dWwuc2tpbGwtYm94LnB1cmUtdS1zbS0xLTIucHVyZS11LW1kLTEtMy5wdXJlLXUtMS0xXG5cdFx0XHRsaShlYWNoPSd7IHMgaW4gc2tpbGxzMSB9Jylcblx0XHRcdFx0LnNraWxsLWluZm9cblx0XHRcdFx0XHRzcGFuLm5hbWUge3MubmFtZX1cblx0XHRcdFx0XHRzcGFuLnN1YiB7cy5zdWJ9XG5cdFx0XHRcdC5iYXJcblx0XHRcdFx0XHQubGV2ZWwoc3R5bGU9J3dpZHRoOntzLmxldmVsfTsnKVxuXHRcdHVsLnNraWxsLWJveC5wdXJlLXUtc20tMS0yLnB1cmUtdS1tZC0xLTMucHVyZS11LTEtMVxuXHRcdFx0bGkoZWFjaD0neyBzIGluIHNraWxsczIgfScpXG5cdFx0XHRcdC5za2lsbC1pbmZvXG5cdFx0XHRcdFx0c3Bhbi5uYW1lIHtzLm5hbWV9XG5cdFx0XHRcdFx0c3Bhbi5zdWIge3Muc3VifVxuXHRcdFx0XHQuYmFyXG5cdFx0XHRcdFx0LmxldmVsKHN0eWxlPSd3aWR0aDp7cy5sZXZlbH07JylcblxuXHRzdHlsZSh0eXBlPSdzY3NzJykuXG5cdFx0OnNjb3BlIHtcblx0XHRcdD4gZGl2IHtcblx0XHRcdFx0cGFkZGluZzogMC43NXJlbTtcblx0XHRcdFx0LnNraWxsLWJveCB7XG5cdFx0XHRcdFx0cGFkZGluZzogMC43NXJlbTtcblx0XHRcdFx0XHQ+IGxpIHtcblx0XHRcdFx0XHRcdG1hcmdpbi1ib3R0b206IDEuMnJlbTtcblx0XHRcdFx0XHRcdC5za2lsbC1pbmZvIHtcblx0XHRcdFx0XHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdFx0XHRcdFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXHRcdFx0XHRcdFx0XHRhbGlnbi1pdGVtczogYmFzZWxpbmU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQubmFtZSB7XG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMS4zZW07XG5cdFx0XHRcdFx0XHRcdG1hcmdpbi1yaWdodDogMC41cmVtO1xuXHRcdFx0XHRcdFx0XHRmb250LXdlaWdodDogMzAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0LnN1YiB7XG5cdFx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMC44NXJlbTtcblx0XHRcdFx0XHRcdFx0Y29sb3I6ICNiZGJkYmQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQuYmFyIHtcblx0XHRcdFx0XHRcdFx0YmFja2dyb3VuZDogIzRiNGI0Yjtcblx0XHRcdFx0XHRcdFx0Ym9yZGVyLXJhZGl1czogMXJlbTtcblx0XHRcdFx0XHRcdFx0LmxldmVsIHtcblx0XHRcdFx0XHRcdFx0XHRoZWlnaHQ6IDAuN3JlbTtcblx0XHRcdFx0XHRcdFx0XHRib3JkZXItcmFkaXVzOiAxcmVtO1xuXHRcdFx0XHRcdFx0XHRcdGJhY2tncm91bmQ6ICNlYWVhZWE7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0c2NyaXB0LlxuXHRcdHRoaXMuc2tpbGxzID0gW3tcblx0XHRcdG5hbWU6ICdBbmRyb2lkJyxcblx0XHRcdHN1YjogJ1J4IE9raHR0cCBSZXRyb2ZpdCcsXG5cdFx0XHRsZXZlbDogJzcwJSdcblx0XHR9LHtcblx0XHRcdG5hbWU6ICdLb3RsaW4nLFxuXHRcdFx0c3ViOiAnQW5rbyBLdG9yJyxcblx0XHRcdGxldmVsOiAnODAlJ1xuXHRcdH0se1xuXHRcdFx0bmFtZTogJ0phdmEnLFxuXHRcdFx0c3ViOiAnJyxcblx0XHRcdGxldmVsOiAnODUlJ1xuXHRcdH0se1xuXHRcdFx0bmFtZTogJ1Byb2Nlc3NpbmcnLFxuXHRcdFx0c3ViOiAnJyxcblx0XHRcdGxldmVsOiAnOTAlJ1xuXHRcdH1dXG5cblx0XHR0aGlzLnNraWxsczEgPSBbe1xuXHRcdFx0bmFtZTogJ0hUTUwnLFxuXHRcdFx0c3ViOiAnUHVnIE1hcmtkb3duJyxcblx0XHRcdGxldmVsOiAnOTAlJ1xuXHRcdH0se1xuXHRcdFx0bmFtZTogJ0NTUycsXG5cdFx0XHRzdWI6ICdTYXNzIFBvc3RDU1MgQ1NTLU1vZHVsZXMnLFxuXHRcdFx0bGV2ZWw6ICc4NSUnXG5cdFx0fSx7XG5cdFx0XHRuYW1lOiAnSmF2YVNjcmlwdCcsXG5cdFx0XHRzdWI6ICdSZWFjdCBWdWUgTm9kZScsXG5cdFx0XHRsZXZlbDogJzkwJSdcblx0XHR9LHtcblx0XHRcdG5hbWU6ICdQSFAnLFxuXHRcdFx0c3ViOiAnJyxcblx0XHRcdGxldmVsOiAnNDAlJ1xuXHRcdH1dXG5cblx0XHR0aGlzLnNraWxsczIgPSBbe1xuXHRcdFx0bmFtZTogJ0dpdCcsXG5cdFx0XHRzdWI6ICcnLFxuXHRcdFx0bGV2ZWw6ICc2MCUnXG5cdFx0fSx7XG5cdFx0XHRuYW1lOiAnSWxsdXN0cmF0b3InLFxuXHRcdFx0c3ViOiAnJyxcblx0XHRcdGxldmVsOiAnODAlJ1xuXHRcdH0se1xuXHRcdFx0bmFtZTogJ0NhY29vJyxcblx0XHRcdHN1YjogJycsXG5cdFx0XHRsZXZlbDogJzQwJSdcblx0XHR9LHtcblx0XHRcdG5hbWU6ICdQcm90dCcsXG5cdFx0XHRzdWI6ICcnLFxuXHRcdFx0bGV2ZWw6ICczMCUnXG5cdFx0fV0iLCJlZHVjYXRpb25cblx0aDIuc2VjdGlvbi10aXRsZSBFZHVjYXRpb25cblx0bGlzdChpdGVtcz0ne3NjaG9vbHN9JylcblxuXHRzY3JpcHQuXG5cdFx0aW1wb3J0IGxpc3QgZnJvbSAnLi9saXN0J1xuXG5cdFx0dGhpcy5zY2hvb2xzID0gW3tcblx0XHRcdGRhdGU6ICcyMDEwLTA0IC0gMjAxMy0wMycsXG5cdFx0XHR0aXRsZTogJ+acrOmDt+mrmOetieWtpuagoScsXG5cdFx0XHR0ZXh0czogW1xuXHRcdFx0XHQn5p2x5Lqs44O75bej6bSo44Gr44GC44KL56eB56uL44Gu5Lit6auY5LiA6LKr5qChJyxcblx0XHRcdFx0J+eUn+W+kuS8muODu+aWmeeQhueglOeptuS8muODu+e+juihk+mDqOOBq+aJgOWxnicsXG5cdFx0XHRdLFxuXHRcdFx0bGluazogJ2h0dHA6Ly93d3cuaG9uZ28uZWQuanAvJyxcblx0XHR9LHtcblx0XHRcdGRhdGU6ICcyMDEzLTA0IC0gMjAxNy0wMycsXG5cdFx0XHR0aXRsZTogJ+aYjuayu+Wkp+WtpicsXG5cdFx0XHR0ZXh0czogW1xuXHRcdFx0XHQn57eP5ZCI5pWw55CG5a2m6YOoIOWFiOerr+ODoeODh+OCo+OCouOCteOCpOOCqOODs+OCueWtpuenkSAx5pyf55SfJyxcblx0XHRcdFx0J1BD44Gn44Kz44Oz44OG44Oz44OE5Yi25L2c44KS44GZ44KL44K144O844Kv44Or44KS56uL44Gh5LiK44GS44CB5bm55LqL6ZW344KS5YuZ44KB44KLJyxcblx0XHRcdF0sXG5cdFx0XHRsaW5rOiAnaHR0cDovL3d3dy5tZWlqaS5hYy5qcC9pbXMvc3ViamVjdC9mbXMvJyxcblx0XHR9LHtcblx0XHRcdGRhdGU6ICcyMDE3LTA0IC0gMjAxOS0wMycsXG5cdFx0XHR0aXRsZTogJ+aYjuayu+Wkp+WtpuWkp+WtpumZoicsXG5cdFx0XHR0ZXh0czogW1xuXHRcdFx0XHQn5YWI56uv5pWw55CG56eR5a2m56CU56m256eRIOWFiOerr+ODoeODh+OCo+OCouOCteOCpOOCqOODs+OCueWwguaUuyDkv67lo6vvvIjlt6XlrabvvIknLFxuXHRcdFx0XHQn44Oi44OQ44Kk44OrIC8g44Km44Kn44Ki44Op44OW44Or44OH44OQ44Kk44K544Gr6Zai44GZ44KL44Kk44Oz44K/44Op44Kv44K344On44Oz44Gu56CU56m2Jyxcblx0XHRcdFx0J+OCouODq+ODkOOCpOODiOOBp+ODleODreODs+ODiOOCqOODs+ODieOCqOODs+OCuOODi+OCouOBqOOBl+OBpuWDjeOBjydcblx0XHRcdF0sXG5cdFx0XHRsaW5rOiAnaHR0cDovL3d3dy5tZWlqaS5hYy5qcC9hbXMvcHJvZmVzc29yL0ZNUy5odG1sJyxcblx0XHR9XSIsInByb2ZpbGVcblx0c2VjdGlvblxuXHRcdC5jb250YWluZXJcblx0XHRcdGgyLnNlY3Rpb24tdGl0bGUgUHJvZmlsZVxuXHRcdFx0YWJvdXRcblx0XHRcdGxpa2Vcblx0XHRcdHNraWxsc1xuXHRcdFx0ZWR1Y2F0aW9uXG5cdGZvb3RlclxuXG5cdHN0eWxlKHR5cGU9J3Njc3MnKS5cblx0XHQ6c2NvcGUge1xuXHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHRiYWNrZ3JvdW5kOiAjMmIyYjJiO1xuXHRcdFx0Y29sb3I6ICNlZmVmZWY7XG5cdFx0fVxuXG5cdHNjcmlwdC5cblx0XHRpbXBvcnQgYWJvdXQgZnJvbSAnLi4vY29tcG9uZW50cy9hYm91dCdcblx0XHRpbXBvcnQgZWR1Y2F0aW9uIGZyb20gJy4uL2NvbXBvbmVudHMvZWR1Y2F0aW9uJ1xuXHRcdGltcG9ydCBza2lsbHMgZnJvbSAnLi4vY29tcG9uZW50cy9za2lsbHMnXG5cdFx0aW1wb3J0IGxpa2UgZnJvbSAnLi4vY29tcG9uZW50cy9saWtlJ1xuXHRcdGltcG9ydCBzY3JvbGwgZnJvbSAnLi4vanMvc2Nyb2xsJ1xuXG5cdFx0dGhpcy5vbigncm91dGUnLCAoKSA9PiB7XG5cdFx0XHRzY3JvbGwubW92ZSgpXG5cdFx0fSkiLCJtb3JlXG5cdGEoaHJlZj0ne29wdHMubGlua30nIHRpdGxlPSd7b3B0cy50aXRsZX0nKVxuXHRcdHNwYW4ubW9yZS1idXR0b24ge3RleHR9XG5cblx0c3R5bGUodHlwZT0nc2NzcycpLlxuXHRcdDpzY29wZSB7XG5cdFx0XHRwYWRkaW5nOiAwIDEuNXJlbSAxLjVyZW0gMS41cmVtO1xuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHQgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHQ+IGEgPiBzcGFuIHtcblx0XHRcdFx0cGFkZGluZzogMC41cmVtO1xuXHRcdFx0XHRiYWNrZ3JvdW5kOiBncmV5O1xuXHRcdFx0XHRjb2xvcjogd2hpdGU7XG5cdFx0XHRcdGJvcmRlci1yYWRpdXM6IDNyZW07XG5cdFx0XHRcdG1pbi13aWR0aDogMTByZW07XG5cdFx0XHRcdHRleHQtYWxpZ246IGNlbnRlcjtcblx0XHRcdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0XHRcdCY6aG92ZXIge1xuXHRcdFx0XHRcdGJhY2tncm91bmQ6ICNhM2EzYTM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0c2NyaXB0LlxuXHRcdHRoaXMudGV4dCA9ICh0aGlzLm9wdHMudGV4dCAhPT0gdW5kZWZpbmVkKVxuXHRcdFx0PyB0aGlzLm9wdHMudGV4dFxuXHRcdFx0OiAnbW9yZSciLCJjbHVic1xuXHRsaXN0KGl0ZW1zPSd7Y2x1YnN9JylcblxuXHRzY3JpcHQuXG5cdFx0aW1wb3J0IGxpc3QgZnJvbSAnLi9saXN0J1xuXG5cdFx0dGhpcy5jbHVicyA9IFt7XG5cdFx0XHRkYXRlOiAnMjAxMy0wNCAtIDIwMTctMDMnLFxuXHRcdFx0dGl0bGU6ICfnt4/lkIjjgrPjg7Pjg4bjg7Pjg4TliLbkvZzjgrXjg7zjgq/jg6snLFxuXHRcdFx0dGV4dHM6IFtcblx0XHRcdFx0J+ODh+OCuOOCv+ODq+OCs+ODs+ODhuODs+ODhOWItuS9nO+8iOmfs+alveODu+WLleeUu+ODu+OCsuODvOODoOODu+OCpOODqeOCueODiOODu+aWh+iKuO+8ieOCkuihjOOBhuWkp+WtpuWGheOBruOCteODvOOCr+ODqycsXG5cdFx0XHRcdCflkIzkurrjgqTjg5njg7Pjg4jjgafjga7poJLluIPvvIjjgrPjg5/jg4Pjgq/jg57jg7zjgrHjg4Pjg4jjg7tNM++8iScsXG5cdFx0XHRcdCfoqK3nq4vjg6Hjg7Pjg5Djg7zvvIblubnkuovplbcnXG5cdFx0XHRdLFxuXHRcdFx0bGluazogJ2h0dHBzOi8vc29rb24uanAvJyxcblx0XHR9LHtcblx0XHRcdGRhdGU6ICcyMDE2LTA0IC0gMjAxNy0wNicsXG5cdFx0XHR0aXRsZTogJ05ha2FubyBDb21wdXRlciBDbHViJyxcblx0XHRcdHRleHRzOiBbXG5cdFx0XHRcdCfjg5fjg63jgrDjg6njg5/jg7PjgrDjgavplqLjgZnjgovmg4XloLHlhbHmnInjgoTli4nlvLfkvJrjga7lrp/mlr3jgpLooYzjgYblpKflrablhoXjga7jgrXjg7zjgq/jg6snLFxuXHRcdFx0XHQn5ZCM5Lq644Kk44OZ44Oz44OI44Gn44Gu6aCS5biD77yI44Kz44Of44OD44Kv44Oe44O844Kx44OD44OI44O75oqA6KGT5pu45YW477yJJ1xuXHRcdFx0XSxcblx0XHRcdGxpbms6ICdodHRwczovL21laWppLW5jYy50ZWNoLycsXG5cdFx0fSx7XG5cdFx0XHRkYXRlOiAnMjAxNy0wNCAtIDIwMTktMDMnLFxuXHRcdFx0dGl0bGU6ICdmdW1ibGUgd2FhbHMnLFxuXHRcdFx0dGV4dHM6IFtcblx0XHRcdFx0J+OCquODquOCuOODiuODq+ODnOODvOODieOCsuODvOODoOOBruWItuS9nOOCkuihjOOBhuacieW/l+OBq+OCiOOCi+OCteODvOOCr+ODqycsXG5cdFx0XHRcdCflkIzkurrjgqTjg5njg7Pjg4jjgafjga7poJLluIPvvIjjgrPjg5/jg4Pjgq/jg57jg7zjgrHjg4Pjg4jjg7vjgrLjg7zjg6Djg57jg7zjgrHjg4Pjg4jvvIknLFxuXHRcdFx0XHQn5LyB55S744GL44KJ5Yi25L2c44CB6LKp5aOy44G+44Gn6KGM44GG44GM44CB5Li744Gr44OH44K244Kk44Oz44KS5ouF5b2TJ1xuXHRcdFx0XSxcblx0XHRcdGxpbms6ICdodHRwOi8vZnVtYmxld2FhbHMuY29tLycsXG5cdFx0fV0iLCJwdWJsaWNhdGlvbnNcblx0bGlzdChpdGVtcz0ne3B1YmxpY2F0aW9uc30nKVxuXG5cdHNjcmlwdC5cblx0XHRpbXBvcnQgbGlzdCBmcm9tICcuL2xpc3QnXG5cblx0XHR0aGlzLnB1YmxpY2F0aW9ucyA9IFt7XG5cdFx0XHRkYXRlOiAnMjAxNS0xMicsXG5cdFx0XHR0aXRsZTogJ1NlbnNvclBpcGUnLFxuXHRcdFx0dGV4dHM6IFtcblx0XHRcdFx0J+mzpeWxsSDjgonjgYTjgYssIOWuruS4iyDoirPmmI4uIFNlbnNvclBpcGU6IOOCueODnuODvOODiOODleOCqeODs+WBtOOBruODl+ODreOCsOODqeODn+ODs+OCsOOCkuS4gOWIh+ihjOOCj+OBquOBhOOCueODnuODvOODiOODleOCqeODs+mAo+aQuuODl+ODreOCsOODqeODn+ODs+OCsCwg56ysMjPlm57jgqTjg7Pjgr/jg6njgq/jg4bjgqPjg5bjgrfjgrnjg4bjg6Djgajjgr3jg5Xjg4jjgqbjgqfjgqLjgavplqLjgZnjgovjg6/jg7zjgq/jgrfjg6fjg4Pjg5foq5bmlofpm4YgKFdJU1MgMjAxNSksIDIwMTUuJ1xuXHRcdFx0XSxcblx0XHRcdGxpbms6ICdodHRwczovL3Jlc2VhcmNoLm1peWFzaGl0YS5jb20vMjAxNS9EMTYwLycsXG5cdFx0fSx7XG5cdFx0XHRkYXRlOiAnMjAxOC0wMycsXG5cdFx0XHR0aXRsZTogJ+OCpOODs+OCv+ODqeOCr+ODhuOCo+ODluODkeODg+OCseODvOOCuCcsXG5cdFx0XHR0ZXh0czogW1xuXHRcdFx0XHQn5Yqg6Jek6YKm5ouTLCDoloTnvr3lpKfmqLksIOmzpeWxseOCieOBhOOBiywg56u55YaF44G+44KGLCDph47ltI7njrLpgqMsIOe0sOiwt+e+juaciCwg5a6u5LiL6Iqz5piOLiDjgr/jg4Pjg4Hjg5Hjg43jg6vjgpLmi6HlvLXjgZnjgovntJnoo73jgqTjg7Pjgr/jg5Xjgqfjg7zjgrnjgpLmkK3ovInjgZfjgZ/jgqTjg7Pjgr/jg6njgq/jg4bjgqPjg5bjg5Hjg4PjgrHjg7zjgrjjga7plovnmbosIOOCpOODs+OCv+ODqeOCr+OCt+ODp+ODszIwMTjoq5bmlofpm4YsIHBwLjg4OS04OTQsIDIwMTguJ1xuXHRcdFx0XSxcblx0XHRcdGxpbms6ICdodHRwczovL3Jlc2VhcmNoLm1peWFzaGl0YS5jb20vMjAxOC9EMTkzLycsXG5cdFx0fSx7XG5cdFx0XHRkYXRlOiAnMjAxOC0wOScsXG5cdFx0XHR0aXRsZTogJ+mAj+aYjuOCreODvOODnOODvOODiScsXG5cdFx0XHR0ZXh0czogW1xuXHRcdFx0XHQn6bOl5bGx44KJ44GE44GLLCDlrq7kuIvoirPmmI4uIOOCueODnuODvOODiOOCpuOCqeODg+ODgeWQkeOBkeOBruOCreODvOODiOODg+ODl+OBjOmAj+aYjuOBquaXpeacrOiqnuOBi+OBquWFpeWKm+OCpOODs+OCv+ODleOCp+ODvOOCuSwg56ysMjblm57jgqTjg7Pjgr/jg6njgq/jg4bjgqPjg5bjgrfjgrnjg4bjg6Djgajjgr3jg5Xjg4jjgqbjgqfjgqLjgavplqLjgZnjgovjg6/jg7zjgq/jgrfjg6fjg4Pjg5foq5bmlofpm4YgKFdJU1MgMjAxOCksIDIwMTguJ1xuXHRcdFx0XSxcblx0XHRcdGxpbms6ICdodHRwczovL3Jlc2VhcmNoLm1peWFzaGl0YS5jb20vcGFwZXJzL0QyMDInLFxuXHRcdH0se1xuXHRcdFx0ZGF0ZTogJzIwMTktMDMnLFxuXHRcdFx0dGl0bGU6ICdJbnZpc2libGVGbGljaycsXG5cdFx0XHR0ZXh0czogW1xuXHRcdFx0XHQn6bOl5bGx44KJ44GE44GLLCDlrq7kuIvoirPmmI4uIEludmlzaWJsZUZsaWNrOiDlsI/lnovjgr/jg4Pjg4Hjgrnjgq/jg6rjg7zjg7Pnq6/mnKvjgavjgYrjgZHjgovjgq3jg7zjg4jjg4Pjg5fjgYzpgI/mmI7jgarml6XmnKzoqp7lhaXlipvjgq3jg7zjg5zjg7zjg4ksIOeglOeptuWgseWRiuODkuODpeODvOODnuODs+OCs+ODs+ODlOODpeODvOOCv+OCpOODs+OCv+ODqeOCr+OCt+ODp+ODsyhIQ0kpLCBWb2wuMjAxOS1IQ0ktMTgyLCBJc3N1ZS4yNywgcHAuIDEtOCwgMjAxOS4nXG5cdFx0XHRdLFxuXHRcdFx0bGluazogJ2h0dHBzOi8vcmVzZWFyY2gubWl5YXNoaXRhLmNvbS9wYXBlcnMvRDIxOCcsXG5cdFx0fV0iLCJhd2FyZHNcblx0bGlzdChpdGVtcz0ne2F3YXJkc30nKVxuXG5cdHNjcmlwdC5cblx0XHRpbXBvcnQgbGlzdCBmcm9tICcuL2xpc3QnXG5cblx0XHR0aGlzLmF3YXJkcyA9IFt7XG5cdFx0XHRkYXRlOiAnMjAxNS0wNScsXG5cdFx0XHR0aXRsZTogJ0Nsb3VkIG4g44Ki44OX44Oq44Kx44O844K344On44Oz44Kz44Oz44OG44K544OIJyxcblx0XHRcdHRleHRzOiBbXG5cdFx0XHRcdCdXZWJSVEPos54g5Y+X6LOeJyxcblx0XHRcdFx0J+ODgeODvOODoO+8muaEj+itmOS4reOBj+OCieOBhOOBqOOBl+OBpuWPguWKoCcsXG5cdFx0XHRcdCfjg5fjg63jgrjjgqfjgq/jg4g6IEljaGltb25pdHRvJ1xuXHRcdFx0XSxcblx0XHRcdGxpbms6ICdodHRwOi8vd3d3LmNsb3Vkbi1zZXJ2aWNlLmNvbS9jYW0wNC1kZXZlbi9kZWNvbi90b2h5by8nLFxuXHRcdH0se1xuXHRcdFx0ZGF0ZTogJzIwMTctMTInLFxuXHRcdFx0dGl0bGU6ICfkv6Hlt57mnKrmnaXjgqLjg5fjg6rjgrPjg7Pjg4bjgrnjg4gwJyxcblx0XHRcdHRleHRzOiBbXG5cdFx0XHRcdCfkv6Hotormg4XloLHpgJrkv6Hmh4foq4fkvJrkvJrplbfos54g5Y+X6LOeJyxcblx0XHRcdFx0J+ODgeODvOODoO+8muaEj+itmOS4reOBj+OCieOBhOOBqOOBl+OBpuWPguWKoCcsXG5cdFx0XHRcdCfjg5fjg63jgrjjgqfjgq/jg4g6IE1pZGRsZURyaXZlJ1xuXHRcdFx0XSxcblx0XHRcdGxpbms6ICdodHRwczovL3NoaW5zaHUtZnV0dXJlYXBwLm5ldC9pbmZvcm1hdGlvbi9jb250ZXN0LycsXG5cdFx0fSx7XG5cdFx0XHRkYXRlOiAnMjAxMC0wMycsXG5cdFx0XHR0aXRsZTogJ+esrDE4MuWbniBIQ0nnoJTnqbbkvJonLFxuXHRcdFx0dGV4dHM6IFtcblx0XHRcdFx0J+WtpueUn+WlqOWKseizniDlj5fos54nLFxuXHRcdFx0XHQn44K544Oe44O844OI44Km44Kp44OD44OB5ZCR44GR44Gu44K944OV44OI44Km44Kn44Ki44Kt44O844Oc44O844OJ44Gr6Zai44GZ44KL56CU56m277yI5L+u5aOr6KuW5paH77yJJyxcblx0XHRcdFx0J+ODl+ODreOCuOOCp+OCr+ODiDogSW52aXNpYmxlRmxpY2snXG5cdFx0XHRdLFxuXHRcdFx0bGluazogJ2h0dHA6Ly93d3cuc2lnaGNpLmpwL2NvbnRlbnRzL3BhZ2UvbmV3cycsXG5cdFx0fV0iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiIsIi8vISBtb21lbnQuanNcbi8vISB2ZXJzaW9uIDogMi4yMC4xXG4vLyEgYXV0aG9ycyA6IFRpbSBXb29kLCBJc2tyZW4gQ2hlcm5ldiwgTW9tZW50LmpzIGNvbnRyaWJ1dG9yc1xuLy8hIGxpY2Vuc2UgOiBNSVRcbi8vISBtb21lbnRqcy5jb21cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBob29rQ2FsbGJhY2s7XG5cbmZ1bmN0aW9uIGhvb2tzICgpIHtcbiAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG59XG5cbi8vIFRoaXMgaXMgZG9uZSB0byByZWdpc3RlciB0aGUgbWV0aG9kIGNhbGxlZCB3aXRoIG1vbWVudCgpXG4vLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbmZ1bmN0aW9uIHNldEhvb2tDYWxsYmFjayAoY2FsbGJhY2spIHtcbiAgICBob29rQ2FsbGJhY2sgPSBjYWxsYmFjaztcbn1cblxuZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEFycmF5IHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgLy8gSUU4IHdpbGwgdHJlYXQgdW5kZWZpbmVkIGFuZCBudWxsIGFzIG9iamVjdCBpZiBpdCB3YXNuJ3QgZm9yXG4gICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgIHJldHVybiBpbnB1dCAhPSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICByZXR1cm4gKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoID09PSAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaztcbiAgICAgICAgZm9yIChrIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0ID09PSB2b2lkIDA7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgTnVtYmVyXSc7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIERhdGUgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5mdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgIHZhciByZXMgPSBbXSwgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBoYXNPd25Qcm9wKGEsIGIpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xufVxuXG5mdW5jdGlvbiBleHRlbmQoYSwgYikge1xuICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgYVtpXSA9IGJbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFzT3duUHJvcChiLCAndG9TdHJpbmcnKSkge1xuICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZztcbiAgICB9XG5cbiAgICBpZiAoaGFzT3duUHJvcChiLCAndmFsdWVPZicpKSB7XG4gICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCB0cnVlKS51dGMoKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGRlZXAgY2xvbmUgdGhpcyBvYmplY3QuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW1wdHkgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgIHVudXNlZFRva2VucyAgICA6IFtdLFxuICAgICAgICB1bnVzZWRJbnB1dCAgICAgOiBbXSxcbiAgICAgICAgb3ZlcmZsb3cgICAgICAgIDogLTIsXG4gICAgICAgIGNoYXJzTGVmdE92ZXIgICA6IDAsXG4gICAgICAgIG51bGxJbnB1dCAgICAgICA6IGZhbHNlLFxuICAgICAgICBpbnZhbGlkTW9udGggICAgOiBudWxsLFxuICAgICAgICBpbnZhbGlkRm9ybWF0ICAgOiBmYWxzZSxcbiAgICAgICAgdXNlckludmFsaWRhdGVkIDogZmFsc2UsXG4gICAgICAgIGlzbyAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICBwYXJzZWREYXRlUGFydHMgOiBbXSxcbiAgICAgICAgbWVyaWRpZW0gICAgICAgIDogbnVsbCxcbiAgICAgICAgcmZjMjgyMiAgICAgICAgIDogZmFsc2UsXG4gICAgICAgIHdlZWtkYXlNaXNtYXRjaCA6IGZhbHNlXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyc2luZ0ZsYWdzKG0pIHtcbiAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICB9XG4gICAgcmV0dXJuIG0uX3BmO1xufVxuXG52YXIgc29tZTtcbmlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbn0gZWxzZSB7XG4gICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XG4gICAgICAgIHZhciBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZChtKSB7XG4gICAgaWYgKG0uX2lzVmFsaWQgPT0gbnVsbCkge1xuICAgICAgICB2YXIgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSk7XG4gICAgICAgIHZhciBwYXJzZWRQYXJ0cyA9IHNvbWUuY2FsbChmbGFncy5wYXJzZWREYXRlUGFydHMsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICByZXR1cm4gaSAhPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGlzTm93VmFsaWQgPSAhaXNOYU4obS5fZC5nZXRUaW1lKCkpICYmXG4gICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgIWZsYWdzLmludmFsaWRNb250aCAmJlxuICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAhZmxhZ3Mud2Vla2RheU1pc21hdGNoICYmXG4gICAgICAgICAgICAhZmxhZ3MubnVsbElucHV0ICYmXG4gICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgKCFmbGFncy5tZXJpZGllbSB8fCAoZmxhZ3MubWVyaWRpZW0gJiYgcGFyc2VkUGFydHMpKTtcblxuICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICBpc05vd1ZhbGlkID0gaXNOb3dWYWxpZCAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLmNoYXJzTGVmdE92ZXIgPT09IDAgJiZcbiAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUludmFsaWQgKGZsYWdzKSB7XG4gICAgdmFyIG0gPSBjcmVhdGVVVEMoTmFOKTtcbiAgICBpZiAoZmxhZ3MgIT0gbnVsbCkge1xuICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbTtcbn1cblxuLy8gUGx1Z2lucyB0aGF0IGFkZCBwcm9wZXJ0aWVzIHNob3VsZCBhbHNvIGFkZCB0aGUga2V5IGhlcmUgKG51bGwgdmFsdWUpLFxuLy8gc28gd2UgY2FuIHByb3Blcmx5IGNsb25lIG91cnNlbHZlcy5cbnZhciBtb21lbnRQcm9wZXJ0aWVzID0gaG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdO1xuXG5mdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgdmFyIGksIHByb3AsIHZhbDtcblxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICB0by5faXNBTW9tZW50T2JqZWN0ID0gZnJvbS5faXNBTW9tZW50T2JqZWN0O1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgIHRvLl9pID0gZnJvbS5faTtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICB0by5fZiA9IGZyb20uX2Y7XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgdG8uX2wgPSBmcm9tLl9sO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgdG8uX3N0cmljdCA9IGZyb20uX3N0cmljdDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgIHRvLl90em0gPSBmcm9tLl90em07XG4gICAgfVxuICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgIHRvLl9pc1VUQyA9IGZyb20uX2lzVVRDO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgdG8uX29mZnNldCA9IGZyb20uX29mZnNldDtcbiAgICB9XG4gICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgdG8uX3BmID0gZ2V0UGFyc2luZ0ZsYWdzKGZyb20pO1xuICAgIH1cbiAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgdG8uX2xvY2FsZSA9IGZyb20uX2xvY2FsZTtcbiAgICB9XG5cbiAgICBpZiAobW9tZW50UHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwcm9wID0gbW9tZW50UHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICB0b1twcm9wXSA9IHZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0bztcbn1cblxudmFyIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcblxuLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbmZ1bmN0aW9uIE1vbWVudChjb25maWcpIHtcbiAgICBjb3B5Q29uZmlnKHRoaXMsIGNvbmZpZyk7XG4gICAgdGhpcy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5fZCAhPSBudWxsID8gY29uZmlnLl9kLmdldFRpbWUoKSA6IE5hTik7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wIGluIGNhc2UgdXBkYXRlT2Zmc2V0IGNyZWF0ZXMgbmV3IG1vbWVudFxuICAgIC8vIG9iamVjdHMuXG4gICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzTW9tZW50IChvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKTtcbn1cblxuZnVuY3Rpb24gYWJzRmxvb3IgKG51bWJlcikge1xuICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgIC8vIC0wIC0+IDBcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRvSW50KGFyZ3VtZW50Rm9yQ29lcmNpb24pIHtcbiAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICB2YWx1ZSA9IDA7XG5cbiAgICBpZiAoY29lcmNlZE51bWJlciAhPT0gMCAmJiBpc0Zpbml0ZShjb2VyY2VkTnVtYmVyKSkge1xuICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuZnVuY3Rpb24gY29tcGFyZUFycmF5cyhhcnJheTEsIGFycmF5MiwgZG9udENvbnZlcnQpIHtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgIGRpZmZzID0gMCxcbiAgICAgICAgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKChkb250Q29udmVydCAmJiBhcnJheTFbaV0gIT09IGFycmF5MltpXSkgfHxcbiAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSkpIHtcbiAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbn1cblxuZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICBpZiAoaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgKHR5cGVvZiBjb25zb2xlICE9PSAgJ3VuZGVmaW5lZCcpICYmIGNvbnNvbGUud2Fybikge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0aW9uIHdhcm5pbmc6ICcgKyBtc2cpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHtcbiAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICB2YXIgYXJnO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcmcgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnICs9ICdcXG5bJyArIGkgKyAnXSAnO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0ga2V5ICsgJzogJyArIGFyZ3VtZW50c1swXVtrZXldICsgJywgJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpOyAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWEgYW5kIHNwYWNlXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcmdzLnB1c2goYXJnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdhcm4obXNnICsgJ1xcbkFyZ3VtZW50czogJyArIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLmpvaW4oJycpICsgJ1xcbicgKyAobmV3IEVycm9yKCkpLnN0YWNrKTtcbiAgICAgICAgICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0sIGZuKTtcbn1cblxudmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBkZXByZWNhdGVTaW1wbGUobmFtZSwgbXNnKSB7XG4gICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihuYW1lLCBtc2cpO1xuICAgIH1cbiAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgIGRlcHJlY2F0aW9uc1tuYW1lXSA9IHRydWU7XG4gICAgfVxufVxuXG5ob29rcy5zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MgPSBmYWxzZTtcbmhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGw7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBGdW5jdGlvbiB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG5mdW5jdGlvbiBzZXQgKGNvbmZpZykge1xuICAgIHZhciBwcm9wLCBpO1xuICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ocHJvcCkpIHtcbiAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1snXycgKyBpXSA9IHByb3A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgIC8vIExlbmllbnQgb3JkaW5hbCBwYXJzaW5nIGFjY2VwdHMganVzdCBhIG51bWJlciBpbiBhZGRpdGlvbiB0b1xuICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX2RheU9mTW9udGhPcmRpbmFsUGFyc2UuXG4gICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICd8JyArICgvXFxkezEsMn0vKS5zb3VyY2UpO1xufVxuXG5mdW5jdGlvbiBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjaGlsZENvbmZpZykge1xuICAgIHZhciByZXMgPSBleHRlbmQoe30sIHBhcmVudENvbmZpZyksIHByb3A7XG4gICAgZm9yIChwcm9wIGluIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHBhcmVudENvbmZpZ1twcm9wXSkgJiYgaXNPYmplY3QoY2hpbGRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgcmVzW3Byb3BdID0ge307XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICBleHRlbmQocmVzW3Byb3BdLCBjaGlsZENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkQ29uZmlnW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlc1twcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHByb3AgaW4gcGFyZW50Q29uZmlnKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wKHBhcmVudENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICBpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgY2hhbmdlcyB0byBwcm9wZXJ0aWVzIGRvbid0IG1vZGlmeSBwYXJlbnQgY29uZmlnXG4gICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gTG9jYWxlKGNvbmZpZykge1xuICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldChjb25maWcpO1xuICAgIH1cbn1cblxudmFyIGtleXM7XG5cbmlmIChPYmplY3Qua2V5cykge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cztcbn0gZWxzZSB7XG4gICAga2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdmFyIGksIHJlcyA9IFtdO1xuICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChvYmosIGkpKSB7XG4gICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xufVxuXG52YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgIHNhbWVFbHNlIDogJ0wnXG59O1xuXG5mdW5jdGlvbiBjYWxlbmRhciAoa2V5LCBtb20sIG5vdykge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdykgOiBvdXRwdXQ7XG59XG5cbnZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgTFRTICA6ICdoOm1tOnNzIEEnLFxuICAgIExUICAgOiAnaDptbSBBJyxcbiAgICBMICAgIDogJ01NL0REL1lZWVknLFxuICAgIExMICAgOiAnTU1NTSBELCBZWVlZJyxcbiAgICBMTEwgIDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQSdcbn07XG5cbmZ1bmN0aW9uIGxvbmdEYXRlRm9ybWF0IChrZXkpIHtcbiAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV07XG5cbiAgICBpZiAoZm9ybWF0IHx8ICFmb3JtYXRVcHBlcikge1xuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV0gPSBmb3JtYXRVcHBlci5yZXBsYWNlKC9NTU1NfE1NfEREfGRkZGQvZywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICByZXR1cm4gdmFsLnNsaWNlKDEpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuX2xvbmdEYXRlRm9ybWF0W2tleV07XG59XG5cbnZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJztcblxuZnVuY3Rpb24gaW52YWxpZERhdGUgKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbn1cblxudmFyIGRlZmF1bHRPcmRpbmFsID0gJyVkJztcbnZhciBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbmZ1bmN0aW9uIG9yZGluYWwgKG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLl9vcmRpbmFsLnJlcGxhY2UoJyVkJywgbnVtYmVyKTtcbn1cblxudmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICBwYXN0ICAgOiAnJXMgYWdvJyxcbiAgICBzICA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICBtICA6ICdhIG1pbnV0ZScsXG4gICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgaCAgOiAnYW4gaG91cicsXG4gICAgaGggOiAnJWQgaG91cnMnLFxuICAgIGQgIDogJ2EgZGF5JyxcbiAgICBkZCA6ICclZCBkYXlzJyxcbiAgICBNICA6ICdhIG1vbnRoJyxcbiAgICBNTSA6ICclZCBtb250aHMnLFxuICAgIHkgIDogJ2EgeWVhcicsXG4gICAgeXkgOiAnJWQgeWVhcnMnXG59O1xuXG5mdW5jdGlvbiByZWxhdGl2ZVRpbWUgKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTtcbiAgICByZXR1cm4gKGlzRnVuY3Rpb24ob3V0cHV0KSkgP1xuICAgICAgICBvdXRwdXQobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSA6XG4gICAgICAgIG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xufVxuXG5mdW5jdGlvbiBwYXN0RnV0dXJlIChkaWZmLCBvdXRwdXQpIHtcbiAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddO1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xufVxuXG52YXIgYWxpYXNlcyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRVbml0QWxpYXMgKHVuaXQsIHNob3J0aGFuZCkge1xuICAgIHZhciBsb3dlckNhc2UgPSB1bml0LnRvTG93ZXJDYXNlKCk7XG4gICAgYWxpYXNlc1tsb3dlckNhc2VdID0gYWxpYXNlc1tsb3dlckNhc2UgKyAncyddID0gYWxpYXNlc1tzaG9ydGhhbmRdID0gdW5pdDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVW5pdHModW5pdHMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJyA/IGFsaWFzZXNbdW5pdHNdIHx8IGFsaWFzZXNbdW5pdHMudG9Mb3dlckNhc2UoKV0gOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9iamVjdFVuaXRzKGlucHV0T2JqZWN0KSB7XG4gICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgcHJvcDtcblxuICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm9wID0gbm9ybWFsaXplVW5pdHMocHJvcCk7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9ybWFsaXplZElucHV0O1xufVxuXG52YXIgcHJpb3JpdGllcyA9IHt9O1xuXG5mdW5jdGlvbiBhZGRVbml0UHJpb3JpdHkodW5pdCwgcHJpb3JpdHkpIHtcbiAgICBwcmlvcml0aWVzW3VuaXRdID0gcHJpb3JpdHk7XG59XG5cbmZ1bmN0aW9uIGdldFByaW9yaXRpemVkVW5pdHModW5pdHNPYmopIHtcbiAgICB2YXIgdW5pdHMgPSBbXTtcbiAgICBmb3IgKHZhciB1IGluIHVuaXRzT2JqKSB7XG4gICAgICAgIHVuaXRzLnB1c2goe3VuaXQ6IHUsIHByaW9yaXR5OiBwcmlvcml0aWVzW3VdfSk7XG4gICAgfVxuICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEucHJpb3JpdHkgLSBiLnByaW9yaXR5O1xuICAgIH0pO1xuICAgIHJldHVybiB1bml0cztcbn1cblxuZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgIHplcm9zVG9GaWxsID0gdGFyZ2V0TGVuZ3RoIC0gYWJzTnVtYmVyLmxlbmd0aCxcbiAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgIHJldHVybiAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgTWF0aC5wb3coMTAsIE1hdGgubWF4KDAsIHplcm9zVG9GaWxsKSkudG9TdHJpbmcoKS5zdWJzdHIoMSkgKyBhYnNOdW1iZXI7XG59XG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xZWVlZWVl8WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZztcblxudmFyIGxvY2FsRm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhMVFN8TFR8TEw/TD9MP3xsezEsNH0pL2c7XG5cbnZhciBmb3JtYXRGdW5jdGlvbnMgPSB7fTtcblxudmFyIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbi8vIHRva2VuOiAgICAnTSdcbi8vIHBhZGRlZDogICBbJ01NJywgMl1cbi8vIG9yZGluYWw6ICAnTW8nXG4vLyBjYWxsYmFjazogZnVuY3Rpb24gKCkgeyB0aGlzLm1vbnRoKCkgKyAxIH1cbmZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuICh0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbdG9rZW5dID0gZnVuYztcbiAgICB9XG4gICAgaWYgKHBhZGRlZCkge1xuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1twYWRkZWRbMF1dID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5vcmRpbmFsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdG9rZW4pO1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvXlxcW3xcXF0kL2csICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xufVxuXG5mdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLCBpLCBsZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gJycsIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdCkgOiBhcnJheVtpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59XG5cbi8vIGZvcm1hdCBkYXRlIHVzaW5nIG5hdGl2ZSBkYXRlIG9iamVjdFxuZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIG0ubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgIGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdID0gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gfHwgbWFrZUZvcm1hdEZ1bmN0aW9uKGZvcm1hdCk7XG5cbiAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG59XG5cbmZ1bmN0aW9uIGV4cGFuZEZvcm1hdChmb3JtYXQsIGxvY2FsZSkge1xuICAgIHZhciBpID0gNTtcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLmxvbmdEYXRlRm9ybWF0KGlucHV0KSB8fCBpbnB1dDtcbiAgICB9XG5cbiAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAoaSA+PSAwICYmIGxvY2FsRm9ybWF0dGluZ1Rva2Vucy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobG9jYWxGb3JtYXR0aW5nVG9rZW5zLCByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMpO1xuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgaSAtPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXQ7XG59XG5cbnZhciBtYXRjaDEgICAgICAgICA9IC9cXGQvOyAgICAgICAgICAgIC8vICAgICAgIDAgLSA5XG52YXIgbWF0Y2gyICAgICAgICAgPSAvXFxkXFxkLzsgICAgICAgICAgLy8gICAgICAwMCAtIDk5XG52YXIgbWF0Y2gzICAgICAgICAgPSAvXFxkezN9LzsgICAgICAgICAvLyAgICAgMDAwIC0gOTk5XG52YXIgbWF0Y2g0ICAgICAgICAgPSAvXFxkezR9LzsgICAgICAgICAvLyAgICAwMDAwIC0gOTk5OVxudmFyIG1hdGNoNiAgICAgICAgID0gL1srLV0/XFxkezZ9LzsgICAgLy8gLTk5OTk5OSAtIDk5OTk5OVxudmFyIG1hdGNoMXRvMiAgICAgID0gL1xcZFxcZD8vOyAgICAgICAgIC8vICAgICAgIDAgLSA5OVxudmFyIG1hdGNoM3RvNCAgICAgID0gL1xcZFxcZFxcZFxcZD8vOyAgICAgLy8gICAgIDk5OSAtIDk5OTlcbnZhciBtYXRjaDV0bzYgICAgICA9IC9cXGRcXGRcXGRcXGRcXGRcXGQ/LzsgLy8gICA5OTk5OSAtIDk5OTk5OVxudmFyIG1hdGNoMXRvMyAgICAgID0gL1xcZHsxLDN9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OVxudmFyIG1hdGNoMXRvNCAgICAgID0gL1xcZHsxLDR9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OTlcbnZhciBtYXRjaDF0bzYgICAgICA9IC9bKy1dP1xcZHsxLDZ9LzsgIC8vIC05OTk5OTkgLSA5OTk5OTlcblxudmFyIG1hdGNoVW5zaWduZWQgID0gL1xcZCsvOyAgICAgICAgICAgLy8gICAgICAgMCAtIGluZlxudmFyIG1hdGNoU2lnbmVkICAgID0gL1srLV0/XFxkKy87ICAgICAgLy8gICAgLWluZiAtIGluZlxuXG52YXIgbWF0Y2hPZmZzZXQgICAgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2k7IC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxudmFyIG1hdGNoU2hvcnRPZmZzZXQgPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy9naTsgLy8gKzAwIC0wMCArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcblxudmFyIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LzsgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcblxuLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuXG4vLyBpbmNsdWRlcyBzY290dGlzaCBnYWVsaWMgdHdvIHdvcmQgYW5kIGh5cGhlbmF0ZWQgbW9udGhzXG52YXIgbWF0Y2hXb3JkID0gL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2k7XG5cblxudmFyIHJlZ2V4ZXMgPSB7fTtcblxuZnVuY3Rpb24gYWRkUmVnZXhUb2tlbiAodG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleCkgPyByZWdleCA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICByZXR1cm4gKGlzU3RyaWN0ICYmIHN0cmljdFJlZ2V4KSA/IHN0cmljdFJlZ2V4IDogcmVnZXg7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFyc2VSZWdleEZvclRva2VuICh0b2tlbiwgY29uZmlnKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgIH1cblxuICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xufVxuXG4vLyBDb2RlIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNTYxNDkzL2lzLXRoZXJlLWEtcmVnZXhwLWVzY2FwZS1mdW5jdGlvbi1pbi1qYXZhc2NyaXB0XG5mdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgcmV0dXJuIHJlZ2V4RXNjYXBlKHMucmVwbGFjZSgnXFxcXCcsICcnKS5yZXBsYWNlKC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csIGZ1bmN0aW9uIChtYXRjaGVkLCBwMSwgcDIsIHAzLCBwNCkge1xuICAgICAgICByZXR1cm4gcDEgfHwgcDIgfHwgcDMgfHwgcDQ7XG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiByZWdleEVzY2FwZShzKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG59XG5cbnZhciB0b2tlbnMgPSB7fTtcblxuZnVuY3Rpb24gYWRkUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGksIGZ1bmMgPSBjYWxsYmFjaztcbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgfVxuICAgIGlmIChpc051bWJlcihjYWxsYmFjaykpIHtcbiAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IHRva2VuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbltpXV0gPSBmdW5jO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkV2Vla1BhcnNlVG9rZW4gKHRva2VuLCBjYWxsYmFjaykge1xuICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICBjYWxsYmFjayhpbnB1dCwgY29uZmlnLl93LCBjb25maWcsIHRva2VuKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIGlucHV0LCBjb25maWcpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgfVxufVxuXG52YXIgWUVBUiA9IDA7XG52YXIgTU9OVEggPSAxO1xudmFyIERBVEUgPSAyO1xudmFyIEhPVVIgPSAzO1xudmFyIE1JTlVURSA9IDQ7XG52YXIgU0VDT05EID0gNTtcbnZhciBNSUxMSVNFQ09ORCA9IDY7XG52YXIgV0VFSyA9IDc7XG52YXIgV0VFS0RBWSA9IDg7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ1knLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICByZXR1cm4geSA8PSA5OTk5ID8gJycgKyB5IDogJysnICsgeTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgICA0XSwgICAgICAgMCwgJ3llYXInKTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCAgNV0sICAgICAgIDAsICd5ZWFyJyk7XG5hZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZWScsIDYsIHRydWVdLCAwLCAneWVhcicpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygneWVhcicsICd5Jyk7XG5cbi8vIFBSSU9SSVRJRVNcblxuYWRkVW5pdFByaW9yaXR5KCd5ZWFyJywgMSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignWScsICAgICAgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignWVknLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignWVlZWScsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuYWRkUmVnZXhUb2tlbignWVlZWVknLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG5hZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuYWRkUGFyc2VUb2tlbignWVlZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtZRUFSXSA9IGlucHV0Lmxlbmd0aCA9PT0gMiA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbn0pO1xuYWRkUGFyc2VUb2tlbignWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbWUVBUl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ1knLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG59XG5cbmZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbn1cblxuLy8gSE9PS1NcblxuaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICByZXR1cm4gdG9JbnQoaW5wdXQpICsgKHRvSW50KGlucHV0KSA+IDY4ID8gMTkwMCA6IDIwMDApO1xufTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0WWVhciA9IG1ha2VHZXRTZXQoJ0Z1bGxZZWFyJywgdHJ1ZSk7XG5cbmZ1bmN0aW9uIGdldElzTGVhcFllYXIgKCkge1xuICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTtcbn1cblxuZnVuY3Rpb24gbWFrZUdldFNldCAodW5pdCwga2VlcFRpbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIHVuaXQpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0IChtb20sIHVuaXQpIHtcbiAgICByZXR1cm4gbW9tLmlzVmFsaWQoKSA/XG4gICAgICAgIG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpIDogTmFOO1xufVxuXG5mdW5jdGlvbiBzZXQkMSAobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgIGlmIChtb20uaXNWYWxpZCgpICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgaWYgKHVuaXQgPT09ICdGdWxsWWVhcicgJiYgaXNMZWFwWWVhcihtb20ueWVhcigpKSAmJiBtb20ubW9udGgoKSA9PT0gMSAmJiBtb20uZGF0ZSgpID09PSAyOSkge1xuICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlLCBtb20ubW9udGgoKSwgZGF5c0luTW9udGgodmFsdWUsIG1vbS5tb250aCgpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIHN0cmluZ0dldCAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdW5pdHNdKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5cbmZ1bmN0aW9uIHN0cmluZ1NldCAodW5pdHMsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVPYmplY3RVbml0cyh1bml0cyk7XG4gICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW9yaXRpemVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzW3ByaW9yaXRpemVkW2ldLnVuaXRdKHVuaXRzW3ByaW9yaXRpemVkW2ldLnVuaXRdKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIG1vZChuLCB4KSB7XG4gICAgcmV0dXJuICgobiAlIHgpICsgeCkgJSB4O1xufVxuXG52YXIgaW5kZXhPZjtcblxuaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgaW5kZXhPZiA9IEFycmF5LnByb3RvdHlwZS5pbmRleE9mO1xufSBlbHNlIHtcbiAgICBpbmRleE9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgLy8gSSBrbm93XG4gICAgICAgIHZhciBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHRoaXNbaV0gPT09IG8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICBpZiAoaXNOYU4oeWVhcikgfHwgaXNOYU4obW9udGgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHZhciBtb2RNb250aCA9IG1vZChtb250aCwgMTIpO1xuICAgIHllYXIgKz0gKG1vbnRoIC0gbW9kTW9udGgpIC8gMTI7XG4gICAgcmV0dXJuIG1vZE1vbnRoID09PSAxID8gKGlzTGVhcFllYXIoeWVhcikgPyAyOSA6IDI4KSA6ICgzMSAtIG1vZE1vbnRoICUgNyAlIDIpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7XG59KTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ21vbnRoJywgJ00nKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCdtb250aCcsIDgpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ00nLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignTU0nLCAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ01NTScsICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUubW9udGhzU2hvcnRSZWdleChpc1N0cmljdCk7XG59KTtcbmFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUubW9udGhzUmVnZXgoaXNTdHJpY3QpO1xufSk7XG5cbmFkZFBhcnNlVG9rZW4oWydNJywgJ01NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtNT05USF0gPSB0b0ludChpbnB1dCkgLSAxO1xufSk7XG5cbmFkZFBhcnNlVG9rZW4oWydNTU0nLCAnTU1NTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgdmFyIG1vbnRoID0gY29uZmlnLl9sb2NhbGUubW9udGhzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gbW9udGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXQ7XG4gICAgfVxufSk7XG5cbi8vIExPQ0FMRVNcblxudmFyIE1PTlRIU19JTl9GT1JNQVQgPSAvRFtvRF0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStNTU1NPy87XG52YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlTW9udGhzIChtLCBmb3JtYXQpIHtcbiAgICBpZiAoIW0pIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRocyA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXTtcbiAgICB9XG4gICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRoc1ttLm1vbnRoKCldIDpcbiAgICAgICAgdGhpcy5fbW9udGhzWyh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPSAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydCAobSwgZm9ybWF0KSB7XG4gICAgaWYgKCFtKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0IDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ107XG4gICAgfVxuICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV0gOlxuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFtNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ01NTScpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydE1vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlIChtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgfVxuXG4gICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIG1vbnRoIChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyXG4gICAgLy8gc2VlIHNvcnRpbmcgaW4gY29tcHV0ZU1vbnRoc1BhcnNlXG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN0cmljdCAmJiAhdGhpcy5fbW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NTScgJiYgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTScgJiYgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fbW9udGhzUGFyc2VbaV0udGVzdChtb250aE5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBzZXRNb250aCAobW9tLCB2YWx1ZSkge1xuICAgIHZhciBkYXlPZk1vbnRoO1xuXG4gICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgIC8vIE5vIG9wXG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlP1xuICAgICAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGF5T2ZNb250aCA9IE1hdGgubWluKG1vbS5kYXRlKCksIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIHZhbHVlKSk7XG4gICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArICdNb250aCddKHZhbHVlLCBkYXlPZk1vbnRoKTtcbiAgICByZXR1cm4gbW9tO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRNb250aCAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGdldCh0aGlzLCAnTW9udGgnKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldERheXNJbk1vbnRoICgpIHtcbiAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG59XG5cbnZhciBkZWZhdWx0TW9udGhzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuZnVuY3Rpb24gbW9udGhzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSAoKSB7XG4gICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgaSwgbW9tO1xuICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgfVxuICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEYXRlICh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICAgIC8vIGNhbid0IGp1c3QgYXBwbHkoKSB0byBjcmVhdGUgYSBkYXRlOlxuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xODEzNDhcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKTtcblxuICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCAmJiBpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVVENEYXRlICh5KSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcblxuICAgIC8vIHRoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDAgJiYgaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbn1cblxuLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbmZ1bmN0aW9uIGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSkge1xuICAgIHZhciAvLyBmaXJzdC13ZWVrIGRheSAtLSB3aGljaCBqYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayAoNCBmb3IgaXNvLCAxIGZvciBvdGhlcilcbiAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgbG9jYWwgd2Vla2RheSAtLSB3aGljaCBsb2NhbCB3ZWVrZGF5IGlzIGZ3ZFxuICAgICAgICBmd2RsdyA9ICg3ICsgY3JlYXRlVVRDRGF0ZSh5ZWFyLCAwLCBmd2QpLmdldFVUQ0RheSgpIC0gZG93KSAlIDc7XG5cbiAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXlcbmZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgIHZhciBsb2NhbFdlZWtkYXkgPSAoNyArIHdlZWtkYXkgLSBkb3cpICUgNyxcbiAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgIHJlc1llYXIsIHJlc0RheU9mWWVhcjtcblxuICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICByZXNZZWFyID0geWVhciAtIDE7XG4gICAgICAgIHJlc0RheU9mWWVhciA9IGRheXNJblllYXIocmVzWWVhcikgKyBkYXlPZlllYXI7XG4gICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgIHJlc1llYXIgPSB5ZWFyICsgMTtcbiAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyIC0gZGF5c0luWWVhcih5ZWFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXNZZWFyID0geWVhcjtcbiAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5T2ZZZWFyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHllYXI6IHJlc1llYXIsXG4gICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGRvdywgZG95KSB7XG4gICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQobW9tLnllYXIoKSwgZG93LCBkb3kpLFxuICAgICAgICB3ZWVrID0gTWF0aC5mbG9vcigobW9tLmRheU9mWWVhcigpIC0gd2Vla09mZnNldCAtIDEpIC8gNykgKyAxLFxuICAgICAgICByZXNXZWVrLCByZXNZZWFyO1xuXG4gICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpIC0gMTtcbiAgICAgICAgcmVzV2VlayA9IHdlZWsgKyB3ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrIC0gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpO1xuICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCk7XG4gICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgIHllYXI6IHJlc1llYXJcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICByZXR1cm4gKGRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gNztcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbigndycsIFsnd3cnLCAyXSwgJ3dvJywgJ3dlZWsnKTtcbmFkZEZvcm1hdFRva2VuKCdXJywgWydXVycsIDJdLCAnV28nLCAnaXNvV2VlaycpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnd2VlaycsICd3Jyk7XG5hZGRVbml0QWxpYXMoJ2lzb1dlZWsnLCAnVycpO1xuXG4vLyBQUklPUklUSUVTXG5cbmFkZFVuaXRQcmlvcml0eSgnd2VlaycsIDUpO1xuYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrJywgNSk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbigndycsICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignd3cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdXJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWyd3JywgJ3d3JywgJ1cnLCAnV1cnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMSldID0gdG9JbnQoaW5wdXQpO1xufSk7XG5cbi8vIEhFTFBFUlNcblxuLy8gTE9DQUxFU1xuXG5mdW5jdGlvbiBsb2NhbGVXZWVrIChtb20pIHtcbiAgICByZXR1cm4gd2Vla09mWWVhcihtb20sIHRoaXMuX3dlZWsuZG93LCB0aGlzLl93ZWVrLmRveSkud2Vlaztcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVXZWVrID0ge1xuICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbn07XG5cbmZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZXZWVrICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG59XG5cbmZ1bmN0aW9uIGxvY2FsZUZpcnN0RGF5T2ZZZWFyICgpIHtcbiAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG59XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0V2VlayAoaW5wdXQpIHtcbiAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRJU09XZWVrIChpbnB1dCkge1xuICAgIHZhciB3ZWVrID0gd2Vla09mWWVhcih0aGlzLCAxLCA0KS53ZWVrO1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbn1cblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuYWRkRm9ybWF0VG9rZW4oJ2RkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c01pbih0aGlzLCBmb3JtYXQpO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKCdkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzU2hvcnQodGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignZGRkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXModGhpcywgZm9ybWF0KTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignZScsIDAsIDAsICd3ZWVrZGF5Jyk7XG5hZGRGb3JtYXRUb2tlbignRScsIDAsIDAsICdpc29XZWVrZGF5Jyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdkYXknLCAnZCcpO1xuYWRkVW5pdEFsaWFzKCd3ZWVrZGF5JywgJ2UnKTtcbmFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJyk7XG5cbi8vIFBSSU9SSVRZXG5hZGRVbml0UHJpb3JpdHkoJ2RheScsIDExKTtcbmFkZFVuaXRQcmlvcml0eSgnd2Vla2RheScsIDExKTtcbmFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla2RheScsIDExKTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdkJywgICAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2UnLCAgICBtYXRjaDF0bzIpO1xuYWRkUmVnZXhUb2tlbignRScsICAgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpO1xufSk7XG5hZGRSZWdleFRva2VuKCdkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xufSk7XG5hZGRSZWdleFRva2VuKCdkZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNSZWdleChpc1N0cmljdCk7XG59KTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB2YXIgd2Vla2RheSA9IGNvbmZpZy5fbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgLy8gaWYgd2UgZGlkbid0IGdldCBhIHdlZWtkYXkgbmFtZSwgbWFyayB0aGUgZGF0ZSBhcyBpbnZhbGlkXG4gICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICB3ZWVrLmQgPSB3ZWVrZGF5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgfVxufSk7XG5cbmFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgd2Vla1t0b2tlbl0gPSB0b0ludChpbnB1dCk7XG59KTtcblxuLy8gSEVMUEVSU1xuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICB9XG5cbiAgICBpbnB1dCA9IGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KTtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSXNvV2Vla2RheShpbnB1dCwgbG9jYWxlKSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KSAlIDcgfHwgNztcbiAgICB9XG4gICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbn1cblxuLy8gTE9DQUxFU1xuXG52YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID0gJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpO1xuZnVuY3Rpb24gbG9jYWxlV2Vla2RheXMgKG0sIGZvcm1hdCkge1xuICAgIGlmICghbSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5cyA6XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1snc3RhbmRhbG9uZSddO1xuICAgIH1cbiAgICByZXR1cm4gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5c1ttLmRheSgpXSA6XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzW3RoaXMuX3dlZWtkYXlzLmlzRm9ybWF0LnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLmRheSgpXTtcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKTtcbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzU2hvcnQgKG0pIHtcbiAgICByZXR1cm4gKG0pID8gdGhpcy5fd2Vla2RheXNTaG9ydFttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzU2hvcnQ7XG59XG5cbnZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyk7XG5mdW5jdGlvbiBsb2NhbGVXZWVrZGF5c01pbiAobSkge1xuICAgIHJldHVybiAobSkgPyB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzTWluO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZSQxKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZSkge1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNNaW4obW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICdkZGQnKSB7XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2UgKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fd2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZGQnICYmIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkJyAmJiB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZCcgJiYgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gTU9NRU5UU1xuXG5mdW5jdGlvbiBnZXRTZXREYXlPZldlZWsgKGlucHV0KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgfVxuICAgIHZhciBkYXkgPSB0aGlzLl9pc1VUQyA/IHRoaXMuX2QuZ2V0VVRDRGF5KCkgOiB0aGlzLl9kLmdldERheSgpO1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChpbnB1dCAtIGRheSwgJ2QnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGF5O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cbiAgICB2YXIgd2Vla2RheSA9ICh0aGlzLmRheSgpICsgNyAtIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdykgJSA3O1xuICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2V0SVNPRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cblxuICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgIC8vIGFzIGEgc2V0dGVyLCBzdW5kYXkgc2hvdWxkIGJlbG9uZyB0byB0aGUgcHJldmlvdXMgd2Vlay5cblxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRheSh0aGlzLmRheSgpICUgNyA/IHdlZWtkYXkgOiB3ZWVrZGF5IC0gNyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgNztcbiAgICB9XG59XG5cbnZhciBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIHdlZWtkYXlzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgIGNvbXB1dGVXZWVrZGF5c1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzUmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleCA9IG1hdGNoV29yZDtcbmZ1bmN0aW9uIHdlZWtkYXlzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgfVxufVxuXG52YXIgZGVmYXVsdFdlZWtkYXlzTWluUmVnZXggPSBtYXRjaFdvcmQ7XG5mdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4IChpc1N0cmljdCkge1xuICAgIGlmICh0aGlzLl93ZWVrZGF5c1BhcnNlRXhhY3QpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzTWluUmVnZXgnKSkge1xuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgIH1cbn1cblxuXG5mdW5jdGlvbiBjb21wdXRlV2Vla2RheXNQYXJzZSAoKSB7XG4gICAgZnVuY3Rpb24gY21wTGVuUmV2KGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgdmFyIG1pblBpZWNlcyA9IFtdLCBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgIGksIG1vbSwgbWlucCwgc2hvcnRwLCBsb25ncDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgIG1pbnAgPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICBzaG9ydHAgPSB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJyk7XG4gICAgICAgIGxvbmdwID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKTtcbiAgICAgICAgbWluUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgIHNob3J0UGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICB9XG4gICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSB3ZWVrZGF5IChvciBhYmJyKSBpcyBhIHByZWZpeCBvZiBhbm90aGVyIGl0XG4gICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgc2hvcnRQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgIG1peGVkUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobWl4ZWRQaWVjZXNbaV0pO1xuICAgIH1cblxuICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcblxuICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG59XG5cbmZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbn1cblxuYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG5hZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG5hZGRGb3JtYXRUb2tlbignaycsIFsna2snLCAyXSwgMCwga0Zvcm1hdCk7XG5cbmFkZEZvcm1hdFRva2VuKCdobW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgIHplcm9GaWxsKHRoaXMuc2Vjb25kcygpLCAyKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpICtcbiAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xufSk7XG5cbmZ1bmN0aW9uIG1lcmlkaWVtICh0b2tlbiwgbG93ZXJjYXNlKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKHRoaXMuaG91cnMoKSwgdGhpcy5taW51dGVzKCksIGxvd2VyY2FzZSk7XG4gICAgfSk7XG59XG5cbm1lcmlkaWVtKCdhJywgdHJ1ZSk7XG5tZXJpZGllbSgnQScsIGZhbHNlKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2hvdXInLCAnaCcpO1xuXG4vLyBQUklPUklUWVxuYWRkVW5pdFByaW9yaXR5KCdob3VyJywgMTMpO1xuXG4vLyBQQVJTSU5HXG5cbmZ1bmN0aW9uIG1hdGNoTWVyaWRpZW0gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xufVxuXG5hZGRSZWdleFRva2VuKCdhJywgIG1hdGNoTWVyaWRpZW0pO1xuYWRkUmVnZXhUb2tlbignQScsICBtYXRjaE1lcmlkaWVtKTtcbmFkZFJlZ2V4VG9rZW4oJ0gnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2gnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ2snLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignaGgnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5hZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbmFkZFJlZ2V4VG9rZW4oJ2htbXNzJywgbWF0Y2g1dG82KTtcbmFkZFJlZ2V4VG9rZW4oJ0htbScsIG1hdGNoM3RvNCk7XG5hZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbmFkZFBhcnNlVG9rZW4oWydIJywgJ0hIJ10sIEhPVVIpO1xuYWRkUGFyc2VUb2tlbihbJ2snLCAna2snXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIGtJbnB1dCA9IHRvSW50KGlucHV0KTtcbiAgICBhcnJheVtIT1VSXSA9IGtJbnB1dCA9PT0gMjQgPyAwIDoga0lucHV0O1xufSk7XG5hZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIGNvbmZpZy5faXNQbSA9IGNvbmZpZy5fbG9jYWxlLmlzUE0oaW5wdXQpO1xuICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbn0pO1xuYWRkUGFyc2VUb2tlbihbJ2gnLCAnaGgnXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ2htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ0htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG59KTtcblxuLy8gTE9DQUxFU1xuXG5mdW5jdGlvbiBsb2NhbGVJc1BNIChpbnB1dCkge1xuICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAvLyBVc2luZyBjaGFyQXQgc2hvdWxkIGJlIG1vcmUgY29tcGF0aWJsZS5cbiAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnKTtcbn1cblxudmFyIGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlID0gL1thcF1cXC4/bT9cXC4/L2k7XG5mdW5jdGlvbiBsb2NhbGVNZXJpZGllbSAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwbScgOiAnUE0nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgfVxufVxuXG5cbi8vIE1PTUVOVFNcblxuLy8gU2V0dGluZyB0aGUgaG91ciBzaG91bGQga2VlcCB0aGUgdGltZSwgYmVjYXVzZSB0aGUgdXNlciBleHBsaWNpdGx5XG4vLyBzcGVjaWZpZWQgd2hpY2ggaG91ciBoZSB3YW50cy4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4vLyBhIG5ldyB0aW1lem9uZSkgbWFrZXMgc2Vuc2UuIEFkZGluZy9zdWJ0cmFjdGluZyBob3VycyBkb2VzIG5vdCBmb2xsb3dcbi8vIHRoaXMgcnVsZS5cbnZhciBnZXRTZXRIb3VyID0gbWFrZUdldFNldCgnSG91cnMnLCB0cnVlKTtcblxuLy8gbW9udGhzXG4vLyB3ZWVrXG4vLyB3ZWVrZGF5c1xuLy8gbWVyaWRpZW1cbnZhciBiYXNlQ29uZmlnID0ge1xuICAgIGNhbGVuZGFyOiBkZWZhdWx0Q2FsZW5kYXIsXG4gICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICBpbnZhbGlkRGF0ZTogZGVmYXVsdEludmFsaWREYXRlLFxuICAgIG9yZGluYWw6IGRlZmF1bHRPcmRpbmFsLFxuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgIHJlbGF0aXZlVGltZTogZGVmYXVsdFJlbGF0aXZlVGltZSxcblxuICAgIG1vbnRoczogZGVmYXVsdExvY2FsZU1vbnRocyxcbiAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuXG4gICAgd2VlazogZGVmYXVsdExvY2FsZVdlZWssXG5cbiAgICB3ZWVrZGF5czogZGVmYXVsdExvY2FsZVdlZWtkYXlzLFxuICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgd2Vla2RheXNTaG9ydDogZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQsXG5cbiAgICBtZXJpZGllbVBhcnNlOiBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZVxufTtcblxuLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xudmFyIGxvY2FsZXMgPSB7fTtcbnZhciBsb2NhbGVGYW1pbGllcyA9IHt9O1xudmFyIGdsb2JhbExvY2FsZTtcblxuZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGtleSkge1xuICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbn1cblxuLy8gcGljayB0aGUgbG9jYWxlIGZyb20gdGhlIGFycmF5XG4vLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuZnVuY3Rpb24gY2hvb3NlTG9jYWxlKG5hbWVzKSB7XG4gICAgdmFyIGkgPSAwLCBqLCBuZXh0LCBsb2NhbGUsIHNwbGl0O1xuXG4gICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaV0pLnNwbGl0KCctJyk7XG4gICAgICAgIGogPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgbmV4dCA9IG5leHQgPyBuZXh0LnNwbGl0KCctJykgOiBudWxsO1xuICAgICAgICB3aGlsZSAoaiA+IDApIHtcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5leHQgJiYgbmV4dC5sZW5ndGggPj0gaiAmJiBjb21wYXJlQXJyYXlzKHNwbGl0LCBuZXh0LCB0cnVlKSA+PSBqIC0gMSkge1xuICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGotLTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBsb2FkTG9jYWxlKG5hbWUpIHtcbiAgICB2YXIgb2xkTG9jYWxlID0gbnVsbDtcbiAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgIGlmICghbG9jYWxlc1tuYW1lXSAmJiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpICYmXG4gICAgICAgICAgICBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG9sZExvY2FsZSA9IGdsb2JhbExvY2FsZS5fYWJicjtcbiAgICAgICAgICAgIHZhciBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG9sZExvY2FsZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbi8vIG5vIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGluLCBpdCB3aWxsIHNpbXBseSByZXR1cm4gdGhlIGN1cnJlbnQgZ2xvYmFsXG4vLyBsb2NhbGUga2V5LlxuZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlIChrZXksIHZhbHVlcykge1xuICAgIHZhciBkYXRhO1xuICAgIGlmIChrZXkpIHtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgIGRhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBkZWZpbmVMb2NhbGUoa2V5LCB2YWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIC8vIG1vbWVudC5kdXJhdGlvbi5fbG9jYWxlID0gbW9tZW50Ll9sb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUxvY2FsZSAobmFtZSwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgY29uZmlnLmFiYnIgPSBuYW1lO1xuICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3VzZSBtb21lbnQudXBkYXRlTG9jYWxlKGxvY2FsZU5hbWUsIGNvbmZpZykgdG8gY2hhbmdlICcgK1xuICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kZWZpbmUtbG9jYWxlLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICBpZiAobG9jYWxlRmFtaWxpZXNbbmFtZV0pIHtcbiAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAvLyBtYWtlIHN1cmUgd2Ugc2V0IHRoZSBsb2NhbGUgQUZURVIgYWxsIGNoaWxkIGxvY2FsZXMgaGF2ZSBiZWVuXG4gICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cblxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbG9jYWxlLCB0bXBMb2NhbGUsIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgIC8vIE1FUkdFXG4gICAgICAgIHRtcExvY2FsZSA9IGxvYWRMb2NhbGUobmFtZSk7XG4gICAgICAgIGlmICh0bXBMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gdG1wTG9jYWxlLl9jb25maWc7XG4gICAgICAgIH1cbiAgICAgICAgY29uZmlnID0gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKTtcbiAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShjb25maWcpO1xuICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZTtcblxuICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdLnBhcmVudExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbn1cblxuLy8gcmV0dXJucyBsb2NhbGUgZGF0YVxuZnVuY3Rpb24gZ2V0TG9jYWxlIChrZXkpIHtcbiAgICB2YXIgbG9jYWxlO1xuXG4gICAgaWYgKGtleSAmJiBrZXkuX2xvY2FsZSAmJiBrZXkuX2xvY2FsZS5fYWJicikge1xuICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICB9XG5cbiAgICBpZiAoIWtleSkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgIH1cblxuICAgIGlmICghaXNBcnJheShrZXkpKSB7XG4gICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICB9XG4gICAgICAgIGtleSA9IFtrZXldO1xuICAgIH1cblxuICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbn1cblxuZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cgKG0pIHtcbiAgICB2YXIgb3ZlcmZsb3c7XG4gICAgdmFyIGEgPSBtLl9hO1xuXG4gICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICBhW01PTlRIXSAgICAgICA8IDAgfHwgYVtNT05USF0gICAgICAgPiAxMSAgPyBNT05USCA6XG4gICAgICAgICAgICBhW0RBVEVdICAgICAgICA8IDEgfHwgYVtEQVRFXSAgICAgICAgPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSkgPyBEQVRFIDpcbiAgICAgICAgICAgIGFbSE9VUl0gICAgICAgIDwgMCB8fCBhW0hPVVJdICAgICAgICA+IDI0IHx8IChhW0hPVVJdID09PSAyNCAmJiAoYVtNSU5VVEVdICE9PSAwIHx8IGFbU0VDT05EXSAhPT0gMCB8fCBhW01JTExJU0VDT05EXSAhPT0gMCkpID8gSE9VUiA6XG4gICAgICAgICAgICBhW01JTlVURV0gICAgICA8IDAgfHwgYVtNSU5VVEVdICAgICAgPiA1OSAgPyBNSU5VVEUgOlxuICAgICAgICAgICAgYVtTRUNPTkRdICAgICAgPCAwIHx8IGFbU0VDT05EXSAgICAgID4gNTkgID8gU0VDT05EIDpcbiAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdIDwgMCB8fCBhW01JTExJU0VDT05EXSA+IDk5OSA/IE1JTExJU0VDT05EIDpcbiAgICAgICAgICAgIC0xO1xuXG4gICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKSkge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICB9XG4gICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla3MgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgcmV0dXJuIG07XG59XG5cbi8vIFBpY2sgdGhlIGZpcnN0IGRlZmluZWQgb2YgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5cbmZ1bmN0aW9uIGRlZmF1bHRzKGEsIGIsIGMpIHtcbiAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBiO1xuICAgIH1cbiAgICByZXR1cm4gYztcbn1cblxuZnVuY3Rpb24gY3VycmVudERhdGVBcnJheShjb25maWcpIHtcbiAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICBpZiAoY29uZmlnLl91c2VVVEMpIHtcbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRVVENGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRVVENNb250aCgpLCBub3dWYWx1ZS5nZXRVVENEYXRlKCldO1xuICAgIH1cbiAgICByZXR1cm4gW25vd1ZhbHVlLmdldEZ1bGxZZWFyKCksIG5vd1ZhbHVlLmdldE1vbnRoKCksIG5vd1ZhbHVlLmdldERhdGUoKV07XG59XG5cbi8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuLy8gdGhlIGFycmF5IHNob3VsZCBtaXJyb3IgdGhlIHBhcmFtZXRlcnMgYmVsb3dcbi8vIG5vdGU6IGFsbCB2YWx1ZXMgcGFzdCB0aGUgeWVhciBhcmUgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbG93ZXN0IHBvc3NpYmxlIHZhbHVlLlxuLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG5mdW5jdGlvbiBjb25maWdGcm9tQXJyYXkgKGNvbmZpZykge1xuICAgIHZhciBpLCBkYXRlLCBpbnB1dCA9IFtdLCBjdXJyZW50RGF0ZSwgZXhwZWN0ZWRXZWVrZGF5LCB5ZWFyVG9Vc2U7XG5cbiAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgIC8vY29tcHV0ZSBkYXkgb2YgdGhlIHllYXIgZnJvbSB3ZWVrcyBhbmQgd2Vla2RheXNcbiAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICB9XG5cbiAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICB5ZWFyVG9Vc2UgPSBkZWZhdWx0cyhjb25maWcuX2FbWUVBUl0sIGN1cnJlbnREYXRlW1lFQVJdKTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkgfHwgY29uZmlnLl9kYXlPZlllYXIgPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgY29uZmlnLl9hW0RBVEVdID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUuXG4gICAgLy8gKiBpZiBubyB5ZWFyLCBtb250aCwgZGF5IG9mIG1vbnRoIGFyZSBnaXZlbiwgZGVmYXVsdCB0byB0b2RheVxuICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgLy8gKiBpZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBvbmx5IHllYXJcbiAgICAvLyAqIGlmIHllYXIgaXMgZ2l2ZW4sIGRvbid0IGRlZmF1bHQgYW55dGhpbmdcbiAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV07XG4gICAgfVxuXG4gICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgY29uZmlnLl9hW2ldID0gaW5wdXRbaV0gPSAoY29uZmlnLl9hW2ldID09IG51bGwpID8gKGkgPT09IDIgPyAxIDogMCkgOiBjb25maWcuX2FbaV07XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIDI0OjAwOjAwLjAwMFxuICAgIGlmIChjb25maWcuX2FbSE9VUl0gPT09IDI0ICYmXG4gICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgY29uZmlnLl9hW1NFQ09ORF0gPT09IDAgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNSUxMSVNFQ09ORF0gPT09IDApIHtcbiAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMDtcbiAgICB9XG5cbiAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkobnVsbCwgaW5wdXQpO1xuICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDID8gY29uZmlnLl9kLmdldFVUQ0RheSgpIDogY29uZmlnLl9kLmdldERheSgpO1xuXG4gICAgLy8gQXBwbHkgdGltZXpvbmUgb2Zmc2V0IGZyb20gaW5wdXQuIFRoZSBhY3R1YWwgdXRjT2Zmc2V0IGNhbiBiZSBjaGFuZ2VkXG4gICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDI0O1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGZvciBtaXNtYXRjaGluZyBkYXkgb2Ygd2Vla1xuICAgIGlmIChjb25maWcuX3cgJiYgdHlwZW9mIGNvbmZpZy5fdy5kICE9PSAndW5kZWZpbmVkJyAmJiBjb25maWcuX3cuZCAhPT0gZXhwZWN0ZWRXZWVrZGF5KSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93O1xuXG4gICAgdyA9IGNvbmZpZy5fdztcbiAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgIGRvdyA9IDE7XG4gICAgICAgIGRveSA9IDQ7XG5cbiAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgLy8gYSBub3cgdmVyc2lvbiBvZiBjdXJyZW50IGNvbmZpZyAodGFrZSBsb2NhbC91dGMvb2Zmc2V0IGZsYWdzLCBhbmRcbiAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5HRywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXIpO1xuICAgICAgICB3ZWVrID0gZGVmYXVsdHMody5XLCAxKTtcbiAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGRvdyA9IGNvbmZpZy5fbG9jYWxlLl93ZWVrLmRvdztcbiAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgIHZhciBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgd2Vla1llYXIgPSBkZWZhdWx0cyh3LmdnLCBjb25maWcuX2FbWUVBUl0sIGN1cldlZWsueWVhcik7XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgaWYgKHcuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDAgfHwgd2Vla2RheSA+IDYpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHcuZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2luaW5nIG9mIHdlZWtcbiAgICAgICAgICAgIHdlZWtkYXkgPSB3LmUgKyBkb3c7XG4gICAgICAgICAgICBpZiAody5lIDwgMCB8fCB3LmUgPiA2KSB7XG4gICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5pbmcgb2Ygd2Vla1xuICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAod2Vla2RheU92ZXJmbG93ICE9IG51bGwpIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla2RheSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGVtcCA9IGRheU9mWWVhckZyb21XZWVrcyh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXI7XG4gICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgfVxufVxuXG4vLyBpc28gODYwMSByZWdleFxuLy8gMDAwMC0wMC0wMCAwMDAwLVcwMCBvciAwMDAwLVcwMC0wICsgVCArIDAwIG9yIDAwOjAwIG9yIDAwOjAwOjAwIG9yIDAwOjAwOjAwLjAwMCArICswMDowMCBvciArMDAwMCBvciArMDApXG52YXIgZXh0ZW5kZWRJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcbnZhciBiYXNpY0lzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcblxudmFyIHR6UmVnZXggPSAvWnxbKy1dXFxkXFxkKD86Oj9cXGRcXGQpPy87XG5cbnZhciBpc29EYXRlcyA9IFtcbiAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICBbJ1lZWVktTU0tREQnLCAvXFxkezR9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgWydZWVlZLURERCcsIC9cXGR7NH0tXFxkezN9L10sXG4gICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgWydZWVlZTU1ERCcsIC9cXGR7OH0vXSxcbiAgICAvLyBZWVlZTU0gaXMgTk9UIGFsbG93ZWQgYnkgdGhlIHN0YW5kYXJkXG4gICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICBbJ0dHR0dbV11XVycsIC9cXGR7NH1XXFxkezJ9LywgZmFsc2VdLFxuICAgIFsnWVlZWURERCcsIC9cXGR7N30vXVxuXTtcblxuLy8gaXNvIHRpbWUgZm9ybWF0cyBhbmQgcmVnZXhlc1xudmFyIGlzb1RpbWVzID0gW1xuICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICBbJ0hIOm1tOnNzLFNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQsXFxkKy9dLFxuICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICBbJ0hIbW1zcy5TU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZFxcLlxcZCsvXSxcbiAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgWydISG1tJywgL1xcZFxcZFxcZFxcZC9dLFxuICAgIFsnSEgnLCAvXFxkXFxkL11cbl07XG5cbnZhciBhc3BOZXRKc29uUmVnZXggPSAvXlxcLz9EYXRlXFwoKFxcLT9cXGQrKS9pO1xuXG4vLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuZnVuY3Rpb24gY29uZmlnRnJvbUlTTyhjb25maWcpIHtcbiAgICB2YXIgaSwgbCxcbiAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICBtYXRjaCA9IGV4dGVuZGVkSXNvUmVnZXguZXhlYyhzdHJpbmcpIHx8IGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICBhbGxvd1RpbWUsIGRhdGVGb3JtYXQsIHRpbWVGb3JtYXQsIHR6Rm9ybWF0O1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb0RhdGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgIGFsbG93VGltZSA9IGlzb0RhdGVzW2ldWzJdICE9PSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29UaW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbMl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gKG1hdGNoWzJdIHx8ICcgJykgKyBpc29UaW1lc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFsbG93VGltZSAmJiB0aW1lRm9ybWF0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICB0ekZvcm1hdCA9ICdaJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fZiA9IGRhdGVGb3JtYXQgKyAodGltZUZvcm1hdCB8fCAnJykgKyAodHpGb3JtYXQgfHwgJycpO1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgfVxufVxuXG4vLyBSRkMgMjgyMiByZWdleDogRm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyODIyI3NlY3Rpb24tMy4zXG52YXIgcmZjMjgyMiA9IC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksP1xccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoWystXVxcZHs0fSkpJC87XG5cbmZ1bmN0aW9uIGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpIHtcbiAgICB2YXIgcmVzdWx0ID0gW1xuICAgICAgICB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSxcbiAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpLFxuICAgICAgICBwYXJzZUludChkYXlTdHIsIDEwKSxcbiAgICAgICAgcGFyc2VJbnQoaG91clN0ciwgMTApLFxuICAgICAgICBwYXJzZUludChtaW51dGVTdHIsIDEwKVxuICAgIF07XG5cbiAgICBpZiAoc2Vjb25kU3RyKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHNlY29uZFN0ciwgMTApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSB7XG4gICAgdmFyIHllYXIgPSBwYXJzZUludCh5ZWFyU3RyLCAxMCk7XG4gICAgaWYgKHllYXIgPD0gNDkpIHtcbiAgICAgICAgcmV0dXJuIDIwMDAgKyB5ZWFyO1xuICAgIH0gZWxzZSBpZiAoeWVhciA8PSA5OTkpIHtcbiAgICAgICAgcmV0dXJuIDE5MDAgKyB5ZWFyO1xuICAgIH1cbiAgICByZXR1cm4geWVhcjtcbn1cblxuZnVuY3Rpb24gcHJlcHJvY2Vzc1JGQzI4MjIocykge1xuICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgcmV0dXJuIHMucmVwbGFjZSgvXFwoW14pXSpcXCl8W1xcblxcdF0vZywgJyAnKS5yZXBsYWNlKC8oXFxzXFxzKykvZywgJyAnKS50cmltKCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrV2Vla2RheSh3ZWVrZGF5U3RyLCBwYXJzZWRJbnB1dCwgY29uZmlnKSB7XG4gICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB0aGUgdmFuaWxsYSBKUyBEYXRlIG9iamVjdCB3aXRoIGFuIGluZGVwZW50ZW50IGRheS1vZi13ZWVrIGNoZWNrLlxuICAgICAgICB2YXIgd2Vla2RheVByb3ZpZGVkID0gZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQuaW5kZXhPZih3ZWVrZGF5U3RyKSxcbiAgICAgICAgICAgIHdlZWtkYXlBY3R1YWwgPSBuZXcgRGF0ZShwYXJzZWRJbnB1dFswXSwgcGFyc2VkSW5wdXRbMV0sIHBhcnNlZElucHV0WzJdKS5nZXREYXkoKTtcbiAgICAgICAgaWYgKHdlZWtkYXlQcm92aWRlZCAhPT0gd2Vla2RheUFjdHVhbCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG52YXIgb2JzT2Zmc2V0cyA9IHtcbiAgICBVVDogMCxcbiAgICBHTVQ6IDAsXG4gICAgRURUOiAtNCAqIDYwLFxuICAgIEVTVDogLTUgKiA2MCxcbiAgICBDRFQ6IC01ICogNjAsXG4gICAgQ1NUOiAtNiAqIDYwLFxuICAgIE1EVDogLTYgKiA2MCxcbiAgICBNU1Q6IC03ICogNjAsXG4gICAgUERUOiAtNyAqIDYwLFxuICAgIFBTVDogLTggKiA2MFxufTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9ic09mZnNldCwgbWlsaXRhcnlPZmZzZXQsIG51bU9mZnNldCkge1xuICAgIGlmIChvYnNPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG9ic09mZnNldHNbb2JzT2Zmc2V0XTtcbiAgICB9IGVsc2UgaWYgKG1pbGl0YXJ5T2Zmc2V0KSB7XG4gICAgICAgIC8vIHRoZSBvbmx5IGFsbG93ZWQgbWlsaXRhcnkgdHogaXMgWlxuICAgICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaG0gPSBwYXJzZUludChudW1PZmZzZXQsIDEwKTtcbiAgICAgICAgdmFyIG0gPSBobSAlIDEwMCwgaCA9IChobSAtIG0pIC8gMTAwO1xuICAgICAgICByZXR1cm4gaCAqIDYwICsgbTtcbiAgICB9XG59XG5cbi8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZykge1xuICAgIHZhciBtYXRjaCA9IHJmYzI4MjIuZXhlYyhwcmVwcm9jZXNzUkZDMjgyMihjb25maWcuX2kpKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgdmFyIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhtYXRjaFs0XSwgbWF0Y2hbM10sIG1hdGNoWzJdLCBtYXRjaFs1XSwgbWF0Y2hbNl0sIG1hdGNoWzddKTtcbiAgICAgICAgaWYgKCFjaGVja1dlZWtkYXkobWF0Y2hbMV0sIHBhcnNlZEFycmF5LCBjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2EgPSBwYXJzZWRBcnJheTtcbiAgICAgICAgY29uZmlnLl90em0gPSBjYWxjdWxhdGVPZmZzZXQobWF0Y2hbOF0sIG1hdGNoWzldLCBtYXRjaFsxMF0pO1xuXG4gICAgICAgIGNvbmZpZy5fZCA9IGNyZWF0ZVVUQ0RhdGUuYXBwbHkobnVsbCwgY29uZmlnLl9hKTtcbiAgICAgICAgY29uZmlnLl9kLnNldFVUQ01pbnV0ZXMoY29uZmlnLl9kLmdldFVUQ01pbnV0ZXMoKSAtIGNvbmZpZy5fdHptKTtcblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICB9XG59XG5cbi8vIGRhdGUgZnJvbSBpc28gZm9ybWF0IG9yIGZhbGxiYWNrXG5mdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcblxuICAgIGlmIChtYXRjaGVkICE9PSBudWxsKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG59XG5cbmhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICd2YWx1ZSBwcm92aWRlZCBpcyBub3QgaW4gYSByZWNvZ25pemVkIFJGQzI4MjIgb3IgSVNPIGZvcm1hdC4gbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUoKSwgJyArXG4gICAgJ3doaWNoIGlzIG5vdCByZWxpYWJsZSBhY3Jvc3MgYWxsIGJyb3dzZXJzIGFuZCB2ZXJzaW9ucy4gTm9uIFJGQzI4MjIvSVNPIGRhdGUgZm9ybWF0cyBhcmUgJyArXG4gICAgJ2Rpc2NvdXJhZ2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYW4gdXBjb21pbmcgbWFqb3IgcmVsZWFzZS4gUGxlYXNlIHJlZmVyIHRvICcgK1xuICAgICdodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2pzLWRhdGUvIGZvciBtb3JlIGluZm8uJyxcbiAgICBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgfVxuKTtcblxuLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIFJGQyAyODIyIGZvcm1cbmhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbi8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbmZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKSB7XG4gICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICBjb25maWdGcm9tSVNPKGNvbmZpZyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuUkZDXzI4MjIpIHtcbiAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25maWcuX2EgPSBbXTtcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAvLyBUaGlzIGFycmF5IGlzIHVzZWQgdG8gbWFrZSBhIERhdGUsIGVpdGhlciB3aXRoIGBuZXcgRGF0ZWAgb3IgYERhdGUuVVRDYFxuICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgaSwgcGFyc2VkSW5wdXQsIHRva2VucywgdG9rZW4sIHNraXBwZWQsXG4gICAgICAgIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGgsXG4gICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwO1xuXG4gICAgdG9rZW5zID0gZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygndG9rZW4nLCB0b2tlbiwgJ3BhcnNlZElucHV0JywgcGFyc2VkSW5wdXQsXG4gICAgICAgIC8vICAgICAgICAgJ3JlZ2V4JywgZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKTtcbiAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICBza2lwcGVkID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkpO1xuICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoKTtcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBwYXJzZWRJbnB1dCwgY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFkZCByZW1haW5pbmcgdW5wYXJzZWQgaW5wdXQgbGVuZ3RoIHRvIHRoZSBzdHJpbmdcbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID0gc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkSW5wdXQucHVzaChzdHJpbmcpO1xuICAgIH1cblxuICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA8PSAxMiAmJlxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDApIHtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykubWVyaWRpZW0gPSBjb25maWcuX21lcmlkaWVtO1xuICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChjb25maWcuX2xvY2FsZSwgY29uZmlnLl9hW0hPVVJdLCBjb25maWcuX21lcmlkaWVtKTtcblxuICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbn1cblxuXG5mdW5jdGlvbiBtZXJpZGllbUZpeFdyYXAgKGxvY2FsZSwgaG91ciwgbWVyaWRpZW0pIHtcbiAgICB2YXIgaXNQbTtcblxuICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgIC8vIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgfVxuICAgIGlmIChsb2NhbGUubWVyaWRpZW1Ib3VyICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAvLyBGYWxsYmFja1xuICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgIGhvdXIgKz0gMTI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaG91cjtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgfVxufVxuXG4vLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZykge1xuICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICBiZXN0TW9tZW50LFxuXG4gICAgICAgIHNjb3JlVG9CZWF0LFxuICAgICAgICBpLFxuICAgICAgICBjdXJyZW50U2NvcmU7XG5cbiAgICBpZiAoY29uZmlnLl9mLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcuX2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3VycmVudFNjb3JlID0gMDtcbiAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl91c2VVVEMgPSBjb25maWcuX3VzZVVUQztcbiAgICAgICAgfVxuICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KHRlbXBDb25maWcpO1xuXG4gICAgICAgIGlmICghaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgLy9vciB0b2tlbnNcbiAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgIGlmIChzY29yZVRvQmVhdCA9PSBudWxsIHx8IGN1cnJlbnRTY29yZSA8IHNjb3JlVG9CZWF0KSB7XG4gICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbn1cblxuZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7XG4gICAgY29uZmlnLl9hID0gbWFwKFtpLnllYXIsIGkubW9udGgsIGkuZGF5IHx8IGkuZGF0ZSwgaS5ob3VyLCBpLm1pbnV0ZSwgaS5zZWNvbmQsIGkubWlsbGlzZWNvbmRdLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgfSk7XG5cbiAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyAoY29uZmlnKSB7XG4gICAgdmFyIHJlcyA9IG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhwcmVwYXJlQ29uZmlnKGNvbmZpZykpKTtcbiAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICByZXMuYWRkKDEsICdkJyk7XG4gICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlQ29uZmlnIChjb25maWcpIHtcbiAgICB2YXIgaW5wdXQgPSBjb25maWcuX2ksXG4gICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICBpZiAoaW5wdXQgPT09IG51bGwgfHwgKGZvcm1hdCA9PT0gdW5kZWZpbmVkICYmIGlucHV0ID09PSAnJykpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoe251bGxJbnB1dDogdHJ1ZX0pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgIH1cblxuICAgIGlmIChpc01vbWVudChpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICBjb25maWcuX2QgPSBpbnB1dDtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdCkge1xuICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgfSAgZWxzZSB7XG4gICAgICAgIGNvbmZpZ0Zyb21JbnB1dChjb25maWcpO1xuICAgIH1cblxuICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbn1cblxuZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICBpZiAoaXNVbmRlZmluZWQoaW5wdXQpKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQudmFsdWVPZigpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShpbnB1dCkpIHtcbiAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICBjb25maWdGcm9tT2JqZWN0KGNvbmZpZyk7XG4gICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaW5wdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICB2YXIgYyA9IHt9O1xuXG4gICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgbG9jYWxlID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICgoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgKGlzQXJyYXkoaW5wdXQpICYmIGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIC8vIG9iamVjdCBjb25zdHJ1Y3Rpb24gbXVzdCBiZSBkb25lIHRoaXMgd2F5LlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICBjLl91c2VVVEMgPSBjLl9pc1VUQyA9IGlzVVRDO1xuICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgYy5faSA9IGlucHV0O1xuICAgIGMuX2YgPSBmb3JtYXQ7XG4gICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2FsIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG59XG5cbnZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvdGhlciA8IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICB9XG4gICAgfVxuKTtcblxudmFyIHByb3RvdHlwZU1heCA9IGRlcHJlY2F0ZShcbiAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgIH1cbiAgICB9XG4pO1xuXG4vLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuLy8gb3RoZXIuIFRoaXMgcmVsaWVzIG9uIHRoZSBmdW5jdGlvbiBmbiB0byBiZSB0cmFuc2l0aXZlLlxuLy9cbi8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2Vcbi8vIGZpcnN0IGVsZW1lbnQgaXMgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMuXG5mdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICB2YXIgcmVzLCBpO1xuICAgIGlmIChtb21lbnRzLmxlbmd0aCA9PT0gMSAmJiBpc0FycmF5KG1vbWVudHNbMF0pKSB7XG4gICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgIH1cbiAgICBpZiAoIW1vbWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgIH1cbiAgICByZXMgPSBtb21lbnRzWzBdO1xuICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgcmVzID0gbW9tZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuZnVuY3Rpb24gbWluICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG59XG5cbmZ1bmN0aW9uIG1heCAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICByZXR1cm4gcGlja0J5KCdpc0FmdGVyJywgYXJncyk7XG59XG5cbnZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIERhdGUubm93ID8gRGF0ZS5ub3coKSA6ICsobmV3IERhdGUoKSk7XG59O1xuXG52YXIgb3JkZXJpbmcgPSBbJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCAnbWlsbGlzZWNvbmQnXTtcblxuZnVuY3Rpb24gaXNEdXJhdGlvblZhbGlkKG0pIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbSkge1xuICAgICAgICBpZiAoIShpbmRleE9mLmNhbGwob3JkZXJpbmcsIGtleSkgIT09IC0xICYmIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdW5pdEhhc0RlY2ltYWwgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yZGVyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgaWYgKHVuaXRIYXNEZWNpbWFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobVtvcmRlcmluZ1tpXV0pICE9PSB0b0ludChtW29yZGVyaW5nW2ldXSkpIHtcbiAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKE5hTik7XG59XG5cbmZ1bmN0aW9uIER1cmF0aW9uIChkdXJhdGlvbikge1xuICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgIHllYXJzID0gbm9ybWFsaXplZElucHV0LnllYXIgfHwgMCxcbiAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgd2Vla3MgPSBub3JtYWxpemVkSW5wdXQud2VlayB8fCAwLFxuICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgIG1pbnV0ZXMgPSBub3JtYWxpemVkSW5wdXQubWludXRlIHx8IDAsXG4gICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgdGhpcy5faXNWYWxpZCA9IGlzRHVyYXRpb25WYWxpZChub3JtYWxpemVkSW5wdXQpO1xuXG4gICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICB0aGlzLl9taWxsaXNlY29uZHMgPSArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgc2Vjb25kcyAqIDFlMyArIC8vIDEwMDBcbiAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICBob3VycyAqIDEwMDAgKiA2MCAqIDYwOyAvL3VzaW5nIDEwMDAgKiA2MCAqIDYwIGluc3RlYWQgb2YgMzZlNSB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzI5NzhcbiAgICAvLyBCZWNhdXNlIG9mIGRhdGVBZGRSZW1vdmUgdHJlYXRzIDI0IGhvdXJzIGFzIGRpZmZlcmVudCBmcm9tIGFcbiAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgdGhpcy5fZGF5cyA9ICtkYXlzICtcbiAgICAgICAgd2Vla3MgKiA3O1xuICAgIC8vIEl0IGlzIGltcG9zc2libGUgdG8gdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAvLyBpdCBzZXBhcmF0ZWx5LlxuICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgK1xuICAgICAgICBxdWFydGVycyAqIDMgK1xuICAgICAgICB5ZWFycyAqIDEyO1xuXG4gICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG5cbiAgICB0aGlzLl9idWJibGUoKTtcbn1cblxuZnVuY3Rpb24gaXNEdXJhdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIER1cmF0aW9uO1xufVxuXG5mdW5jdGlvbiBhYnNSb3VuZCAobnVtYmVyKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQobnVtYmVyKTtcbiAgICB9XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuZnVuY3Rpb24gb2Zmc2V0ICh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIHZhciBzaWduID0gJysnO1xuICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcbiAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpZ24gKyB6ZXJvRmlsbCh+fihvZmZzZXQgLyA2MCksIDIpICsgc2VwYXJhdG9yICsgemVyb0ZpbGwofn4ob2Zmc2V0KSAlIDYwLCAyKTtcbiAgICB9KTtcbn1cblxub2Zmc2V0KCdaJywgJzonKTtcbm9mZnNldCgnWlonLCAnJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignWicsICBtYXRjaFNob3J0T2Zmc2V0KTtcbmFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG5hZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX3VzZVVUQyA9IHRydWU7XG4gICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIHRpbWV6b25lIGNodW5rZXJcbi8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuLy8gJy0xNTMwJyAgPiBbJy0xNScsICczMCddXG52YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbmZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgdmFyIG1hdGNoZXMgPSAoc3RyaW5nIHx8ICcnKS5tYXRjaChtYXRjaGVyKTtcblxuICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjaHVuayAgID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgIHZhciBwYXJ0cyAgID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICB2YXIgbWludXRlcyA9ICsocGFydHNbMV0gKiA2MCkgKyB0b0ludChwYXJ0c1syXSk7XG5cbiAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/XG4gICAgICAwIDpcbiAgICAgIHBhcnRzWzBdID09PSAnKycgPyBtaW51dGVzIDogLW1pbnV0ZXM7XG59XG5cbi8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG5mdW5jdGlvbiBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIG1vZGVsKSB7XG4gICAgdmFyIHJlcywgZGlmZjtcbiAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgIHJlcyA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgIGRpZmYgPSAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dCkgPyBpbnB1dC52YWx1ZU9mKCkgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgcmVzLl9kLnNldFRpbWUocmVzLl9kLnZhbHVlT2YoKSArIGRpZmYpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldCAobSkge1xuICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvcHVsbC8xODcxXG4gICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDE1KSAqIDE1O1xufVxuXG4vLyBIT09LU1xuXG4vLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4vLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbmhvb2tzLnVwZGF0ZU9mZnNldCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4vLyBNT01FTlRTXG5cbi8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuLy8gYWZmZWN0aW5nIHRoZSBsb2NhbCBob3VyLiBTbyA1OjMxOjI2ICswMzAwIC0tW3V0Y09mZnNldCgyLCB0cnVlKV0tLT5cbi8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbi8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbi8vXG4vLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbi8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuLy8gYSBzZWNvbmQgdGltZS4gSW4gY2FzZSBpdCB3YW50cyB1cyB0byBjaGFuZ2UgdGhlIG9mZnNldCBhZ2FpblxuLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4vLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuZnVuY3Rpb24gZ2V0U2V0T2Zmc2V0IChpbnB1dCwga2VlcExvY2FsVGltZSwga2VlcE1pbnV0ZXMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgIGxvY2FsQWRqdXN0O1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGlucHV0KSA8IDE2ICYmICFrZWVwTWludXRlcykge1xuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faXNVVEMgJiYga2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29mZnNldCA9IGlucHV0O1xuICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChsb2NhbEFkanVzdCwgJ20nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgaWYgKCFrZWVwTG9jYWxUaW1lIHx8IHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSwgMSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2V0Wm9uZSAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnV0Y09mZnNldChpbnB1dCwga2VlcExvY2FsVGltZSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC10aGlzLnV0Y09mZnNldCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9VVEMgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG59XG5cbmZ1bmN0aW9uIHNldE9mZnNldFRvTG9jYWwgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgIHRoaXMuX2lzVVRDID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cblxuZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQgKCkge1xuICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnV0Y09mZnNldCh0aGlzLl90em0sIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgaWYgKHRab25lICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBoYXNBbGlnbmVkSG91ck9mZnNldCAoaW5wdXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUgKCkge1xuICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMudXRjT2Zmc2V0KCkgPiB0aGlzLmNsb25lKCkubW9udGgoMCkudXRjT2Zmc2V0KCkgfHxcbiAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCAoKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB7fTtcblxuICAgIGNvcHlDb25maWcoYywgdGhpcyk7XG4gICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICBpZiAoYy5fYSkge1xuICAgICAgICB2YXIgb3RoZXIgPSBjLl9pc1VUQyA/IGNyZWF0ZVVUQyhjLl9hKSA6IGNyZWF0ZUxvY2FsKGMuX2EpO1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xufVxuXG5mdW5jdGlvbiBpc0xvY2FsICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyAhdGhpcy5faXNVVEMgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNVdGNPZmZzZXQgKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzVXRjICgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyAmJiB0aGlzLl9vZmZzZXQgPT09IDAgOiBmYWxzZTtcbn1cblxuLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG52YXIgYXNwTmV0UmVnZXggPSAvXihcXC18XFwrKT8oPzooXFxkKilbLiBdKT8oXFxkKylcXDooXFxkKykoPzpcXDooXFxkKykoXFwuXFxkKik/KT8kLztcblxuLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbi8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbi8vIGFuZCBmdXJ0aGVyIG1vZGlmaWVkIHRvIGFsbG93IGZvciBzdHJpbmdzIGNvbnRhaW5pbmcgYm90aCB3ZWVrIGFuZCBkYXlcbnZhciBpc29SZWdleCA9IC9eKC18XFwrKT9QKD86KFstK10/WzAtOSwuXSopWSk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopVyk/KD86KFstK10/WzAtOSwuXSopRCk/KD86VCg/OihbLStdP1swLTksLl0qKUgpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVMpPyk/JC87XG5cbmZ1bmN0aW9uIGNyZWF0ZUR1cmF0aW9uIChpbnB1dCwga2V5KSB7XG4gICAgdmFyIGR1cmF0aW9uID0gaW5wdXQsXG4gICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgc2lnbixcbiAgICAgICAgcmV0LFxuICAgICAgICBkaWZmUmVzO1xuXG4gICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpKSB7XG4gICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgbXMgOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgZCAgOiBpbnB1dC5fZGF5cyxcbiAgICAgICAgICAgIE0gIDogaW5wdXQuX21vbnRoc1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoaW5wdXQpKSB7XG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uW2tleV0gPSBpbnB1dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHkgIDogMCxcbiAgICAgICAgICAgIGQgIDogdG9JbnQobWF0Y2hbREFURV0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIGggIDogdG9JbnQobWF0Y2hbSE9VUl0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIG0gIDogdG9JbnQobWF0Y2hbTUlOVVRFXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIHMgIDogdG9JbnQobWF0Y2hbU0VDT05EXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgIG1zIDogdG9JbnQoYWJzUm91bmQobWF0Y2hbTUlMTElTRUNPTkRdICogMTAwMCkpICogc2lnbiAvLyB0aGUgbWlsbGlzZWNvbmQgZGVjaW1hbCBwb2ludCBpcyBpbmNsdWRlZCBpbiB0aGUgbWF0Y2hcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgIHNpZ24gPSAobWF0Y2hbMV0gPT09ICctJykgPyAtMSA6IChtYXRjaFsxXSA9PT0gJysnKSA/IDEgOiAxO1xuICAgICAgICBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHkgOiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbiksXG4gICAgICAgICAgICBNIDogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgdyA6IHBhcnNlSXNvKG1hdGNoWzRdLCBzaWduKSxcbiAgICAgICAgICAgIGQgOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbiksXG4gICAgICAgICAgICBoIDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgbSA6IHBhcnNlSXNvKG1hdGNoWzddLCBzaWduKSxcbiAgICAgICAgICAgIHMgOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbilcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGR1cmF0aW9uID09IG51bGwpIHsvLyBjaGVja3MgZm9yIG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbikpIHtcbiAgICAgICAgZGlmZlJlcyA9IG1vbWVudHNEaWZmZXJlbmNlKGNyZWF0ZUxvY2FsKGR1cmF0aW9uLmZyb20pLCBjcmVhdGVMb2NhbChkdXJhdGlvbi50bykpO1xuXG4gICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgIGR1cmF0aW9uLk0gPSBkaWZmUmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgaWYgKGlzRHVyYXRpb24oaW5wdXQpICYmIGhhc093blByb3AoaW5wdXQsICdfbG9jYWxlJykpIHtcbiAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG59XG5cbmNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuY3JlYXRlRHVyYXRpb24uaW52YWxpZCA9IGNyZWF0ZUludmFsaWQkMTtcblxuZnVuY3Rpb24gcGFyc2VJc28gKGlucCwgc2lnbikge1xuICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgLy8gY29udmVydHMgZmxvYXRzIHRvIGludHMuXG4gICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgIC8vIGFwcGx5IHNpZ24gd2hpbGUgd2UncmUgYXQgaXRcbiAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG59XG5cbmZ1bmN0aW9uIHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICB2YXIgcmVzID0ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcblxuICAgIHJlcy5tb250aHMgPSBvdGhlci5tb250aCgpIC0gYmFzZS5tb250aCgpICtcbiAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgLS1yZXMubW9udGhzO1xuICAgIH1cblxuICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKSk7XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgIHZhciByZXM7XG4gICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcbiAgICB9XG5cbiAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gLXJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xufVxuXG4vLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG5mdW5jdGlvbiBjcmVhdGVBZGRlcihkaXJlY3Rpb24sIG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgLy9pbnZlcnQgdGhlIGFyZ3VtZW50cywgYnV0IGNvbXBsYWluIGFib3V0IGl0XG4gICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUobmFtZSwgJ21vbWVudCgpLicgKyBuYW1lICArICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArIG5hbWUgKyAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvYWRkLWludmVydGVkLXBhcmFtLyBmb3IgbW9yZSBpbmZvLicpO1xuICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbCA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gK3ZhbCA6IHZhbDtcbiAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0IChtb20sIGR1cmF0aW9uLCBpc0FkZGluZywgdXBkYXRlT2Zmc2V0KSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgIGRheXMgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgIG1vbnRocyA9IGFic1JvdW5kKGR1cmF0aW9uLl9tb250aHMpO1xuXG4gICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgIC8vIE5vIG9wXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICBpZiAobW9udGhzKSB7XG4gICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgfVxuICAgIGlmIChkYXlzKSB7XG4gICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICB9XG4gICAgaWYgKG1pbGxpc2Vjb25kcykge1xuICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgIH1cbiAgICBpZiAodXBkYXRlT2Zmc2V0KSB7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICB9XG59XG5cbnZhciBhZGQgICAgICA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKTtcbnZhciBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuZnVuY3Rpb24gZ2V0Q2FsZW5kYXJGb3JtYXQobXlNb21lbnQsIG5vdykge1xuICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgcmV0dXJuIGRpZmYgPCAtNiA/ICdzYW1lRWxzZScgOlxuICAgICAgICAgICAgZGlmZiA8IC0xID8gJ2xhc3RXZWVrJyA6XG4gICAgICAgICAgICBkaWZmIDwgMCA/ICdsYXN0RGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgMSA/ICdzYW1lRGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgMiA/ICduZXh0RGF5JyA6XG4gICAgICAgICAgICBkaWZmIDwgNyA/ICduZXh0V2VlaycgOiAnc2FtZUVsc2UnO1xufVxuXG5mdW5jdGlvbiBjYWxlbmRhciQxICh0aW1lLCBmb3JtYXRzKSB7XG4gICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICB2YXIgbm93ID0gdGltZSB8fCBjcmVhdGVMb2NhbCgpLFxuICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnO1xuXG4gICAgdmFyIG91dHB1dCA9IGZvcm1hdHMgJiYgKGlzRnVuY3Rpb24oZm9ybWF0c1tmb3JtYXRdKSA/IGZvcm1hdHNbZm9ybWF0XS5jYWxsKHRoaXMsIG5vdykgOiBmb3JtYXRzW2Zvcm1hdF0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0KG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpKTtcbn1cblxuZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xufVxuXG5mdW5jdGlvbiBpc0FmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHMoIWlzVW5kZWZpbmVkKHVuaXRzKSA/IHVuaXRzIDogJ21pbGxpc2Vjb25kJyk7XG4gICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2NhbElucHV0LnZhbHVlT2YoKSA8IHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc0JlZm9yZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKCFpc1VuZGVmaW5lZCh1bml0cykgPyB1bml0cyA6ICdtaWxsaXNlY29uZCcpO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzQmV0d2VlbiAoZnJvbSwgdG8sIHVuaXRzLCBpbmNsdXNpdml0eSkge1xuICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICByZXR1cm4gKGluY2x1c2l2aXR5WzBdID09PSAnKCcgPyB0aGlzLmlzQWZ0ZXIoZnJvbSwgdW5pdHMpIDogIXRoaXMuaXNCZWZvcmUoZnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJyA/IHRoaXMuaXNCZWZvcmUodG8sIHVuaXRzKSA6ICF0aGlzLmlzQWZ0ZXIodG8sIHVuaXRzKSk7XG59XG5cbmZ1bmN0aW9uIGlzU2FtZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KSxcbiAgICAgICAgaW5wdXRNcztcbiAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzIHx8ICdtaWxsaXNlY29uZCcpO1xuICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlucHV0TXMgPSBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LHVuaXRzKTtcbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNCZWZvcmUoaW5wdXQsdW5pdHMpO1xufVxuXG5mdW5jdGlvbiBkaWZmIChpbnB1dCwgdW5pdHMsIGFzRmxvYXQpIHtcbiAgICB2YXIgdGhhdCxcbiAgICAgICAgem9uZURlbHRhLFxuICAgICAgICBkZWx0YSwgb3V0cHV0O1xuXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHRoYXQgPSBjbG9uZVdpdGhPZmZzZXQoaW5wdXQsIHRoaXMpO1xuXG4gICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gTmFOO1xuICAgIH1cblxuICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgY2FzZSAneWVhcic6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyOyBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7IGJyZWFrO1xuICAgICAgICBjYXNlICdxdWFydGVyJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMzsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NlY29uZCc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTM7IGJyZWFrOyAvLyAxMDAwXG4gICAgICAgIGNhc2UgJ21pbnV0ZSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyA2ZTQ7IGJyZWFrOyAvLyAxMDAwICogNjBcbiAgICAgICAgY2FzZSAnaG91cic6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAzNmU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjBcbiAgICAgICAgY2FzZSAnZGF5Jzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICBjYXNlICd3ZWVrJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDYwNDhlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgIGRlZmF1bHQ6IG91dHB1dCA9IHRoaXMgLSB0aGF0O1xuICAgIH1cblxuICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbn1cblxuZnVuY3Rpb24gbW9udGhEaWZmIChhLCBiKSB7XG4gICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICB2YXIgd2hvbGVNb250aERpZmYgPSAoKGIueWVhcigpIC0gYS55ZWFyKCkpICogMTIpICsgKGIubW9udGgoKSAtIGEubW9udGgoKSksXG4gICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgYW5jaG9yMiwgYWRqdXN0O1xuXG4gICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAvLyBsaW5lYXIgYWNyb3NzIHRoZSBtb250aFxuICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYW5jaG9yMiA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYgKyAxLCAnbW9udGhzJyk7XG4gICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICB9XG5cbiAgICAvL2NoZWNrIGZvciBuZWdhdGl2ZSB6ZXJvLCByZXR1cm4gemVybyBpZiBuZWdhdGl2ZSB6ZXJvXG4gICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG59XG5cbmhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbn1cblxuZnVuY3Rpb24gdG9JU09TdHJpbmcoa2VlcE9mZnNldCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciB1dGMgPSBrZWVwT2Zmc2V0ICE9PSB0cnVlO1xuICAgIHZhciBtID0gdXRjID8gdGhpcy5jbG9uZSgpLnV0YygpIDogdGhpcztcbiAgICBpZiAobS55ZWFyKCkgPCAwIHx8IG0ueWVhcigpID4gOTk5OSkge1xuICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sIHV0YyA/ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onKTtcbiAgICB9XG4gICAgaWYgKGlzRnVuY3Rpb24oRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcpKSB7XG4gICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy5fZC52YWx1ZU9mKCkpLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgnWicsIGZvcm1hdE1vbWVudChtLCAnWicpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sIHV0YyA/ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTW1pdJyA6ICdZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWicpO1xufVxuXG4vKipcbiAqIFJldHVybiBhIGh1bWFuIHJlYWRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbW9tZW50IHRoYXQgY2FuXG4gKiBhbHNvIGJlIGV2YWx1YXRlZCB0byBnZXQgYSBuZXcgbW9tZW50IHdoaWNoIGlzIHRoZSBzYW1lXG4gKlxuICogQGxpbmsgaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvbGF0ZXN0L2RvY3MvYXBpL3V0aWwuaHRtbCN1dGlsX2N1c3RvbV9pbnNwZWN0X2Z1bmN0aW9uX29uX29iamVjdHNcbiAqL1xuZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICByZXR1cm4gJ21vbWVudC5pbnZhbGlkKC8qICcgKyB0aGlzLl9pICsgJyAqLyknO1xuICAgIH1cbiAgICB2YXIgZnVuYyA9ICdtb21lbnQnO1xuICAgIHZhciB6b25lID0gJyc7XG4gICAgaWYgKCF0aGlzLmlzTG9jYWwoKSkge1xuICAgICAgICBmdW5jID0gdGhpcy51dGNPZmZzZXQoKSA9PT0gMCA/ICdtb21lbnQudXRjJyA6ICdtb21lbnQucGFyc2Vab25lJztcbiAgICAgICAgem9uZSA9ICdaJztcbiAgICB9XG4gICAgdmFyIHByZWZpeCA9ICdbJyArIGZ1bmMgKyAnKFwiXSc7XG4gICAgdmFyIHllYXIgPSAoMCA8PSB0aGlzLnllYXIoKSAmJiB0aGlzLnllYXIoKSA8PSA5OTk5KSA/ICdZWVlZJyA6ICdZWVlZWVknO1xuICAgIHZhciBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnO1xuICAgIHZhciBzdWZmaXggPSB6b25lICsgJ1tcIildJztcblxuICAgIHJldHVybiB0aGlzLmZvcm1hdChwcmVmaXggKyB5ZWFyICsgZGF0ZXRpbWUgKyBzdWZmaXgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXQgKGlucHV0U3RyaW5nKSB7XG4gICAgaWYgKCFpbnB1dFN0cmluZykge1xuICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKSA/IGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgOiBob29rcy5kZWZhdWx0Rm9ybWF0O1xuICAgIH1cbiAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nKTtcbiAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xufVxuXG5mdW5jdGlvbiBmcm9tICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHt0bzogdGhpcywgZnJvbTogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmcm9tTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbn1cblxuZnVuY3Rpb24gdG8gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe2Zyb206IHRoaXMsIHRvOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRvTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgcmV0dXJuIHRoaXMudG8oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG59XG5cbi8vIElmIHBhc3NlZCBhIGxvY2FsZSBrZXksIGl0IHdpbGwgc2V0IHRoZSBsb2NhbGUgZm9yIHRoaXNcbi8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbi8vIHZhcmlhYmxlcyBmb3IgdGhpcyBpbnN0YW5jZS5cbmZ1bmN0aW9uIGxvY2FsZSAoa2V5KSB7XG4gICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBuZXdMb2NhbGVEYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG52YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbik7XG5cbmZ1bmN0aW9uIGxvY2FsZURhdGEgKCkge1xuICAgIHJldHVybiB0aGlzLl9sb2NhbGU7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0T2YgKHVuaXRzKSB7XG4gICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgLy8gdGhlIGZvbGxvd2luZyBzd2l0Y2ggaW50ZW50aW9uYWxseSBvbWl0cyBicmVhayBrZXl3b3Jkc1xuICAgIC8vIHRvIHV0aWxpemUgZmFsbGluZyB0aHJvdWdoIHRoZSBjYXNlcy5cbiAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgdGhpcy5tb250aCgwKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgIHRoaXMuZGF0ZSgxKTtcbiAgICAgICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIGNhc2UgJ2lzb1dlZWsnOlxuICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgIHRoaXMuaG91cnMoMCk7XG4gICAgICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgdGhpcy5taW51dGVzKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgdGhpcy5zZWNvbmRzKDApO1xuICAgICAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICAgICAgdGhpcy5taWxsaXNlY29uZHMoMCk7XG4gICAgfVxuXG4gICAgLy8gd2Vla3MgYXJlIGEgc3BlY2lhbCBjYXNlXG4gICAgaWYgKHVuaXRzID09PSAnd2VlaycpIHtcbiAgICAgICAgdGhpcy53ZWVrZGF5KDApO1xuICAgIH1cbiAgICBpZiAodW5pdHMgPT09ICdpc29XZWVrJykge1xuICAgICAgICB0aGlzLmlzb1dlZWtkYXkoMSk7XG4gICAgfVxuXG4gICAgLy8gcXVhcnRlcnMgYXJlIGFsc28gc3BlY2lhbFxuICAgIGlmICh1bml0cyA9PT0gJ3F1YXJ0ZXInKSB7XG4gICAgICAgIHRoaXMubW9udGgoTWF0aC5mbG9vcih0aGlzLm1vbnRoKCkgLyAzKSAqIDMpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBlbmRPZiAodW5pdHMpIHtcbiAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyAnZGF0ZScgaXMgYW4gYWxpYXMgZm9yICdkYXknLCBzbyBpdCBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyBzdWNoLlxuICAgIGlmICh1bml0cyA9PT0gJ2RhdGUnKSB7XG4gICAgICAgIHVuaXRzID0gJ2RheSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RhcnRPZih1bml0cykuYWRkKDEsICh1bml0cyA9PT0gJ2lzb1dlZWsnID8gJ3dlZWsnIDogdW5pdHMpKS5zdWJ0cmFjdCgxLCAnbXMnKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVPZiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKCh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMCk7XG59XG5cbmZ1bmN0aW9uIHVuaXggKCkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpIC8gMTAwMCk7XG59XG5cbmZ1bmN0aW9uIHRvRGF0ZSAoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheSAoKSB7XG4gICAgdmFyIG0gPSB0aGlzO1xuICAgIHJldHVybiBbbS55ZWFyKCksIG0ubW9udGgoKSwgbS5kYXRlKCksIG0uaG91cigpLCBtLm1pbnV0ZSgpLCBtLnNlY29uZCgpLCBtLm1pbGxpc2Vjb25kKCldO1xufVxuXG5mdW5jdGlvbiB0b09iamVjdCAoKSB7XG4gICAgdmFyIG0gPSB0aGlzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgIGRhdGU6IG0uZGF0ZSgpLFxuICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgc2Vjb25kczogbS5zZWNvbmRzKCksXG4gICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgLy8gbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMudG9JU09TdHJpbmcoKSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWQkMiAoKSB7XG4gICAgcmV0dXJuIGlzVmFsaWQodGhpcyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNpbmdGbGFncyAoKSB7XG4gICAgcmV0dXJuIGV4dGVuZCh7fSwgZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gaW52YWxpZEF0ICgpIHtcbiAgICByZXR1cm4gZ2V0UGFyc2luZ0ZsYWdzKHRoaXMpLm92ZXJmbG93O1xufVxuXG5mdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgbG9jYWxlOiB0aGlzLl9sb2NhbGUsXG4gICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3RcbiAgICB9O1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnZ2cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG59KTtcblxuYWRkRm9ybWF0VG9rZW4oMCwgWydHRycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbn0pO1xuXG5mdW5jdGlvbiBhZGRXZWVrWWVhckZvcm1hdFRva2VuICh0b2tlbiwgZ2V0dGVyKSB7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xufVxuXG5hZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnJywgICAgICd3ZWVrWWVhcicpO1xuYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAgICAnd2Vla1llYXInKTtcbmFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAgJ2lzb1dlZWtZZWFyJyk7XG5hZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHRycsICdpc29XZWVrWWVhcicpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygnd2Vla1llYXInLCAnZ2cnKTtcbmFkZFVuaXRBbGlhcygnaXNvV2Vla1llYXInLCAnR0cnKTtcblxuLy8gUFJJT1JJVFlcblxuYWRkVW5pdFByaW9yaXR5KCd3ZWVrWWVhcicsIDEpO1xuYWRkVW5pdFByaW9yaXR5KCdpc29XZWVrWWVhcicsIDEpO1xuXG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignRycsICAgICAgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignZycsICAgICAgbWF0Y2hTaWduZWQpO1xuYWRkUmVnZXhUb2tlbignR0cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignZ2cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignR0dHRycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuYWRkUmVnZXhUb2tlbignZ2dnZycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuYWRkUmVnZXhUb2tlbignR0dHR0cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuYWRkUmVnZXhUb2tlbignZ2dnZ2cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG5hZGRXZWVrUGFyc2VUb2tlbihbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAyKV0gPSB0b0ludChpbnB1dCk7XG59KTtcblxuYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICB3ZWVrW3Rva2VuXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbn0pO1xuXG4vLyBNT01FTlRTXG5cbmZ1bmN0aW9uIGdldFNldFdlZWtZZWFyIChpbnB1dCkge1xuICAgIHJldHVybiBnZXRTZXRXZWVrWWVhckhlbHBlci5jYWxsKHRoaXMsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHRoaXMud2VlaygpLFxuICAgICAgICAgICAgdGhpcy53ZWVrZGF5KCksXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3kpO1xufVxuXG5mdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhciAoaW5wdXQpIHtcbiAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbCh0aGlzLFxuICAgICAgICAgICAgaW5wdXQsIHRoaXMuaXNvV2VlaygpLCB0aGlzLmlzb1dlZWtkYXkoKSwgMSwgNCk7XG59XG5cbmZ1bmN0aW9uIGdldElTT1dlZWtzSW5ZZWFyICgpIHtcbiAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIDEsIDQpO1xufVxuXG5mdW5jdGlvbiBnZXRXZWVrc0luWWVhciAoKSB7XG4gICAgdmFyIHdlZWtJbmZvID0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWs7XG4gICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG59XG5cbmZ1bmN0aW9uIGdldFNldFdlZWtZZWFySGVscGVyKGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gd2Vla09mWWVhcih0aGlzLCBkb3csIGRveSkueWVhcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3ZWVrc1RhcmdldCA9IHdlZWtzSW5ZZWFyKGlucHV0LCBkb3csIGRveSk7XG4gICAgICAgIGlmICh3ZWVrID4gd2Vla3NUYXJnZXQpIHtcbiAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0V2Vla0FsbC5jYWxsKHRoaXMsIGlucHV0LCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRXZWVrQWxsKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKGRheU9mWWVhckRhdGEueWVhciwgMCwgZGF5T2ZZZWFyRGF0YS5kYXlPZlllYXIpO1xuXG4gICAgdGhpcy55ZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSk7XG4gICAgdGhpcy5tb250aChkYXRlLmdldFVUQ01vbnRoKCkpO1xuICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ1EnLCAwLCAnUW8nLCAncXVhcnRlcicpO1xuXG4vLyBBTElBU0VTXG5cbmFkZFVuaXRBbGlhcygncXVhcnRlcicsICdRJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgncXVhcnRlcicsIDcpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1EnLCBtYXRjaDEpO1xuYWRkUGFyc2VUb2tlbignUScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzO1xufSk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0UXVhcnRlciAoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IE1hdGguY2VpbCgodGhpcy5tb250aCgpICsgMSkgLyAzKSA6IHRoaXMubW9udGgoKGlucHV0IC0gMSkgKiAzICsgdGhpcy5tb250aCgpICUgMyk7XG59XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ0QnLCBbJ0REJywgMl0sICdEbycsICdkYXRlJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdkYXRlJywgJ0QnKTtcblxuLy8gUFJJT1JPSVRZXG5hZGRVbml0UHJpb3JpdHkoJ2RhdGUnLCA5KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdEJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdERCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgcmV0dXJuIGlzU3RyaWN0ID9cbiAgICAgIChsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2UgfHwgbG9jYWxlLl9vcmRpbmFsUGFyc2UpIDpcbiAgICAgIGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQ7XG59KTtcblxuYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG5hZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICBhcnJheVtEQVRFXSA9IHRvSW50KGlucHV0Lm1hdGNoKG1hdGNoMXRvMilbMF0pO1xufSk7XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldERheU9mTW9udGggPSBtYWtlR2V0U2V0KCdEYXRlJywgdHJ1ZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ2RheU9mWWVhcicsICdEREQnKTtcblxuLy8gUFJJT1JJVFlcbmFkZFVuaXRQcmlvcml0eSgnZGF5T2ZZZWFyJywgNCk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbignREREJywgIG1hdGNoMXRvMyk7XG5hZGRSZWdleFRva2VuKCdEREREJywgbWF0Y2gzKTtcbmFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbn0pO1xuXG4vLyBIRUxQRVJTXG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0U2V0RGF5T2ZZZWFyIChpbnB1dCkge1xuICAgIHZhciBkYXlPZlllYXIgPSBNYXRoLnJvdW5kKCh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7XG4gICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSBkYXlPZlllYXIpLCAnZCcpO1xufVxuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21pbnV0ZScsIDE0KTtcblxuLy8gUEFSU0lOR1xuXG5hZGRSZWdleFRva2VuKCdtJywgIG1hdGNoMXRvMik7XG5hZGRSZWdleFRva2VuKCdtbScsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbmFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldE1pbnV0ZSA9IG1ha2VHZXRTZXQoJ01pbnV0ZXMnLCBmYWxzZSk7XG5cbi8vIEZPUk1BVFRJTkdcblxuYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuLy8gQUxJQVNFU1xuXG5hZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbi8vIFBSSU9SSVRZXG5cbmFkZFVuaXRQcmlvcml0eSgnc2Vjb25kJywgMTUpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ3MnLCAgbWF0Y2gxdG8yKTtcbmFkZFJlZ2V4VG9rZW4oJ3NzJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuLy8gTU9NRU5UU1xuXG52YXIgZ2V0U2V0U2Vjb25kID0gbWFrZUdldFNldCgnU2Vjb25kcycsIGZhbHNlKTtcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTAwKTtcbn0pO1xuXG5hZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gfn4odGhpcy5taWxsaXNlY29uZCgpIC8gMTApO1xufSk7XG5cbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTJywgNF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1MnLCA1XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTJywgNl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbn0pO1xuYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTJywgN10sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1MnLCA4XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG59KTtcbmFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTU1NTJywgOV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbn0pO1xuXG5cbi8vIEFMSUFTRVNcblxuYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4vLyBQUklPUklUWVxuXG5hZGRVbml0UHJpb3JpdHkoJ21pbGxpc2Vjb25kJywgMTYpO1xuXG4vLyBQQVJTSU5HXG5cbmFkZFJlZ2V4VG9rZW4oJ1MnLCAgICBtYXRjaDF0bzMsIG1hdGNoMSk7XG5hZGRSZWdleFRva2VuKCdTUycsICAgbWF0Y2gxdG8zLCBtYXRjaDIpO1xuYWRkUmVnZXhUb2tlbignU1NTJywgIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxudmFyIHRva2VuO1xuZm9yICh0b2tlbiA9ICdTU1NTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1zKGlucHV0LCBhcnJheSkge1xuICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG59XG5cbmZvciAodG9rZW4gPSAnUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbn1cbi8vIE1PTUVOVFNcblxudmFyIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4vLyBGT1JNQVRUSU5HXG5cbmFkZEZvcm1hdFRva2VuKCd6JywgIDAsIDAsICd6b25lQWJicicpO1xuYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbi8vIE1PTUVOVFNcblxuZnVuY3Rpb24gZ2V0Wm9uZUFiYnIgKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG59XG5cbmZ1bmN0aW9uIGdldFpvbmVOYW1lICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG59XG5cbnZhciBwcm90byA9IE1vbWVudC5wcm90b3R5cGU7XG5cbnByb3RvLmFkZCAgICAgICAgICAgICAgID0gYWRkO1xucHJvdG8uY2FsZW5kYXIgICAgICAgICAgPSBjYWxlbmRhciQxO1xucHJvdG8uY2xvbmUgICAgICAgICAgICAgPSBjbG9uZTtcbnByb3RvLmRpZmYgICAgICAgICAgICAgID0gZGlmZjtcbnByb3RvLmVuZE9mICAgICAgICAgICAgID0gZW5kT2Y7XG5wcm90by5mb3JtYXQgICAgICAgICAgICA9IGZvcm1hdDtcbnByb3RvLmZyb20gICAgICAgICAgICAgID0gZnJvbTtcbnByb3RvLmZyb21Ob3cgICAgICAgICAgID0gZnJvbU5vdztcbnByb3RvLnRvICAgICAgICAgICAgICAgID0gdG87XG5wcm90by50b05vdyAgICAgICAgICAgICA9IHRvTm93O1xucHJvdG8uZ2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdHZXQ7XG5wcm90by5pbnZhbGlkQXQgICAgICAgICA9IGludmFsaWRBdDtcbnByb3RvLmlzQWZ0ZXIgICAgICAgICAgID0gaXNBZnRlcjtcbnByb3RvLmlzQmVmb3JlICAgICAgICAgID0gaXNCZWZvcmU7XG5wcm90by5pc0JldHdlZW4gICAgICAgICA9IGlzQmV0d2VlbjtcbnByb3RvLmlzU2FtZSAgICAgICAgICAgID0gaXNTYW1lO1xucHJvdG8uaXNTYW1lT3JBZnRlciAgICAgPSBpc1NhbWVPckFmdGVyO1xucHJvdG8uaXNTYW1lT3JCZWZvcmUgICAgPSBpc1NhbWVPckJlZm9yZTtcbnByb3RvLmlzVmFsaWQgICAgICAgICAgID0gaXNWYWxpZCQyO1xucHJvdG8ubGFuZyAgICAgICAgICAgICAgPSBsYW5nO1xucHJvdG8ubG9jYWxlICAgICAgICAgICAgPSBsb2NhbGU7XG5wcm90by5sb2NhbGVEYXRhICAgICAgICA9IGxvY2FsZURhdGE7XG5wcm90by5tYXggICAgICAgICAgICAgICA9IHByb3RvdHlwZU1heDtcbnByb3RvLm1pbiAgICAgICAgICAgICAgID0gcHJvdG90eXBlTWluO1xucHJvdG8ucGFyc2luZ0ZsYWdzICAgICAgPSBwYXJzaW5nRmxhZ3M7XG5wcm90by5zZXQgICAgICAgICAgICAgICA9IHN0cmluZ1NldDtcbnByb3RvLnN0YXJ0T2YgICAgICAgICAgID0gc3RhcnRPZjtcbnByb3RvLnN1YnRyYWN0ICAgICAgICAgID0gc3VidHJhY3Q7XG5wcm90by50b0FycmF5ICAgICAgICAgICA9IHRvQXJyYXk7XG5wcm90by50b09iamVjdCAgICAgICAgICA9IHRvT2JqZWN0O1xucHJvdG8udG9EYXRlICAgICAgICAgICAgPSB0b0RhdGU7XG5wcm90by50b0lTT1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nO1xucHJvdG8uaW5zcGVjdCAgICAgICAgICAgPSBpbnNwZWN0O1xucHJvdG8udG9KU09OICAgICAgICAgICAgPSB0b0pTT047XG5wcm90by50b1N0cmluZyAgICAgICAgICA9IHRvU3RyaW5nO1xucHJvdG8udW5peCAgICAgICAgICAgICAgPSB1bml4O1xucHJvdG8udmFsdWVPZiAgICAgICAgICAgPSB2YWx1ZU9mO1xucHJvdG8uY3JlYXRpb25EYXRhICAgICAgPSBjcmVhdGlvbkRhdGE7XG5cbi8vIFllYXJcbnByb3RvLnllYXIgICAgICAgPSBnZXRTZXRZZWFyO1xucHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG5cbi8vIFdlZWsgWWVhclxucHJvdG8ud2Vla1llYXIgICAgPSBnZXRTZXRXZWVrWWVhcjtcbnByb3RvLmlzb1dlZWtZZWFyID0gZ2V0U2V0SVNPV2Vla1llYXI7XG5cbi8vIFF1YXJ0ZXJcbnByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG5cbi8vIE1vbnRoXG5wcm90by5tb250aCAgICAgICA9IGdldFNldE1vbnRoO1xucHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcblxuLy8gV2Vla1xucHJvdG8ud2VlayAgICAgICAgICAgPSBwcm90by53ZWVrcyAgICAgICAgPSBnZXRTZXRXZWVrO1xucHJvdG8uaXNvV2VlayAgICAgICAgPSBwcm90by5pc29XZWVrcyAgICAgPSBnZXRTZXRJU09XZWVrO1xucHJvdG8ud2Vla3NJblllYXIgICAgPSBnZXRXZWVrc0luWWVhcjtcbnByb3RvLmlzb1dlZWtzSW5ZZWFyID0gZ2V0SVNPV2Vla3NJblllYXI7XG5cbi8vIERheVxucHJvdG8uZGF0ZSAgICAgICA9IGdldFNldERheU9mTW9udGg7XG5wcm90by5kYXkgICAgICAgID0gcHJvdG8uZGF5cyAgICAgICAgICAgICA9IGdldFNldERheU9mV2VlaztcbnByb3RvLndlZWtkYXkgICAgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG5wcm90by5pc29XZWVrZGF5ID0gZ2V0U2V0SVNPRGF5T2ZXZWVrO1xucHJvdG8uZGF5T2ZZZWFyICA9IGdldFNldERheU9mWWVhcjtcblxuLy8gSG91clxucHJvdG8uaG91ciA9IHByb3RvLmhvdXJzID0gZ2V0U2V0SG91cjtcblxuLy8gTWludXRlXG5wcm90by5taW51dGUgPSBwcm90by5taW51dGVzID0gZ2V0U2V0TWludXRlO1xuXG4vLyBTZWNvbmRcbnByb3RvLnNlY29uZCA9IHByb3RvLnNlY29uZHMgPSBnZXRTZXRTZWNvbmQ7XG5cbi8vIE1pbGxpc2Vjb25kXG5wcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuXG4vLyBPZmZzZXRcbnByb3RvLnV0Y09mZnNldCAgICAgICAgICAgID0gZ2V0U2V0T2Zmc2V0O1xucHJvdG8udXRjICAgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1VUQztcbnByb3RvLmxvY2FsICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9Mb2NhbDtcbnByb3RvLnBhcnNlWm9uZSAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG5wcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xucHJvdG8uaXNEU1QgICAgICAgICAgICAgICAgPSBpc0RheWxpZ2h0U2F2aW5nVGltZTtcbnByb3RvLmlzTG9jYWwgICAgICAgICAgICAgID0gaXNMb2NhbDtcbnByb3RvLmlzVXRjT2Zmc2V0ICAgICAgICAgID0gaXNVdGNPZmZzZXQ7XG5wcm90by5pc1V0YyAgICAgICAgICAgICAgICA9IGlzVXRjO1xucHJvdG8uaXNVVEMgICAgICAgICAgICAgICAgPSBpc1V0YztcblxuLy8gVGltZXpvbmVcbnByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG5wcm90by56b25lTmFtZSA9IGdldFpvbmVOYW1lO1xuXG4vLyBEZXByZWNhdGlvbnNcbnByb3RvLmRhdGVzICA9IGRlcHJlY2F0ZSgnZGF0ZXMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIGRhdGUgaW5zdGVhZC4nLCBnZXRTZXREYXlPZk1vbnRoKTtcbnByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZSgnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJywgZ2V0U2V0TW9udGgpO1xucHJvdG8ueWVhcnMgID0gZGVwcmVjYXRlKCd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJywgZ2V0U2V0WWVhcik7XG5wcm90by56b25lICAgPSBkZXByZWNhdGUoJ21vbWVudCgpLnpvbmUgaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudCgpLnV0Y09mZnNldCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL3pvbmUvJywgZ2V0U2V0Wm9uZSk7XG5wcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLCBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQpO1xuXG5mdW5jdGlvbiBjcmVhdGVVbml4IChpbnB1dCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbChpbnB1dCAqIDEwMDApO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJblpvbmUgKCkge1xuICAgIHJldHVybiBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhcnNlWm9uZSgpO1xufVxuXG5mdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQgKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmc7XG59XG5cbnZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxucHJvdG8kMS5jYWxlbmRhciAgICAgICAgPSBjYWxlbmRhcjtcbnByb3RvJDEubG9uZ0RhdGVGb3JtYXQgID0gbG9uZ0RhdGVGb3JtYXQ7XG5wcm90byQxLmludmFsaWREYXRlICAgICA9IGludmFsaWREYXRlO1xucHJvdG8kMS5vcmRpbmFsICAgICAgICAgPSBvcmRpbmFsO1xucHJvdG8kMS5wcmVwYXJzZSAgICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG5wcm90byQxLnBvc3Rmb3JtYXQgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbnByb3RvJDEucmVsYXRpdmVUaW1lICAgID0gcmVsYXRpdmVUaW1lO1xucHJvdG8kMS5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xucHJvdG8kMS5zZXQgICAgICAgICAgICAgPSBzZXQ7XG5cbi8vIE1vbnRoXG5wcm90byQxLm1vbnRocyAgICAgICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRocztcbnByb3RvJDEubW9udGhzU2hvcnQgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzU2hvcnQ7XG5wcm90byQxLm1vbnRoc1BhcnNlICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1BhcnNlO1xucHJvdG8kMS5tb250aHNSZWdleCAgICAgICA9IG1vbnRoc1JlZ2V4O1xucHJvdG8kMS5tb250aHNTaG9ydFJlZ2V4ICA9IG1vbnRoc1Nob3J0UmVnZXg7XG5cbi8vIFdlZWtcbnByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG5wcm90byQxLmZpcnN0RGF5T2ZZZWFyID0gbG9jYWxlRmlyc3REYXlPZlllYXI7XG5wcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbi8vIERheSBvZiBXZWVrXG5wcm90byQxLndlZWtkYXlzICAgICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzO1xucHJvdG8kMS53ZWVrZGF5c01pbiAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c01pbjtcbnByb3RvJDEud2Vla2RheXNTaG9ydCAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNTaG9ydDtcbnByb3RvJDEud2Vla2RheXNQYXJzZSAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNQYXJzZTtcblxucHJvdG8kMS53ZWVrZGF5c1JlZ2V4ICAgICAgID0gICAgICAgIHdlZWtkYXlzUmVnZXg7XG5wcm90byQxLndlZWtkYXlzU2hvcnRSZWdleCAgPSAgICAgICAgd2Vla2RheXNTaG9ydFJlZ2V4O1xucHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ICAgID0gICAgICAgIHdlZWtkYXlzTWluUmVnZXg7XG5cbi8vIEhvdXJzXG5wcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xucHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG5mdW5jdGlvbiBnZXQkMSAoZm9ybWF0LCBpbmRleCwgZmllbGQsIHNldHRlcikge1xuICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKTtcbiAgICB2YXIgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgIHJldHVybiBsb2NhbGVbZmllbGRdKHV0YywgZm9ybWF0KTtcbn1cblxuZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwgKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0JDEoZm9ybWF0LCBpbmRleCwgZmllbGQsICdtb250aCcpO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIGksIGZpZWxkLCAnbW9udGgnKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbn1cblxuLy8gKClcbi8vICg1KVxuLy8gKGZtdCwgNSlcbi8vIChmbXQpXG4vLyAodHJ1ZSlcbi8vICh0cnVlLCA1KVxuLy8gKHRydWUsIGZtdCwgNSlcbi8vICh0cnVlLCBmbXQpXG5mdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgaWYgKHR5cGVvZiBsb2NhbGVTb3J0ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgbG9jYWxlU29ydGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMDtcblxuICAgIGlmIChpbmRleCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCAoaSArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59XG5cbmZ1bmN0aW9uIGxpc3RNb250aHMgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xufVxuXG5mdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG59XG5cbmZ1bmN0aW9uIGxpc3RXZWVrZGF5cyAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbn1cblxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbn1cblxuZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xufVxuXG5nZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgIH1cbn0pO1xuXG4vLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5ob29rcy5sYW5nID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZyBpcyBkZXByZWNhdGVkLiBVc2UgbW9tZW50LmxvY2FsZSBpbnN0ZWFkLicsIGdldFNldEdsb2JhbExvY2FsZSk7XG5ob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGdldExvY2FsZSk7XG5cbnZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIGFicyAoKSB7XG4gICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICB0aGlzLl9kYXlzICAgICAgICAgPSBtYXRoQWJzKHRoaXMuX2RheXMpO1xuICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgIGRhdGEubWlsbGlzZWNvbmRzICA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgIGRhdGEuc2Vjb25kcyAgICAgICA9IG1hdGhBYnMoZGF0YS5zZWNvbmRzKTtcbiAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICBkYXRhLm1vbnRocyAgICAgICAgPSBtYXRoQWJzKGRhdGEubW9udGhzKTtcbiAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICBkdXJhdGlvbi5fbWlsbGlzZWNvbmRzICs9IGRpcmVjdGlvbiAqIG90aGVyLl9taWxsaXNlY29uZHM7XG4gICAgZHVyYXRpb24uX2RheXMgICAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICBkdXJhdGlvbi5fbW9udGhzICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICByZXR1cm4gZHVyYXRpb24uX2J1YmJsZSgpO1xufVxuXG4vLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG5mdW5jdGlvbiBhZGQkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbn1cblxuLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgc3VidHJhY3QoMSwgJ3MnKSBvciBzdWJ0cmFjdChkdXJhdGlvbilcbmZ1bmN0aW9uIHN1YnRyYWN0JDEgKGlucHV0LCB2YWx1ZSkge1xuICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xufVxuXG5mdW5jdGlvbiBhYnNDZWlsIChudW1iZXIpIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJ1YmJsZSAoKSB7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcbiAgICB2YXIgZGF5cyAgICAgICAgID0gdGhpcy5fZGF5cztcbiAgICB2YXIgbW9udGhzICAgICAgID0gdGhpcy5fbW9udGhzO1xuICAgIHZhciBkYXRhICAgICAgICAgPSB0aGlzLl9kYXRhO1xuICAgIHZhciBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMsIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgIC8vIGNoZWNrOiBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9pc3N1ZXMvMjE2NlxuICAgIGlmICghKChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKSkpIHtcbiAgICAgICAgbWlsbGlzZWNvbmRzICs9IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRocykgKyBkYXlzKSAqIDg2NGU1O1xuICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgbW9udGhzID0gMDtcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgIGRhdGEubWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmRzICUgMTAwMDtcblxuICAgIHNlY29uZHMgICAgICAgICAgID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgZGF0YS5zZWNvbmRzICAgICAgPSBzZWNvbmRzICUgNjA7XG5cbiAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgZGF0YS5taW51dGVzICAgICAgPSBtaW51dGVzICUgNjA7XG5cbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgZGF0YS5ob3VycyAgICAgICAgPSBob3VycyAlIDI0O1xuXG4gICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICBtb250aHNGcm9tRGF5cyA9IGFic0Zsb29yKGRheXNUb01vbnRocyhkYXlzKSk7XG4gICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgIC8vIDEyIG1vbnRocyAtPiAxIHllYXJcbiAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cbiAgICBkYXRhLmRheXMgICA9IGRheXM7XG4gICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgZGF0YS55ZWFycyAgPSB5ZWFycztcblxuICAgIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBkYXlzVG9Nb250aHMgKGRheXMpIHtcbiAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxNDYwOTcgZGF5cyAodGFraW5nIGludG8gYWNjb3VudCBsZWFwIHllYXIgcnVsZXMpXG4gICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgcmV0dXJuIGRheXMgKiA0ODAwIC8gMTQ2MDk3O1xufVxuXG5mdW5jdGlvbiBtb250aHNUb0RheXMgKG1vbnRocykge1xuICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgIHJldHVybiBtb250aHMgKiAxNDYwOTcgLyA0ODAwO1xufVxuXG5mdW5jdGlvbiBhcyAodW5pdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHZhciBkYXlzO1xuICAgIHZhciBtb250aHM7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuXG4gICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAneWVhcicpIHtcbiAgICAgICAgZGF5cyAgID0gdGhpcy5fZGF5cyAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgcmV0dXJuIHVuaXRzID09PSAnbW9udGgnID8gbW9udGhzIDogbW9udGhzIC8gMTI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIE1hdGgucm91bmQobW9udGhzVG9EYXlzKHRoaXMuX21vbnRocykpO1xuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJyAgIDogcmV0dXJuIGRheXMgLyA3ICAgICArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgIGNhc2UgJ2RheScgICAgOiByZXR1cm4gZGF5cyAgICAgICAgICsgbWlsbGlzZWNvbmRzIC8gODY0ZTU7XG4gICAgICAgICAgICBjYXNlICdob3VyJyAgIDogcmV0dXJuIGRheXMgKiAyNCAgICArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnIDogcmV0dXJuIGRheXMgKiAxNDQwICArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCcgOiByZXR1cm4gZGF5cyAqIDg2NDAwICsgbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOiByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHVuaXQgJyArIHVuaXRzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG5mdW5jdGlvbiB2YWx1ZU9mJDEgKCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgKHRoaXMuX21vbnRocyAlIDEyKSAqIDI1OTJlNiArXG4gICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICApO1xufVxuXG5mdW5jdGlvbiBtYWtlQXMgKGFsaWFzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXMoYWxpYXMpO1xuICAgIH07XG59XG5cbnZhciBhc01pbGxpc2Vjb25kcyA9IG1ha2VBcygnbXMnKTtcbnZhciBhc1NlY29uZHMgICAgICA9IG1ha2VBcygncycpO1xudmFyIGFzTWludXRlcyAgICAgID0gbWFrZUFzKCdtJyk7XG52YXIgYXNIb3VycyAgICAgICAgPSBtYWtlQXMoJ2gnKTtcbnZhciBhc0RheXMgICAgICAgICA9IG1ha2VBcygnZCcpO1xudmFyIGFzV2Vla3MgICAgICAgID0gbWFrZUFzKCd3Jyk7XG52YXIgYXNNb250aHMgICAgICAgPSBtYWtlQXMoJ00nKTtcbnZhciBhc1llYXJzICAgICAgICA9IG1ha2VBcygneScpO1xuXG5mdW5jdGlvbiBjbG9uZSQxICgpIHtcbiAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24odGhpcyk7XG59XG5cbmZ1bmN0aW9uIGdldCQyICh1bml0cykge1xuICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU47XG59XG5cbmZ1bmN0aW9uIG1ha2VHZXR0ZXIobmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgfTtcbn1cblxudmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpO1xudmFyIHNlY29uZHMgICAgICA9IG1ha2VHZXR0ZXIoJ3NlY29uZHMnKTtcbnZhciBtaW51dGVzICAgICAgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyk7XG52YXIgaG91cnMgICAgICAgID0gbWFrZUdldHRlcignaG91cnMnKTtcbnZhciBkYXlzICAgICAgICAgPSBtYWtlR2V0dGVyKCdkYXlzJyk7XG52YXIgbW9udGhzICAgICAgID0gbWFrZUdldHRlcignbW9udGhzJyk7XG52YXIgeWVhcnMgICAgICAgID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuZnVuY3Rpb24gd2Vla3MgKCkge1xuICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xufVxuXG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIHRocmVzaG9sZHMgPSB7XG4gICAgc3M6IDQ0LCAgICAgICAgIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgIHMgOiA0NSwgICAgICAgICAvLyBzZWNvbmRzIHRvIG1pbnV0ZVxuICAgIG0gOiA0NSwgICAgICAgICAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICBoIDogMjIsICAgICAgICAgLy8gaG91cnMgdG8gZGF5XG4gICAgZCA6IDI2LCAgICAgICAgIC8vIGRheXMgdG8gbW9udGhcbiAgICBNIDogMTEgICAgICAgICAgLy8gbW9udGhzIHRvIHllYXJcbn07XG5cbi8vIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9tZW50LmZuLmZyb20sIG1vbWVudC5mbi5mcm9tTm93LCBhbmQgbW9tZW50LmR1cmF0aW9uLmZuLmh1bWFuaXplXG5mdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xufVxuXG5mdW5jdGlvbiByZWxhdGl2ZVRpbWUkMSAocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIGxvY2FsZSkge1xuICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKTtcbiAgICB2YXIgc2Vjb25kcyAgPSByb3VuZChkdXJhdGlvbi5hcygncycpKTtcbiAgICB2YXIgbWludXRlcyAgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKTtcbiAgICB2YXIgaG91cnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKTtcbiAgICB2YXIgZGF5cyAgICAgPSByb3VuZChkdXJhdGlvbi5hcygnZCcpKTtcbiAgICB2YXIgbW9udGhzICAgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKTtcbiAgICB2YXIgeWVhcnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygneScpKTtcblxuICAgIHZhciBhID0gc2Vjb25kcyA8PSB0aHJlc2hvbGRzLnNzICYmIFsncycsIHNlY29uZHNdICB8fFxuICAgICAgICAgICAgc2Vjb25kcyA8IHRocmVzaG9sZHMucyAgICYmIFsnc3MnLCBzZWNvbmRzXSB8fFxuICAgICAgICAgICAgbWludXRlcyA8PSAxICAgICAgICAgICAgICYmIFsnbSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgbWludXRlcyA8IHRocmVzaG9sZHMubSAgICYmIFsnbW0nLCBtaW51dGVzXSB8fFxuICAgICAgICAgICAgaG91cnMgICA8PSAxICAgICAgICAgICAgICYmIFsnaCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgaG91cnMgICA8IHRocmVzaG9sZHMuaCAgICYmIFsnaGgnLCBob3Vyc10gICB8fFxuICAgICAgICAgICAgZGF5cyAgICA8PSAxICAgICAgICAgICAgICYmIFsnZCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgZGF5cyAgICA8IHRocmVzaG9sZHMuZCAgICYmIFsnZGQnLCBkYXlzXSAgICB8fFxuICAgICAgICAgICAgbW9udGhzICA8PSAxICAgICAgICAgICAgICYmIFsnTSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgbW9udGhzICA8IHRocmVzaG9sZHMuTSAgICYmIFsnTU0nLCBtb250aHNdICB8fFxuICAgICAgICAgICAgeWVhcnMgICA8PSAxICAgICAgICAgICAgICYmIFsneSddICAgICAgICAgICB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgYVszXSA9ICtwb3NOZWdEdXJhdGlvbiA+IDA7XG4gICAgYVs0XSA9IGxvY2FsZTtcbiAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbmZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIChyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgaWYgKHJvdW5kaW5nRnVuY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yocm91bmRpbmdGdW5jdGlvbikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gc2V0IGEgdGhyZXNob2xkIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbmZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCAodGhyZXNob2xkLCBsaW1pdCkge1xuICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aHJlc2hvbGRzW3RocmVzaG9sZF07XG4gICAgfVxuICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgIGlmICh0aHJlc2hvbGQgPT09ICdzJykge1xuICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaHVtYW5pemUgKHdpdGhTdWZmaXgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgIH1cblxuICAgIHZhciBsb2NhbGUgPSB0aGlzLmxvY2FsZURhdGEoKTtcbiAgICB2YXIgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIGxvY2FsZSk7XG5cbiAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICBvdXRwdXQgPSBsb2NhbGUucGFzdEZ1dHVyZSgrdGhpcywgb3V0cHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbn1cblxudmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbmZ1bmN0aW9uIHNpZ24oeCkge1xuICAgIHJldHVybiAoKHggPiAwKSAtICh4IDwgMCkpIHx8ICt4O1xufVxuXG5mdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgIC8vIGZvciBJU08gc3RyaW5ncyB3ZSBkbyBub3QgdXNlIHRoZSBub3JtYWwgYnViYmxpbmcgcnVsZXM6XG4gICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAvLyAgKiBtb250aHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIHllYXJzXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAvLyBhbmQgYWxzbyBub3QgYmV0d2VlbiBkYXlzIGFuZCBtb250aHMgKDI4LTMxIGRheXMgcGVyIG1vbnRoKVxuICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMDtcbiAgICB2YXIgZGF5cyAgICAgICAgID0gYWJzJDEodGhpcy5fZGF5cyk7XG4gICAgdmFyIG1vbnRocyAgICAgICA9IGFicyQxKHRoaXMuX21vbnRocyk7XG4gICAgdmFyIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycztcblxuICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgc2Vjb25kcyAlPSA2MDtcbiAgICBtaW51dGVzICU9IDYwO1xuXG4gICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgIHllYXJzICA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICBtb250aHMgJT0gMTI7XG5cblxuICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgdmFyIFkgPSB5ZWFycztcbiAgICB2YXIgTSA9IG1vbnRocztcbiAgICB2YXIgRCA9IGRheXM7XG4gICAgdmFyIGggPSBob3VycztcbiAgICB2YXIgbSA9IG1pbnV0ZXM7XG4gICAgdmFyIHMgPSBzZWNvbmRzID8gc2Vjb25kcy50b0ZpeGVkKDMpLnJlcGxhY2UoL1xcLj8wKyQvLCAnJykgOiAnJztcbiAgICB2YXIgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpO1xuXG4gICAgaWYgKCF0b3RhbCkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgcmV0dXJuICdQMEQnO1xuICAgIH1cblxuICAgIHZhciB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICB2YXIgeW1TaWduID0gc2lnbih0aGlzLl9tb250aHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuICAgIHZhciBkYXlzU2lnbiA9IHNpZ24odGhpcy5fZGF5cykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgdmFyIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICByZXR1cm4gdG90YWxTaWduICsgJ1AnICtcbiAgICAgICAgKFkgPyB5bVNpZ24gKyBZICsgJ1knIDogJycpICtcbiAgICAgICAgKE0gPyB5bVNpZ24gKyBNICsgJ00nIDogJycpICtcbiAgICAgICAgKEQgPyBkYXlzU2lnbiArIEQgKyAnRCcgOiAnJykgK1xuICAgICAgICAoKGggfHwgbSB8fCBzKSA/ICdUJyA6ICcnKSArXG4gICAgICAgIChoID8gaG1zU2lnbiArIGggKyAnSCcgOiAnJykgK1xuICAgICAgICAobSA/IGhtc1NpZ24gKyBtICsgJ00nIDogJycpICtcbiAgICAgICAgKHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKTtcbn1cblxudmFyIHByb3RvJDIgPSBEdXJhdGlvbi5wcm90b3R5cGU7XG5cbnByb3RvJDIuaXNWYWxpZCAgICAgICAgPSBpc1ZhbGlkJDE7XG5wcm90byQyLmFicyAgICAgICAgICAgID0gYWJzO1xucHJvdG8kMi5hZGQgICAgICAgICAgICA9IGFkZCQxO1xucHJvdG8kMi5zdWJ0cmFjdCAgICAgICA9IHN1YnRyYWN0JDE7XG5wcm90byQyLmFzICAgICAgICAgICAgID0gYXM7XG5wcm90byQyLmFzTWlsbGlzZWNvbmRzID0gYXNNaWxsaXNlY29uZHM7XG5wcm90byQyLmFzU2Vjb25kcyAgICAgID0gYXNTZWNvbmRzO1xucHJvdG8kMi5hc01pbnV0ZXMgICAgICA9IGFzTWludXRlcztcbnByb3RvJDIuYXNIb3VycyAgICAgICAgPSBhc0hvdXJzO1xucHJvdG8kMi5hc0RheXMgICAgICAgICA9IGFzRGF5cztcbnByb3RvJDIuYXNXZWVrcyAgICAgICAgPSBhc1dlZWtzO1xucHJvdG8kMi5hc01vbnRocyAgICAgICA9IGFzTW9udGhzO1xucHJvdG8kMi5hc1llYXJzICAgICAgICA9IGFzWWVhcnM7XG5wcm90byQyLnZhbHVlT2YgICAgICAgID0gdmFsdWVPZiQxO1xucHJvdG8kMi5fYnViYmxlICAgICAgICA9IGJ1YmJsZTtcbnByb3RvJDIuY2xvbmUgICAgICAgICAgPSBjbG9uZSQxO1xucHJvdG8kMi5nZXQgICAgICAgICAgICA9IGdldCQyO1xucHJvdG8kMi5taWxsaXNlY29uZHMgICA9IG1pbGxpc2Vjb25kcztcbnByb3RvJDIuc2Vjb25kcyAgICAgICAgPSBzZWNvbmRzO1xucHJvdG8kMi5taW51dGVzICAgICAgICA9IG1pbnV0ZXM7XG5wcm90byQyLmhvdXJzICAgICAgICAgID0gaG91cnM7XG5wcm90byQyLmRheXMgICAgICAgICAgID0gZGF5cztcbnByb3RvJDIud2Vla3MgICAgICAgICAgPSB3ZWVrcztcbnByb3RvJDIubW9udGhzICAgICAgICAgPSBtb250aHM7XG5wcm90byQyLnllYXJzICAgICAgICAgID0geWVhcnM7XG5wcm90byQyLmh1bWFuaXplICAgICAgID0gaHVtYW5pemU7XG5wcm90byQyLnRvSVNPU3RyaW5nICAgID0gdG9JU09TdHJpbmckMTtcbnByb3RvJDIudG9TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZyQxO1xucHJvdG8kMi50b0pTT04gICAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG5wcm90byQyLmxvY2FsZSAgICAgICAgID0gbG9jYWxlO1xucHJvdG8kMi5sb2NhbGVEYXRhICAgICA9IGxvY2FsZURhdGE7XG5cbi8vIERlcHJlY2F0aW9uc1xucHJvdG8kMi50b0lzb1N0cmluZyA9IGRlcHJlY2F0ZSgndG9Jc29TdHJpbmcoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIHRvSVNPU3RyaW5nKCkgaW5zdGVhZCAobm90aWNlIHRoZSBjYXBpdGFscyknLCB0b0lTT1N0cmluZyQxKTtcbnByb3RvJDIubGFuZyA9IGxhbmc7XG5cbi8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuLy8gRk9STUFUVElOR1xuXG5hZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4Jyk7XG5hZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbi8vIFBBUlNJTkdcblxuYWRkUmVnZXhUb2tlbigneCcsIG1hdGNoU2lnbmVkKTtcbmFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG5hZGRQYXJzZVRva2VuKCdYJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCwgMTApICogMTAwMCk7XG59KTtcbmFkZFBhcnNlVG9rZW4oJ3gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xufSk7XG5cbi8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuXG5ob29rcy52ZXJzaW9uID0gJzIuMjAuMSc7XG5cbnNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbmhvb2tzLmZuICAgICAgICAgICAgICAgICAgICA9IHByb3RvO1xuaG9va3MubWluICAgICAgICAgICAgICAgICAgID0gbWluO1xuaG9va3MubWF4ICAgICAgICAgICAgICAgICAgID0gbWF4O1xuaG9va3Mubm93ICAgICAgICAgICAgICAgICAgID0gbm93O1xuaG9va3MudXRjICAgICAgICAgICAgICAgICAgID0gY3JlYXRlVVRDO1xuaG9va3MudW5peCAgICAgICAgICAgICAgICAgID0gY3JlYXRlVW5peDtcbmhvb2tzLm1vbnRocyAgICAgICAgICAgICAgICA9IGxpc3RNb250aHM7XG5ob29rcy5pc0RhdGUgICAgICAgICAgICAgICAgPSBpc0RhdGU7XG5ob29rcy5sb2NhbGUgICAgICAgICAgICAgICAgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG5ob29rcy5pbnZhbGlkICAgICAgICAgICAgICAgPSBjcmVhdGVJbnZhbGlkO1xuaG9va3MuZHVyYXRpb24gICAgICAgICAgICAgID0gY3JlYXRlRHVyYXRpb247XG5ob29rcy5pc01vbWVudCAgICAgICAgICAgICAgPSBpc01vbWVudDtcbmhvb2tzLndlZWtkYXlzICAgICAgICAgICAgICA9IGxpc3RXZWVrZGF5cztcbmhvb2tzLnBhcnNlWm9uZSAgICAgICAgICAgICA9IGNyZWF0ZUluWm9uZTtcbmhvb2tzLmxvY2FsZURhdGEgICAgICAgICAgICA9IGdldExvY2FsZTtcbmhvb2tzLmlzRHVyYXRpb24gICAgICAgICAgICA9IGlzRHVyYXRpb247XG5ob29rcy5tb250aHNTaG9ydCAgICAgICAgICAgPSBsaXN0TW9udGhzU2hvcnQ7XG5ob29rcy53ZWVrZGF5c01pbiAgICAgICAgICAgPSBsaXN0V2Vla2RheXNNaW47XG5ob29rcy5kZWZpbmVMb2NhbGUgICAgICAgICAgPSBkZWZpbmVMb2NhbGU7XG5ob29rcy51cGRhdGVMb2NhbGUgICAgICAgICAgPSB1cGRhdGVMb2NhbGU7XG5ob29rcy5sb2NhbGVzICAgICAgICAgICAgICAgPSBsaXN0TG9jYWxlcztcbmhvb2tzLndlZWtkYXlzU2hvcnQgICAgICAgICA9IGxpc3RXZWVrZGF5c1Nob3J0O1xuaG9va3Mubm9ybWFsaXplVW5pdHMgICAgICAgID0gbm9ybWFsaXplVW5pdHM7XG5ob29rcy5yZWxhdGl2ZVRpbWVSb3VuZGluZyAgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbmhvb2tzLnJlbGF0aXZlVGltZVRocmVzaG9sZCA9IGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZDtcbmhvb2tzLmNhbGVuZGFyRm9ybWF0ICAgICAgICA9IGdldENhbGVuZGFyRm9ybWF0O1xuaG9va3MucHJvdG90eXBlICAgICAgICAgICAgID0gcHJvdG87XG5cbi8vIGN1cnJlbnRseSBIVE1MNSBpbnB1dCB0eXBlIG9ubHkgc3VwcG9ydHMgMjQtaG91ciBmb3JtYXRzXG5ob29rcy5IVE1MNV9GTVQgPSB7XG4gICAgREFURVRJTUVfTE9DQUw6ICdZWVlZLU1NLUREVEhIOm1tJywgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIC8+XG4gICAgREFURVRJTUVfTE9DQUxfU0VDT05EUzogJ1lZWVktTU0tRERUSEg6bW06c3MnLCAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIHN0ZXA9XCIxXCIgLz5cbiAgICBEQVRFVElNRV9MT0NBTF9NUzogJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTJywgICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICBEQVRFOiAnWVlZWS1NTS1ERCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPlxuICAgIFRJTUU6ICdISDptbScsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIC8+XG4gICAgVElNRV9TRUNPTkRTOiAnSEg6bW06c3MnLCAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjFcIiAvPlxuICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgV0VFSzogJ1lZWVktW1ddV1cnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ3ZWVrXCIgLz5cbiAgICBNT05USDogJ1lZWVktTU0nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgLz5cbn07XG5cbnJldHVybiBob29rcztcblxufSkpKTtcbiIsImZvb3RlclxuXHQuY29udGFpbmVyXG5cdFx0c29jaWFsXG5cdFx0cCDCqSAyMDE4IHB2Y3Jlc2luXG5cblx0c3R5bGUodHlwZT0nc2NzcycpLlxuXHRcdDpzY29wZSB7XG5cdFx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRcdGJhY2tncm91bmQ6ICMwZjBmMGY7XG5cdFx0XHRjb2xvcjogd2hpdGU7XG5cdFx0XHQ+IC5jb250YWluZXIge1xuXHRcdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0XHRcdHBhZGRpbmc6IDFyZW0gMDtcblx0XHRcdFx0PiBwIHtcblx0XHRcdFx0XHRjb2xvcjogIzUyNTI1Mjtcblx0XHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogMXJlbTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRzY3JpcHQuXG5cdFx0aW1wb3J0IHNvY2lhbCBmcm9tICcuL3NvY2lhbCciLCJmaXJzdFxuXHRuYXZcblx0LmNvbnRhaW5lclxuXHRcdGgxIFJhaWthIFRvcml5YW1hXG5cdFx0cCAgV2ViIC8gQW5kcm9pZCBEZXZlbG9wZXJcblx0XHRzb2NpYWxcblx0LmNvbnRhaW5lclxuXHRcdC5hcnJvd1xuXHRcdFx0aS5mYXMuZmEtY2hldnJvbi1kb3duLmZhLTN4XG5cblx0c3R5bGUodHlwZT0nc2NzcycpLlxuXHRcdDpzY29wZSB7XG5cdFx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0XHRiYWNrZ3JvdW5kOiAjMWExODE5O1xuXHRcdFx0Y29sb3I6IHdoaXRlO1xuXHRcdFx0bWluLWhlaWdodDogMTAwdmg7XG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xuXHRcdFx0PiBuYXYge1xuXHRcdFx0XHRtYXJnaW46IDAgYXV0bztcblx0XHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRcdG1heC13aWR0aDogY2FsYygxMjAwcHggKiAwLjgpO1xuXHRcdFx0XHRsaW5lLWhlaWdodDogM3JlbTtcblx0XHRcdFx0PiB1bCB7XG5cdFx0XHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcblx0XHRcdFx0XHQ+IGxpIHtcblx0XHRcdFx0XHRcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdD4gLmNvbnRhaW5lciB7XG5cdFx0XHRcdD4gaDEge1xuXHRcdFx0XHRcdGZvbnQtc2l6ZTogY2FsYygxLjByZW0gKyAyNTAlKTtcblx0XHRcdFx0XHRtYXJnaW46IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0PiBwIHtcblx0XHRcdFx0XHRmb250LXNpemU6IDEuNXJlbTtcblx0XHRcdFx0XHRmb250LWZhbWlseTogc2VyaWY7XG5cdFx0XHRcdFx0bWFyZ2luLXRvcDogMXJlbTtcblx0XHRcdFx0fVxuXHRcdFx0XHQuYXJyb3cge1xuXHRcdFx0XHRcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcblx0XHRcdC5jb250YWluZXIge1xuXHRcdFx0XHQ+IGgxIHtcblx0XHRcdFx0XHRmb250LXNpemU6IDIuNXJlbTtcblx0XHRcdFx0fVxuXHRcdFx0XHQ+IHAge1xuXHRcdFx0XHRcdGZvbnQtc2l6ZTogMS4ycmVtO1xuXHRcdFx0XHRcdG1hcmdpbi10b3A6IDAuNXJlbTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRzY3JpcHQuXG5cdFx0aW1wb3J0IHNvY2lhbCBmcm9tICcuL3NvY2lhbCciLCJ0b3Bcblx0Zmlyc3Rcblx0c2VjdGlvblxuXHRcdC5jb250YWluZXJcblx0XHRcdGgyLnNlY3Rpb24tdGl0bGUgQWJvdXQgTWVcblx0XHRcdGFib3V0XG5cdFx0XHRtb3JlKFxuXHRcdFx0XHR0ZXh0PSdkZXRhaWwnXG5cdFx0XHRcdHRpdGxlPSdWaWV3IGRldGFpbGVkIHByb2ZpbGUnXG5cdFx0XHRcdGxpbms9JyNwcm9maWxlJylcblx0c2VjdGlvblxuXHRcdC5jb250YWluZXJcblx0XHRcdGgyLnNlY3Rpb24tdGl0bGUgUHJvamVjdHNcblx0XHRcdHByb2plY3RzKGxpbWl0PTMpXG5cdFx0XHRtb3JlKFxuXHRcdFx0XHR0aXRsZT0nVmlldyBhbGwgcHJvamVjdHMnXG5cdFx0XHRcdGxpbms9JyNwcm9qZWN0cycpXG5cdHNlY3Rpb25cblx0XHQuY29udGFpbmVyXG5cdFx0XHRoMi5zZWN0aW9uLXRpdGxlIEF3YXJkc1xuXHRcdFx0YXdhcmRzXG5cdFx0XHRoMi5zZWN0aW9uLXRpdGxlIFB1YmxpY2F0aW9uc1xuXHRcdFx0cHVibGljYXRpb25zXG5cdFx0XHRoMi5zZWN0aW9uLXRpdGxlIENsdWJzXG5cdFx0XHRjbHVic1xuXHRmb290ZXJcblxuXHRzdHlsZSh0eXBlPSdzY3NzJykuXG5cdFx0OnNjb3BlIHtcblx0XHRcdGRpc3BsYXk6IGJsb2NrO1xuXHRcdFx0bWluLWhlaWdodDogMTAwdmg7XG5cdFx0XHQ+IHNlY3Rpb24ge1xuXHRcdFx0XHQmOm50aC1jaGlsZCgybikge1xuXHRcdFx0XHRcdGJhY2tncm91bmQ6ICMyYjJiMmI7XG5cdFx0XHRcdFx0Y29sb3I6ICNlZmVmZWY7XG5cdFx0XHRcdH1cblx0XHRcdFx0JjpudGgtY2hpbGQoMm4rMSkge1xuXHRcdFx0XHRcdGJhY2tncm91bmQ6ICNlZWVlZWU7XG5cdFx0XHRcdFx0Y29sb3I6ICMyMjIyMjI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0c2NyaXB0LlxuXHRcdGltcG9ydCBmaXJzdCBmcm9tICcuLi9jb21wb25lbnRzL2ZpcnN0J1xuXHRcdGltcG9ydCBmb290ZXIgZnJvbSAnLi4vY29tcG9uZW50cy9mb290ZXInXG5cdFx0aW1wb3J0IGFib3V0IGZyb20gJy4uL2NvbXBvbmVudHMvYWJvdXQnXG5cdFx0aW1wb3J0IHByb2plY3RzIGZyb20gJy4uL2NvbXBvbmVudHMvcHJvamVjdHMnXG5cdFx0aW1wb3J0IGF3YXJkcyBmcm9tICcuLi9jb21wb25lbnRzL2F3YXJkcydcblx0XHRpbXBvcnQgcHVibGljYXRpb25zIGZyb20gJy4uL2NvbXBvbmVudHMvcHVibGljYXRpb25zJ1xuXHRcdGltcG9ydCBjbHVicyBmcm9tICcuLi9jb21wb25lbnRzL2NsdWJzJ1xuXHRcdGltcG9ydCBtb3JlIGZyb20gJy4uL2NvbXBvbmVudHMvbW9yZSdcblxuXHRcdHRoaXMub24oJ3JvdXRlJywgKCkgPT4ge1xuXHRcdFx0Y29uc3QgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoXG5cdFx0XHRpZiAod2luZG93LnNjcm9sbHNbYCR7cGF0aH1gXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHdpbmRvdy5zY3JvbGwoMCwgMClcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvdy5zY3JvbGwoMCwgd2luZG93LnNjcm9sbHNbYCR7cGF0aH1gXSlcblx0XHRcdH1cblx0XHR9KSIsImFwcFxuXHRyb3V0ZXJcblx0XHRyb3V0ZShwYXRoPScnKVxuXHRcdFx0dG9wXG5cdFx0cm91dGUocGF0aD0ncHJvZmlsZS4uJylcblx0XHRcdHByb2ZpbGVcblx0XHRyb3V0ZShwYXRoPSdwcm9qZWN0cy8qJylcblx0XHRcdHByb2plY3REZXRhaWxcblx0XHRyb3V0ZShwYXRoPSdwcm9qZWN0cy4uJylcblx0XHRcdHByb2plY3RBbGxcblx0XHRyb3V0ZShwYXRoPScuLicpXG5cdFx0XHRvdGhlclxuXG5cdHNjcmlwdC5cblx0XHRpbXBvcnQgcm91dGUgZnJvbSAncmlvdC1yb3V0ZS9saWIvdGFnJ1xuXHRcdGltcG9ydCB0b3AgZnJvbSAnLi90b3AnXG5cdFx0aW1wb3J0IHByb2ZpbGUgZnJvbSAnLi9wcm9maWxlJ1xuXHRcdGltcG9ydCBwcm9qZWN0QWxsIGZyb20gJy4vcHJvamVjdEFsbCdcblx0XHRpbXBvcnQgcHJvamVjdERldGFpbCBmcm9tICcuL3Byb2plY3REZXRhaWwnXG5cdFx0aW1wb3J0IG90aGVyIGZyb20gJy4vb3RoZXInIiwiaW1wb3J0IHJpb3QgZnJvbSAncmlvdCdcbmltcG9ydCBzY3JvbGwgZnJvbSAnLi9zY3JvbGwnXG5pbXBvcnQgYXBwIGZyb20gJy4uL3BhZ2VzL2FwcCdcblxucmlvdC5tb3VudCgnLnJvb3QnLCAnYXBwJylcblxuc2Nyb2xsLmluaXQoKVxuIl0sInNvdXJjZVJvb3QiOiIifQ==